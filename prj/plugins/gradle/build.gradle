/*
 * Copyright (c) 2023, 2025, Oracle and/or its affiliates.
 *
 * Licensed under the Universal Permissive License v 1.0 as shown at
 * https://oss.oracle.com/licenses/upl.
 */

plugins {
    id 'groovy'
    id 'java-gradle-plugin'
    id 'maven-publish'
}

java {
    targetCompatibility = 17
    sourceCompatibility = 17
}

repositories {
    maven { url 'target/dependencies' }
    mavenLocal()
    mavenCentral()
}

publishing {
    repositories {
        mavenLocal()
    }
}

dependencies {
    implementation "${group}:coherence:${version}"
    testImplementation platform("org.junit:junit-bom:${junitVersion}")
    testImplementation "org.junit.platform:junit-platform-launcher"
    testImplementation "org.junit.jupiter:junit-jupiter"
    testImplementation "org.hamcrest:hamcrest-core:${hamcrestVersion}"
}
configurations {
    testImplementation.extendsFrom compileOnly
}
gradlePlugin {
    plugins {
        coherencePof {
            id = 'com.oracle.coherence.ce'
            implementationClass = 'com.oracle.coherence.gradle.CoherencePlugin'
        }
    }
}

test {
    useJUnitPlatform()

    String proxyHost = System.getProperty("https.proxyHost")
    if (proxyHost != null) {
        project.logger.lifecycle("Populating proxy properties for tests: " + proxyHost)
        systemProperty "http.proxyHost", System.getProperty("http.proxyHost")
        systemProperty "http.proxyPort", System.getProperty("http.proxyPort")
        systemProperty "https.proxyHost", System.getProperty("https.proxyHost")
        systemProperty "https.proxyPort", System.getProperty("https.proxyPort")
        systemProperty "http.nonProxyHosts", System.getProperty("http.nonProxyHosts")
        systemProperty "https.nonProxyHosts", System.getProperty("https.nonProxyHosts")
    }

    testLogging {
        showStandardStreams = true
        exceptionFormat = 'full'
    }
}

tasks.register('javadocJar', Jar) {
    archiveClassifier = 'javadoc'
    from javadoc.destinationDir
    dependsOn javadoc
}

tasks.register('sourcesJar', Jar) {
    archiveClassifier = 'sources'
    from sourceSets.main.allSource
    dependsOn classes
}

tasks.register('processVersionFile', WriteProperties) {
    it.setDestinationFile(
            project.layout.buildDirectory.file("resources/main/coherence-gradle-plugin.properties"))
    property 'coherence-version', project.version
    property 'coherence-group-id', project.group
    property 'local-dependency-repo', project.projectDir.absolutePath + "/target/dependencies"
}

tasks.classes.dependsOn('processVersionFile')

assemble.dependsOn javadocJar
assemble.dependsOn sourcesJar
