<?xml version="1.0" encoding="UTF-8"?>
<!--
  ~ Copyright (c) 2000-2021 Oracle and/or its affiliates.
  ~
  ~ Licensed under the Universal Permissive License v 1.0 as shown at
  ~ http://oss.oracle.com/licenses/upl.
  -->

<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <parent>
    <groupId>com.oracle.coherence.ce</groupId>
    <artifactId>coherence-bom</artifactId>
    <version>${revision}</version>
    <relativePath>../coherence-bom</relativePath>
  </parent>

  <artifactId>coherence-dependencies</artifactId>
  <name>Coherence Dependencies</name>
  <description>Oracle Coherence Dependencies</description>
  <packaging>pom</packaging>

  <url>https://coherence.community/</url>

  <organization>
    <name>Oracle</name>
    <url>http://www.oracle.com</url>
  </organization>

  <scm>
    <developerConnection>scm:git:git@github.com:oracle/coherence.git</developerConnection>
    <connection>scm:git:git@github.com:oracle/coherence.git</connection>
    <tag>HEAD</tag>
    <url>https://github.com/oracle/coherence</url>
  </scm>

  <distributionManagement>
    <snapshotRepository>
      <id>ossrh</id>
      <name>Coherence Snapshot Repository</name>
      <url>https://oss.sonatype.org/content/repositories/snapshots/</url>
    </snapshotRepository>
    <repository>
      <id>ossrh</id>
      <name>Coherence Release Repository</name>
      <url>https://oss.sonatype.org/service/local/staging/deploy/maven2/</url>
    </repository>
  </distributionManagement>

  <developers>
    <developer>
      <name>Harvey Raja</name>
      <url>https://github.com/harveyraja</url>
    </developer>
    <developer>
      <name>Aleks Seovic</name>
      <url>https://github.com/aseovic</url>
    </developer>
    <developer>
      <name>Jonathan Knight</name>
      <url>https://github.com/thegridman</url>
    </developer>
    <developer>
      <name>Patrick Fry</name>
      <url>https://github.com/fryp</url>
    </developer>
    <developer>
      <name>Bin Chen</name>
      <url>https://github.com/bbcadela</url>
    </developer>
    <developer>
      <name>Ryan Lubke</name>
      <url>https://github.com/rlubke</url>
    </developer>
    <developer>
      <name>Luk Ho</name>
      <url>https://github.com/lsho</url>
    </developer>
    <developer>
      <name>Joe Fialli</name>
      <url>https://github.com/jfialli</url>
    </developer>
    <developer>
      <name>Tim Middleton</name>
      <url>https://github.com/tmiddlet2666</url>
    </developer>
    <developer>
      <name>Chinmay Patel</name>
      <url>https://github.com/chpatel3</url>
    </developer>
  </developers>

  <properties>
    <!-- plugin dependency versions -->
     <maven.antrun.plugin.version>1.8</maven.antrun.plugin.version>
     <maven.assembly.plugin.version>3.0.0</maven.assembly.plugin.version>
     <maven.build.helper.plugin.version>1.8</maven.build.helper.plugin.version>
     <maven.bundle.plugin.version>4.2.1</maven.bundle.plugin.version>
     <maven.compiler.plugin.version>3.7.0</maven.compiler.plugin.version>
     <maven.dependency.plugin.version>2.8</maven.dependency.plugin.version>
     <maven.dependency-check.plugin.version>6.1.1</maven.dependency-check.plugin.version>
     <maven.deploy.plugin.version>2.8.2</maven.deploy.plugin.version>
     <maven.directory.plugin.version>0.1</maven.directory.plugin.version>
     <maven.docker.plugin.version>0.15.7</maven.docker.plugin.version>
     <maven.enforcer.plugin.version>3.0.0-M2</maven.enforcer.plugin.version>
     <maven.exec.plugin.version>1.4.0</maven.exec.plugin.version>
     <maven.flatten.plugin.version>1.2.2</maven.flatten.plugin.version>
     <maven.failsafe.plugin.version>3.0.0-M5</maven.failsafe.plugin.version>
     <maven.gmaven.plugin.version>1.5</maven.gmaven.plugin.version>
     <maven.gmaven.providerSelection.version>1.8</maven.gmaven.providerSelection.version>
     <maven.gpg.plugin.version>1.6</maven.gpg.plugin.version>
     <maven.install.plugin.version>2.5.1</maven.install.plugin.version>
     <maven.jandex.plugin.version>1.0.8</maven.jandex.plugin.version>
     <maven.jar.plugin.version>3.0.0</maven.jar.plugin.version>
     <maven.javadoc.plugin.version>3.2.0</maven.javadoc.plugin.version>
     <maven.jib.plugin.version>2.5.2</maven.jib.plugin.version>
     <maven.nbm.plugin.version>2.6.2</maven.nbm.plugin.version>
     <maven.release.plugin.version>2.4</maven.release.plugin.version>
     <maven.replacer.plugin.version>1.5.2</maven.replacer.plugin.version>
     <maven.resources.plugin.version>2.7</maven.resources.plugin.version>
     <maven.shade.plugin.version>3.2.0</maven.shade.plugin.version>
     <maven.site.plugin.version>3.9.0</maven.site.plugin.version>
     <maven.source.plugin.version>2.2.1</maven.source.plugin.version>
     <maven.surefire.plugin.version>3.0.0-M5</maven.surefire.plugin.version>
     <maven.animalsniffer.plugin.version>1.18</maven.animalsniffer.plugin.version>
     <nexus.staging.maven.plugin.version>1.6.7</nexus.staging.maven.plugin.version>
     <maven.protobuf.plugin.version>0.6.1</maven.protobuf.plugin.version>

    <!-- library dependency versions -->
    <activation-api.version>1.2.2</activation-api.version>
    <annotation-api.version>1.3.5</annotation-api.version>
    <asciidoctor.diagram.version>2.0.2</asciidoctor.diagram.version>
    <asm.version>9.1</asm.version>
    <bdb.version>6.2.31</bdb.version>
    <bnd.version>4.3.0</bnd.version>
    <cdi-api.version>2.0.2</cdi-api.version>
    <codemodel.version>2.6</codemodel.version>
    <com.oracle.ipc.version>12.1.4-150528</com.oracle.ipc.version>
    <!-- NOTE: this version should ideally be in sync' with that used by Helidon microprofile -->
    <eclipse.mp.config.version>1.4</eclipse.mp.config.version>
    <!-- NOTE: this version should ideally be in sync' with that used by Helidon microprofile -->
    <eclipse.mp.metrics.version>2.3.2</eclipse.mp.metrics.version>
    <felix.version>6.0.3</felix.version>
    <google-error-prone.version>2.3.3</google-error-prone.version>
    <graal.version>19.3.1</graal.version>
    <grpc.version>1.35.1</grpc.version>
    <!--
    NOTE: changing this version may mean updating other dependencies to match versions that Helidon uses:
    eclipse.mp.config.version
    eclipse.mp.metrics.version
    netty.version ???
    grpc.version ???
    This is not always possible if we need to bump versions for CVE's
    -->
    <helidon.version>2.4.0</helidon.version>
    <helidon.sitegen.version>2.1.2</helidon.sitegen.version>
    <hsqldb.version>2.3.2</hsqldb.version>
    <inject.version>1.0</inject.version>
    <jackson.version>2.12.1</jackson.version>
    <jackson.databind.version>${jackson.version}</jackson.databind.version>
    <jacoco.version>0.8.5</jacoco.version>
    <jaeger.version>1.6.0</jaeger.version>
    <javaee.version>5</javaee.version>
    <javax.cache.version>1.1.1</javax.cache.version>
    <javax.cache.tck.version>1.1.1</javax.cache.tck.version>
    <jaxb-api.version>2.3.3</jaxb-api.version>
    <jaxb-core.version>2.3.0.1</jaxb-core.version>
    <jaxb-impl.version>2.3.5</jaxb-impl.version>
    <jaxrs-api.version>2.1.6</jaxrs-api.version>
    <!-- NOTE: this version should ideally be in sync' with that used by Helidon
         This is not always possible if we need to bump versions for CVE's -->
    <jersey.version>2.35</jersey.version>
    <jettison.version>1.4.1</jettison.version>
    <jline.version>3.20.0</jline.version>
    <jsonb.version>1.0.2</jsonb.version>
    <jsonp.version>1.1.6</jsonp.version>
    <jsonp-impl.version>1.1.6</jsonp-impl.version>
    <log4j.version>1.2.17</log4j.version>
    <log4j2.version>2.15.0</log4j2.version>
    <micrometer.version>1.6.6</micrometer.version>
    <mvel.version>2.4.12.Final</mvel.version>
    <!-- NOTE: this version should ideally be in sync' with that used by Helidon
         This is not always possible if we need to bump versions for CVE's -->
    <netty.version>4.1.63.Final</netty.version>
    <opentracing.grpc.version>0.2.3</opentracing.grpc.version>
    <opentracing.version>0.33.0</opentracing.version>
    <opentracing.tracerresolver.version>0.1.8</opentracing.tracerresolver.version>
    <oracle.db.version>11.2.0.3.0</oracle.db.version>
    <jandex.version>2.3.1.Final</jandex.version>
    <protobuf.version>3.10.0</protobuf.version>
    <resin.version>3.0</resin.version>
    <rxjava.version>3.0.2</rxjava.version>
    <sdoapi.version>12.2.0.1.0</sdoapi.version>
    <servlet.version>3.1.0</servlet.version>
    <slf4j.version>1.7.26</slf4j.version>
    <spymemcached.version>2.12.3</spymemcached.version>
    <weld.version>3.1.6.Final</weld.version>
    <weld-junit.version>2.0.1.Final</weld-junit.version>

    <!-- test dependency versions -->
    <hamcrest.version>1.3</hamcrest.version>
    <hamcrest-2.version>2.2</hamcrest-2.version>
    <junit.version>4.13.1</junit.version>
    <junit.jupiter.version>5.7.0</junit.jupiter.version>
    <junit.vintage.version>5.7.0</junit.vintage.version>
    <mockito.version>3.6.28</mockito.version>
    <oracle.bedrock.version>5.1.2</oracle.bedrock.version>
  </properties>

  <dependencyManagement>
    <dependencies>
      <!-- asm -->
      <dependency>
        <groupId>org.ow2.asm</groupId>
        <artifactId>asm</artifactId>
        <version>${asm.version}</version>
      </dependency>

      <dependency>
        <groupId>org.ow2.asm</groupId>
        <artifactId>asm-analysis</artifactId>
        <version>${asm.version}</version>
      </dependency>

      <dependency>
        <groupId>org.ow2.asm</groupId>
        <artifactId>asm-commons</artifactId>
        <version>${asm.version}</version>
      </dependency>

      <dependency>
        <groupId>org.ow2.asm</groupId>
        <artifactId>asm-tree</artifactId>
        <version>${asm.version}</version>
      </dependency>

      <dependency>
        <groupId>org.ow2.asm</groupId>
        <artifactId>asm-util</artifactId>
        <version>${asm.version}</version>
      </dependency>

      <!-- bdb -->
      <dependency>
        <groupId>com.sleepycat</groupId>
        <artifactId>je</artifactId>
        <version>${bdb.version}</version>
      </dependency>

      <!-- bnd -->
      <dependency>
        <groupId>biz.aQute.bnd</groupId>
        <artifactId>biz.aQute.bndlib</artifactId>
        <version>${bnd.version}</version>
      </dependency>

      <!-- codemodel -->
      <dependency>
        <groupId>com.sun.codemodel</groupId>
        <artifactId>codemodel</artifactId>
        <version>${codemodel.version}</version>
      </dependency>

      <!-- opentracing -->
      <dependency>
        <groupId>io.opentracing</groupId>
        <artifactId>opentracing-api</artifactId>
        <version>${opentracing.version}</version>
      </dependency>
      <dependency>
        <groupId>io.opentracing</groupId>
        <artifactId>opentracing-util</artifactId>
        <version>${opentracing.version}</version>
      </dependency>
      <dependency>
        <groupId>io.opentracing</groupId>
        <artifactId>opentracing-noop</artifactId>
        <version>${opentracing.version}</version>
      </dependency>
      <dependency>
        <groupId>io.opentracing.contrib</groupId>
        <artifactId>opentracing-tracerresolver</artifactId>
        <version>${opentracing.tracerresolver.version}</version>
      </dependency>

      <!-- Jaeger Client -->
      <dependency>
        <groupId>io.jaegertracing</groupId>
        <artifactId>jaeger-client</artifactId>
        <version>${jaeger.version}</version>
      </dependency>

      <!-- Eclipse MicroProfile -->
      <dependency>
        <groupId>org.eclipse.microprofile.config</groupId>
        <artifactId>microprofile-config-api</artifactId>
        <version>${eclipse.mp.config.version}</version>
      </dependency>
      <dependency>
        <groupId>org.eclipse.microprofile.metrics</groupId>
        <artifactId>microprofile-metrics-api</artifactId>
        <version>${eclipse.mp.metrics.version}</version>
      </dependency>

      <!-- felix -->
      <dependency>
        <groupId>org.apache.felix</groupId>
        <artifactId>org.apache.felix.main</artifactId>
        <version>${felix.version}</version>
      </dependency>

      <!-- graal -->
      <dependency>
        <groupId>org.graalvm.sdk</groupId>
        <artifactId>graal-sdk</artifactId>
        <version>${graal.version}</version>
      </dependency>

      <dependency>
        <groupId>org.graalvm.js</groupId>
        <artifactId>js</artifactId>
        <version>${graal.version}</version>
      </dependency>

      <dependency>
        <groupId>org.graalvm.js</groupId>
        <artifactId>js-scriptengine</artifactId>
        <version>${graal.version}</version>
      </dependency>

      <dependency>
        <groupId>org.graalvm.js</groupId>
        <artifactId>js-launcher</artifactId>
        <version>${graal.version}</version>
      </dependency>

      <!-- Helidon -->
      <dependency>
        <groupId>io.helidon</groupId>
        <artifactId>helidon-bom</artifactId>
        <version>${helidon.version}</version>
        <type>pom</type>
        <scope>import</scope>
      </dependency>

      <!-- jackson -->
      <dependency>
        <groupId>com.fasterxml.jackson.core</groupId>
        <artifactId>jackson-annotations</artifactId>
        <version>${jackson.version}</version>
      </dependency>
      <dependency>
        <groupId>com.fasterxml.jackson.core</groupId>
        <artifactId>jackson-core</artifactId>
        <version>${jackson.version}</version>
      </dependency>
      <dependency>
        <groupId>com.fasterxml.jackson.core</groupId>
        <artifactId>jackson-databind</artifactId>
        <version>${jackson.databind.version}</version>
        <!-- exclude conflicting dependency on older version of jackson
             than ${jackson.version} -->
        <exclusions>
          <exclusion>
            <groupId>com.fasterxml.jackson.core</groupId>
            <artifactId>jackson-annotations</artifactId>
          </exclusion>
        </exclusions>
      </dependency>
      <dependency>
        <groupId>com.fasterxml.jackson.jaxrs</groupId>
        <artifactId>jackson-jaxrs-base</artifactId>
        <version>${jackson.version}</version>
        <!-- exclude conflicting dependency on older versions of jackson
             than ${jackson.version} and ${jackson.databind.version} -->
        <exclusions>
          <exclusion>
            <groupId>com.fasterxml.jackson.core</groupId>
            <artifactId>jackson-annotations</artifactId>
          </exclusion>
          <exclusion>
            <groupId>com.fasterxml.jackson.core</groupId>
            <artifactId>jackson-databind</artifactId>
          </exclusion>
        </exclusions>
      </dependency>
      <dependency>
        <groupId>com.fasterxml.jackson.jaxrs</groupId>
        <artifactId>jackson-jaxrs-json-provider</artifactId>
        <version>${jackson.version}</version>
      </dependency>
      <dependency>
        <groupId>com.fasterxml.jackson.module</groupId>
        <artifactId>jackson-module-jaxb-annotations</artifactId>
        <version>${jackson.version}</version>
        <!-- exclude conflicting dependency on older version of jackson
             than ${jackson.version} and ${jackson.databind.version} -->
        <exclusions>
          <exclusion>
            <groupId>com.fasterxml.jackson.core</groupId>
            <artifactId>jackson-annotations</artifactId>
          </exclusion>
          <exclusion>
            <groupId>com.fasterxml.jackson.core</groupId>
            <artifactId>jackson-databind</artifactId>
          </exclusion>
        </exclusions>
      </dependency>

      <!-- javaee -->
      <dependency>
        <groupId>javaee</groupId>
        <artifactId>javaee-api</artifactId>
        <version>${javaee.version}</version>
      </dependency>

      <!-- javax.cache -->
      <dependency>
        <groupId>javax.cache</groupId>
        <artifactId>cache-api</artifactId>
        <version>${javax.cache.version}</version>
      </dependency>

      <!-- JAX-RS API -->
      <dependency>
        <groupId>jakarta.ws.rs</groupId>
        <artifactId>jakarta.ws.rs-api</artifactId>
        <version>${jaxrs-api.version}</version>
      </dependency>

      <!-- jersey -->
      <dependency>
        <groupId>org.glassfish.jersey.core</groupId>
        <artifactId>jersey-client</artifactId>
        <version>${jersey.version}</version>
      </dependency>
      <dependency>
        <groupId>org.glassfish.jersey.core</groupId>
        <artifactId>jersey-common</artifactId>
        <version>${jersey.version}</version>
      </dependency>
      <dependency>
        <groupId>org.glassfish.jersey.media</groupId>
        <artifactId>jersey-media-json-jackson</artifactId>
        <version>${jersey.version}</version>
        <!-- exclude conflicting dependency on older versions of jackson -->
        <exclusions>
          <exclusion>
            <groupId>com.fasterxml.jackson.core</groupId>
            <artifactId>jackson-annotations</artifactId>
          </exclusion>
          <exclusion>
            <groupId>com.fasterxml.jackson.core</groupId>
            <artifactId>jackson-databind</artifactId>
          </exclusion>
          <exclusion>
            <groupId>com.fasterxml.jackson.jaxrs</groupId>
            <artifactId>jackson-jaxrs-base</artifactId>
          </exclusion>
          <exclusion>
            <groupId>com.fasterxml.jackson.jaxrs</groupId>
            <artifactId>jackson-jaxrs-json-provider</artifactId>
          </exclusion>
          <exclusion>
            <groupId>com.fasterxml.jackson.module</groupId>
            <artifactId>jackson-module-jaxb-annotations</artifactId>
          </exclusion>
        </exclusions>
      </dependency>
      <dependency>
        <groupId>org.glassfish.jersey.media</groupId>
        <artifactId>jersey-media-json-jettison</artifactId>
        <version>${jersey.version}</version>
      </dependency>
      <dependency>
        <groupId>org.glassfish.jersey.media</groupId>
        <artifactId>jersey-media-sse</artifactId>
        <version>${jersey.version}</version>
      </dependency>
      <dependency>
        <groupId>org.glassfish.jersey.core</groupId>
        <artifactId>jersey-server</artifactId>
        <version>${jersey.version}</version>
      </dependency>
      <dependency>
        <groupId>org.glassfish.jersey.containers</groupId>
        <artifactId>jersey-container-servlet</artifactId>
        <version>${jersey.version}</version>
      </dependency>
      <dependency>
        <groupId>org.glassfish.jersey.containers</groupId>
        <artifactId>jersey-container-jdk-http</artifactId>
        <version>${jersey.version}</version>
      </dependency>
      <dependency>
        <groupId>org.glassfish.jersey.connectors</groupId>
        <artifactId>jersey-apache-connector</artifactId>
        <version>${jersey.version}</version>
      </dependency>
      <dependency>
        <groupId>org.glassfish.jersey.inject</groupId>
        <artifactId>jersey-hk2</artifactId>
        <version>${jersey.version}</version>
      </dependency>

      <!-- jettison -->
      <dependency>
        <groupId>org.codehaus.jettison</groupId>
        <artifactId>jettison</artifactId>
        <version>${jettison.version}</version>
      </dependency>

      <!-- Jakarta Inject API -->
      <dependency>
          <groupId>jakarta.inject</groupId>
          <artifactId>jakarta.inject-api</artifactId>
          <version>${inject.version}</version>
      </dependency>

      <!-- jline -->
      <dependency>
        <groupId>org.jline</groupId>
        <artifactId>jline</artifactId>
        <version>${jline.version}</version>
      </dependency>

      <!-- JSON-B -->
      <dependency>
        <groupId>jakarta.json.bind</groupId>
        <artifactId>jakarta.json.bind-api</artifactId>
        <version>${jsonb.version}</version>
      </dependency>

      <!-- JSON-P -->
      <dependency>
        <groupId>jakarta.json</groupId>
        <artifactId>jakarta.json-api</artifactId>
        <version>${jsonp.version}</version>
      </dependency>
      <dependency>
        <groupId>org.glassfish</groupId>
        <artifactId>jakarta.json</artifactId>
        <version>${jsonp-impl.version}</version>
      </dependency>

      <!-- log4j -->
      <dependency>
        <groupId>log4j</groupId>
        <artifactId>log4j</artifactId>
        <version>${log4j.version}</version>
      </dependency>

      <!-- log4j2 -->
      <dependency>
        <groupId>org.apache.logging.log4j</groupId>
        <artifactId>log4j-api</artifactId>
        <version>${log4j2.version}</version>
      </dependency>

      <!-- mvel -->
      <dependency>
        <groupId>org.mvel</groupId>
        <artifactId>mvel2</artifactId>
        <version>${mvel.version}</version>
      </dependency>

      <!-- netty -->
      <dependency>
        <groupId>io.netty</groupId>
        <artifactId>netty-all</artifactId>
        <version>${netty.version}</version>
      </dependency>

      <!-- servlet -->
      <dependency>
        <groupId>javax.servlet</groupId>
        <artifactId>javax.servlet-api</artifactId>
        <version>${servlet.version}</version>
      </dependency>

      <!-- slf4j -->
      <dependency>
        <groupId>org.slf4j</groupId>
        <artifactId>slf4j-api</artifactId>
        <version>${slf4j.version}</version>
      </dependency>
      <dependency>
        <groupId>org.slf4j</groupId>
        <artifactId>slf4j-simple</artifactId>
        <version>${slf4j.version}</version>
      </dependency>

      <!-- spymemcached -->
      <dependency>
        <groupId>net.spy</groupId>
        <artifactId>spymemcached</artifactId>
        <version>${spymemcached.version}</version>
      </dependency>

      <dependency>
          <groupId>jakarta.annotation</groupId>
          <artifactId>jakarta.annotation-api</artifactId>
          <version>${annotation-api.version}</version>
      </dependency>

      <!-- CDI and Weld -->
      <dependency>
          <groupId>jakarta.enterprise</groupId>
          <artifactId>jakarta.enterprise.cdi-api</artifactId>
          <version>${cdi-api.version}</version>
      </dependency>
      <dependency>
          <groupId>org.jboss.weld.se</groupId>
          <artifactId>weld-se-core</artifactId>
          <version>${weld.version}</version>
          <exclusions>
              <exclusion>
                  <groupId>org.codehaus.groovy</groupId>
                  <artifactId>groovy-all</artifactId>
              </exclusion>
          </exclusions>
      </dependency>
      <dependency>
          <groupId>org.jboss.weld</groupId>
          <artifactId>weld-junit5</artifactId>
          <version>${weld-junit.version}</version>
          <scope>test</scope>
      </dependency>

      <!-- jandex -->
      <dependency>
        <groupId>org.jboss</groupId>
        <artifactId>jandex</artifactId>
        <version>${jandex.version}</version>
      </dependency>

      <!-- rxjava -->
      <dependency>
        <groupId>io.reactivex.rxjava3</groupId>
        <artifactId>rxjava</artifactId>
        <version>${rxjava.version}</version>
      </dependency>

      <!-- Protobuf -->
      <dependency>
        <groupId>com.google.protobuf</groupId>
        <artifactId>protobuf-java</artifactId>
        <version>${protobuf.version}</version>
      </dependency>

      <!-- test dependencies -->
      <dependency>
        <groupId>org.jacoco</groupId>
        <artifactId>org.jacoco.agent</artifactId>
        <classifier>runtime</classifier>
        <version>${jacoco.version}</version>
      </dependency>

      <dependency>
        <groupId>com.oracle.bedrock.coherence</groupId>
        <artifactId>coherence-14.1.1-testing-support</artifactId>
        <version>${oracle.bedrock.version}</version>
      </dependency>
      <dependency>
        <groupId>com.oracle.bedrock</groupId>
        <artifactId>bedrock-runtime-jacoco</artifactId>
        <version>${oracle.bedrock.version}</version>
      </dependency>
      <dependency>
        <groupId>com.oracle.bedrock</groupId>
        <artifactId>bedrock-testing-support</artifactId>
        <version>${oracle.bedrock.version}</version>
      </dependency>
      <dependency>
        <groupId>com.oracle.bedrock</groupId>
        <artifactId>bedrock-runtime</artifactId>
        <version>${oracle.bedrock.version}</version>
      </dependency>
      <dependency>
        <groupId>com.oracle.bedrock</groupId>
        <artifactId>bedrock-runtime-remote</artifactId>
        <version>${oracle.bedrock.version}</version>
      </dependency>
      <dependency>
        <groupId>com.oracle.bedrock</groupId>
        <artifactId>bedrock-runtime-docker</artifactId>
        <version>${oracle.bedrock.version}</version>
      </dependency>

      <!-- JUnit 4 -->
      <dependency>
        <groupId>junit</groupId>
        <artifactId>junit</artifactId>
        <version>${junit.version}</version>
      </dependency>

      <!-- JUnit 5 -->
      <dependency>
        <groupId>org.junit.jupiter</groupId>
        <artifactId>junit-jupiter-api</artifactId>
        <version>${junit.jupiter.version}</version>
      </dependency>
      <dependency>
        <groupId>org.junit.jupiter</groupId>
        <artifactId>junit-jupiter-params</artifactId>
        <version>${junit.jupiter.version}</version>
      </dependency>
      <dependency>
        <groupId>org.junit.jupiter</groupId>
        <artifactId>junit-jupiter-engine</artifactId>
        <version>${junit.jupiter.version}</version>
      </dependency>

      <dependency>
        <groupId>org.hamcrest</groupId>
        <artifactId>hamcrest</artifactId>
        <version>${hamcrest-2.version}</version>
      </dependency>
      <dependency>
        <groupId>org.hamcrest</groupId>
        <artifactId>hamcrest-all</artifactId>
        <version>${hamcrest.version}</version>
      </dependency>
      <dependency>
        <groupId>org.mockito</groupId>
        <artifactId>mockito-core</artifactId>
        <version>${mockito.version}</version>
      </dependency>

      <dependency>
        <groupId>org.apache.logging.log4j</groupId>
        <artifactId>log4j-core</artifactId>
        <version>${log4j2.version}</version>
      </dependency>

      <!-- Used when building on Java 11+ -->
      <dependency>
        <groupId>jakarta.activation</groupId>
        <artifactId>jakarta.activation-api</artifactId>
        <version>${activation-api.version}</version>
      </dependency>
      <dependency>
        <groupId>com.sun.xml.bind</groupId>
        <artifactId>jaxb-core</artifactId>
        <version>${jaxb-core.version}</version>
      </dependency>
      <dependency>
        <groupId>com.sun.xml.bind</groupId>
        <artifactId>jaxb-impl</artifactId>
        <version>${jaxb-impl.version}</version>
      </dependency>
      <dependency>
        <groupId>jakarta.xml.bind</groupId>
        <artifactId>jakarta.xml.bind-api</artifactId>
        <version>${jaxb-api.version}</version>
      </dependency>

      <!-- gRPC -->
      <dependency>
        <groupId>io.grpc</groupId>
        <artifactId>grpc-core</artifactId>
        <version>${grpc.version}</version>
        <exclusions>
          <exclusion>
            <!-- Used for compilation of "their" sources -->
            <groupId>com.google.code.findbugs</groupId>
            <artifactId>jsr305</artifactId>
          </exclusion>
          <exclusion>
            <!-- Used for compilation of "their" sources -->
            <groupId>com.google.errorprone</groupId>
            <artifactId>error_prone_annotations</artifactId>
          </exclusion>
          <exclusion>
            <!-- Used for compilation of "their" sources -->
            <groupId>org.codehaus.mojo</groupId>
            <artifactId>animal-sniffer-annotations</artifactId>
          </exclusion>
        </exclusions>
      </dependency>
      <dependency>
        <groupId>io.grpc</groupId>
        <artifactId>grpc-api</artifactId>
        <version>${grpc.version}</version>
        <exclusions>
          <exclusion>
            <!-- Used for compilation of "their" sources -->
            <groupId>org.codehaus.mojo</groupId>
            <artifactId>animal-sniffer-annotations</artifactId>
          </exclusion>
          <exclusion>
            <!-- Used for compilation of "their" sources -->
            <groupId>com.google.errorprone</groupId>
            <artifactId>error_prone_annotations</artifactId>
          </exclusion>
          <exclusion>
            <!-- Used for compilation of "their" sources -->
            <groupId>com.google.code.findbugs</groupId>
            <artifactId>jsr305</artifactId>
          </exclusion>
          <exclusion>
            <!-- Used for compilation of "their" sources -->
            <groupId>com.google.j2objc</groupId>
            <artifactId>j2objc-annotations</artifactId>
          </exclusion>
        </exclusions>
      </dependency>
      <dependency>
        <groupId>io.grpc</groupId>
        <artifactId>grpc-context</artifactId>
        <version>${grpc.version}</version>
      </dependency>
      <dependency>
        <groupId>io.grpc</groupId>
        <artifactId>grpc-protobuf</artifactId>
        <version>${grpc.version}</version>
        <exclusions>
          <exclusion>
            <artifactId>grpc-api</artifactId>
            <groupId>io.grpc</groupId>
          </exclusion>
        </exclusions>
      </dependency>
      <dependency>
        <groupId>io.grpc</groupId>
        <artifactId>grpc-stub</artifactId>
        <version>${grpc.version}</version>
      </dependency>
      <dependency>
        <groupId>io.grpc</groupId>
        <artifactId>grpc-services</artifactId>
        <version>${grpc.version}</version>
      </dependency>
      <dependency>
        <groupId>io.grpc</groupId>
        <artifactId>grpc-netty</artifactId>
        <version>${grpc.version}</version>
      </dependency>
      <dependency>
        <!-- required for dependency convergence, used from guava and perfmark-api -->
        <groupId>com.google.errorprone</groupId>
        <artifactId>error_prone_annotations</artifactId>
        <version>${google-error-prone.version}</version>
      </dependency>
      <dependency>
        <groupId>io.opentracing.contrib</groupId>
        <artifactId>opentracing-grpc</artifactId>
        <version>${opentracing.grpc.version}</version>
      </dependency>

      <!-- Micrometer metrics integration -->
      <dependency>
        <groupId>io.micrometer</groupId>
        <artifactId>micrometer-core</artifactId>
        <version>${micrometer.version}</version>
      </dependency>
      <dependency>
        <groupId>io.micrometer</groupId>
        <artifactId>micrometer-registry-prometheus</artifactId>
        <version>${micrometer.version}</version>
      </dependency>
    </dependencies>
  </dependencyManagement>

  <build>
    <pluginManagement>
      <plugins>
        <!-- jandex-maven-plugin -->
        <plugin>
            <groupId>org.jboss.jandex</groupId>
            <artifactId>jandex-maven-plugin</artifactId>
            <version>${maven.jandex.plugin.version}</version>
            <executions>
                <execution>
                    <id>make-index</id>
                    <goals>
                        <goal>jandex</goal>
                    </goals>
                    <phase>process-classes</phase>
                </execution>
            </executions>
        </plugin>

        <!-- build-helper-maven-plugin -->
        <plugin>
          <groupId>org.codehaus.mojo</groupId>
          <artifactId>build-helper-maven-plugin</artifactId>
          <version>${maven.build.helper.plugin.version}</version>
        </plugin>

        <!-- gmaven-plugin -->
        <plugin>
          <groupId>org.codehaus.gmaven</groupId>
          <artifactId>gmaven-plugin</artifactId>
          <version>${maven.gmaven.plugin.version}</version>
          <executions>
            <execution>
              <id>project-properties</id>
              <phase>validate</phase>
              <goals>
                <goal>execute</goal>
              </goals>
              <configuration>
                <providerSelection>${maven.gmaven.providerSelection.version}</providerSelection>
                <source>

                  import java.nio.file.Files
                  import java.nio.file.Path
                  import java.nio.file.Paths
                  import java.text.SimpleDateFormat
                  import java.time.YearMonth
                  import java.time.format.DateTimeFormatter

                  props = project.properties

                  // determine the root project directory
                  sDevRoot = System.getenv().get("DEV_ROOT");
                  if (sDevRoot == null || sDevRoot.isEmpty())
                      {
                      current = Paths.get(".").toAbsolutePath().normalize();
                      while (current != null)
                          {
                          sDevRoot = current.toString()
                          if (sDevRoot.contains(File.separator + "prj"))
                              {
                              current = current.getParent().toAbsolutePath().normalize();
                              continue
                              }
                          props.setProperty("root.path", sDevRoot);
                          break
                          }
                      }
                  else
                      {
                      props.setProperty("root.path", sDevRoot);
                      }

                  // project version properties 20.06 | 20.06.1
                  matcher = project.version =~ /^(\\d+)\\.(\\d+)\\.*(\\d*)-*(.*)/
                  matcher.matches()

                  // version components
                  result = matcher.toMatchResult()
                  major = result.group(1)
                  minor = result.group(2)
                  micro = result.group(3)

                  // determine next release version
                  pattern      = DateTimeFormatter.ofPattern("uu.MM")
                  release      = YearMonth.parse(major + "." + minor, pattern)
                  nextRelease  = release.plusMonths(6)

                  props.setProperty("project.version.official",
                          major + "." + minor + (micro ? "." + micro : ""))

                  props.setProperty("project.version.next",
                          nextRelease.format(pattern) + ".0")

                  props.setProperty("project.version.short",
                          major + "." + minor)

                  props.setProperty("project.version.next.short",
                          nextRelease.format(pattern))

                  // project metadata properties
                  desc = ""
                  if (!"true".equals(props.getProperty("project.official")))
                      {
                      desc = props.getProperty("project.build.description")
                      if (desc == null || desc.trim().empty)
                          {
                          // project description has been supplied; nothing to do
                          timestamp = new SimpleDateFormat("yyyy-MM-dd HH:mm").format(new Date())
                          props.setProperty("project.timestamp", timestamp)
                          desc = "(dev-" + props.getProperty("user.name") + ")"
                          }
                      props.setProperty("skip.docs", "true")
                      props.setProperty("skip.sources", "true")
                      }
                  else
                      {
                      props.setProperty("skip.docs", "false")
                      props.setProperty("skip.sources", "false")
                      }
                  props.setProperty("project.impl.description", desc)

                  // infer the java.home.path iff JAVA_HOME is undefined
                  javaHomePath = props.get("java.home.path")
                  if (javaHomePath == null || "".equals(javaHomePath))
                      {
                      javaHome = props.get("java.home");
                      if (Paths.get(javaHome, "jar").toFile().exists())
                          {
                          props.setProperty("java.home.path", javaHome)
                          }
                      else if (Paths.get(javaHome, "..", "bin", "jar").toFile().exists())
                          {
                          // if the jar executable is not present it is likely/hopeful
                          // that we have a JRE nested inside a JDK
                          props.setProperty("java.home.path",
                                  Paths.get(javaHome, "..").toFile().getCanonicalPath())
                          }
                      }
                </source>
              </configuration>
            </execution>
          </executions>
        </plugin>

        <plugin>
            <groupId>org.commonjava.maven.plugins</groupId>
            <artifactId>directory-maven-plugin</artifactId>
            <version>${maven.directory.plugin.version}</version>
        </plugin>

        <plugin>
          <groupId>org.xolstice.maven.plugins</groupId>
          <artifactId>protobuf-maven-plugin</artifactId>
          <version>${maven.protobuf.plugin.version}</version>
          <executions>
            <execution>
              <goals>
                <goal>compile</goal>
                <goal>test-compile</goal>
              </goals>
            </execution>
          </executions>
          <configuration>
            <protocArtifact>com.google.protobuf:protoc:3.5.1-1:exe:${os.detected.classifier}</protocArtifact>
            <pluginId>grpc-java</pluginId>
            <pluginArtifact>io.grpc:protoc-gen-grpc-java:${grpc.version}:exe:${os.detected.classifier}</pluginArtifact>
          </configuration>
        </plugin>

        <!-- maven-antrun-plugin -->
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-antrun-plugin</artifactId>
          <version>${maven.antrun.plugin.version}</version>
        </plugin>

        <!-- maven-assembly-plugin -->
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-assembly-plugin</artifactId>
          <version>${maven.assembly.plugin.version}</version>
        </plugin>

        <!-- maven-bundle-plugin -->
        <plugin>
          <groupId>org.apache.felix</groupId>
          <artifactId>maven-bundle-plugin</artifactId>
          <version>${maven.bundle.plugin.version}</version>
          <executions>
            <execution>
              <id>manifest</id>
              <phase>process-classes</phase>
              <goals>
                <goal>manifest</goal>
              </goals>
              <configuration>
                <instructions>
                  <Implementation-Title>${project.name}</Implementation-Title>
                  <Implementation-Version>${project.version.official}</Implementation-Version>
                  <Implementation-Build>${project.build.number}</Implementation-Build>
                  <Implementation-Description>${project.impl.description}</Implementation-Description>
                  <Implementation-Vendor>${project.organization.name}</Implementation-Vendor>
                  <Specification-Version>${project.version.official}</Specification-Version>
                  <Specification-Vendor>${project.organization.name}</Specification-Vendor>
                </instructions>
                <supportedProjectTypes>
                  <supportedProjectType>bundle</supportedProjectType>
                  <supportedProjectType>jar</supportedProjectType>
                  <supportedProjectType>nbm</supportedProjectType>
                </supportedProjectTypes>
              </configuration>
            </execution>
          </executions>
        </plugin>

        <!-- maven-compiler-plugin -->
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-compiler-plugin</artifactId>
          <version>${maven.compiler.plugin.version}</version>
          <configuration>
            <source>${java.version}</source>
            <target>${java.version}</target>
            <release>${java.version.release}</release>
          </configuration>
        </plugin>

        <!-- maven-dependency-plugin -->
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-dependency-plugin</artifactId>
          <version>${maven.dependency.plugin.version}</version>
        </plugin>

        <!-- maven-deploy-plugin -->
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-deploy-plugin</artifactId>
          <version>${maven.deploy.plugin.version}</version>
          <configuration>
            <skip>true</skip>
          </configuration>
        </plugin>

        <!-- maven-gpg-plugin -->
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-gpg-plugin</artifactId>
          <version>${maven.gpg.plugin.version}</version>
          <configuration>
            <skip>true</skip>
            <!-- Not supported in gpg 2.0.22 but may be useful in osx for
                 non-interactive mode
            <gpgArguments>
              <arg>\-\-pinentry-mode</arg>
              <arg>loopback</arg>
            </gpgArguments>
            -->
          </configuration>
        </plugin>

        <!-- nexus-staging-maven-plugin -->
        <plugin>
          <groupId>org.sonatype.plugins</groupId>
          <artifactId>nexus-staging-maven-plugin</artifactId>
          <version>${nexus.staging.maven.plugin.version}</version>
          <extensions>true</extensions>
          <configuration>
            <skipNexusStagingDeployMojo>true</skipNexusStagingDeployMojo>
            <skipLocalStaging>true</skipLocalStaging>
          </configuration>
        </plugin>

        <!-- maven JIB plugin for building OCI images -->
        <plugin>
          <groupId>com.google.cloud.tools</groupId>
          <artifactId>jib-maven-plugin</artifactId>
          <version>${maven.jib.plugin.version}</version>
        </plugin>

        <!-- maven-enforcer-plugin -->
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-enforcer-plugin</artifactId>
          <version>${maven.enforcer.plugin.version}</version>
          <executions>
            <execution>
              <id>enforce</id>
              <phase>validate</phase>
              <goals>
                <goal>enforce</goal>
              </goals>
              <configuration>
                <rules>
                  <requireMavenVersion>
                    <version>[${maven.version},)</version>
                  </requireMavenVersion>
                  <requireJavaVersion>
                    <version>${java.version}</version>
                  </requireJavaVersion>
                  <bannedDependencies>
                    <excludes>
                      <!-- Do not allow inadvertent inclusion of Coherence commercial dependencies in the CE product -->
                      <exclude>com.oracle.coherence</exclude>
                    </excludes>
                  </bannedDependencies>
                </rules>
              </configuration>
            </execution>
          </executions>
        </plugin>

        <!-- maven-exec-plugin allows us to execute processes -->
        <plugin>
          <groupId>org.codehaus.mojo</groupId>
          <artifactId>exec-maven-plugin</artifactId>
          <version>${maven.exec.plugin.version}</version>
        </plugin>

        <!-- maven-failsafe-plugin runs integration tests -->
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-failsafe-plugin</artifactId>
          <version>${maven.failsafe.plugin.version}</version>
          <executions>
            <execution>
              <goals>
                <goal>integration-test</goal>
                <goal>verify</goal>
              </goals>
            </execution>
          </executions>
          <configuration>
            <reuseForks>false</reuseForks>
            <failIfNoTests>false</failIfNoTests>
            <includes>
              <include>**/*Tests.java</include>
              <include>**/*IT.java</include>
            </includes>
            <excludes>
              <exclude>**/Abstract*Tests.java</exclude>
              <exclude>**/**PerformanceTests.java</exclude>
            </excludes>
            <argLine>${failsafe.argLine} ${failsafe.coverage.argline}</argLine>
            <systemPropertyVariables>
              <java.awt.headless>true</java.awt.headless>
              <java.net.preferIPv4Stack>true</java.net.preferIPv4Stack>
              <oracle.coherence.lib>${projects.path}/coherence/target</oracle.coherence.lib>
              <test.root.dir>${projects.path}</test.root.dir>
              <test.tmp.dir>${java.io.tmpdir}</test.tmp.dir>
              <test.project.dir>${project.basedir}</test.project.dir>
              <test.project.version>${project.version}</test.project.version>
              <test.maven.repository>${settings.localRepository}</test.maven.repository>
              <jacoco-agent.destfile>${project.build.directory}/jacoco.exec</jacoco-agent.destfile>
              <jacoco.dest.folder>${project.build.directory}/jacoco</jacoco.dest.folder>
              <http.proxyHost>${http.proxyHost}</http.proxyHost>
              <http.proxyPort>${http.proxyPort}</http.proxyPort>
              <http.nonProxyHosts>${http.nonProxyHosts}</http.nonProxyHosts>
              <https.proxyHost>${http.proxyHost}</https.proxyHost>
              <https.proxyPort>${http.proxyPort}</https.proxyPort>
              <https.nonProxyHosts>${http.nonProxyHosts}</https.nonProxyHosts>
            </systemPropertyVariables>
            <useSystemClassLoader>true</useSystemClassLoader>
            <useManifestOnlyJar>false</useManifestOnlyJar>
            <useModulePath>false</useModulePath>
          </configuration>
          <dependencies>
            <dependency>
          			<groupId>org.junit.jupiter</groupId>
          			<artifactId>junit-jupiter-engine</artifactId>
          			<version>${junit.jupiter.version}</version>
          		</dependency>
          		<dependency>
          			<groupId>org.junit.vintage</groupId>
          			<artifactId>junit-vintage-engine</artifactId>
          			<version>${junit.vintage.version}</version>
          		</dependency>
          </dependencies>
        </plugin>

        <plugin>
          <groupId>io.helidon.build-tools</groupId>
          <artifactId>sitegen-maven-plugin</artifactId>
          <version>${helidon.sitegen.version}</version>
          <configuration>
            <siteConfigFile>${top.parent.basedir}/docs/sitegen.yaml</siteConfigFile>
            <siteSourceDirectory>${top.parent.basedir}</siteSourceDirectory>
            <siteOutputDirectory>${project.build.directory}/docs</siteOutputDirectory>
            <siteArchiveExcludes>
              <siteArchiveExclude>.asciidoctor/**</siteArchiveExclude>
            </siteArchiveExcludes>
          </configuration>
          <dependencies>
            <dependency>
              <groupId>org.asciidoctor</groupId>
              <artifactId>asciidoctorj-diagram</artifactId>
              <version>${asciidoctor.diagram.version}</version>
            </dependency>
          </dependencies>
        </plugin>

        <!-- maven-install-plugin -->
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-install-plugin</artifactId>
          <version>${maven.install.plugin.version}</version>
        </plugin>

        <!-- maven-jar-plugin -->
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-jar-plugin</artifactId>
          <version>${maven.jar.plugin.version}</version>
          <configuration>
            <archive>
              <addMavenDescriptor>false</addMavenDescriptor>
              <!--  TODO: The following should be resolved!  We shouldn't force every project to define a MANIFEST.MF
              <manifestFile>${project.build.outputDirectory}/META-INF/MANIFEST.MF</manifestFile>
              -->
            </archive>
          </configuration>
        </plugin>

        <!-- maven-javadoc-plugin -->
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-javadoc-plugin</artifactId>
          <version>${maven.javadoc.plugin.version}</version>
        </plugin>

        <!-- maven-replacer-plugin -->
        <plugin>
          <groupId>com.google.code.maven-replacer-plugin</groupId>
          <artifactId>replacer</artifactId>
          <version>${maven.replacer.plugin.version}</version>
        </plugin>

        <!-- maven-resources-plugin -->
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-resources-plugin</artifactId>
          <version>${maven.resources.plugin.version}</version>
          <configuration>
            <escapeString>\</escapeString>
          </configuration>
          <executions>
            <execution>
              <id>include-license-files</id>
              <phase>process-resources</phase>
              <goals>
                <goal>copy-resources</goal>
              </goals>
              <configuration>
                <resources>
                  <resource>
                    <directory>${root.path}</directory>
                    <includes>
                      <include>LICENSE.txt</include>
                      <include>THIRD_PARTY_LICENSES.txt</include>
                    </includes>
                  </resource>
                </resources>
                <outputDirectory>${project.build.outputDirectory}/META-INF</outputDirectory>
              </configuration>
            </execution>
          </executions>
        </plugin>

        <!-- maven-shade-plugin -->
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-shade-plugin</artifactId>
          <version>${maven.shade.plugin.version}</version>
        </plugin>

        <!-- maven-site-plugin -->
        <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-site-plugin</artifactId>
            <version>${maven.site.plugin.version}</version>
            <configuration>
                <skip>true</skip>
            </configuration>
          <executions>
               <execution>
                   <id>site-jar</id>
                   <goals>
                       <goal>jar</goal>
                   </goals>
                   <phase>site</phase>
                   <configuration>
                       <archiveExcludes>
                           <exclude>.asciidoctor/**</exclude>
                       </archiveExcludes>
                   </configuration>
               </execution>
           </executions>
        </plugin>
        <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-project-info-reports-plugin</artifactId>
            <version>3.0.0</version>
        </plugin>

        <!-- maven-surefire-plugin -->
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-surefire-plugin</artifactId>
          <version>${maven.surefire.plugin.version}</version>
          <configuration>
            <reuseForks>false</reuseForks>
            <includes>
              <include>**/*Test.java</include>
            </includes>
            <excludes>
              <exclude>**/Abstract*Test.java</exclude>
              <exclude>**/**PerformanceTest.java</exclude>
            </excludes>
            <argLine>${surefire.argLine} ${surefire.coverage.argline}</argLine>
            <systemPropertyVariables>
              <java.awt.headless>true</java.awt.headless>
              <java.net.preferIPv4Stack>true</java.net.preferIPv4Stack>
              <test.maven.repository>${settings.localRepository}</test.maven.repository>
              <jacoco.dest.folder>${project.build.directory}</jacoco.dest.folder>
            </systemPropertyVariables>
            <useSystemClassLoader>true</useSystemClassLoader>
            <useManifestOnlyJar>false</useManifestOnlyJar>
            <useModulePath>false</useModulePath>
          </configuration>
          <dependencies>
            <dependency>
          			<groupId>org.junit.jupiter</groupId>
          			<artifactId>junit-jupiter-engine</artifactId>
          			<version>${junit.jupiter.version}</version>
          		</dependency>
          		<dependency>
          			<groupId>org.junit.vintage</groupId>
          			<artifactId>junit-vintage-engine</artifactId>
          			<version>${junit.vintage.version}</version>
          		</dependency>
          </dependencies>
        </plugin>

        <!-- nbm-maven-plugin -->
        <plugin>
          <groupId>org.codehaus.mojo</groupId>
          <artifactId>nbm-maven-plugin</artifactId>
          <version>${maven.nbm.plugin.version}</version>
        </plugin>

        <!-- maven animal sniffer plugin to check for JDK 7 compatibility -->
        <plugin>
          <groupId>org.codehaus.mojo</groupId>
          <artifactId>animal-sniffer-maven-plugin</artifactId>
          <version>${maven.animalsniffer.plugin.version}</version>
          <executions>
            <execution>
              <id>check-java-api</id>
              <phase>test</phase>
              <goals>
                <goal>check</goal>
              </goals>
              <configuration>
                <skip>${skip.animal.sniffer.plugin}</skip>
                <signature>
                  <groupId>org.codehaus.mojo.signature</groupId>
                  <artifactId>java18</artifactId>
                  <version>1.0</version>
                </signature>
              </configuration>
            </execution>
          </executions>
        </plugin>

        <!-- OWASP dependency CVE checker -->
        <plugin>
          <groupId>org.owasp</groupId>
          <artifactId>dependency-check-maven</artifactId>
          <version>${maven.dependency-check.plugin.version}</version>
          <configuration>
            <skip>${dependency-check.skip}</skip>
            <skipTestScope>true</skipTestScope>
            <skipProvidedScope>true</skipProvidedScope>
            <failBuildOnAnyVulnerability>false</failBuildOnAnyVulnerability>
            <assemblyAnalyzerEnabled>false</assemblyAnalyzerEnabled>
            <excludes>
              <!-- Exclude stuff we do not deploy -->
              <exclude>com.oracle.coherence:coherence-examples-rest</exclude>
            </excludes>
            <formats>
              <format>HTML</format>
              <format>CSV</format>
            </formats>
            <suppressionFiles>
              <!--suppress UnresolvedMavenProperty -->
              <suppressionFile>${top.parent.basedir}/etc/dependency-check-suppression.xml</suppressionFile>
            </suppressionFiles>
          </configuration>
        </plugin>
      </plugins>
    </pluginManagement>

    <plugins>
      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>flatten-maven-plugin</artifactId>
        <version>${maven.flatten.plugin.version}</version>
        <configuration>
          <pomElements>
            <name/>
            <description/>
            <url/>
            <inceptionYear/>
            <organization/>
            <scm/>
            <developers/>
          </pomElements>
          <updatePomFile>true</updatePomFile>
        </configuration>
        <executions>
          <execution>
            <id>flatten.clean</id>
            <phase>clean</phase>
            <goals>
              <goal>clean</goal>
            </goals>
          </execution>
          <execution>
            <id>flatten</id>
            <phase>package</phase>
            <goals>
              <goal>flatten</goal>
            </goals>
          </execution>
        </executions>
      </plugin>

      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-install-plugin</artifactId>
        <version>${maven.install.plugin.version}</version>
      </plugin>

      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-deploy-plugin</artifactId>
        <version>${maven.deploy.plugin.version}</version>
        <inherited>false</inherited>
        <configuration combine.self="override">
          <skip>false</skip>
        </configuration>
      </plugin>
    </plugins>
  </build>

  <licenses>
    <license>
      <name>Universal Permissive License v 1.0</name>
      <url>http://oss.oracle.com/licenses/upl</url>
      <distribution>repo</distribution>
      <comments>
        Copyright (c) 2000, 2020, Oracle and/or its affiliates.

        Licensed under the Universal Permissive License v 1.0 as shown at
        http://oss.oracle.com/licenses/upl.
      </comments>
    </license>
  </licenses>

  <profiles>
    <profile>
      <id>release</id>
      <build>
        <plugins>
          <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-gpg-plugin</artifactId>
            <version>${maven.gpg.plugin.version}</version>
            <configuration>
              <skip>false</skip>
            </configuration>
            <executions>
              <execution>
                <id>sign-artifacts</id>
                <phase>verify</phase>
                <goals>
                  <goal>sign</goal>
                </goals>
              </execution>
            </executions>
          </plugin>

          <plugin>
            <groupId>org.sonatype.plugins</groupId>
            <artifactId>nexus-staging-maven-plugin</artifactId>
            <version>${nexus.staging.maven.plugin.version}</version>
            <extensions>true</extensions>
            <configuration>
              <serverId>ossrh</serverId>
              <nexusUrl>https://oss.sonatype.org/</nexusUrl>
              <autoReleaseAfterClose>true</autoReleaseAfterClose>
              <skipNexusStagingDeployMojo>true</skipNexusStagingDeployMojo>
              <skipLocalStaging>true</skipLocalStaging>
            </configuration>
          </plugin>
        </plugins>
      </build>
    </profile>
  </profiles>

</project>
