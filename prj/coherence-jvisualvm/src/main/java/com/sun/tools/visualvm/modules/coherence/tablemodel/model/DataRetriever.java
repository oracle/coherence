/*
 * Copyright (c) 2000, 2020, Oracle and/or its affiliates.
 *
 * Licensed under the Universal Permissive License v 1.0 as shown at
 * http://oss.oracle.com/licenses/upl.
 */
package com.sun.tools.visualvm.modules.coherence.tablemodel.model;

import com.sun.tools.visualvm.modules.coherence.VisualVMModel;

import com.sun.tools.visualvm.modules.coherence.helper.HttpRequestSender;
import com.sun.tools.visualvm.modules.coherence.helper.RequestSender;
import java.util.List;
import java.util.Map;
import java.util.SortedMap;

import javax.management.openmbean.TabularData;

/**
 * Defines the methods for retrieving JMX data from an MBean server.
 *
 * @author tam  2013.11.14
 * @since  12.1.3
 */
public interface DataRetriever
    {
    // ----- DataRetriever methods ------------------------------------------

    /**
     * Return a {@link List} of statistics using standard JMX queries
     *
     * @param requestSender the {@link RequestSender} to use to query
     *
     * @return a {@link List} of statistics collected
     */
    public List<Map.Entry<Object, Data>> getJMXData(RequestSender requestSender, VisualVMModel model);

    /**
     * Return the report to run to collect the data.
     *
     * @return the report to run to collect the data
     */
    public String getReporterReport();

    /**
     * Return a {@link List} of statistics given a {@link TabularData} output
     * generated by the reporter.
     *
     * @param reportData {@link TabularData} output generated by the reporter
     *
     * @return a {@link List} of service statistics
     */
    public SortedMap<Object, Data> getReporterData(TabularData reportData, VisualVMModel model);

    /**
     * Process a given {@link Object} array retrieved from a line in the
     * report and return a representation of this.<br>
     * Note: This method is only used for Coherence clusters with version
     * 12.1.3 and above.<br>
     * <b>Note:</b> the first column is always a row identifier.
     *
     * @param aoColumns {@link Object} array of column values
     * @param model     the {@link VisualVMModel} to use
     *
     * @return an instance of {@link Data}
     */
    public Data processReporterData(Object[] aoColumns, VisualVMModel model);

    /**
     * Perform any pre-processing of the generated reporter XML to do things such as
     * parameter substitution.
     *
     * @param  model         the {@link VisualVMModel} to use
     * @param  sReporterXML  the report XML read from the XML file
     *
     * @return a String representing the modified reporter XML
     */
    public String preProcessReporterXML(VisualVMModel model, String sReporterXML) ;

    /**
     * Get the aggregated data using the corresponding report.
     *
     * @param model          the {@link VisualVMModel} to use
     * @param requestSender  the request sender to use
     * @param sReportXML     the report XML to use
     *
     * @return the result after running the report
     *
     * @throws Exception in case of error
     */
    SortedMap<Object, Data> getAggregatedDataUsingReport(VisualVMModel model,
                                                         RequestSender requestSender,
                                                         String        sReportXML) throws Exception;

    /**
     * Get the aggregated data using REST api.
     *
     * @param model          the {@link VisualVMModel} to use
     * @param requestSender  the request sender to use
     *
     * @return the result using REST api
     *
     * @throws Exception in case of error
     */
    SortedMap<Object, Data> getAggregatedDataFromHttpQuerying(VisualVMModel model, HttpRequestSender requestSender)
            throws Exception;
    }
