{"swagger": "2.0",
  "info": {
    "title": "RESTful Management Interface for Oracle Coherence MBeans",
    "description": "RESTful Management Interface for Oracle Coherence MBeans",
    "version": "${project.version.official}"
  },
  "schemes": [
    "http",
    "https"
  ],
  "tags": [
    {
      "name": "Cluster",
      "description": "The Cluster resource provides a set of endpoints for managing a Coherence cluster and cluster members. Use this resource to access operational information, performance statistics and logs and to shutdown cluster members. Applications should initially use this resource to discover the cluster members and their associated member IDs. Member IDs are required to access management resources and endpoints that are specific to a cluster member.",
      "x-priority":1
    },
    {
      "name": "Health",
      "description": "The Health resource provides a set of endpoints for querying the status of health checks.",
      "x-priority":2
    },
    {
      "name": "Service",
      "description": "The Service resource provides a set of endpoints for managing the services that are running in a Coherence cluster. Use this resource to access operational information and performance statistics and to control the lifecycle of services. Applications should initially use this resource to discover the services in a cluster and their associated service names. Service names are required to access management resources and endpoints that are specific to a service.",
      "x-priority":3
    },
    {
      "name": "Cache",
      "description": "The Cache resource provides a set of endpoints for managing Coherence caches based on the cache service instance to which it belongs. Use this resource to access operational information and performance statistics. Cache data is aggregated across all cluster members or it can be viewed for each cluster member. Applications should initially use this resource to discover caches and their associated cache names. Cache names are required to access management data.",
      "x-priority":4
    },
    {
      "name": "Cache (Short Form)",
      "description": "The Cache (Short Form) resource provides a set of endpoints for managing Coherence caches and does not require the service name to which the cache belongs. Use this resource to access operational information and performance statistics. Cache data is aggregated across all cluster members or it can be viewed for each cluster member. Applications should initially use this resource to discover caches and their associated cache names. Cache names are required to access management data.",
      "x-priority":5
    },
    {
      "name": "Journal",
      "description": "The Journal resource provides a set of endpoints for managing Elastic Data journals that are used to store cache data. Use this resource to access operational information and performance statistics and to force journals to remove stale values. Cache data is aggregated across all cluster members or it can be viewed for each cluster member. This API is available only when you use the Coherence Grid Edition.",
      "x-priority":6
    },
    {
      "name": "Persistence",
      "description": "The Persistence resource provides a set of endpoints for managing persistence for a service. Use this resource to access operational information and to perform persistence operations.",
      "x-priority":7
    },
    {
      "name": "Federation",
      "description": "The Federation resource provides a set of endpoints for managing federation for a service. Use this resource to access operational information and performance statistics and to perform federation operations. This API is available only when you use the Coherence Grid Edition.",
      "x-priority":8
    },
    {
      "name": "Coherence*Web",
      "description": "The Coherence*Web resource provides a set of endpoints for managing caches that are used for storing HTTP session data. Use this resource to access operational information and performance statistics. Management data is aggregated across all cluster members or it can be viewed for each cluster member. Applications should initially use this resource to discover web application IDs. Application IDs are required to access management data. This API is available only when you use the Coherence Enterprise Edition.",
      "x-priority":9
    },
    {
      "name": "HotCache",
      "description": "The HotCache resource provides a set of endpoints for managing caches that are integrated with Oracle GoldenGate. Use this resource to access operational information. This API is available only when you use the Coherence Grid Edition.",
      "x-priority":10
    },
    {
      "name": "Platform",
      "description": "The Platform resource provides a set of endpoints for managing the JVMs and operating systems on which Coherence cluster members run. Use this resource to access operational information. JVM Memory data can be aggregated across all cluster members or it can be viewed for each cluster member. When querying GarbageCollectorMXBean or MemoryPoolMXBean, use the appropriate attribute names in the path for the GC used by the JVM.  As examples, we documented Parallel GC (PS) and G1 GC (G1).",
      "x-priority":11
    },
    {
      "name": "Search",
      "description": "The Search resource provides a single endpoint for searching the entire Coherence management API hierarchy.",
      "x-priority":12
    },
    {
      "name": "JMX",
      "description": "The JMX management resource provides a set of endpoints for viewing and changing how Coherence JMX management is configured.",
      "x-priority":13
    },
    {
      "name": "Executor",
      "description": "The Executor resource provides a set of endpoints for managing executor service. Use this resource to access operational information and performance statistics for executor operations.",
      "x-priority":14
    },
    {
      "name": "Topic",
      "description": "The Topic resource provides a set of endpoints for managing Coherence topics based on the topic service instance to which it belongs. Use this resource to access operational information and performance statistics. Topic data is aggregated across all cluster members or it can be viewed for each cluster member. Applications should initially use this resource to discover topics and their associated topic names. Topic names are required to access management data.",
      "x-priority":15
    },
    {
      "name": "Topic (Short Form)",
      "description": "The Topic (Short Form) resource provides a set of endpoints for managing Coherence topics and does not require the service name to which the topic belongs. Use this resource to access operational information and performance statistics. Topic data is aggregated across all cluster members or it can be viewed for each cluster member. Applications should initially use this resource to discover topics and their associated topic names. Topic names are required to access management data.",
      "x-priority":16
    },
    {
      "name": "Storage",
      "description": "The Storage resource provides a set of endpoints for managing Coherence Storage Managers.",
      "x-priority":17
    },
    {
      "name": "View",
      "description": "The View resource provides a set of endpoints for managing Coherence view caches based on the cache service instance to which it belongs. Use this resource to access operational information and performance statistics. Cache data is aggregated across all cluster members or it can be viewed for each cluster member. Applications should initially use this resource to discover caches and their associated cache names. Cache names are required to access management data.",
      "x-priority":18
    }
  ],
  "paths": {
    "/management/coherence/cluster": {
      "get": {
        "tags": [
          "Cluster"
        ],
        "summary": "View Cluster Information",
        "description": "Use this endpoint to verify which cluster you are managing and to check whether the cluster is operational. You can also use this endpoint to get a list of cluster members and their associated IDs. Cluster information is often used as parameters when performing other resource operations.",
        "operationId": "/management/coherence/cluster GET",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "A successful request that returns information about a Coherence cluster",
            "schema": {
              "$ref": "#/definitions/cluster"
            }
          }
        }
      },
      "post": {
        "tags": [
          "Cluster"
        ],
        "summary": "Update cluster configuration parameters on all the Members.",
        "description": "Use this endpoint to update the configuration parameters for all the members.",
        "operationId": "/management/coherence/cluster POST",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/member"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful request that updates the configuration parameters on all the members"
          }
        }
      }
    },
    "/management/coherence/cluster/search": {
      "post": {
        "tags": [
          "Search"
        ],
        "summary": "Search the Management API",
        "description": "Use this endpoint to search the entire Coherence management API hierarchy.",
        "operationId": "/management/coherence/cluster/search POST",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/searchInput"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful request that returns a list of Coherence clusters",
            "schema": {
              "type": "object",
              "properties": {
                "items": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/searchOutput"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/management/coherence/cluster/management": {
      "get": {
        "tags": [
          "JMX"
        ],
        "summary": "View JMX Management Information",
        "description": "Use this endpoint to view operational settings that control Coherence JMX management.",
        "operationId": "/management/coherence/cluster/management GET",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "A successful request that returns Coherence JMX management settings",
            "schema": {
              "$ref": "#/definitions/jmxManagement"
            }
          }
        }
      },
      "post": {
        "tags": [
          "JMX"
        ],
        "summary": "Update JMX Management Information",
        "description": "Use this endpoint to change when and how often JMX management information is refreshed.",
        "operationId": "/management/coherence/cluster/management POST",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/jmxSettings"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Command invocation is successful"
          }
        }
      }
    },
    "/management/coherence/cluster/shutdown": {
      "post": {
        "tags": [
          "Cluster"
        ],
        "summary": "Shutdown the Cluster",
        "description": "Use this endpoint to shutdown the cluster service on this node.",
        "operationId": "/management/coherence/cluster/shutdown POST",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Command invocation is successful"
          }
        }
      }
    },
    "/management/coherence/cluster/logClusterState": {
      "post": {
        "tags": [
          "Cluster"
        ],
        "summary": "Log the Cluster State",
        "description": "Use this endpoint to write the cluster state (full thread dump and outstanding polls) to the Coherence log file on members that are configured with a specific role. You can omit the role if you want to log the cluster state on all members.",
        "operationId": "/management/coherence/cluster/logClusterState POST",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/role"
          }
        ],
        "responses": {
          "200": {
            "description": "Command invocation is successful"
          }
        }
      }
    },
    "/management/coherence/cluster/dumpClusterHeap": {
      "post": {
        "tags": [
          "Cluster"
        ],
        "summary": "Perform a Heap Dump",
        "description": "Use this endpoint to perform a heap dump on members that are configured with a specific role. You can omit the role if you want to perform the heap dump on all members.",
        "operationId": "/management/coherence/cluster/dumpClusterHeap POST",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/role"
          }
        ],
        "responses": {
          "200": {
            "description": "Command invocation is successful"
          }
        }
      }
    },
    "/management/coherence/cluster/configureTracing": {
      "post": {
        "tags": [
          "Cluster"
        ],
        "summary": "Configure OpenTracing",
        "description": "Use this endpoint to configure OpenTracing on members that are configured with a specific role. Omit the role to apply the changes to all cluster members.",
        "operationId": "/management/coherence/cluster/configureTracing POST",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/role"
          },
          {
            "$ref": "#/parameters/tracingRatio"
          }
        ],
        "responses": {
          "200": {
            "description": "Command invocation is successful"
          }
        }
      }
    },
    "/management/coherence/cluster/diagnostic-cmd/{jfrCmd}": {
      "post": {
        "tags": [
          "Cluster"
        ],
        "summary": "Perform a Cluster wide Java Flight Recorder (JFR) operation",
        "description": "Use this endpoint to perform a JFR operation on members that are configured with a specific role.\nYou can omit the role if you want to perform the operation on all members.\nExample: jfrStart?options=name=myJfr,duration=60s,filename=$jfrFolder/myRecording.jfr\n\nThe $jfrFolder must already exist on the node where the JFR is taken.  If no folder is\nspecified, the JFR recording will be saved in the current directory of the MBeanServer.\nTo ensure global file name, we prepend the file name with the node ID.  So for node with ID 3,\nthe file name will be $jfrFolder/3-myRecording.jfr.\n\nThe filename can be a path and if so, the JFR dump will be created in\n$path/$nodeId-$jfrName.jfr.  For example, if the input JFR options is \"name=foo,filename=/myJfrdir\",\nthe node ID is 3, then the resulting JFR filename would be: \"/myJfrdir/3-foo.jfr\".",
        "operationId": "/management/coherence/cluster/diagnostic-cmd/{jfrCmd} POST",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/jfrCmd"
          },
          {
            "$ref": "#/parameters/options"
          },
          {
            "$ref": "#/parameters/role"
          }
        ],
        "responses": {
          "200": {
            "description": "If the command invocation is successful, it returns the messages returned by jcmd from executing the command on each node. \nIf the command invocation fails, it returns the exception for each node.",
            "schema": {
              "type": "object",
              "properties": {
                "items": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/management/coherence/cluster/logMemberState": {
      "post": {
        "tags": [
          "Cluster"
        ],
        "summary": "Log Member State",
        "description": "Use this endpoint to log a full thread dump and outstanding polls for the services that are running on all the members.",
        "operationId": "/management/coherence/cluster/logMemberState POST",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Command invocation is successful"
          }
        }
      }
    },
    "/management/coherence/cluster/resetStatistics": {
      "post": {
        "tags": [
          "Cluster"
        ],
        "summary": "Reset Member Statistics for all the members",
        "description": "Use this endpoint to clear the current statistics for all the members.",
        "operationId": "/management/coherence/cluster/resetStatistics POST",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Command invocation is successful"
          }
        }
      }
    },
    "/management/coherence/cluster/networkStats/trackWeakest": {
      "post": {
        "tags": [
          "Cluster"
        ],
        "summary": "Track the Weakest Cluster Member for all the members",
        "description": "Use this endpoint to begin tracking the weakest member of the cluster. A member is considered weak if either the corresponding publisher or receiver success rates are below 1.0.",
        "operationId": "/management/coherence/cluster/networkStats/trackWeakest POST",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Command invocation is successful"
          }
        }
      }
    },
    "/management/coherence/cluster/health": {
      "get": {
        "tags": [
          "Health"
        ],
        "summary": "View the List of health checks",
        "description": "Use this endpoint to list the health checks in a Coherence cluster.",
        "operationId": "/management/coherence/cluster/health GET",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "A successful request that returns the health checks in a Coherence cluster",
            "schema": {
              "type": "object",
              "properties": {
                "items": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/health"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/management/coherence/cluster/health/started": {
      "get": {
        "tags": [
          "Health"
        ],
        "summary": "Check started status of all the health checks",
        "description": "Use this endpoint to check the started status of all the health checks in a Coherence cluster.",
        "operationId": "/management/coherence/cluster/health/started GET",
        "responses": {
          "200": {
            "description": "All the health checks in the cluster are started."
          },
          "503": {
            "description": "One or more health checks is not started."
          }
        }
      }
    },
    "/management/coherence/cluster/health/ready": {
      "get": {
        "tags": [
          "Health"
        ],
        "summary": "Check readiness of all the health checks",
        "description": "Use this endpoint to check the ready status of all the health checks in a Coherence cluster.",
        "operationId": "/management/coherence/cluster/health/ready GET",
        "responses": {
          "200": {
            "description": "All the health checks in the cluster are ready."
          },
          "503": {
            "description": "One or more health checks is not ready."
          }
        }
      }
    },
    "/management/coherence/cluster/health/live": {
      "get": {
        "tags": [
          "Health"
        ],
        "summary": "Check liveness of all the health checks",
        "description": "Use this endpoint to check the liveness status of all the health checks in a Coherence cluster.",
        "operationId": "/management/coherence/cluster/health/live GET",
        "responses": {
          "200": {
            "description": "All the health checks in the cluster are alive."
          },
          "503": {
            "description": "One or more health checks is not alive."
          }
        }
      }
    },
    "/management/coherence/cluster/health/safe": {
      "get": {
        "tags": [
          "Health"
        ],
        "summary": "Check safe status of all the health checks",
        "description": "Use this endpoint to check the safe status of all the health checks in a Coherence cluster.",
        "operationId": "/management/coherence/cluster/health/safe GET",
        "responses": {
          "200": {
            "description": "All the health checks in the cluster are safe."
          },
          "503": {
            "description": "One or more health checks is not safe."
          }
        }
      }
    },
    "/management/coherence/cluster/health/{healthIdentifier}": {
      "get": {
        "tags": [
          "Health"
        ],
        "summary": "View a named health check",
        "description": "Use this endpoint to view a specific named health check in a Coherence cluster. This is an aggregated view of the named health check from all cluster members that it is present on.",
        "operationId": "/management/coherence/cluster/health/{healthIdentifier} GET",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/healthIdentifier"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful request that returns the information for the named health check",
            "schema": {
              "$ref": "#/definitions/health"
            }
          },
          "404": {
            "description": "No health check exists for the specified name"
          }
        }
      }
    },
    "/management/coherence/cluster/health/{healthIdentifier}/members": {
      "get": {
        "tags": [
          "Health"
        ],
        "summary": "View the specific health check in all members",
        "description": "Use this endpoint to view the specific health checks in all Coherence cluster members.",
        "operationId": "/management/coherence/cluster/health/{healthIdentifier}/members GET",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/healthIdentifier"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful request that returns the health checks in a Coherence cluster",
            "schema": {
              "type": "object",
              "properties": {
                "items": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/health"
                  }
                }
              }
            }
          },
          "404": {
            "description": "No health check exists for the specified name"
          }
        }
      }
    },
    "/management/coherence/cluster/health/{healthIdentifier}/members/{memberIdentifier}": {
      "get": {
        "tags": [
          "Health"
        ],
        "summary": "View the specific health check in a specific members",
        "description": "Use this endpoint to view the specific health checks in a specific Coherence cluster member.",
        "operationId": "/management/coherence/cluster/health/{healthIdentifier}/members/{memberIdentifier} GET",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/healthIdentifier"
          },
          {
            "$ref": "#/parameters/memberIdentifier"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful request that returns the specified health checks for specified member.",
            "schema": {
              "$ref": "#/definitions/health"
            }
          },
          "404": {
            "description": "No health check exists for the specified name, or no cluster member existes with the specified id."
          }
        }
      }
    },
    "/management/coherence/cluster/health/members": {
      "get": {
        "tags": [
          "Health"
        ],
        "summary": "View the List of health checks for all members",
        "description": "Use this endpoint to list the health checks in all Coherence cluster members.",
        "operationId": "/management/coherence/cluster/health/members GET",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "A successful request that returns the health checks for all members in a Coherence cluster",
            "schema": {
              "type": "object",
              "properties": {
                "items": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/health"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/management/coherence/cluster/health/members/{memberIdentifier}": {
      "get": {
          "tags": [
          "Health"
        ],
        "summary": "View the List of health checks for a specific member",
        "description": "Use this endpoint to list the health checks in a Coherence cluster member.",
        "operationId": "/management/coherence/cluster/health/members/{memberIdentifier} GET",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/memberIdentifier"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful request that returns the health checks for the specific Coherence cluster member.",
            "schema": {
              "type": "object",
              "properties": {
                "items": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/health"
                  }
                }
              }
            }
          },
          "404": {
            "description": "The specified member does not exist."
          }
        }
      }
    },
    "/management/coherence/cluster/getClusterConfig": {
      "get": {
        "tags": [
          "Cluster"
        ],
        "summary": "Get the Coherence Cluster Configuration",
        "description": "Use this endpoint to get the Coherence Cluster Configuration.",
        "operationId": "/management/coherence/cluster/getClusterConfig GET",
        "produces": [
          "application/xml"
        ],
        "responses": {
          "200": {
            "description": "A successful request that returns Coherence Cluster Configuration",
            "schema": {
              "type": "object",
              "properties": {
                "state": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/management/coherence/cluster/description": {
      "get": {
        "tags": [
          "Cluster"
        ],
        "summary": "Get the Coherence Cluster description",
        "description": "Use this endpoint to retrieve the Coherence Cluster description.",
        "operationId": "/management/coherence/cluster/description GET",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "A successful request that returns Coherence Cluster description",
            "schema": {
              "type": "object",
              "properties": {
                "description": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },

    "/management/coherence/cluster/members": {
      "get": {
        "tags": [
          "Cluster"
        ],
        "summary": "View Cluster Members",
        "description": "Use this endpoint to list all the members of a Coherence cluster.",
        "operationId": "/management/coherence/cluster/members GET",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "A successful request that lists Coherence cluster members",
            "schema": {
              "type": "object",
              "properties": {
                "items": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/member"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/management/coherence/cluster/members/{memberIdentifier}": {
      "get": {
        "tags": [
          "Cluster"
        ],
        "summary": "View Member Information",
        "description": "Use this endpoint to view management information for a specific member of the cluster. The information includes member identity settings and network communication settings and statistics.",
        "operationId": "/management/coherence/cluster/members/{memberIdentifier} GET",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/memberIdentifier"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful request that returns information about a Coherence cluster member",
            "schema": {
              "$ref": "#/definitions/member"
            }
          }
        }
      },
      "post": {
        "tags": [
          "Cluster"
        ],
        "summary": "Update a Member",
        "description": "Use this endpoint to update the configuration parameters for a member.",
        "operationId": "/management/coherence/cluster/members/{memberIdentifier} POST",
        "produces": [
          "application/json"
        ],
        "parameters": [
        {
          "$ref": "#/parameters/memberIdentifier"
        },
        {
          "in": "body",
          "name": "body",
          "required": true,
          "schema": {
            "$ref": "#/definitions/member"
          }
        }
        ],
        "responses": {
          "200": {
            "description": "A successful request that updates the member parameters"
          }
        }
      }
    },
    "/management/coherence/cluster/members/{memberIdentifier}/logMemberState": {
      "post": {
        "tags": [
          "Cluster"
        ],
        "summary": "Log Member State",
        "description": "Use this endpoint to log a full thread dump and outstanding polls for the services that are running on a specific member.",
        "operationId": "/management/coherence/cluster/members/{memberIdentifier}/logMemberState POST",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/memberIdentifier"
          }
        ],
        "responses": {
          "200": {
            "description": "Command invocation is successful"
          }
        }
      }
    },
    "/management/coherence/cluster/members/{memberIdentifier}/dumpHeap": {
      "post": {
        "tags": [
          "Cluster"
        ],
        "summary": "Perform a Heap Dump for a Cluster Member",
        "description": "Use this endpoint to perform a heap dump on a specific member. Produces a file of heapdump-XXXXXXXXXXXX.hprof in the system's default temporary directory or in a directory that is specified by the -Dcom.oracle.coherence.common.internal.util.HeapDump.dir=path system property.",
        "operationId": "/management/coherence/cluster/members/{memberIdentifier}/dumpHeap POST",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/memberIdentifier"
          }
        ],
        "responses": {
          "200": {
            "description": "Command invocation is successful"
          }
        }
      }
    },
    "/management/coherence/cluster/members/{memberIdentifier}/resetStatistics": {
      "post": {
        "tags": [
          "Cluster"
        ],
        "summary": "Reset Member Statistics",
        "description": "Use this endpoint to clear the current statistics for a specific member.",
        "operationId": "/management/coherence/cluster/members/{memberIdentifier}/resetStatistics POST",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/memberIdentifier"
          }
        ],
        "responses": {
          "200": {
            "description": "Command invocation is successful"
          }
        }
      }
    },
    "/management/coherence/cluster/members/{memberIdentifier}/networkStats": {
      "get": {
        "tags": [
          "Cluster"
        ],
        "summary": "View Network Statistics Between Members",
        "description": "Use this endpoint to determine network performance from the current viewing member to the specified viewed member. To specify the viewed member, enter the ID of the member.",
        "operationId": "/management/coherence/cluster/members/{memberIdentifier}/networkStats GET",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/memberIdentifier"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful request that includes network status and statistics",
            "schema": {
              "$ref": "#/definitions/networkStats"
            }
          }
        }
      }
    },
    "/management/coherence/cluster/members/{memberIdentifier}/networkStats/trackWeakest": {
      "post": {
        "tags": [
          "Cluster"
        ],
        "summary": "Track the Weakest Cluster Member",
        "description": "Use this endpoint to begin tracking the weakest member of the cluster. Specify a viewed member using the member ID. A viewed member is considered weak if either the corresponding publisher or receiver success rates are below 1.0.",
        "operationId": "/management/coherence/cluster/members/{memberIdentifier}/networkStats/trackWeakest POST",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/memberIdentifier"
          }
        ],
        "responses": {
          "200": {
            "description": "Command invocation is successful"
          }
        }
      }
    },
    "/management/coherence/cluster/members/{memberIdentifier}/shutdown": {
      "post": {
        "tags": [
          "Cluster"
        ],
        "summary": "Shutdown a Cluster Member",
        "description": "Use this endpoint to shutdown all the clustered services that are running on a specific member (controlled shutdown). The management of this member will not be available until the member is restarted either manually or programmatically.",
        "operationId": "/management/coherence/cluster/members/{memberIdentifier}/shutdown POST",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/memberIdentifier"
          }
        ],
        "responses": {
          "200": {
            "description": "Command invocation is successful"
          }
        }
      }
    },
    "/management/coherence/cluster/members/{memberIdentifier}/diagnostic-cmd/{jfrCmd}": {
      "post": {
        "tags": [
          "Cluster"
        ],
        "summary": "Perform a JFR operation for a Cluster Member",
        "description": "Use this endpoint to perform a JFR operation on a specific member.\nExample: jfrStart?options=name=myJfr,duration=60s,filename=$jfrFolder/myRecording.jfr\n\n\nThe $jfrFolder must already exist on the node where the JFR is taken.  If no folder is\nspecified, the JFR recording will be saved in the current directory of the MBeanServer.",
        "operationId": "/management/coherence/cluster/members/{memberIdentifier}/diagnostic-cmd/{jfrCmd} POST",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/memberIdentifier"
          },
          {
            "$ref": "#/parameters/jfrCmd"
          },
          {
            "$ref": "#/parameters/options"
          }
        ],
        "responses": {
          "200": {
            "description": "If the command invocation is successful, it returns the messages returned by jcmd from executing the command on each node.\nIf the command invocation fails, it returns the exception for each node.",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/management/coherence/cluster/members/{memberIdentifier}/platform/memory": {
      "get": {
        "tags": [
          "Platform"
        ],
        "summary": "View JVM Memory Information",
        "description": "Use this endpoint view JVM memory statistics for a specific cluster member.",
        "operationId": "/management/coherence/cluster/members/{memberIdentifier}/platform/memory GET",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/memberIdentifier"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful request that returns JVM memory information",
            "schema": {
              "$ref": "#/definitions/jvmMemory"
            }
          }
        }
      }
    },
    "/management/coherence/cluster/members/{memberIdentifier}/platform/operatingSystem": {
      "get": {
        "tags": [
          "Platform"
        ],
        "summary": "View OS Information",
        "description": "Use this endpoint to view OS information for a specific cluster member.",
        "operationId": "/management/coherence/cluster/members/{memberIdentifier}/platform/operatingSystem GET",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/memberIdentifier"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful request that returns OS information"
          }
        }
      }
    },
    "/management/coherence/cluster/members/{memberIdentifier}/platform/runtime": {
      "get": {
        "tags": [
          "Platform"
        ],
        "summary": "View Runtime Information",
        "description": "Use this endpoint to view runtime information for a specific cluster member.",
        "operationId": "/management/coherence/cluster/members/{memberIdentifier}/platform/runtime GET",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/memberIdentifier"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful request that returns runtime information"
          }
        }
      }
    },
    "/management/coherence/cluster/members/{memberIdentifier}/state": {
      "get": {
        "tags": [
          "Cluster"
        ],
        "summary": "Get a get a full thread dump for the specified cluster member",
        "description": "Use this endpoint to get a full thread dump and outstanding polls for the services running on the node.",
        "operationId": "/management/coherence/cluster/members/{memberIdentifier}/state GET",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/memberIdentifier"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful request that returns the thread dump information",
            "schema": {
              "type": "object",
              "properties": {
                "state": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/management/coherence/cluster/members/{memberIdentifier}/environment": {
      "get": {
        "tags": [
          "Cluster"
        ],
        "summary": "View JVM details and system properties for the specified cluster member",
        "description": "Use this endpoint to retrieve environment information for the specified cluster member. This includes details of the JVM as well as system properties.",
        "operationId": "/management/coherence/cluster/members/{memberIdentifier}/environment GET",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/memberIdentifier"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful request that returns the environment information",
            "schema": {
              "type": "object",
              "properties": {
                "environment": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/management/coherence/cluster/members/{memberIdentifier}/description": {
      "get": {
        "tags": [
          "Cluster"
        ],
        "summary": "Get member description.",
        "description": "Use this endpoint to retrieve member description.",
        "operationId": "/management/coherence/cluster/members/{memberIdentifier}/description GET",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/memberIdentifier"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful request that returns the member description",
            "schema": {
              "type": "object",
              "properties": {
                "description": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/management/coherence/cluster/reporters": {
      "get": {
        "tags": [
          "Reporter"
        ],
        "summary": "View Reporter Members",
        "description": "Use this endpoint to list all reporters of a Coherence cluster.",
        "operationId": "/management/coherence/cluster/reporters GET",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "A successful request that lists Coherence cluster reporters",
            "schema": {
              "type": "object",
              "properties": {
                "items": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/reporter"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Reporter"
        ],
        "summary": "Update Reporter configuration parameters on all the Members",
        "description": "Use this endpoint to update the reporter configuration parameters for all the members.",
        "operationId": "/management/coherence/cluster/reporters POST",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/reporter"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful request that updates the reporter parameters for all the members"
          }
        }
      }
    },
    "/management/coherence/cluster/reporters/start": {
      "post": {
        "tags": [
          "Reporter"
        ],
        "summary": "Start the Reporter on all cluster members",
        "description": "Use this endpoint to force all reporters to start",
        "operationId": "/management/coherence/cluster/reporters/start POST",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Command invocation is successful"
          }
        }
      }
    },
    "/management/coherence/cluster/reporters/stop": {
      "post": {
        "tags": [
          "Reporter"
        ],
        "summary": "Stop the Reporter on all the cluster members",
        "description": "Use this endpoint to force all the reporters to stop",
        "operationId": "/management/coherence/cluster/reporters/stop POST",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Command invocation is successful"
          }
        }
      }
    },
    "/management/coherence/cluster/reporters/resetStatistics": {
      "post": {
        "tags": [
          "Reporter"
        ],
        "summary": "Reset Reporter Statistics on all cluster members",
        "description": "Use this endpoint to clear the current statistics for all reporters",
        "operationId": "/management/coherence/cluster/reporters/resetStatistics POST",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Command invocation is successful"
          }
        }
      }
    },
    "/management/coherence/cluster/reporters/{memberIdentifier}": {
      "get": {
        "tags": [
          "Reporter"
        ],
        "summary": "View Reporter Information of a Member",
        "description": "Use this endpoint to view reporter information for a specific member of the cluster.",
        "operationId": "/management/coherence/cluster/reporters/{memberIdentifier} GET",
        "produces": [
          "application/json"
        ],
        "parameters": [
        {
          "$ref": "#/parameters/memberIdentifier"
        }
        ],
        "responses": {
          "200": {
            "description": "A successful request that returns information about a Coherence cluster reporter",
            "schema": {
              "$ref": "#/definitions/reporter"
            }
          }
        }
      },
      "post": {
        "tags": [
          "Reporter"
        ],
        "summary": "Update Reporter Information of a Member",
        "description": "Use this endpoint to update the configuration parameters for a reporter member.",
        "operationId": "/management/coherence/cluster/reporters/{memberIdentifier} POST",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/memberIdentifier"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/reporter"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful request that updates the reporter parameters for a member"
          }
        }
      }
    },
    "/management/coherence/cluster/reporters/{memberIdentifier}/stop": {
      "post": {
        "tags": [
          "Reporter"
        ],
        "summary": "Stop the Reporter",
        "description": "Use this endpoint to force a specific reporter to stop",
        "operationId": "/management/coherence/cluster/reporters/{memberIdentifier}/stop POST",
        "produces": [
          "application/json"
        ],
        "parameters": [
        {
          "$ref": "#/parameters/memberIdentifier"
        }
        ],
        "responses": {
          "200": {
            "description": "Command invocation is successful"
          }
        }
      }
    },
    "/management/coherence/cluster/reporters/{memberIdentifier}/start": {
      "post": {
        "tags": [
          "Reporter"
        ],
        "summary": "Start the Reporter",
        "description": "Use this endpoint to force a specific reporter to start",
        "operationId": "/management/coherence/cluster/reporters/{memberIdentifier}/start POST",
        "produces": [
          "application/json"
        ],
        "parameters": [
        {
          "$ref": "#/parameters/memberIdentifier"
        }
        ],
        "responses": {
          "200": {
            "description": "Command invocation is successful"
          }
        }
      }
    },
    "/management/coherence/cluster/reporters/{memberIdentifier}/resetStatistics": {
      "post": {
        "tags": [
          "Reporter"
        ],
        "summary": "Reset Reporter Statistics of a member",
        "description": "Use this endpoint to clear the current statistics for a specific reporter.",
        "operationId": "/management/coherence/cluster/reporters/{memberIdentifier}/resetStatistics POST",
        "produces": [
          "application/json"
        ],
        "parameters": [
        {
          "$ref": "#/parameters/memberIdentifier"
        }
        ],
        "responses": {
          "200": {
            "description": "Command invocation is successful"
          }
        }
      }
    },
    "/management/coherence/cluster/platform/memory": {
      "get": {
        "tags": [
          "Platform"
        ],
        "summary": "View Aggregated Platform Memory",
        "description": "Use this endpoint to view memory usage aggregated across all Coherence cluster members.",
        "operationId": "/management/coherence/cluster/platform/memory GET",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/role"
          },
          {
            "$ref": "#/parameters/collector"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful request that returns aggregated memory usage",
            "schema": {
              "$ref": "#/definitions/jvmMemoryAggregate"
            }
          }
        }
      }
    },
    "/management/coherence/cluster/members/{memberIdentifier}/platform/psMarkSweep": {
      "get": {
        "tags": [
          "Platform"
        ],
        "summary": "View PS Mark Sweep Information",
        "description": "Use this endpoint to view PS mark sweep information for the JVM on a specific cluster member.",
        "operationId": "/management/coherence/cluster/members/{memberIdentifier}/platform/psMarkSweep GET",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/memberIdentifier"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful request that returns PS mark sweep information"
          }
        }
      }
    },
    "/management/coherence/cluster/members/{memberIdentifier}/platform/psScavenge": {
      "get": {
        "tags": [
          "Platform"
        ],
        "summary": "View PS Scavenge Information",
        "description": "Use this endpoint to view PS scavenge information for the JVM on a specific cluster member.",
        "operationId": "/management/coherence/cluster/members/{memberIdentifier}/platform/psScavenge GET",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/memberIdentifier"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful request that returns PS scavenge information"
          }
        }
      }
    },
    "/management/coherence/cluster/members/{memberIdentifier}/platform/psOldGen": {
      "get": {
        "tags": [
          "Platform"
        ],
        "summary": "View PS Old Gen Information",
        "description": "Use this endpoint to view PS old gen information for the JVM on a specific cluster member.",
        "operationId": "/management/coherence/cluster/members/{memberIdentifier}/platform/psOldGen GET",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/memberIdentifier"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful request that returns PS old gen information"
          }
        }
      }
    },
    "/management/coherence/cluster/members/{memberIdentifier}/platform/psSurvivorSpace": {
      "get": {
        "tags": [
          "Platform"
        ],
        "summary": "View PS Survivor Space Information",
        "description": "Use this endpoint to view PS survivor space information for the JVM on a specific cluster member.",
        "operationId": "/management/coherence/cluster/members/{memberIdentifier}/platform/psSurvivorSpace GET",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/memberIdentifier"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful request that returns PS survivor space information"
          }
        }
      }
    },
    "/management/coherence/cluster/members/{memberIdentifier}/platform/metaSpace": {
      "get": {
        "tags": [
          "Platform"
        ],
        "summary": "View Metaspace Information",
        "description": "Use this endpoint to view the Metaspace space information for the JVM on a specific cluster member.",
        "operationId": "/management/coherence/cluster/members/{memberIdentifier}/platform/metaSpace GET",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/memberIdentifier"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful request that returns Metaspace information"
          }
        }
      }
    },
    "/management/coherence/cluster/members/{memberIdentifier}/platform/psEdenSpace": {
      "get": {
        "tags": [
          "Platform"
        ],
        "summary": "View PS Eden Space Information",
        "description": "Use this endpoint to view PS eden space information for the JVM on a specific cluster member",
        "operationId": "/management/coherence/cluster/members/{memberIdentifier}/platform/psEdenSpace GET",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/memberIdentifier"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful request that returns PS eden space information"
          }
        }
      }
    },
    "/management/coherence/cluster/members/{memberIdentifier}/platform/compressedClassSpace": {
      "get": {
        "tags": [
          "Platform"
        ],
        "summary": "View Compressed Class Space Information",
        "description": "Use this endpoint to view compressed class space information for the JVM on a specific cluster member.",
        "operationId": "/management/coherence/cluster/members/{memberIdentifier}/platform/compressedClassSpace GET",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/memberIdentifier"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful request that returns Compressed classpace information"
          }
        }
      }
    },
    "/management/coherence/cluster/members/{memberIdentifier}/platform/g1CodeHeapProfiledNMethods": {
      "get": {
        "tags": [
          "Platform"
        ],
        "summary": "View G1 Profiled Methods Code Heap Information",
        "description": "Use this endpoint to view G1 profiled methods code heap information for the JVM on a specific cluster member.",
        "operationId": "/management/coherence/cluster/members/{memberIdentifier}/platform/g1CodeHeapProfiledNMethods GET",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/memberIdentifier"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful request that returns G1 profiled methods code heap information"
          }
        }
      }
    },
    "/management/coherence/cluster/members/{memberIdentifier}/platform/g1SurvivorSpace": {
      "get": {
        "tags": [
          "Platform"
        ],
        "summary": "View G1 Survivor Space Information",
        "description": "Use this endpoint to view G1 survivor space information for the JVM on a specific cluster member.",
        "operationId": "/management/coherence/cluster/members/{memberIdentifier}/platform/g1SurvivorSpace GET",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/memberIdentifier"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful request that returns G1 survivor space information"
          }
        }
      }
    },
    "/management/coherence/cluster/members/{memberIdentifier}/platform/g1CodeHeapNonNMethods": {
      "get": {
        "tags": [
          "Platform"
        ],
        "summary": "View G1 Non-profiled Methods Code Heap Information",
        "description": "Use this endpoint to view G1 non-profiled methods code heap information for the JVM on a specific cluster member.",
        "operationId": "/management/coherence/cluster/members/{memberIdentifier}/platform/g1CodeHeapNonNMethods GET",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/memberIdentifier"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful request that returns G1 non-profiled methods code heap information"
          }
        }
      }
    },
    "/management/coherence/cluster/members/{memberIdentifier}/platform/g1MetaSpaceManager": {
      "get": {
        "tags": [
          "Platform"
        ],
        "summary": "View G1 Metaspace Manager Information",
        "description": "Use this endpoint to view G1 Metaspace manager information for the JVM on a specific cluster member.",
        "operationId": "/management/coherence/cluster/members/{memberIdentifier}/platform/g1MetaSpaceManager GET",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/memberIdentifier"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful request that returns G1 Metaspace manager information"
          }
        }
      }
    },
    "/management/coherence/cluster/members/{memberIdentifier}/platform/g1OldGeneration": {
      "get": {
        "tags": [
          "Platform"
        ],
        "summary": "View G1 Old Generation Information",
        "description": "Use this endpoint to view G1 old generation information for the JVM on a specific cluster member.",
        "operationId": "/management/coherence/cluster/members/{memberIdentifier}/platform/g1OldGeneration GET",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/memberIdentifier"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful request that returns G1 old generation information"
          }
        }
      }
    },
    "/management/coherence/cluster/members/{memberIdentifier}/platform/g1OldGen": {
      "get": {
        "tags": [
          "Platform"
        ],
        "summary": "View G1 Old Gen Information",
        "description": "Use this endpoint to view G1 old gen information for the JVM on a specific cluster member.",
        "operationId": "/management/coherence/cluster/members/{memberIdentifier}/platform/g1OldGen GET",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/memberIdentifier"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful request that returns G1 old gen information"
          }
        }
      }
    },
    "/management/coherence/cluster/members/{memberIdentifier}/platform/g1YoungGeneration": {
      "get": {
        "tags": [
          "Platform"
        ],
        "summary": "View G1 Young Generation Information",
        "description": "Use this endpoint to view G1 young generation information for the JVM on a specific cluster member.",
        "operationId": "/management/coherence/cluster/members/{memberIdentifier}/platform/g1YoungGeneration GET",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/memberIdentifier"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful request that returns G1 young generation information"
          }
        }
      }
    },
    "/management/coherence/cluster/members/{memberIdentifier}/platform/g1EdenSpace": {
      "get": {
        "tags": [
          "Platform"
        ],
        "summary": "View G1 Eden Space Information",
        "description": "Use this endpoint to view G1 eden space information for the JVM on a specific cluster member.",
        "operationId": "/management/coherence/cluster/members/{memberIdentifier}/platform/g1EdenSpace GET",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/memberIdentifier"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful request that returns G1 eden space information"
          }
        }
      }
    },
    "/management/coherence/cluster/members/{memberIdentifier}/platform/g1CodeCacheManager": {
      "get": {
        "tags": [
          "Platform"
        ],
        "summary": "View G1 Codecache Manager Information",
        "description": "Use this endpoint to view G1 code cache manager information for the JVM on a specific cluster member.",
        "operationId": "/management/coherence/cluster/members/{memberIdentifier}/platform/g1CodeCacheManager GET",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/memberIdentifier"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful request that returns G1 code cache manager information"
          }
        }
      }
    },
    "/management/coherence/cluster/journal/flash": {
      "get": {
        "tags": [
          "Journal"
        ],
        "summary": "View Flash Journal",
        "description": "Use this endpoint to view flash journal information. The information is aggregated across all flash journal members in a Coherence cluster. Use the query parameters to change which aggregated results to view and whether the results should be constrained to cluster members with a specific member role.",
        "operationId": "/management/coherence/cluster/journal/flash GET",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/role"
          },
          {
            "$ref": "#/parameters/collector"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful request that returns information about the flash journal"
          }
        }
      }
    },
    "/management/coherence/cluster/journal/flash/compact": {
      "post": {
        "tags": [
          "Journal"
        ],
        "summary": "Compact Flash Journal",
        "description": "Use this endpoint to compact (garbage collect) journal files on all the flash journal members in a cluster.",
        "operationId": "/management/coherence/cluster/journal/flash/compact POST",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Command invocation is successful"
          }
        }
      }
    },
    "/management/coherence/cluster/journal/flash/members": {
      "get": {
        "tags": [
          "Journal"
        ],
        "summary": "View Flash Journal Members",
        "description": "Use this endpoint to list the flash journal members of a Coherence cluster.",
        "operationId": "/management/coherence/cluster/journal/flash/members GET",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "A successful request that lists flash journal members",
            "schema": {
              "type": "object",
              "properties": {
                "items": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/journalRM"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/management/coherence/cluster/journal/flash/members/{memberIdentifier}": {
      "get": {
        "tags": [
          "Journal"
        ],
        "summary": "Flash Journal Member Information",
        "description": "Use this endpoint to view detailed operational and performance statistics for a flash journal member. The information includes data about the journal size and journal usage. You can also view flash journal settings.",
        "operationId": "/management/coherence/cluster/journal/flash/members/{memberIdentifier} GET",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/memberIdentifier"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful request that returns information about a flash journal member",
            "schema": {
              "$ref": "#/definitions/journalRM"
            }
          }
        }
      }
    },
    "/management/coherence/cluster/journal/flash/members/{memberIdentifier}/compact": {
      "post": {
        "tags": [
          "Journal"
        ],
        "summary": "Compact a Flash Journal Member",
        "description": "Use this endpoint to compact (garbage collect) journal files on a flash journal member.",
        "operationId": "/management/coherence/cluster/journal/flash/members/{memberIdentifier}/compact POST",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/memberIdentifier"
          }
        ],
        "responses": {
          "200": {
            "description": "Command invocation is successful"
          }
        }
      }
    },
    "/management/coherence/cluster/journal/flash/resetStatistics": {
      "post": {
        "tags": [
          "Journal"
        ],
        "summary": "Reset Flash Journal Statistics",
        "description": "Use this endpoint to clear the current statistics for all the members.",
        "operationId": "/management/coherence/cluster/journal/flash/resetStatistics POST",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Command invocation is successful"
          }
        }
      }
    },
    "/management/coherence/cluster/journal/ram": {
      "get": {
        "tags": [
          "Journal"
        ],
        "summary": "RAM Journal",
        "description": "Use this endpoint to view RAM journal information. The information is aggregated across all RAM journal members in a Coherence cluster. Use the query parameters to change which aggregated results to view and whether the results should be constrained to cluster members with a specific member role.",
        "operationId": "/management/coherence/cluster/journal/ram GET",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/role"
          },
          {
            "$ref": "#/parameters/collector"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful request that returns information about the RAM journal"
          }
        }
      }
    },
    "/management/coherence/cluster/journal/ram/compact": {
      "post": {
        "tags": [
          "Journal"
        ],
        "summary": "Compact RAM Journal",
        "description": "Use this endpoint to compact (garbage collect) journal files on all the RAM journal members in a cluster.",
        "operationId": "/management/coherence/cluster/journal/ram/compact POST",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Command invocation is successful"
          }
        }
      }
    },
    "/management/coherence/cluster/journal/ram/members": {
      "get": {
        "tags": [
          "Journal"
        ],
        "summary": "RAM Journal Members",
        "description": "Use this endpoint to list the flash journal members of a Coherence cluster.",
        "operationId": "/management/coherence/cluster/journal/ram/members GET",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "A successful request that lists RAM journal members",
            "schema": {
              "type": "object",
              "properties": {
                "items": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/journalRM"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/management/coherence/cluster/journal/ram/members/{memberIdentifier}": {
      "get": {
        "tags": [
          "Journal"
        ],
        "summary": "View RAM Journal Member Information",
        "description": "Use this endpoint to view detailed operational and performance statistics for a RAM journal member. The information includes data about the journal size and journal usage. You can also view RAM journal settings.",
        "operationId": "/management/coherence/cluster/journal/ram/members/{memberIdentifier} GET",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/memberIdentifier"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful request that returns information about a RAM journal member",
            "schema": {
              "$ref": "#/definitions/journalRM"
            }
          }
        }
      }
    },
    "/management/coherence/cluster/journal/ram/members/{memberIdentifier}/compact": {
      "post": {
        "tags": [
          "Journal"
        ],
        "summary": "Compact a RAM Journal Member",
        "description": "Use this endpoint to compact (garbage collect) journal files on a RAM journal member.",
        "operationId": "/management/coherence/cluster/journal/ram/members/{memberIdentifier}/compact POST",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/memberIdentifier"
          }
        ],
        "responses": {
          "200": {
            "description": "Command invocation is successful"
          }
        }
      }
    },
    "/management/coherence/cluster/journal/ram/resetStatistics": {
      "post": {
        "tags": [
          "Journal"
        ],
        "summary": "Reset RAM Journal Statistics",
        "description": "Use this endpoint to clear the current statistics for all the members.",
        "operationId": "/management/coherence/cluster/journal/ram/resetStatistics POST",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Command invocation is successful"
          }
        }
      }
    },
    "/management/coherence/cluster/services": {
      "get": {
        "tags": [
          "Service"
        ],
        "summary": "View the List of Services",
        "description": "Use this endpoint to list the services in a Coherence cluster by service name and type. Service names are often used as parameters when performing other resource operations.",
        "operationId": "/management/coherence/cluster/services GET",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "A successful request that returns the services in a Coherence cluster",
            "schema": {
              "type": "object",
              "properties": {
                "items": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/service"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/management/coherence/cluster/services/{serviceName}": {
      "get": {
        "tags": [
          "Service"
        ],
        "summary": "View Service Information",
        "description": "Use this endpoint to view performance information for a specific service in the cluster. The information is aggregated across all service members. Use the query parameters to change which aggregated results to view and  to determine whether the results should be constrained to service members with a specific member role.",
        "operationId": "/management/coherence/cluster/services/{serviceName} GET",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/serviceName"
          },
          {
            "$ref": "#/parameters/role"
          },
          {
            "$ref": "#/parameters/collector"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful request that returns performance metrics for a service",
            "schema": {
              "$ref": "#/definitions/serviceAggregate"
            }
          }
        }
      },
      "post": {
        "tags": [
          "Service"
        ],
        "summary": "Update Service Information",
        "description": "Use this endpoint to update configuration information for a specific service on all the members in the cluster.",
        "operationId": "/management/coherence/cluster/services/{serviceName} POST",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/serviceName"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/service"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful request updates the parameters for a service on all the members"
          }
        }
      }
    },
    "/management/coherence/cluster/services/{serviceName}/suspend": {
      "post": {
        "tags": [
          "Service"
        ],
        "summary": "Suspend a Service",
        "description": "Use this endpoint to suspend a specific service in all the members of a cluster",
        "operationId": "/management/coherence/cluster/services/{serviceName}/suspend POST",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/serviceName"
          }
        ],
        "responses": {
          "200": {
            "description": "Command invocation is successful"
          }
        }
      }
    },
    "/management/coherence/cluster/services/{serviceName}/resume": {
      "post": {
        "tags": [
          "Service"
        ],
        "summary": "Resume a Service",
        "description": "Use this endpoint to resume a specified service in all the members of a cluster.",
        "operationId": "/management/coherence/cluster/services/{serviceName}/resume POST",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/serviceName"
          }
        ],
        "responses": {
          "200": {
            "description": "Command invocation is successful"
          }
        }
      }
    },
    "/management/coherence/cluster/services/{serviceName}/resetStatistics": {
      "post": {
        "tags": [
          "Service"
        ],
        "summary": "Reset Service Statistics",
        "description": "Use this endpoint to clear the current statistics for all the service members.",
        "operationId": "/management/coherence/cluster/services/{serviceName}/resetStatistics POST",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/serviceName"
          }
        ],
        "responses": {
          "200": {
            "description": "Command invocation is successful"
          }
        }
      }
    },
    "/management/coherence/cluster/services/{serviceName}/start": {
      "post": {
        "tags": [
          "Service"
        ],
        "summary": "Start a Service",
        "description": "Use this endpoint to start a specific service on a cluster member.",
        "operationId": "/management/coherence/cluster/services/{serviceName}/start POST",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/serviceName"
          }
        ],
        "responses": {
          "200": {
            "description": "Command invocation is successful"
          }
        }
      }
    },
    "/management/coherence/cluster/services/{serviceName}/stop": {
      "post": {
        "tags": [
          "Service"
        ],
        "summary": "Stop a Service on all the cluster members",
        "description": "Use this endpoint to force a specific service to stop. Use the shutdown endpoint for normal service termination.",
        "operationId": "management/coherence/cluster/services/{serviceName}/stop POST",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/serviceName"
          }
        ],
        "responses": {
          "200": {
            "description": "Command invocation is successful"
          }
        }
      }
    },
    "/management/coherence/cluster/services/{serviceName}/description": {
      "post": {
        "tags": [
          "Service"
        ],
        "summary": "Get service description.",
        "description": "Use this endpoint to retrieve service description.",
        "operationId": "management/coherence/cluster/services/{serviceName}/description GET",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/serviceName"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful request that returns the service description"
          }
        }
      }
    },
    "/management/coherence/cluster/services/{serviceName}/shutdown": {
      "post": {
        "tags": [
          "Service"
        ],
        "summary": "Shutdown a Service on all the cluster members",
        "description": "Use this endpoint to perform a controlled shut-down of a specific service. Shutting down a service is preferred over stopping a service.",
        "operationId": "/management/coherence/cluster/services/{serviceName}/shutdown POST",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/serviceName"
          }
        ],
        "responses": {
          "200": {
            "description": "Command invocation is successful"
          }
        }
      }
    },
    "/management/coherence/cluster/services/{serviceName}/members": {
      "get": {
        "tags": [
          "Service"
        ],
        "summary": "View Service Members",
        "description": "Use this endpoint to list the members of a specific service.",
        "operationId": "/management/coherence/cluster/services/{serviceName}/members GET",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/serviceName"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful request that returns the members of a service",
            "schema": {
              "type": "object",
              "properties": {
                "items": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/serviceMember"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/management/coherence/cluster/services/{serviceName}/members/{memberIdentifier}": {
      "get": {
        "tags": [
          "Service"
        ],
        "summary": "View Service Member Information",
        "description": "Use this endpoint to view operational and performance information for a specified service member. Management information includes how well service tasks and requests are being executed, the current partition distribution status, the current high availability status, how well threads are performing and how well the service member is communicating with other service members. If a service is configured to use persistence, then persistence information is also reported.",
        "operationId": "/management/coherence/cluster/services/{serviceName}/members/{memberIdentifier} GET",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/serviceName"
          },
          {
            "$ref": "#/parameters/memberIdentifier"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful request that returns management information for a service member",
            "schema": {
              "$ref": "#/definitions/serviceMember"
            }
          }
        }
      }
    },
    "/management/coherence/cluster/services/{serviceName}/members/{memberIdentifier}/distributionState": {
      "get": {
        "tags": [
          "Service"
        ],
        "summary": "View Service Member Distribution State",
        "description": "Use this endpoint to view the partition distribution status for a specific service member. The status includes the partitions that remain to be transferred in order to achieve the distribution goals for the partition assignment strategy. Set the verbose parameter to true if you want the report to include details for each scheduled partition transfer.",
        "operationId": "/management/coherence/cluster/services/{serviceName}/members/{memberIdentifier}/distributionState GET",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/serviceName"
          },
          {
            "$ref": "#/parameters/memberIdentifier"
          },
          {
            "in": "query",
            "name": "verbose",
            "type": "boolean",
            "description": "True if the response needs to be verbose"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful request that returns a report about the partition distribution state",
            "schema": {
              "$ref": "#/definitions/distributionState"
            }
          }
        }
      }
    },
    "/management/coherence/cluster/services/{serviceName}/members/{memberIdentifier}/ownership": {
      "get": {
        "tags": [
          "Service"
        ],
        "summary": "View Service Member Ownership Information",
        "description": "Use this endpoint to view the partitions that are owned by a specific service member. Set the verbose parameter to true if you want to include the detailed ownership catalog in the response.",
        "operationId": "/management/coherence/cluster/services/{serviceName}/members/{memberIdentifier}/ownership GET",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/serviceName"
          },
          {
            "$ref": "#/parameters/memberIdentifier"
          },
          {
            "in": "query",
            "name": "verbose",
            "type": "boolean",
            "description": "True if the response needs to be verbose"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful request that returns a report about partition ownership",
            "schema": {
              "$ref": "#/definitions/ownership"
            }
          }
        }
      }
    },
    "/management/coherence/cluster/services/{serviceName}/members/{memberIdentifier}/proxy": {
      "get": {
        "tags": [
          "Service"
        ],
        "summary": "View Proxy Service Information",
        "description": "Use this endpoint to view operational and performance statistics for a proxy service on the specified service member. HTTP proxy information is provided if an HTTP Acceptor is configured. The information includes throughput and connection metrics for clients that connect to the cluster using the proxy service.",
        "operationId": "/management/coherence/cluster/services/{serviceName}/members/{memberIdentifier}/proxy GET",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/serviceName"
          },
          {
            "$ref": "#/parameters/memberIdentifier"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful request that returns proxy service information",
            "schema": {
              "$ref": "#/definitions/proxyInfo"
            }
          }
        }
      }
    },
    "/management/coherence/cluster/services/{serviceName}/members/{memberIdentifier}/proxy/connections": {
      "get": {
        "tags": [
          "Service"
        ],
        "summary": "View Proxy Service Connection Information",
        "description": "Use this endpoint to view a list of client connections for a proxy service on a specific service member.",
        "operationId": "/management/coherence/cluster/services/{serviceName}/members/{memberIdentifier}/proxy/connections GET",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/serviceName"
          },
          {
            "$ref": "#/parameters/memberIdentifier"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful request that returns a list of proxy connections",
            "schema": {
              "type": "object",
              "properties": {
                "items": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/proxyConnection"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/management/coherence/cluster/services/{serviceName}/members/{memberIdentifier}/proxy/resetStatistics": {
      "post": {
        "tags": [
          "Service"
        ],
        "summary": "Reset Connection Manager Statistics",
        "description": "Use this endpoint to clear the current statistics for a specific connection manager member.",
        "operationId": "/management/coherence/cluster/services/{serviceName}/members/{memberIdentifier}/proxy/resetStatistics POST",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/serviceName"
          },
          {
            "$ref": "#/parameters/memberIdentifier"
          }
        ],
        "responses": {
          "200": {
            "description": "Command invocation is successful"
          }
        }
      }
    },
    "/management/coherence/cluster/services/{serviceName}/members/{memberIdentifier}/resetStatistics": {
      "post": {
        "tags": [
          "Service"
        ],
        "summary": "Reset Service Statistics",
        "description": "Use this endpoint to clear the current statistics for a specific service member.",
        "operationId": "/management/coherence/cluster/services/{serviceName}/members/{memberIdentifier}/resetStatistics POST",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/memberIdentifier"
          },
          {
            "$ref": "#/parameters/serviceName"
          }
        ],
        "responses": {
          "200": {
            "description": "Command invocation is successful"
          }
        }
      }
    },
    "/management/coherence/cluster/services/{serviceName}/members/{memberIdentifier}/stop": {
      "post": {
        "tags": [
          "Service"
        ],
        "summary": "Stop a Service",
        "description": "Use this endpoint to force a specific service to stop. Use the shutdown endpoint for normal service termination.",
        "operationId": "management/coherence/cluster/services/{serviceName}/members/{memberIdentifier}/stop POST",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/memberIdentifier"
          },
          {
            "$ref": "#/parameters/serviceName"
          }
        ],
        "responses": {
          "200": {
            "description": "Command invocation is successful"
          }
        }
      }
    },
    "/management/coherence/cluster/services/{serviceName}/members/{memberIdentifier}/shutdown": {
      "post": {
        "tags": [
          "Service"
        ],
        "summary": "Shutdown a Service",
        "description": "Use this endpoint to perform a controlled shut-down of a specific service. Shutting down a service is preferred over stopping a service.",
        "operationId": "/management/coherence/cluster/services/{serviceName}/members/{memberIdentifier}/shutdown POST",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/memberIdentifier"
          },
          {
            "$ref": "#/parameters/serviceName"
          }
        ],
        "responses": {
          "200": {
            "description": "Command invocation is successful"
          }
        }
      }
    },
    "/management/coherence/cluster/services/{serviceName}/members/{memberIdentifier}/start": {
      "post": {
        "tags": [
          "Service"
        ],
        "summary": "Start a Service",
        "description": "Use this endpoint to start a specific service on a cluster member.",
        "operationId": "/management/coherence/cluster/services/{serviceName}/members/{memberIdentifier}/start POST",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/memberIdentifier"
          },
          {
            "$ref": "#/parameters/serviceName"
          }
        ],
        "responses": {
          "200": {
            "description": "Command invocation is successful"
          }
        }
      }
    },
    "/management/coherence/cluster/services/{serviceName}/caches": {
      "get": {
        "tags": [
          "Cache"
        ],
        "summary": "View Caches by Service",
        "description": "Use this endpoint to view a list of caches that are managed by a specific service. Cache names are often used as parameters when performing other resource operations.",
        "operationId": "/management/coherence/cluster/services/{serviceName}/caches GET",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/serviceName"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful request that returns a list of caches",
            "schema": {
              "type": "object",
              "properties": {
                "items": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/cache"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/management/coherence/cluster/services/{serviceName}/caches/{cacheName}": {
      "get": {
        "tags": [
          "Cache"
        ],
        "summary": "View Cache Information by Service",
        "description": "Use this endpoint to view general statistics for a cache that is managed by a specific service. The information is aggregated across all cache members. Use the query parameters to change which aggregated results to view and whether the results should be constrained to cluster members with a specific member role.",
        "operationId": "/management/coherence/cluster/services/{serviceName}/caches/{cacheName} GET",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/serviceName"
          },
          {
            "$ref": "#/parameters/cacheName"
          },
          {
            "$ref": "#/parameters/role"
          },
          {
            "$ref": "#/parameters/collector"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful request that returns information about a cache",
            "schema": {
              "$ref": "#/definitions/cacheAggregate"
            }
          }
        }
      },
      "post": {
        "tags": [
          "Cache"
        ],
        "summary": "Update the cache configuration parameters on all the Members.",
        "description": "Use this endpoint to update the configuration parameters for all the members that is managed by a specific service.",
        "operationId": "/management/coherence/cluster/services/{serviceName}/caches/{cacheName}/ POST",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/serviceName"
          },
          {
            "$ref": "#/parameters/cacheName"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/cacheMember"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful request that updates the cache parameters on all the members"
          }
        }
      }
    },
    "/management/coherence/cluster/services/{serviceName}/caches/{cacheName}/resetStatistics": {
      "post": {
        "tags": [
          "Cache"
        ],
        "summary": "Reset Cache Statistics by Service",
        "description": "Use this endpoint to clear the current statistics for a cache that is managed by a specific service.",
        "operationId": "/management/coherence/cluster/services/{serviceName}/caches/{cacheName}/resetStatistics POST",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/serviceName"
          },
          {
            "$ref": "#/parameters/cacheName"
          }
        ],
        "responses": {
          "200": {
            "description": "Command invocation is successful"
          }
        }
      }
    },
    "/management/coherence/cluster/services/{serviceName}/caches/{cacheName}/members": {
      "get": {
        "tags": [
          "Cache"
        ],
        "summary": "View Cache Members by Service",
        "description": "Use this endpoint to list the members of a cache that is managed by a specific service.",
        "operationId": "/management/coherence/cluster/services/{serviceName}/caches/{cacheName}/members GET",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/serviceName"
          },
          {
            "$ref": "#/parameters/cacheName"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful request that lists cache members",
            "schema": {
              "type": "object",
              "properties": {
                "items": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/cacheMember"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/management/coherence/cluster/services/{serviceName}/caches/{cacheName}/members/{memberIdentifier}": {
      "get": {
        "tags": [
          "Cache"
        ],
        "summary": "View Cache Member Information by Service",
        "description": "Use this endpoint to view detailed operational and performance statistics for a cache that is managed by a specific service. The information includes data about cache operations, cache events, cache listeners, cache queries, and cache storage. You can also view many cache settings.",
        "operationId": "/management/coherence/cluster/services/{serviceName}/caches/{cacheName}/members/{memberIdentifier} GET",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/serviceName"
          },
          {
            "$ref": "#/parameters/cacheName"
          },
          {
            "$ref": "#/parameters/memberIdentifier"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful request that returns information about a cache",
            "schema": {
              "$ref": "#/definitions/cacheMember"
            }
          }
        }
      },
      "post": {
        "tags": [
          "Cache"
        ],
        "summary": "Update a Cache Member",
        "description": "Use this endpoint to update the configuration parameters for a cache member that is managed by a specific service.",
        "operationId": "/management/coherence/cluster/services/{serviceName}/caches/{cacheName}/members/{memberIdentifier} POST",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/serviceName"
          },
          {
            "$ref": "#/parameters/cacheName"
          },
          {
            "$ref": "#/parameters/memberIdentifier"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/cacheMember"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful request that updates the cache parameters"
          }
        }
      }
    },
    "/management/coherence/cluster/services/{serviceName}/caches/{cacheName}/members/{memberIdentifier}/resetStatistics": {
      "post": {
        "tags": [
          "Cache"
        ],
        "summary": "Reset Cache Statistics by Service",
        "description": "Use this endpoint to clear the current statistics for a cache that is managed by a specific service.",
        "operationId": "/management/coherence/cluster/services/{serviceName}/caches/{cacheName}/members/{memberIdentifier}/resetStatistics POST",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/serviceName"
          },
          {
            "$ref": "#/parameters/memberIdentifier"
          },
          {
            "$ref": "#/parameters/cacheName"
          }
        ],
        "responses": {
          "200": {
            "description": "Command invocation is successful"
          }
        }
      }
    },
    "/management/coherence/cluster/services/{serviceName}/views": {
      "get": {
        "tags": [
          "View Cache"
        ],
        "summary": "View Caches by Service",
        "description": "Use this endpoint to view a list of view caches that are managed by a specific service. Cache names are often used as parameters when performing other resource operations.",
        "operationId": "/management/coherence/cluster/services/{serviceName}/views GET",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/serviceName"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful request that returns a list of view caches",
            "schema": {
              "type": "object",
              "properties": {
                "items": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/viewAggregate"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/management/coherence/cluster/services/{serviceName}/views/{viewName}": {
      "get": {
        "tags": [
          "View Cache"
        ],
        "summary": "View Cache Information by Service",
        "description": "Use this endpoint to view general statistics for a view cache that is managed by a specific service. The information is aggregated across all cache members. Use the query parameters to change which aggregated results to view and whether the results should be constrained to cluster members with a specific member role.",
        "operationId": "/management/coherence/cluster/services/{serviceName}/views/{viewName} GET",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/serviceName"
          },
          {
            "$ref": "#/parameters/viewName"
          },
          {
            "$ref": "#/parameters/role"
          },
          {
            "$ref": "#/parameters/collector"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful request that returns information about a view cache",
            "schema": {
              "$ref": "#/definitions/viewAggregate"
            }
          }
        }
      }
    },
    "/management/coherence/cluster/services/{serviceName}/views/{viewName}/members": {
      "get": {
        "tags": [
          "View Cache"
        ],
        "summary": "View Cache Members by Service",
        "description": "Use this endpoint to list the members of a view cache that is managed by a specific service.",
        "operationId": "/management/coherence/cluster/services/{serviceName}/views/{viewName}/members GET",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/serviceName"
          },
          {
            "$ref": "#/parameters/viewName"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful request that lists view cache members",
            "schema": {
              "type": "object",
              "properties": {
                "items": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/viewMember"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/management/coherence/cluster/services/{serviceName}/views/{viewName}/members/{memberIdentifier}": {
      "get": {
        "tags": [
          "View Cache"
        ],
        "summary": "View Cache Member Information by Service",
        "description": "Use this endpoint to view detailed operational and performance statistics for a view cache that is managed by a specific service. The information includes data about cache operations, cache events, cache listeners, cache queries, and cache storage. You can also view many cache settings.",
        "operationId": "/management/coherence/cluster/services/{serviceName}/views/{viewName}/members/{memberIdentifier} GET",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/serviceName"
          },
          {
            "$ref": "#/parameters/viewName"
          },
          {
            "$ref": "#/parameters/memberIdentifier"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful request that returns information about a view cache",
            "schema": {
              "$ref": "#/definitions/viewMember"
            }
          }
        }
      }
    },
    "/management/coherence/cluster/caches": {
      "get": {
        "tags": [
          "Cache (Short Form)"
        ],
        "summary": "View Caches",
        "description": "Use this endpoint to view a list of caches in the cluster. Cache names are often used as parameters when performing other cache resource operations.",
        "operationId": "/management/coherence/cluster/caches GET",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "A successful request that returns a list of caches",
            "schema": {
              "type": "object",
              "properties": {
                "items": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/cache"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/management/coherence/cluster/caches/{cacheName}": {
      "get": {
        "tags": [
          "Cache (Short Form)"
        ],
        "summary": "View Cache Information",
        "description": "Use this endpoint to view general statistics for a cache. The information is aggregated across all cache members. Use the query parameters to change which aggregated results to view and to determine whether the results should be constrained to cluster members with a specific member role.",
        "operationId": "/management/coherence/cluster/caches/{cacheName} GET",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/cacheName"
          },
          {
            "$ref": "#/parameters/role"
          },
          {
            "$ref": "#/parameters/collector"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful request that returns information about a cache",
            "schema": {
              "$ref": "#/definitions/cacheAggregate"
            }
          }
        }
      }
    },
    "/management/coherence/cluster/caches/{cacheName}/members": {
      "get": {
        "tags": [
          "Cache (Short Form)"
        ],
        "summary": "View Cache Members",
        "description": "Use this endpoint to list the members of a cache.",
        "operationId": "/management/coherence/cluster/caches/{cacheName}/members GET",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/cacheName"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful request that lists cache members",
            "schema": {
              "type": "object",
              "properties": {
                "items": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/cacheMember"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/management/coherence/cluster/caches/{cacheName}/members/{memberIdentifier}": {
      "get": {
        "tags": [
          "Cache (Short Form)"
        ],
        "summary": "View Cache Member Information",
        "description": "Use this endpoint to view detailed operational and performance statistics for a cache. The information includes data about cache operations, cache events, cache listeners, cache queries, and cache storage. You can also view many cache settings.",
        "operationId": "/management/coherence/cluster/caches/{cacheName}/members/{memberIdentifier} GET",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/cacheName"
          },
          {
            "$ref": "#/parameters/memberIdentifier"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful request that returns information about a cache",
            "schema": {
              "$ref": "#/definitions/cacheMember"
            }
          }
        }
      },
      "post": {
        "tags": [
          "Cache (Short Form)"
        ],
        "summary": "Update Cache Member",
        "description": "Update parameters of a cache member",
        "operationId": "/management/coherence/cluster/caches/{cacheName}/members/{memberIdentifier} POST",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/cacheName"
          },
          {
            "$ref": "#/parameters/memberIdentifier"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/cacheMember"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Cache member updated successfully"
          }
        }
      }
    },
    "/management/coherence/cluster/caches/{cacheName}/members/{memberIdentifier}/resetStatistics": {
      "post": {
        "tags": [
          "Cache (Short Form)"
        ],
        "summary": "Reset Cache Statistics",
        "description": "Use this endpoint to clear the current statistics for a specific cache.",
        "operationId": "/management/coherence/cluster/caches/{cacheName}/members/{memberIdentifier}/resetStatistics POST",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/memberIdentifier"
          },
          {
            "$ref": "#/parameters/cacheName"
          }
        ],
        "responses": {
          "200": {
            "description": "Command invocation is successful"
          }
        }
      }
    },
    "/management/coherence/cluster/views": {
      "get": {
        "tags": [
          "View Cache (Short Form)"
        ],
        "summary": "View Caches",
        "description": "Use this endpoint to view a list of view caches in the cluster. View cache names are often used as parameters when performing other cache resource operations.",
        "operationId": "/management/coherence/cluster/views GET",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "A successful request that returns a list of caches",
            "schema": {
              "type": "object",
              "properties": {
                "items": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/viewAggregate"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/management/coherence/cluster/views/{viewName}": {
      "get": {
        "tags": [
          "View Cache (Short Form)"
        ],
        "summary": "View Cache Information",
        "description": "Use this endpoint to view general statistics for a view cache. The information is aggregated across all cache members. Use the query parameters to change which aggregated results to view and to determine whether the results should be constrained to cluster members with a specific member role.",
        "operationId": "/management/coherence/cluster/views/{viewName} GET",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/viewName"
          },
          {
            "$ref": "#/parameters/role"
          },
          {
            "$ref": "#/parameters/collector"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful request that returns information about a view",
            "schema": {
              "$ref": "#/definitions/viewAggregate"
            }
          }
        }
      }
    },
    "/management/coherence/cluster/views/{viewName}/members": {
      "get": {
        "tags": [
          "View Cache (Short Form)"
        ],
        "summary": "View Cache Members",
        "description": "Use this endpoint to list the members of a cache.",
        "operationId": "/management/coherence/cluster/views/{viewName}/members GET",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/viewName"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful request that lists view cache members",
            "schema": {
              "type": "object",
              "properties": {
                "items": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/viewMember"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/management/coherence/cluster/views/{viewName}/members/{memberIdentifier}": {
      "get": {
        "tags": [
          "Cache (Short Form)"
        ],
        "summary": "View Cache Member Information",
        "description": "Use this endpoint to view detailed operational and performance statistics for a view cache. The information includes data about cache operations, cache events, cache listeners, cache queries, and cache storage. You can also view many cache settings.",
        "operationId": "/management/coherence/cluster/views/{viewName}/members/{memberIdentifier} GET",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/viewName"
          },
          {
            "$ref": "#/parameters/memberIdentifier"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful request that returns information about a view cache",
            "schema": {
              "$ref": "#/definitions/cacheMember"
            }
          }
        }
      }
    },
    "/management/coherence/cluster/services/{serviceName}/persistence": {
      "get": {
        "tags": [
          "Persistence"
        ],
        "summary": "View Persistence Coordinator Information",
        "description": "Use this endpoint to view the status of the persistence coordinator.",
        "operationId": "/management/coherence/cluster/services/{serviceName}/persistence GET",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/serviceName"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful request that returns persistence coordinator information",
            "schema": {
              "$ref": "#/definitions/persistenceCoordinator"
            }
          }
        }
      }
    },
    "/management/coherence/cluster/services/{serviceName}/persistence/forceRecovery": {
      "post": {
        "tags": [
          "Persistence"
        ],
        "summary": "Force Recovery",
        "description": "Use this endpoint to proceed with recovery despite the dynamic quorum policy objections. This may lead to the partial or full data loss of the corresponding cache service.",
        "operationId": "/management/coherence/cluster/services/{serviceName}/persistence/forceRecovery POST",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/serviceName"
          }
        ],
        "responses": {
          "200": {
            "description": "Command invocation successful"
          }
        }
      }
    },
    "/management/coherence/cluster/services/{serviceName}/persistence/snapshots": {
      "get": {
        "tags": [
          "Persistence"
        ],
        "summary": "View Snapshots",
        "description": "Use this endpoint to view a list of snapshot identifiers that are available to recover from.",
        "operationId": "/management/coherence/cluster/services/{serviceName}/persistence/snapshots GET",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/serviceName"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful request that returns a list of snapshots",
            "schema": {
              "type": "object",
              "properties": {
                "snapshots": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/management/coherence/cluster/services/{serviceName}/persistence/snapshots/{snapshotName}": {
      "post": {
        "tags": [
          "Persistence"
        ],
        "summary": "Create a Snapshot",
        "description": "Use this endpoint to create a snapshot of a service with a specific snapshot name. The operation is asynchronous.",
        "operationId": "/management/coherence/cluster/services/{serviceName}/persistence/snapshots/{snapshotName} POST",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/serviceName"
          },
          {
            "$ref": "#/parameters/snapshotName"
          }
        ],
        "responses": {
          "200": {
            "description": "Command invocation successful"
          }
        }
      },
      "delete": {
        "tags": [
          "Persistence"
        ],
        "summary": "Delete a snapshot",
        "description": "Use this endpoint to remove a snapshot with a specific name. The operation is asynchronous.",
        "operationId": "/management/coherence/cluster/services/{serviceName}/persistence/snapshots/{snapshotName} DELETE",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/serviceName"
          },
          {
            "$ref": "#/parameters/snapshotName"
          }
        ],
        "responses": {
          "200": {
            "description": "Command invocation successful"
          }
        }
      }
    },
    "/management/coherence/cluster/services/{serviceName}/persistence/snapshots/{snapshotName}/recover": {
      "post": {
        "tags": [
          "Persistence"
        ],
        "summary": "Recover a Snapshot",
        "description": "Use this endpoint to recover a snapshot of a service with a specific snapshot name. The operation is asynchronous.",
        "operationId": "/management/coherence/cluster/services/{serviceName}/persistence/snapshots/{snapshotName}/recover POST",
        "produces": [
          "application/json"
        ],
        "parameters": [
        {
          "$ref": "#/parameters/serviceName"
        },
        {
          "$ref": "#/parameters/snapshotName"
        }
        ],
        "responses": {
          "200": {
            "description": "Command invocation successful"
          }
        }
      }
    },
    "/management/coherence/cluster/services/{serviceName}/persistence/archives": {
      "get": {
        "tags": [
          "Persistence"
        ],
        "summary": "View Snapshot Archives",
        "description": "Use this endpoint to view a list of archived snapshots for the service.",
        "operationId": "/management/coherence/cluster/services/{serviceName}/persistence/archives GET",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/serviceName"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful request that returns a list of archived snapshots",
            "schema": {
              "type": "object",
              "properties": {
                "snapshots": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/management/coherence/cluster/services/{serviceName}/persistence/archives/{snapshotName}": {
      "post": {
        "tags": [
          "Persistence"
        ],
        "summary": "Create a Snapshot Archive",
        "description": "Use this endpoint to archive a specific snapshot to a centralized location. This operation is asynchronous.",
        "operationId": "/management/coherence/cluster/services/{serviceName}/persistence/archives/{snapshotName} POST",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/serviceName"
          },
          {
            "$ref": "#/parameters/snapshotName"
          }
        ],
        "responses": {
          "200": {
            "description": "Command invocation successful"
          }
        }
      },
      "delete": {
        "tags": [
          "Persistence"
        ],
        "summary": "Delete a Snapshot Archive",
        "description": "Use this endpoint to delete a specific snapshot archive.",
        "operationId": "/management/coherence/cluster/services/{serviceName}/persistence/archives/{snapshotName} DELETE",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/serviceName"
          },
          {
            "$ref": "#/parameters/snapshotName"
          }
        ],
        "responses": {
          "200": {
            "description": "Command invocation successful"
          }
        }
      }
    },
    "/management/coherence/cluster/services/{serviceName}/persistence/archives/{snapshotName}/retrieve": {
      "post": {
        "tags": [
          "Persistence"
        ],
        "summary": "Retrieve a Snapshot Archive",
        "description": "Use this endpoint to retrieve the archived snapshot from a centralized location to the snapshot directory. This operation is asynchronous",
        "operationId": "/management/coherence/cluster/services/{serviceName}/persistence/archives/{snapshotName}/retrieve POST",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/serviceName"
          },
          {
            "$ref": "#/parameters/snapshotName"
          }
        ],
        "responses": {
          "200": {
            "description": "Command invocation successful"
          }
        }
      }
    },
    "/management/coherence/cluster/services/{serviceName}/persistence/archiveStores/{snapshotName}": {
      "get": {
        "tags": [
          "Persistence"
        ],
        "summary": "View Snapshot Archive Stores",
        "description": "Use this endpoint to view a list of archive stores for a specific snapshot.",
        "operationId": "/management/coherence/cluster/services/{serviceName}/persistence/archiveStores/{snapshotName} GET",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/serviceName"
          },
          {
            "$ref": "#/parameters/snapshotName"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful request that lists archive stores for a specific snapshot",
            "schema": {
              "type": "object",
              "properties": {
                "snapshots": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/management/coherence/cluster/services/persistence/snapshots/{snapshotName}": {
      "post": {
        "tags": [
          "Persistence"
        ],
        "summary": "Create a Snapshot across all Services",
        "description": "Use this endpoint to create a snapshot across all persistence enabled services with a specific snapshot name. The operation is asynchronous and does not (currently) perform a safe snapshot across all services (i.e. all or nothing).",
        "operationId": "/management/coherence/cluster/services/persistence/snapshots/{snapshotName} POST",
        "produces": [
          "application/json"
        ],
        "parameters": [
        {
          "$ref": "#/parameters/snapshotName"
        }
        ],
        "responses": {
          "200": {
            "description": "Command invocation successful"
          }
        }
      }
    },
    "/management/coherence/cluster/services/{serviceName}/federation": {
      "get": {
        "tags": [
          "Federation"
        ],
        "summary": "View Federation Coordinator Information",
        "description": "Use this endpoint to view the status of the federation coordinator for a specific federated service.",
        "operationId": "/management/coherence/cluster/services/{serviceName}/federation GET",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/serviceName"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful request that returns federation coordinator information",
            "schema": {
              "$ref": "#/definitions/federationCoordinator"
            }
          }
        }
      }
    },
    "/management/coherence/cluster/services/{serviceName}/federation/pendingIncomingMessages": {
      "get": {
        "tags": [
          "Federation"
        ],
        "summary": "View Pending Incoming Message Count",
        "description": "Use this endpoint to view the number of incoming federation messages that are currently being processed for a specific federated service.",
        "operationId": "/management/coherence/cluster/services/{serviceName}/federation/pendingIncomingMessages GET",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/serviceName"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful request that returns the pending incoming message count",
            "schema": {
              "type": "object",
              "properties": {
                "pendingIncomingMessages": {
                  "type": "integer",
                  "format": "int64"
                }
              }
            }
          }
        }
      }
    },
    "/management/coherence/cluster/services/{serviceName}/federation/pendingOutgoingMessages": {
      "get": {
        "tags": [
          "Federation"
        ],
        "summary": "View Pending Outgoing Message Count",
        "description": "Use this endpoint to view the number of federation messages that are waiting to be for a specific federated service.",
        "operationId": "/management/coherence/cluster/services/{serviceName}/federation/pendingOutgoingMessages GET",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/serviceName"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful request that returns the pending outgoing message count",
            "schema": {
              "type": "object",
              "properties": {
                "pendingIncomingMessages": {
                  "type": "integer",
                  "format": "int64"
                }
              }
            }
          }
        }
      }
    },
    "/management/coherence/cluster/services/{serviceName}/federation/state": {
      "get": {
        "tags": [
          "Federation"
        ],
        "summary": "View Federation State",
        "description": "Use this endpoint to view the state of federated service members for a specific federated service.",
        "operationId": "/management/coherence/cluster/services/{serviceName}/federation/state GET",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/serviceName"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful request that returns the federation state",
            "schema": {
              "type": "object",
              "properties": {
                "state": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/management/coherence/cluster/services/{serviceName}/federation/start": {
      "post": {
        "tags": [
          "Federation"
        ],
        "summary": "Start Federation",
        "description": "Use this endpoint to start federating data to all federation participants for a specific federated service. The connection is established only when there is data to be replicated.",
        "operationId": "/management/coherence/cluster/services/{serviceName}/federation/start POST",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/serviceName"
          }
        ],
        "responses": {
          "200": {
            "description": "Command invocation successful."
          }
        }
      }
    },
    "/management/coherence/cluster/services/{serviceName}/federation/stop": {
      "post": {
        "tags": [
          "Federation"
        ],
        "summary": "Stop Federation",
        "description": "Use this endpoint to stop federating data to all participants for a specific federated service.",
        "operationId": "/management/coherence/cluster/services/{serviceName}/federation/stop POST",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/serviceName"
          }
        ],
        "responses": {
          "200": {
            "description": "Command invocation successful."
          }
        }
      }
    },
    "/management/coherence/cluster/services/{serviceName}/federation/pause": {
      "post": {
        "tags": [
          "Federation"
        ],
        "summary": "Pause Federation",
        "description": "Use this endpoint to pause federating data to all participants for a specific federated service.",
        "operationId": "/management/coherence/cluster/services/{serviceName}/federation/pause POST",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/serviceName"
          }
        ],
        "responses": {
          "200": {
            "description": "Command invocation successful."
          }
        }
      }
    },
    "/management/coherence/cluster/services/{serviceName}/federation/startWithNoBacklog": {
      "post": {
        "tags": [
          "Federation"
        ],
        "summary": "Start Federation With No Backlog",
        "description": "Use this endpoint to clear any initial backlog and start federating data to all participants for a specific federated service. Any existing cache entries will not be federated. The connection is established only when there is data to be federated.",
        "operationId": "/management/coherence/cluster/services/{serviceName}/federation/startWithNoBacklog POST",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/serviceName"
          }
        ],
        "responses": {
          "200": {
            "description": "Command invocation successful."
          }
        }
      }
    },
    "/management/coherence/cluster/services/{serviceName}/federation/startWithSync": {
      "post": {
        "tags": [
          "Federation"
        ],
        "summary": "Start Federation After Synchronizing",
        "description": "Use this endpoint to start federation for a specific federated service after federating all cache entries to all participants. Any existing cache entries are federated. The connection is established only when there is data to be federated.",
        "operationId": "/management/coherence/cluster/services/{serviceName}/federation/startWithSync POST",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/serviceName"
          }
        ],
        "responses": {
          "200": {
            "description": "Command invocation successful."
          }
        }
      }
    },
    "/management/coherence/cluster/services/{serviceName}/federation/participants/{participantName}/start": {
      "post": {
        "tags": [
          "Federation"
        ],
        "summary": "Start Federation to a Participant",
        "description": "Use this endpoint to start federating data to a specific federation participant. The connection is established only when there is data to be federated.",
        "operationId": "/management/coherence/cluster/services/{serviceName}/federation/participants/{participantName}/start POST",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/serviceName"
          },
          {
            "$ref": "#/parameters/participantName"
          }
        ],
        "responses": {
          "200": {
            "description": "Command invocation successful."
          }
        }
      }
    },
    "/management/coherence/cluster/services/{serviceName}/federation/participants/{participantName}/stop": {
      "post": {
        "tags": [
          "Federation"
        ],
        "summary": "Stop Federation to a Participant",
        "description": "Use this endpoint to stop federating data to a specific federation participant.",
        "operationId": "/management/coherence/cluster/services/{serviceName}/participants/{participantName}/stop POST",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/serviceName"
          },
          {
            "$ref": "#/parameters/participantName"
          }
        ],
        "responses": {
          "200": {
            "description": "Command invocation successful."
          }
        }
      }
    },
    "/management/coherence/cluster/services/{serviceName}/federation/participants/{participantName}/pause": {
      "post": {
        "tags": [
          "Federation"
        ],
        "summary": "Pause Federation to a Participant",
        "description": "Use this endpoint to pause federating data to a specific federation participant.",
        "operationId": "/management/coherence/cluster/services/{serviceName}/participants/{participantName}/pause POST",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/serviceName"
          },
          {
            "$ref": "#/parameters/participantName"
          }
        ],
        "responses": {
          "200": {
            "description": "Command invocation successful."
          }
        }
      }
    },
    "/management/coherence/cluster/services/{serviceName}/federation/participants/{participantName}/replicateAll": {
      "post": {
        "tags": [
          "Federation"
        ],
        "summary": "Replicate All Caches to a Participant",
        "description": "Use this endpoint to asynchronously federate caches to a specific federation participant.",
        "operationId": "/management/coherence/cluster/services/{serviceName}/participants/{participantName}/replicateAll POST",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/serviceName"
          },
          {
            "$ref": "#/parameters/participantName"
          }
        ],
        "responses": {
          "200": {
            "description": "Command invocation successful."
          }
        }
      }
    },
    "/management/coherence/cluster/services/{serviceName}/federation/participants/{participantName}/startWithNoBacklog": {
      "post": {
        "tags": [
          "Federation"
        ],
        "summary": "Start Federation With no Backlog to a Participant",
        "description": "Use this endpoint to clear any initial backlog and start federating data to a specific federation participant. Any existing cache entries will not be federated. The connection is established only when there is data to be federated.",
        "operationId": "/management/coherence/cluster/services/{serviceName}/participants/{participantName}/startWithNoBacklog POST",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/serviceName"
          },
          {
            "$ref": "#/parameters/participantName"
          }
        ],
        "responses": {
          "200": {
            "description": "Command invocation successful."
          }
        }
      }
    },
    "/management/coherence/cluster/services/{serviceName}/federation/participants/{participantName}/startWithSync": {
      "post": {
        "tags": [
          "Federation"
        ],
        "summary": "Start Federation to a Participant After Synchronizing",
        "description": "Use this endpoint to start federation for a specific federation participant after federating all cache entries. Any existing cache entries are federated. The connection is established only when there is data to be federated.",
        "operationId": "/management/coherence/cluster/services/{serviceName}/participants/{participantName}/startWithSync POST",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/serviceName"
          },
          {
            "$ref": "#/parameters/participantName"
          }
        ],
        "responses": {
          "200": {
            "description": "Command invocation successful."
          }
        }
      }
    },
    "/management/coherence/cluster/services/{serviceName}/members/{memberIdentifier}/federation/statistics/incoming/participants": {
      "get": {
        "tags": [
          "Federation"
        ],
        "summary": "View Incoming Statistics",
        "description": "Use this endpoint to view federation performance statistics from the perspective of the participant who receives federated data from remote federation participants. A list of statistics is returned for each remote participant.",
        "operationId": "/management/coherence/cluster/services/{serviceName}/members/{memberIdentifier}/federation/statistics/incoming/participants GET",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/serviceName"
          },
          {
            "$ref": "#/parameters/memberIdentifier"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful request that returns a list of incoming statistics",
            "schema": {
              "type": "object",
              "properties": {
                "items": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/federationIncomingStatistics"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/management/coherence/cluster/services/{serviceName}/members/{memberIdentifier}/federation/statistics/incoming/participants/{participantName}": {
      "get": {
        "tags": [
          "Federation"
        ],
        "summary": "View Incoming Statistics of a Participant",
        "description": "Use this endpoint to view federation performance statistics from the perspective of the participant who receives federated data from a specific remote federation participant.",
        "operationId": "/management/coherence/cluster/services/{serviceName}/members/{memberIdentifier}/federation/statistics/incoming/participants/{participantName} GET",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/serviceName"
          },
          {
            "$ref": "#/parameters/memberIdentifier"
          },
          {
            "$ref": "#/parameters/participantName"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful request that returns incoming statistics for a participant",
            "schema": {
              "$ref": "#/definitions/federationIncomingStatistics"
            }
          }
        }
      }
    },
    "/management/coherence/cluster/services/{serviceName}/members/{memberIdentifier}/federation/statistics/incoming/participants/{participantName}/resetStatistics": {
      "post": {
        "tags": [
          "Federation"
        ],
        "summary": "Reset Incoming Statistics of a Participant",
        "description": "Use this endpoint to clear the current statistics for a specific incoming/origin participant.",
        "operationId": "/management/coherence/cluster/services/{serviceName}/members/{memberIdentifier}/federation/statistics/incoming/participants/{participantName}/resetStatistics POST",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/serviceName"
          },
          {
            "$ref": "#/parameters/memberIdentifier"
          },
          {
            "$ref": "#/parameters/participantName"
          }
        ],
        "responses": {
          "200": {
            "description": "Command invocation is successful"
          }
        }
      }
    },
    "/management/coherence/cluster/services/{serviceName}/members/{memberIdentifier}/federation/statistics/outgoing/participants": {
      "get": {
        "tags": [
          "Federation"
        ],
        "summary": "View Outgoing Statistics",
        "description": "Use this endpoint to view federation performance statistics from the perspective of the participant who sends federated data to remote federation participants. A list of statistics is returned for each remote participant.",
        "operationId": "/management/coherence/cluster/services/{serviceName}/members/{memberIdentifier}/federation/statistics/outgoing/participants GET",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/serviceName"
          },
          {
            "$ref": "#/parameters/memberIdentifier"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful request that returns a list of outgoing statistics",
            "schema": {
              "type": "object",
              "properties": {
                "items": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/federationOutgoingStatistics"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/management/coherence/cluster/services/{serviceName}/members/{memberIdentifier}/federation/statistics/outgoing/participants/{participantName}": {
      "get": {
        "tags": [
          "Federation"
        ],
        "summary": "View Outgoing Statistics of a Participant",
        "description": "Use this endpoint to view federation performance statistics from the perspective of the participant who sends federated data to a specific remote federation participant.",
        "operationId": "/management/coherence/cluster/services/{serviceName}/members/{memberIdentifier}/federation/statistics/outgoing/participants/{participantName} GET",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/serviceName"
          },
          {
            "$ref": "#/parameters/memberIdentifier"
          },
          {
            "$ref": "#/parameters/participantName"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful request that returns outgoing statistics for a participant",
            "schema": {
              "$ref": "#/definitions/federationOutgoingStatistics"
            }
          }
        }
      }
    },
    "/management/coherence/cluster/services/{serviceName}/members/{memberIdentifier}/federation/statistics/outgoing/participants/{participantName}/resetStatistics": {
      "post": {
        "tags": [
          "Federation"
        ],
        "summary": "Reset Outgoing Statistics of a Participant",
        "description": "Use this endpoint to clear the current statistics for a specific outgoing/destination participant.",
        "operationId": "/management/coherence/cluster/services/{serviceName}/members/{memberIdentifier}/federation/statistics/outgoing/participants/{participantName}/resetStatistics POST",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/serviceName"
          },
          {
            "$ref": "#/parameters/memberIdentifier"
          },
          {
            "$ref": "#/parameters/participantName"
          }
        ],
        "responses": {
          "200": {
            "description": "Command invocation is successful"
          }
        }
      }
    },
    "/management/coherence/cluster/services/{serviceName}/topics": {
      "get": {
        "tags": [
          "Topic"
        ],
        "description": "Use this endpoint to view a list of topics in the cluster. Topic names are often used as parameters when performing other topic resource operations.",
        "operationId": "/management/coherence/cluster/services/{serviceName}/topics GET",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/serviceName"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful request that returns a list of topics",
            "schema": {
              "type": "object",
              "properties": {
                "items": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/topic"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/management/coherence/cluster/services/{serviceName}/topics/{topicName}": {
      "get": {
        "tags": [
          "Topic"
        ],
        "summary": "View Topic Information",
        "description": "Use this endpoint to view information about a topir.",
        "operationId": "/management/coherence/cluster/services/{serviceName}/topics/{topicName} GET",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/serviceName"
          },
          {
            "$ref": "#/parameters/topicName"
          },
          {
            "$ref": "#/parameters/role"
          },
          {
            "$ref": "#/parameters/collector"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful request that returns information about a topic",
            "schema": {
              "$ref": "#/definitions/topicAggregate"
            }
          }
        }
      }
    },
    "/management/coherence/cluster/services/{serviceName}/topics/{topicName}/disconnectAll": {
      "post": {
        "tags": [
          "Topic"
        ],
        "summary": "Force this topic to disconnect all subscribers",
        "description": "Use this endpoint to force topic to disconnect all subscribers.",
        "operationId": "/management/coherence/cluster/services/{serviceName}/topics/{topicName}/disconnectAll POST",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/serviceName"
          },
          {
            "$ref": "#/parameters/topicName"
          },
          {
            "$ref": "#/parameters/role"
          },
          {
            "$ref": "#/parameters/collector"
          }
        ],
        "responses": {
          "200": {
            "description": "Command invocation is successful"
          }
        }
      }
    },
    "/management/coherence/cluster/services/{serviceName}/topics/{topicName}/members": {
      "get": {
        "tags": [
          "Topic"
        ],
        "summary": "View Topic Members",
        "description": "Use this endpoint to list the members of a topic.",
        "operationId": "/management/coherence/cluster/services/{serviceName}/topics/{topicName}/members GET",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/serviceName"
          },
          {
            "$ref": "#/parameters/topicName"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful request that lists topic members",
            "schema": {
              "type": "object",
              "properties": {
                "items": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/topicMember"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/management/coherence/cluster/services/{serviceName}/topics/{topicName}/members/{memberIdentifier}": {
      "get": {
        "tags": [
          "Topic"
        ],
        "summary": "View Topic Member Information",
        "description": "Use this endpoint to view information about topic on a specific member.",
        "operationId": "/management/coherence/cluster/services/{serviceName}/topics/{topicName}/members/{memberIdentifier} GET",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/serviceName"
          },
          {
            "$ref": "#/parameters/topicName"
          },
          {
            "$ref": "#/parameters/memberIdentifier"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful request that returns information about a topic",
            "schema": {
              "$ref": "#/definitions/topicMember"
            }
          }
        }
      }
    },
    "/management/coherence/cluster/services/{serviceName}/topics/{topicName}/channels": {
      "get": {
        "tags": [
          "Topic"
        ],
        "summary": "View Topic Channels",
        "description": "Use this endpoint to list the channels of a topic.",
        "operationId": "/management/coherence/cluster/services/{serviceName}/topics/{topicName}/channels GET",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/serviceName"
          },
          {
            "$ref": "#/parameters/topicName"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful request that lists topic channels",
            "schema": {
              "type": "object",
              "properties": {
                "items": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "channels": {
                        "type": "object",
                        "additionalProperties": {
                          "$ref": "#/definitions/topicChannel"
                        }
                      },
                      "nodeId": {
                        "type": "integer",
                        "format": "int64",
                        "description": "The ID of member to which the topic channels belong",
                        "readOnly": true
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/management/coherence/cluster/services/{serviceName}/topics/{topicName}/subscribers": {
      "get": {
        "tags": [
          "Topic"
        ],
        "summary": "View Topic Subscribers",
        "description": "Use this endpoint to list the subscriber of a topic.",
        "operationId": "/management/coherence/cluster/services/{serviceName}/topics/{topicName}/subscribers GET",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/serviceName"
          },
          {
            "$ref": "#/parameters/topicName"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful request that lists topic subscribers",
            "schema": {
              "type": "object",
              "properties": {
                "items": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/subscriber"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/management/coherence/cluster/services/{serviceName}/topics/{topicName}/subscribers/{subscriberId}": {
      "get": {
        "tags": [
          "Topic"
        ],
        "summary": "View Topic Subscribers",
        "description": "Use this endpoint to view statistics for a subscriber.",
        "operationId": "/management/coherence/cluster/services/{serviceName}/topics/{topicName}/subscribers/{subscriberId} GET",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/serviceName"
          },
          {
            "$ref": "#/parameters/topicName"
          },
          {
            "$ref": "#/parameters/subscriberId"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful request that returns information about a subscriber",
            "schema": {
              "$ref": "#/definitions/subscriber"
            }
          }
        }
      }
    },
    "/management/coherence/cluster/services/{serviceName}/topics/{topicName}/subscribers/{subscriberId}/connect": {
      "post": {
        "tags": [
          "Topic"
        ],
        "summary": "Ensure this subscriber is connected",
        "description": "Use this endpoint to ensure subscriber is connected.",
        "operationId": "/management/coherence/cluster/services/{serviceName}/topics/{topicName}/subscribers/{subscriberId}/connect POST",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/serviceName"
          },
          {
            "$ref": "#/parameters/topicName"
          },
          {
            "$ref": "#/parameters/subscriberId"
          }
        ],
        "responses": {
          "200": {
            "description": "Command invocation is successful"
          }
        }
      }
    },
    "/management/coherence/cluster/services/{serviceName}/topics/{topicName}/subscribers/{subscriberId}/disconnect": {
      "post": {
        "tags": [
          "Topic"
        ],
        "summary": "Force this subscriber to disconnect and reset itself",
        "description": "Use this endpoint to force subscriber to disconnect and reset itself.",
        "operationId": "/management/coherence/cluster/services/{serviceName}/topics/{topicName}/subscribers/{subscriberId}/disconnect POST",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/serviceName"
          },
          {
            "$ref": "#/parameters/topicName"
          },
          {
            "$ref": "#/parameters/subscriberId"
          }
        ],
        "responses": {
          "200": {
            "description": "Command invocation is successful"
          }
        }
      }
    },
    "/management/coherence/cluster/services/{serviceName}/topics/{topicName}/subscribers/{subscriberId}/heads": {
      "post": {
        "tags": [
          "Topic"
        ],
        "summary": "Retrieve the current head positions for each channel",
        "description": "Use this endpoint to retrieve the current head positions for each channel",
        "operationId": "/management/coherence/cluster/services/{serviceName}/topics/{topicName}/subscribers/{subscriberId}/heads POST",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/serviceName"
          },
          {
            "$ref": "#/parameters/topicName"
          },
          {
            "$ref": "#/parameters/subscriberId"
          }
        ],
        "responses": {
          "200": {
            "description": "Command invocation is successful",
            "schema": {
              "type": "object",
              "properties": {
                "heads": {
                  "type": "object",
                  "additionalProperties": {
                    "$ref": "#/definitions/head"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/management/coherence/cluster/services/{serviceName}/topics/{topicName}/subscribers/{subscriberId}/notifyPopulated": {
      "post": {
        "tags": [
          "Topic"
        ],
        "summary": "Send a channel populated notification to this subscriber",
        "description": "Use this endpoint to send a channel populated notification to this subscriber",
        "operationId": "/management/coherence/cluster/services/{serviceName}/topics/{topicName}/subscribers/{subscriberId}/notifyPopulated POST",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/serviceName"
          },
          {
            "$ref": "#/parameters/topicName"
          },
          {
            "$ref": "#/parameters/subscriberId"
          },
          {
            "$ref": "#/parameters/channel"
          }
        ],
        "responses": {
          "200": {
            "description": "Command invocation is successful"
          }
        }
      }
    },
    "/management/coherence/cluster/services/{serviceName}/topics/{topicName}/subscribers/{subscriberId}/remainingMessages": {
      "post": {
        "tags": [
          "Topic"
        ],
        "summary": "Retrieve the count of remaining messages for each channel",
        "description": "Use this endpoint to retrieve the count of remaining messages for each channel",
        "operationId": "/management/coherence/cluster/services/{serviceName}/topics/{topicName}/subscribers/{subscriberId}/remainingMessages POST",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/serviceName"
          },
          {
            "$ref": "#/parameters/topicName"
          },
          {
            "$ref": "#/parameters/subscriberId"
          }
        ],
        "responses": {
          "200": {
            "description": "Command invocation is successful",
            "schema": {
              "type": "object",
              "properties": {
                "remainingMessages": {
                  "type": "object",
                  "additionalProperties": {
                    "$ref": "#/definitions/remainingMessage"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/management/coherence/cluster/services/{serviceName}/topics/{topicName}/subscriberGroups": {
      "get": {
        "tags": [
          "Topic"
        ],
        "summary": "View Topic Subscriber Groups",
        "description": "Use this endpoint to list the subscriber groups of a topic.",
        "operationId": "/management/coherence/cluster/services/{serviceName}/topics/{topicName}/subscriberGroups GET",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/serviceName"
          },
          {
            "$ref": "#/parameters/topicName"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful request that lists topic subscriber groups",
            "schema": {
              "type": "object",
              "properties": {
                "items": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/subscriberGroup"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/management/coherence/cluster/services/{serviceName}/topics/{topicName}/subscriberGroups/{subscriberGroupName}": {
      "get": {
        "tags": [
          "Topic"
        ],
        "summary": "View Topic Subscriber Group",
        "description": "Use this endpoint to view statistics for a subscriber group.",
        "operationId": "/management/coherence/cluster/services/{serviceName}/topics/{topicName}/subscriberGroups/{subscriberGroupName} GET",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/serviceName"
          },
          {
            "$ref": "#/parameters/topicName"
          },
          {
            "$ref": "#/parameters/subscriberGroupName"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful request that returns information about a subscriber group",
            "schema": {
              "type": "object",
              "properties": {
                "items": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/subscriberGroup"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/management/coherence/cluster/services/{serviceName}/topics/{topicName}/subscriberGroups/{subscriberGroupName}/subscribers": {
      "get": {
        "tags": [
          "Topic"
        ],
        "summary": "View Topic Subscribers in the subscriber group",
        "description": "Use this endpoint to list the subscriber of a topic in a subscriber group.",
        "operationId": "/management/coherence/cluster/services/{serviceName}/topics/{topicName}/{subscriberGroupName}/subscribers GET",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/serviceName"
          },
          {
            "$ref": "#/parameters/topicName"
          },
          {
            "$ref": "#/parameters/subscriberGroupName"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful request that lists topic subscribers in a subscriber group",
            "schema": {
              "type": "object",
              "properties": {
                "items": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/subscriber"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/management/coherence/cluster/services/{serviceName}/topics/{topicName}/subscriberGroups/{subscriberGroupName}/disconnectAll": {
      "post": {
        "tags": [
          "Topic"
        ],
        "summary": "Force this subscriber group to disconnect all subscribers",
        "description": "Use this endpoint to force subscriber group to disconnect all subscribers.",
        "operationId": "/management/coherence/cluster/services/{serviceName}/topics/{topicName}/subscriberGroups/{subscriberGroupName}/disconnectAll POST",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/serviceName"
          },
          {
            "$ref": "#/parameters/topicName"
          },
          {
            "$ref": "#/parameters/subscriberGroupName"
          }
        ],
        "responses": {
          "200": {
            "description": "Command invocation is successful"
          }
        }
      }
    },
    "/management/coherence/cluster/services/{serviceName}/storage": {
      "get": {
        "tags": [
          "Storage Managers"
        ],
        "summary": "View Storage Managers",
        "description": "Use this endpoint to view list of storage managers in the cluster. A Storage instance manages all index, listener, and lock information for the portion of the DistributedCache managed by the local member.",
        "operationId": "/management/coherence/cluster/services/{serviceName}/storage GET",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/serviceName"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful request that returns the storage managers in a Coherence cluster",
            "schema": {
              "type": "object",
              "properties": {
                "items": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/storage"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/management/coherence/cluster/services/{serviceName}/storage/{cacheName}/resetStatistics": {
      "post": {
        "tags": [
          "Storage Managers"
        ],
        "summary": "Reset Storage Manager Statistics",
        "description": "Use this endpoint to clear the current statistics for a specific storage manager.",
        "operationId": "/management/coherence/cluster/services/{serviceName}/storage/{cacheName}/resetStatistics POST",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/serviceName"
          },
          {
            "$ref": "#/parameters/cacheName"
          }
        ],
        "responses": {
          "200": {
            "description": "Command invocation is successful"
          }
        }
      }
    },
    "/management/coherence/cluster/services/{serviceName}/storage/{cacheName}/truncate": {
      "post": {
        "tags": [
          "Storage Managers"
        ],
        "summary": "Truncate Cache",
        "description": "Use this endpoint to truncate a specific cache.",
        "operationId": "/management/coherence/cluster/services/{serviceName}/storage/{cacheName}/truncate POST",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/serviceName"
          },
          {
            "$ref": "#/parameters/cacheName"
          }
        ],
        "responses": {
          "200": {
            "description": "Command invocation is successful"
          }
        }
      }
    },
    "/management/coherence/cluster/services/{serviceName}/storage/{cacheName}/clear": {
      "post": {
        "tags": [
          "Storage Managers"
        ],
        "summary": "Clear Cache",
        "description": "Use this endpoint to clear a specific cache.",
        "operationId": "/management/coherence/cluster/services/{serviceName}/storage/{cacheName}/clear POST",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/serviceName"
          },
          {
            "$ref": "#/parameters/cacheName"
          }
        ],
        "responses": {
          "200": {
            "description": "Command invocation is successful"
          }
        }
      }
    },
    "/management/coherence/cluster/services/{serviceName}/storage/{cacheName}/reportPartitionStats": {
      "get": {
        "tags": [
          "Storage Managers"
        ],
        "summary": "Report Partition Stats",
        "description": "Use this endpoint to report the size and count of entries for this cache across partitions.",
        "operationId": "/management/coherence/cluster/services/{serviceName}/storage/{cacheName}/reportPartitionStats GET",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/serviceName"
          },
          {
            "$ref": "#/parameters/cacheName"
          }
        ],
        "responses": {
          "200": {
            "description": "Command invocation is successful"
          }
        }
      }
    },
    "/management/coherence/cluster/webApplications": {
      "get": {
        "tags": [
          "Coherence*Web"
        ],
        "summary": "View Coherence*Web Applications",
        "description": "Use this endpoint to view the list of applications that use Coherence\\*Web for HTTP session management. The applications are listed by their application ID. The Application ID is used as a parameter when performing Coherence\\*Web resource operations.",
        "operationId": "/management/coherence/cluster/webApplications GET",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "A successful request that returns a list of Coherence*Web applications",
            "schema": {
              "type": "object",
              "properties": {
                "items": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/coherenceWebApplication"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/management/coherence/cluster/webApplications/{appId}": {
      "get": {
        "tags": [
          "Coherence*Web"
        ],
        "summary": "View Coherence*Web Application Information",
        "description": "Use this endpoint to view aggregate metrics for a specific Coherence*Web application.",
        "operationId": "/management/coherence/cluster/webApplications/{appId} GET",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/appId"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful request that returns aggregated metrics for an application"
          }
        }
      }
    },
    "/management/coherence/cluster/webApplications/{appId}/members": {
      "get": {
        "tags": [
          "Coherence*Web"
        ],
        "summary": "View Coherence*Web Application Members",
        "description": "Use this endpoint to view the list of cluster members for a specific Coherence*Web application.",
        "operationId": "/management/coherence/cluster/webApplications/{appId}/members GET",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/appId"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful request that returns the list of Cluster members for a Coherence*Web application. ",
            "schema": {
              "type": "object",
              "properties": {
                "items": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/coherenceWebMember"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/management/coherence/cluster/webApplications/{appId}/members/{memberIdentifier}": {
      "get": {
        "tags": [
          "Coherence*Web"
        ],
        "summary": "View Coherence*Web Application Member Information",
        "description": "Use this endpoint to view performance and operational statistics for a specific Coherence*Web application member. The information includes session, overflow, and local cache statistics.",
        "operationId": "/management/coherence/cluster/webApplications/{appId}/{memberIdentifier} GET",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/appId"
          },
          {
            "$ref": "#/parameters/memberIdentifier"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful request that returns Coherence*Web application member information",
            "schema": {
              "$ref": "#/definitions/coherenceWebMember"
            }
          }
        }
      }
    },
    "/management/coherence/cluster/webApplications/{appId}/members/{memberIdentifier}/clearStoredConfiguration": {
      "post": {
        "tags": [
          "Coherence*Web"
        ],
        "summary": "Clear Stored Coherence*Web Application Member Configuration",
        "description": "Use this endpoint to remove the stored configuration that is used to check configuration consistency.",
        "operationId": "/management/coherence/cluster/coherenceWebApplications/{appId}/members/{memberIdentifier}/clearStoredConfiguration POST",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/appId"
          },
          {
            "$ref": "#/parameters/memberIdentifier"
          }
        ],
        "responses": {
          "200": {
            "description": "Command invocation is successful"
          }
        }
      }
    },
    "/management/coherence/cluster/hotcache/members": {
      "get": {
        "tags": [
          "HotCache"
        ],
        "summary": "View HotCache Members",
        "description": "Use this endpoint to view a list of HotCache members",
        "operationId": "/management/coherence/cluster/hotcache/members GET",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "A successful request that returns HotCache Members",
            "schema": {
              "type": "object",
              "properties": {
                "items": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/hotcacheMember"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/management/coherence/cluster/hotcache/members/{memberIdentifier}": {
      "get": {
        "tags": [
          "HotCache"
        ],
        "summary": "View HotCache Member Information",
        "description": "Use this endpoint to view HotCache information for a specific cluster member.",
        "operationId": "/management/coherence/cluster/hotcache/members/{memberIdentifier} GET",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/memberIdentifier"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful request that returns HotCache information",
            "schema": {
              "$ref": "#/definitions/hotcacheMember"
            }
          }
        }
      }
    },
    "/management/coherence/cluster/executors": {
      "get": {
        "tags": [
          "Executor"
        ],
        "summary": "View Executors",
        "description": "Use this endpoint to view a list of executors in the cluster. Executor names are often used as parameters when performing other executor resource operations.",
        "operationId": "/management/coherence/cluster/executors GET",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "A successful request that returns a list of executors",
            "schema": {
              "type": "object",
              "properties": {
                "items": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/executor"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/management/coherence/cluster/executors/{executorName}": {
      "get": {
        "tags": [
          "Executor"
        ],
        "summary": "View Executor Information",
        "description": "Use this endpoint to view general statistics for an executor.",
        "operationId": "/management/coherence/cluster/executors/{executorName} GET",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/executorName"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful request that returns information about an executor",
            "schema": {
              "$ref": "#/definitions/executor"
            }
          }
        }
      },
      "post": {
        "tags": [
          "Executor"
        ],
        "summary": "Update Executor",
        "description": "Update parameters of an executor",
        "operationId": "/management/coherence/cluster/executors/{executorName} POST",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/executorName"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/executor"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Executor updated successfully"
          }
        }
      }
    },
    "/management/coherence/cluster/executors/members": {
      "get": {
        "tags": [
          "Executor"
        ],
        "summary": "View Executor Members",
        "description": "Use this endpoint to list the executor members.",
        "operationId": "/management/coherence/cluster/executors/members GET",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "A successful request that lists executor members",
            "schema": {
              "type": "object",
              "properties": {
                "items": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/executor"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/management/coherence/cluster/executors/members/{memberId}": {
      "get": {
        "tags": [
          "Executor"
        ],
        "summary": "View Executor Member Information",
        "description": "Use this endpoint to view detailed operational and performance statistics for executors of a member.",
        "operationId": "/management/coherence/cluster/executors/members/{memberId} GET",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/memberId"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful request that returns information about executors of a member",
            "schema": {
              "type": "object",
              "properties": {
                "items": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/executor"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/management/coherence/cluster/executors/{executorName}/resetStatistics": {
      "post": {
        "tags": [
          "Executor"
        ],
        "summary": "Reset Executor Statistics",
        "description": "Use this endpoint to clear the current statistics for a specific executor.",
        "operationId": "/management/coherence/cluster/executors/{executorName}/resetStatistics POST",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/executorName"
          }
        ],
        "responses": {
          "200": {
            "description": "Command invocation is successful"
          }
        }
      }
    },
    "/management/coherence/cluster/topics": {
      "get": {
        "tags": [
          "Topic (Short Form)"
        ],
        "description": "Use this endpoint to view a list of topics in the cluster. Topic names are often used as parameters when performing other topic resource operations.",
        "operationId": "/management/coherence/cluster/topics GET",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "A successful request that returns a list of topics",
            "schema": {
              "type": "object",
              "properties": {
                "items": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/topic"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/management/coherence/cluster/topics/{topicName}": {
      "get": {
        "tags": [
          "Topic (Short Form)"
        ],
        "summary": "View Topic Information",
        "description": "Use this endpoint to view information about a topir.",
        "operationId": "/management/coherence/cluster/topics/{topicName} GET",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/topicName"
          },
          {
            "$ref": "#/parameters/role"
          },
          {
            "$ref": "#/parameters/collector"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful request that returns information about a topic",
            "schema": {
              "$ref": "#/definitions/topicAggregate"
            }
          }
        }
      }
    },
    "/management/coherence/cluster/topics/{topicName}/disconnectAll": {
      "post": {
        "tags": [
          "Topic (Short Form)"
        ],
        "summary": "Force this topic to disconnect all subscribers",
        "description": "Use this endpoint to force topic to disconnect all subscribers.",
        "operationId": "/management/coherence/cluster/topics/{topicName}/disconnectAll POST",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/topicName"
          }
        ],
        "responses": {
          "200": {
            "description": "Command invocation is successful"
          }
        }
      }
    },
    "/management/coherence/cluster/topics/{topicName}/members": {
      "get": {
        "tags": [
          "Topic (Short Form)"
        ],
        "summary": "View Topic Members",
        "description": "Use this endpoint to list the members of a topic.",
        "operationId": "/management/coherence/cluster/topics/{topicName}/members GET",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/topicName"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful request that lists topic members",
            "schema": {
              "type": "object",
              "properties": {
                "items": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/topicMember"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/management/coherence/cluster/topics/{topicName}/members/{memberIdentifier}": {
      "get": {
        "tags": [
          "Topic (Short Form)"
        ],
        "summary": "View Topic Member Information",
        "description": "Use this endpoint to view information about topic on a specific member.",
        "operationId": "/management/coherence/cluster/topics/{topicName}/members/{memberIdentifier} GET",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/topicName"
          },
          {
            "$ref": "#/parameters/memberIdentifier"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful request that returns information about a topic",
            "schema": {
              "$ref": "#/definitions/topicMember"
            }
          }
        }
      }
    },
    "/management/coherence/cluster/topics/{topicName}/channels": {
      "get": {
        "tags": [
          "Topic (Short Form)"
        ],
        "summary": "View Topic Channels",
        "description": "Use this endpoint to list the channels of a topic.",
        "operationId": "/management/coherence/cluster/topics/{topicName}/channels GET",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/topicName"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful request that lists topic channels",
            "schema": {
              "type": "object",
              "properties": {
                "items": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "channels": {
                        "type": "object",
                        "additionalProperties": {
                          "$ref": "#/definitions/topicChannel"
                        }
                      },
                      "nodeId": {
                        "type": "integer",
                        "format": "int64",
                        "description": "The ID of member to which the topic channels belong",
                        "readOnly": true
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/management/coherence/cluster/topics/{topicName}/subscribers": {
      "get": {
        "tags": [
          "Topic (Short Form)"
        ],
        "summary": "View Topic Subscribers",
        "description": "Use this endpoint to list the subscriber of a topic.",
        "operationId": "/management/coherence/cluster/topics/{topicName}/subscribers GET",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/topicName"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful request that lists topic subscribers",
            "schema": {
              "type": "object",
              "properties": {
                "items": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/subscriber"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/management/coherence/cluster/topics/{topicName}/subscribers/{subscriberId}": {
      "get": {
        "tags": [
          "Topic (Short Form)"
        ],
        "summary": "View Topic Subscribers",
        "description": "Use this endpoint to view statistics for a subscriber.",
        "operationId": "/management/coherence/cluster/topics/{topicName}/subscribers/{subscriberId} GET",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/topicName"
          },
          {
            "$ref": "#/parameters/subscriberId"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful request that returns information about a subscriber",
            "schema": {
              "$ref": "#/definitions/subscriber"
            }
          }
        }
      }
    },
    "/management/coherence/cluster/topics/{topicName}/subscribers/{subscriberId}/connect": {
      "post": {
        "tags": [
          "Topic (Short Form)"
        ],
        "summary": "Ensure this subscriber is connected",
        "description": "Use this endpoint to ensure subscriber is connected.",
        "operationId": "/management/coherence/cluster/topics/{topicName}/subscribers/{subscriberId}/connect POST",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/topicName"
          },
          {
            "$ref": "#/parameters/subscriberId"
          }
        ],
        "responses": {
          "200": {
            "description": "Command invocation is successful"
          }
        }
      }
    },
    "/management/coherence/cluster/topics/{topicName}/subscribers/{subscriberId}/disconnect": {
      "post": {
        "tags": [
          "Topic (Short Form)"
        ],
        "summary": "Force this subscriber to disconnect and reset itself",
        "description": "Use this endpoint to force subscriber to disconnect and reset itself.",
        "operationId": "/management/coherence/cluster/topics/{topicName}/subscribers/{subscriberId}/disconnect POST",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/topicName"
          },
          {
            "$ref": "#/parameters/subscriberId"
          }
        ],
        "responses": {
          "200": {
            "description": "Command invocation is successful"
          }
        }
      }
    },
    "/management/coherence/cluster/topics/{topicName}/subscribers/{subscriberId}/heads": {
      "post": {
        "tags": [
          "Topic (Short Form)"
        ],
        "summary": "Retrieve the current head positions for each channel",
        "description": "Use this endpoint to retrieve the current head positions for each channel",
        "operationId": "/management/coherence/cluster/topics/{topicName}/subscribers/{subscriberId}/heads POST",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/topicName"
          },
          {
            "$ref": "#/parameters/subscriberId"
          }
        ],
        "responses": {
          "200": {
            "description": "Command invocation is successful",
            "schema": {
              "type": "object",
              "properties": {
                "heads": {
                  "type": "object",
                  "additionalProperties": {
                    "$ref": "#/definitions/head"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/management/coherence/cluster/topics/{topicName}/subscribers/{subscriberId}/notifyPopulated": {
      "post": {
        "tags": [
          "Topic (Short Form)"
        ],
        "summary": "Send a channel populated notification to this subscriber",
        "description": "Use this endpoint to send a channel populated notification to this subscriber",
        "operationId": "/management/coherence/cluster/topics/{topicName}/subscribers/{subscriberId}/notifyPopulated POST",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/topicName"
          },
          {
            "$ref": "#/parameters/subscriberId"
          },
          {
            "$ref": "#/parameters/channel"
          }
        ],
        "responses": {
          "200": {
            "description": "Command invocation is successful"
          }
        }
      }
    },
    "/management/coherence/cluster/topics/{topicName}/subscribers/{subscriberId}/remainingMessages": {
      "post": {
        "tags": [
          "Topic (Short Form)"
        ],
        "summary": "Retrieve the count of remaining messages for each channel",
        "description": "Use this endpoint to retrieve the count of remaining messages for each channel",
        "operationId": "/management/coherence/cluster/topics/{topicName}/subscribers/{subscriberId}/remainingMessages POST",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/topicName"
          },
          {
            "$ref": "#/parameters/subscriberId"
          }
        ],
        "responses": {
          "200": {
            "description": "Command invocation is successful",
            "schema": {
              "type": "object",
              "properties": {
                "remainingMessages": {
                  "type": "object",
                  "additionalProperties": {
                    "$ref": "#/definitions/remainingMessage"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/management/coherence/cluster/topics/{topicName}/subscriberGroups": {
      "get": {
        "tags": [
          "Topic (Short Form)"
        ],
        "summary": "View Topic Subscriber Groups",
        "description": "Use this endpoint to list the subscriber groups of a topic.",
        "operationId": "/management/coherence/cluster/topics/{topicName}/subscriberGroups GET",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/topicName"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful request that lists topic subscriber groups",
            "schema": {
              "type": "object",
              "properties": {
                "items": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/subscriberGroup"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/management/coherence/cluster/topics/{topicName}/subscriberGroups/{subscriberGroupName}": {
      "get": {
        "tags": [
          "Topic (Short Form)"
        ],
        "summary": "View Topic Subscriber Group",
        "description": "Use this endpoint to view statistics for a subscriber group.",
        "operationId": "/management/coherence/cluster/topics/{topicName}/subscriberGroups/{subscriberGroupName} GET",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/topicName"
          },
          {
            "$ref": "#/parameters/subscriberGroupName"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful request that returns information about a subscriber group",
            "schema": {
              "type": "object",
              "properties": {
                "items": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/subscriberGroup"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/management/coherence/cluster/topics/{topicName}/subscriberGroups/{subscriberGroupName}/subscribers": {
      "get": {
        "tags": [
          "Topic (Short Form)"
        ],
        "summary": "View Topic Subscribers in the subscriber group",
        "description": "Use this endpoint to list the subscriber of a topic in a subscriber group.",
        "operationId": "/management/coherence/cluster/topics/{topicName}/{subscriberGroupName}/subscribers GET",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/topicName"
          },
          {
            "$ref": "#/parameters/subscriberGroupName"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful request that lists topic subscribers in a subscriber group",
            "schema": {
              "type": "object",
              "properties": {
                "items": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/subscriber"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/management/coherence/cluster/topics/{topicName}/subscriberGroups/{subscriberGroupName}/disconnectAll": {
      "post": {
        "tags": [
          "Topic (Short Form)"
        ],
        "summary": "Force this subscriber group to disconnect all subscribers",
        "description": "Use this endpoint to force subscriber group to disconnect all subscribers.",
        "operationId": "/management/coherence/cluster/topics/{topicName}/subscriberGroups/{subscriberGroupName}/disconnectAll POST",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/topicName"
          },
          {
            "$ref": "#/parameters/subscriberGroupName"
          }
        ],
        "responses": {
          "200": {
            "description": "Command invocation is successful"
          }
        }
      }
    },
    "/management/coherence/cluster/storage": {
      "get": {
        "tags": [
          "Storage Managers"
        ],
        "summary": "View Storage Managers",
        "description": "Use this endpoint to view list of storage managers in the cluster. A Storage instance manages all index, listener, and lock information for the portion of the DistributedCache managed by the local member.",
        "operationId": "/management/coherence/cluster/storage GET",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "A successful request that returns the storage managers in a Coherence cluster",
            "schema": {
              "type": "object",
              "properties": {
                "items": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/storage"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/management/coherence/cluster/storage/{cacheName}/resetStatistics": {
      "post": {
        "tags": [
          "Storage Managers"
        ],
        "summary": "Reset Storage Manager Statistics",
        "description": "Use this endpoint to clear the current statistics for a specific storage manager.",
        "operationId": "/management/coherence/cluster/storage/{cacheName}/resetStatistics POST",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/cacheName"
          }
        ],
        "responses": {
          "200": {
            "description": "Command invocation is successful"
          }
        }
      }
    },
    "/management/coherence/cluster/storage/{cacheName}/truncate": {
      "post": {
        "tags": [
          "Storage Managers"
        ],
        "summary": "Truncate Cache",
        "description": "Use this endpoint to truncate a specific cache.",
        "operationId": "/management/coherence/cluster/storage/{cacheName}/truncate POST",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/cacheName"
          }
        ],
        "responses": {
          "200": {
            "description": "Command invocation is successful"
          }
        }
      }
    },
    "/management/coherence/cluster/storage/{cacheName}/clear": {
      "post": {
        "tags": [
          "Storage Managers"
        ],
        "summary": "Clear Cache",
        "description": "Use this endpoint to clear a specific cache.",
        "operationId": "/management/coherence/cluster/storage/{cacheName}/clear POST",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/cacheName"
          }
        ],
        "responses": {
          "200": {
            "description": "Command invocation is successful"
          }
        }
      }
    }
  },
  "definitions": {
    "cluster": {
      "type": "object",
      "properties": {
        "location": {
          "type": "string",
          "description": "The location of the MBean server",
          "readOnly": true
        },
        "type": {
          "type": "string",
          "description": "The type of the MBean",
          "enum": [
            "Cluster"
          ],
          "readOnly": true
        },
        "refreshTime": {
          "type": "string",
          "format": "date-time",
          "description": "The timestamp when this model was last retrieved from a corresponding node. For local servers it is the local time.",
          "readOnly": true
        },
        "licenseMode": {
          "type": "string",
          "description": "The license mode that this cluster is using. Possible values are Evaluation, Development or Production.",
          "readOnly": true
        },
        "clusterSize": {
          "type": "integer",
          "format": "int32",
          "description": "The total number of cluster nodes.",
          "readOnly": true
        },
        "localMemberId": {
          "type": "integer",
          "format": "int32",
          "description": "The member id for the cluster member that is co-located with the reporting MBeanServer; -1 if the cluster service is not running.",
          "readOnly": true
        },
        "version": {
          "type": "string",
          "description": "The Coherence version.",
          "readOnly": true
        },
        "running": {
          "type": "boolean",
          "description": "Specifies whether or not the cluster is running.",
          "readOnly": true
        },
        "clusterName": {
          "type": "string",
          "description": "The name of the cluster.",
          "readOnly": true
        },
        "membersDeparted": {
          "type": "array",
          "description": "An array of strings containing the Member information for recently departed cluster members.   Members will be removed from this array when the member id is recycled. This information is since the node has joined the cluster and is reset when the MBeanServer node leaves and rejoins the cluster. The MembersDepartureCount is the total count of departed members and not the size of this array.",
          "items": {
            "type": "string"
          },
          "readOnly": true
        },
        "memberIds": {
          "type": "array",
          "description": "An array of all existing cluster member ids.",
          "items": {
            "type": "integer"
          },
          "readOnly": true
        },
        "membersDepartureCount": {
          "type": "integer",
          "format": "int64",
          "description": "The number of times this node has observed another node`s departure from the cluster since this management node has joined the cluster or statistics have been reset.",
          "readOnly": true
        },
        "members": {
          "type": "array",
          "description": "An array of all existing cluster members.",
          "items": {
            "type": "string"
          },
          "readOnly": true
        },
        "oldestMemberId": {
          "type": "integer",
          "format": "int32",
          "description": "The senior cluster member id; -1 if the cluster service is not running.",
          "readOnly": true
        }
      }
    },
    "health": {
      "type": "object",
      "properties": {
        "nodeId": {
          "type": "integer",
          "format": "int64",
          "description": "The ID of member to which the health check belongs",
          "readOnly": true
        },
        "type": {
          "type": "string",
          "description": "The type of the MBean",
          "enum": [
            "Health"
          ],
          "readOnly": true
        },
        "name": {
          "type": "string",
          "description": "The name of the health check",
          "readOnly": true
        },
        "description": {
          "type": "string",
          "description": "The description of the health check",
          "readOnly": true
        },
        "ready": {
          "type": "boolean",
          "description": "The ready status service represented by the health check",
          "readOnly": true
        },
        "started": {
          "type": "boolean",
          "description": "The started status service represented by the health check",
          "readOnly": true
        },
        "live": {
          "type": "boolean",
          "description": "The live status service represented by the health check",
          "readOnly": true
        },
        "safe": {
          "type": "boolean",
          "description": "The safe status service represented by the health check",
          "readOnly": true
        },
        "memberHealthCheck": {
          "type": "boolean",
          "description": "A flag indicating whether this health check contributes to the member's overall health",
          "readOnly": true
        }
      }
    },
    "member": {
      "type": "object",
      "properties": {
        "nodeId": {
          "type": "integer",
          "format": "int64",
          "description": "The ID of member to which the MBean belongs",
          "readOnly": true
        },
        "location": {
          "type": "string",
          "description": "The location of the MBean server",
          "readOnly": true
        },
        "type": {
          "type": "string",
          "description": "The type of the MBean",
          "enum": [
            "Node"
          ],
          "readOnly": true
        },
        "member": {
          "type": "string",
          "description": "Name of the cluster member"
        },
        "processName": {
          "type": "string",
          "description": "A configured name that should be the same for Members that are in the same process (JVM), and different for Members that are in different processes. If not explicitly provided, for processes running with JRE 1.5 or higher the name will be calculated internally as the Name attribute of the system RuntimeMXBean, which normally represents the process identifier (PID).",
          "readOnly": true
        },
        "socketCount": {
          "type": "integer",
          "format": "int32",
          "description": "Number of CPU sockets for the machine this Member is running on.",
          "readOnly": true
        },
        "siteName": {
          "type": "string",
          "description": "A configured name that should be the same for Members that are on the same physical site (e.g. data center), and different for Members that are on different physical sites.",
          "readOnly": true
        },
        "publisherSuccessRate": {
          "type": "number",
          "format": "float",
          "description": "The publisher success rate for this cluster node since the node statistics were last reset. Publisher success rate is a ratio of the number of packets successfully delivered in a first attempt to the total number of sent packets. A failure count is incremented when there is no ACK received within a timeout period. It could be caused by either very high network latency or a high packet drop rate.",
          "readOnly": true
        },
        "trafficJamCount": {
          "type": "integer",
          "format": "int32",
          "description": "The maximum total number of packets in the send and resend queues that forces the publisher to pause client threads. Zero means no limit.",
          "readOnly": false
        },
        "multicastEnabled": {
          "type": "boolean",
          "description": "Specifies whether or not this Member uses multicast for group communication. If false, this Member will use the WellKnownAddresses to join the cluster and point-to-point unicast to communicate with other Members of the cluster.",
          "readOnly": true
        },
        "refreshTime": {
          "type": "string",
          "format": "date-time",
          "description": "The timestamp when this model was last retrieved from a corresponding node. For local servers it is the local time.",
          "readOnly": true
        },
        "bufferReceiveSize": {
          "type": "integer",
          "format": "int32",
          "description": "The buffer size of the unicast datagram socket used by the Receiver, measured in the number of packets. Changing this value at runtime is an inherently unsafe operation that will pause all network communications and may result in the termination of all cluster services.",
          "readOnly": false
        },
        "loggingDestination": {
          "type": "string",
          "description": "The output device used by the logging system. Valid values are stdout, stderr, jdk, log4j2, or a file name.",
          "readOnly": true
        },
        "multicastTTL": {
          "type": "integer",
          "format": "int32",
          "description": "The time-to-live for multicast packets sent out on this Member`s MulticastSocket.",
          "readOnly": true
        },
        "sendAckDelay": {
          "type": "integer",
          "format": "int32",
          "description": "The minimum number of milliseconds between the queueing of an Ack packet and the sending of the same. This value should be not more then a half of the ResendDelay value.",
          "readOnly": false
        },
        "unicastPort": {
          "type": "integer",
          "format": "int32",
          "description": "The port of the Member`s DatagramSocket for point-to-point communication.",
          "readOnly": true
        },
        "nackEnabled": {
          "type": "boolean",
          "description": "Indicates whether or not the early packet loss detection protocol is enabled.",
          "readOnly": true
        },
        "loggingFormat": {
          "type": "string",
          "description": "Specifies how messages will be formatted before being passed to the log destination",
          "readOnly": false
        },
        "packetsReceived": {
          "type": "integer",
          "format": "int64",
          "description": "The number of packets received since the node statistics were last reset.",
          "readOnly": true
        },
        "packetsSent": {
          "type": "integer",
          "format": "int64",
          "description": "The number of packets sent since the node statistics were last reset.",
          "readOnly": true
        },
        "sendQueueSize": {
          "type": "integer",
          "format": "int32",
          "description": "The number of packets currently scheduled for delivery. This number includes both packets that are to be sent immediately and packets that have already been sent and awaiting for acknowledgment. Packets that do not receive an acknowledgment within ResendDelay interval will be automatically resent.",
          "readOnly": true
        },
        "priority": {
          "type": "integer",
          "format": "int32",
          "description": "The priority or \"weight\" of the Member; used to determine tie-breakers.",
          "readOnly": true
        },
        "resendDelay": {
          "type": "integer",
          "format": "int32",
          "description": "The minimum number of milliseconds that a packet will remain queued in the Publisher`s re-send queue before it is resent to the recipient(s) if the packet has not been acknowledged. Setting this value too low can overflow the network with unnecessary repetitions. Setting the value too high can increase the overall latency by delaying the re-sends of dropped packets. Additionally, change of this value may need to be accompanied by a change in SendAckDelay value.",
          "readOnly": false
        },
        "productEdition": {
          "type": "string",
          "description": "The product edition this Member is running. Possible values  are Standard Edition (SE), Enterprise Edition (EE), Grid Edition (GE).",
          "readOnly": true
        },
        "memoryMaxMB": {
          "type": "integer",
          "format": "int32",
          "description": "The maximum amount of memory that the JVM will attempt to use in MB.",
          "readOnly": true
        },
        "trafficJamDelay": {
          "type": "integer",
          "format": "int32",
          "description": "The number of milliseconds to pause client threads when a traffic jam condition has been reached. Anything less than one (e.g. zero) is treated as one millisecond.",
          "readOnly": false
        },
        "guardRecoverCount": {
          "type": "integer",
          "format": "int32",
          "description": "The number of recovery attempts executed for all guardables on this node since the node statistics were last reset.",
          "readOnly": true
        },
        "multicastThreshold": {
          "type": "integer",
          "format": "int32",
          "description": "The percentage (0 to 100) of the servers in the cluster that a packet will be sent to, above which the packet will be multicasted and below which it will be unicasted.",
          "readOnly": false
        },
        "UID": {
          "type": "string",
          "description": "The unique identifier of the Member which is calculated based on its Timestamp, Address, Port and MachineId. This identifier is unique throughout the life of the cluster.",
          "readOnly": true
        },
        "roleName": {
          "type": "string",
          "description": "A configured name that can be used to indicate the role of a Member to the application. While managed by Coherence, this property is used only by the application.",
          "readOnly": true
        },
        "multicastAddress": {
          "type": "string",
          "description": "The IP address of the Member`s MulticastSocket for group communication.",
          "readOnly": true
        },
        "machineName": {
          "type": "string",
          "description": "A configured name that should be the same for all Members that are on the same physical machine, and different for Members that are on different physical machines.",
          "readOnly": true
        },
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "The short Member id that uniquely identifies the Member at this point in time and does not change for the life of this Member.",
          "readOnly": true
        },
        "memberName": {
          "type": "string",
          "description": "A configured name that must be unique for every Member.",
          "readOnly": true
        },
        "receiverPacketUtilization": {
          "type": "number",
          "format": "float",
          "description": "The receiver packet utilization for this cluster node since the socket was last reopened. This value is a ratio of the number of bytes received to the number that would have been received had all packets been full. A low utilization indicates that data is not being sent in large enough chunks to make efficient use of the network.",
          "readOnly": true
        },
        "packetDeliveryEfficiency": {
          "type": "number",
          "format": "float",
          "description": "The efficiency of packet loss detection and retransmission.  A low efficiency is an indication that there is a high rate of unnecessary packet retransmissions.",
          "readOnly": true
        },
        "guardTerminateCount": {
          "type": "integer",
          "format": "int32",
          "description": "The number of termination attempts executed for all guardables on this node since the node statistics were last reset.",
          "readOnly": true
        },
        "machineId": {
          "type": "integer",
          "format": "int32",
          "description": "The Member`s machine Id.",
          "readOnly": true
        },
        "receiverSuccessRate": {
          "type": "number",
          "format": "float",
          "description": "The receiver success rate for this cluster node since the node statistics were last reset. Receiver success rate is a ratio of the number of packets successfully acknowledged in a first attempt to the total number of received packets. A failure count is incremented when a re-delivery of previously received packet is detected. It could be caused by either very high inbound network latency or lost ACK packets.",
          "readOnly": true
        },
        "memoryAvailableMB": {
          "type": "integer",
          "format": "int32",
          "description": "The total amount of memory in the JVM available for new objects in MB.",
          "readOnly": true
        },
        "timestamp": {
          "type": "string",
          "format": "date-time",
          "description": "The date/time value (in cluster time) that this Member joined the cluster.",
          "readOnly": true
        },
        "unicastAddress": {
          "type": "string",
          "description": "The IP address of the Member`s DatagramSocket for point-to-point communication.",
          "readOnly": true
        },
        "weakestChannel": {
          "type": "integer",
          "format": "int32",
          "description": "The id of the cluster node to which this node is having the most difficulty communicating, or -1 if none is found.  A channel is considered to be weak if either the point-to-point publisher or receiver success rates are below 1.0.",
          "readOnly": true
        },
        "cpuCount": {
          "type": "integer",
          "format": "int32",
          "description": "Number of CPU cores for the machine this Member is running on.",
          "readOnly": true
        },
        "loggingLimit": {
          "type": "integer",
          "format": "int32",
          "description": "The maximum number of characters that the logger daemon will process from the message queue before discarding all remaining messages in the  queue. Valid values are integers in the range [0...]. Zero implies no limit.",
          "readOnly": false
        },
        "flowControlEnabled": {
          "type": "boolean",
          "description": "Indicates whether or not FlowControl is enabled.",
          "readOnly": true
        },
        "tcpRingFailures": {
          "type": "integer",
          "format": "int64",
          "description": "The number of recovered TcpRing disconnects since the node statistics were last reset. A recoverable disconnect is an abnormal event that is registered when the TcpRing peer drops the TCP connection, but recovers after no more then maximum configured number of attempts.This value will be -1 if the TcpRing is disabled.",
          "readOnly": true
        },
        "wellKnownAddresses": {
          "type": "array",
          "description": "An array of well-known socket addresses that this Member uses to join the cluster.",
          "items": {
            "type": "string"
          },
          "readOnly": true
        },
        "packetsResentExcess": {
          "type": "integer",
          "format": "int64",
          "description": "The total number of packet retransmissions which were later proven unnecessary.",
          "readOnly": true
        },
        "nackSent": {
          "type": "integer",
          "format": "int64",
          "description": "The total number of NACK packets sent since the node statistics were last reset.",
          "readOnly": true
        },
        "bufferPublishSize": {
          "type": "integer",
          "format": "int32",
          "description": "The buffer size of the unicast datagram socket used by the Publisher, measured in the number of packets. Changing this value at runtime is an inherently unsafe operation that will pause all network communications and may result in the termination of all cluster services.",
          "readOnly": false
        },
        "loggingLevel": {
          "type": "integer",
          "format": "int32",
          "description": "Specifies which logged messages will be output to the log destination. Valid values are non-negative integers or -1 to disable all logger output.",
          "readOnly": false
        },
        "packetsResentEarly": {
          "type": "integer",
          "format": "int64",
          "description": "The total number of packets resent ahead of schedule. A packet is resent ahead of schedule when there is a NACK indicating that the packet has not been received.",
          "readOnly": true
        },
        "statistics": {
          "type": "string",
          "description": "Statistics for this cluster node in a human readable format.",
          "readOnly": true
        },
        "packetsRepeated": {
          "type": "integer",
          "format": "int64",
          "description": "The number of duplicate packets received since the node statistics were last reset.",
          "readOnly": true
        },
        "publisherPacketUtilization": {
          "type": "number",
          "format": "float",
          "description": "The publisher packet utilization for this cluster node since the node socket was last reopened. This value is a ratio of the number of bytes sent to the number that would have been sent had all packets been full. A low utilization indicates that data is not being sent in large enough chunks to make efficient use of the network.",
          "readOnly": true
        },
        "packetsBundled": {
          "type": "integer",
          "format": "int64",
          "description": "The total number of packets which were bundled prior to transmission. The total number of network transmissions is equal to (PacketsSent - PacketsBundled).",
          "readOnly": true
        },
        "rackName": {
          "type": "string",
          "description": "A configured name that should be the same for Members that are on the same physical \"rack\" (or frame or cage), and different for Members that are on different physical \"racks\".",
          "readOnly": true
        },
        "packetsResent": {
          "type": "integer",
          "format": "int64",
          "description": "The number of packets resent since the node statistics were last reset. A packet is resent when there is no ACK received within a timeout period.",
          "readOnly": true
        },
        "multicastPort": {
          "type": "integer",
          "format": "int32",
          "description": "The port of the Member`s MulticastSocket for group communication.",
          "readOnly": true
        },
        "quorumStatus": {
          "type": "string",
          "description": "The current state of the cluster quorum.",
          "readOnly": true
        },
        "tracingSamplingRatio": {
          "type": "number",
          "format": "float",
          "description": "The ratio of spans to trace when tracing is enabled.",
          "readOnly": false
        }
      }
    },
    "reporter": {
      "type": "object",
      "properties": {
        "nodeId": {
          "type": "integer",
          "format": "int64",
          "description": "The ID of member to which the MBean belongs",
          "readOnly": true
        },
        "location": {
          "type": "string",
          "description": "The location of the MBean server",
          "readOnly": true
        },
        "type": {
          "type": "string",
          "description": "The type of the MBean",
          "enum": [
            "Node"
          ],
          "readOnly": true
        },
        "member": {
          "type": "string",
          "description": "Name of the cluster member"
        },
        "autoStart": {
          "type": "boolean",
          "description": "True when the Reporter starts automatically with the node.",
          "readOnly": true
        },
        "configFile": {
          "type": "string",
          "description": "The configuration file for the Reporter.",
          "readOnly": false
        },
        "currentBatch": {
          "type": "number",
          "format": "int64",
          "description": "The batch identifier for the Reporter.",
          "readOnly": false
        },
    "intervalSeconds": {
          "type": "number",
          "format": "int64",
          "description": "The interval between executions in seconds.",
          "readOnly": false
        },
        "lastExecuteTime": {
          "type": "string",
          "format": "date-time",
          "description": "The last time a report batch was executed.",
          "readOnly": true
        },
        "lastReport": {
          "type": "string",
          "description": "The last report to execute.",
          "readOnly": true
        },
        "outputPath": {
          "type": "string",
          "description": "The path where report output will be located.",
          "readOnly": false
        },
        "reports": {
          "type": "array",
          "description": "The list of reports executed.",
          "items": {
            "type": "string"
          },
          "readOnly": true
        },
        "runAverageMillis": {
          "type": "number",
          "format": "double",
          "description": "The average batch runtime in milliseconds since the statistics were last reset.",
          "readOnly": true
        },
        "runLastMillis": {
          "type": "integer",
          "format": "int64",
          "description": "The last batch runtime in milliseconds since the statistics were last reset..",
          "readOnly": true
        },
        "runMaxMillis": {
          "type": "integer",
          "format": "int64",
          "description": "The maximum batch runtime in milliseconds since the statistics were last reset.",
          "readOnly": true
        },
        "state": {
          "type": "string",
          "description": "The state of the Reporter. Valid values are:\n\nRunning (reports are being executed);\nSleeping (reporter is sleeping between report invocations);\nWaiting (the reporter is waiting for the interval to complete);\nStarting (the reporter is being started);\nStopping (the reporter is attempting to stop execution and waiting for running reports to complete);\nStopped (the reporter is stopped).",
          "readOnly": false
        }
      }
    },
    "ownership": {
      "type": "object",
      "properties": {
        "ownership": {
          "type": "string",
          "description": "Ownership info of the service member.",
          "readOnly": true
        }
      }
    },
    "distributionState": {
      "type": "object",
      "properties": {
        "distributionState": {
          "type": "string",
          "description": "Distribution state of the service member.",
          "readOnly": true
        }
      }
    },
    "jvmMemory": {
      "type": "object",
      "properties": {
        "nodeId": {
          "type": "integer",
          "format": "int64",
          "description": "The ID of member to which the MBean belongs",
          "readOnly": true
        },
        "member": {
          "type": "string",
          "description": "Name of the cluster member"
        },
        "location": {
          "type": "string",
          "description": "The location of the MBean server",
          "readOnly": true
        },
        "type": {
          "type": "string",
          "description": "The type of the MBean",
          "enum": [
            "Platform"
          ],
          "readOnly": true
        },
        "subType": {
          "type": "string",
          "description": "The sub-type of the MBean",
          "enum": [
            "Memory"
          ],
          "readOnly": true
        },
        "domain": {
          "type": "string",
          "description": "The domain of the MBean",
          "enum": [
            "java.lang"
          ],
          "readOnly": true
        },
        "objectPendingFinalizationCount": {
          "type": "integer",
          "format": "int64",
          "readOnly": true
        },
        "heapMemoryUsage": {
          "type": "object",
          "readOnly": true,
          "properties": {
            "committed": {
              "type": "integer"
            },
            "init": {
              "type": "integer"
            },
            "max": {
              "type": "integer"
            },
            "used": {
              "type": "integer"
            }
          }
        },
        "nonHeapMemoryUsage": {
          "type": "object",
          "readOnly": true,
          "properties": {
            "committed": {
              "type": "integer"
            },
            "init": {
              "type": "integer"
            },
            "max": {
              "type": "integer"
            },
            "used": {
              "type": "integer"
            }
          }
        }
      }
    },
    "journalRM": {
      "type": "object",
      "description": "Provides metrics for a Journal implementation.",
      "properties": {
        "nodeId": {
          "type": "integer",
          "format": "int64",
          "description": "The ID of member to which the MBean belongs",
          "readOnly": true
        },
        "location": {
          "type": "string",
          "description": "The location of the MBean server",
          "readOnly": true
        },
        "type": {
          "type": "string",
          "description": "The type of the MBean",
          "enum": [
            "Journal"
          ],
          "readOnly": true
        },
        "name": {
          "type": "string",
          "description": "The name of the journal",
          "readOnly": true
        },
        "member": {
          "type": "string",
          "description": "Name of the cluster member"
        },
        "bufferSize": {
          "type": "integer",
          "format": "int32",
          "description": "The size of the buffers used to write a chunk of data to the journal",
          "readOnly": true
        },
        "maxPoolSize": {
          "type": "integer",
          "format": "int64",
          "description": "The maximum size, in bytes, of the buffer pool.",
          "readOnly": true
        },
        "maxBacklogSize": {
          "type": "integer",
          "format": "int32",
          "description": "When this value, maximum backlog size, is reached, writes are delayed until dropping below this max.",
          "readOnly": true
        },
        "highFileCount": {
          "type": "integer",
          "format": "int32",
          "description": "The high file count after which compulsory compaction occurs for the Journal.",
          "readOnly": true
        },
        "maxValueSize": {
          "type": "integer",
          "format": "int32",
          "description": "The maximum allowable size, in bytes, for serialized values.",
          "readOnly": true
        },
        "maxFileSize": {
          "type": "integer",
          "format": "int64",
          "description": "The maximum size of an individual Journal file.",
          "readOnly": true
        },
        "collectorLoadFactor": {
          "type": "number",
          "format": "double",
          "description": "The load factor threshold at which files may be garbage collected. The larger the value, the more aggressive the compaction algorithm is.",
          "readOnly": true
        },
        "maxTotalRam": {
          "type": "integer",
          "format": "int64",
          "description": "The total amount of RAM used for this Journal.",
          "readOnly": true
        },
        "nioRam": {
          "type": "boolean",
          "description": "If true, the RAM Journal is using direct buffers (NIO RAM) instead of on heap buffers.",
          "readOnly": true
        },
        "backlogSize": {
          "type": "integer",
          "format": "int32",
          "description": "The total size in bytes of the serialized values that have yet to be synced to disk.",
          "readOnly": true
        },
        "backlogCount": {
          "type": "integer",
          "format": "int32",
          "description": "The number of serialized values that have yet to be persisted to disk.",
          "readOnly": true
        },
        "poolSize": {
          "type": "integer",
          "format": "int32",
          "description": "The total size, in bytes, of all available buffers in the pool.",
          "readOnly": true
        },
        "maxJournalFilesNumber": {
          "type": "integer",
          "format": "int32",
          "description": "The maximum number of journal files.",
          "readOnly": true
        },
        "binaryStoreCount": {
          "type": "integer",
          "format": "int32",
          "description": "The number of active BinaryStore objects that are using this Journal",
          "readOnly": true
        },
        "fileCount": {
          "type": "integer",
          "format": "int32",
          "description": "The number of Journal files currently in use.",
          "readOnly": true
        },
        "totalDataSize": {
          "type": "integer",
          "format": "int64",
          "description": "The amount of data currently stored for this Journal in bytes.",
          "readOnly": true
        },
        "totalFileSize": {
          "type": "integer",
          "format": "int64",
          "description": "The total size of all Journal files for this Journal.",
          "readOnly": true
        },
        "currentCollectorLoadFactor": {
          "type": "number",
          "format": "double",
          "description": "The current load factor threshold at which files are being garbage collected.",
          "readOnly": true
        },
        "highestLoadFactor": {
          "type": "number",
          "format": "double",
          "description": "The approximate high-water mark of the Journal capacity utilization.",
          "readOnly": true
        },
        "compactionCount": {
          "type": "integer",
          "format": "int32",
          "description": "Number of times compaction (garbage collection) was performed for the journal",
          "readOnly": true
        },
        "exhaustiveCompactionCount": {
          "type": "integer",
          "format": "int32",
          "description": "Number of times an exhaustive compaction (full garbage collection) was performed for the journal",
          "readOnly": true
        },
        "exhaustiveCompactionTime": {
          "type": "integer",
          "format": "int64",
          "description": "Total amount of time spent performing exhaustive compaction (full garbage collection) for the journal",
          "readOnly": true
        }
      }
    },
    "cache": {
      "type": "object",
      "description": "Details of the particular cache.",
      "properties": {
        "cacheName": {
          "type": "string",
          "description": "Name of the cache."
        },
        "memberCount": {
          "type": "integer",
          "format": "int32",
          "description": "Number of cache members."
        }
      }
    },
    "view": {
      "type": "object",
      "description": "Details of the particular view cache.",
      "properties": {
        "name": {
          "type": "string",
          "description": "Name of the view cache."
        },
        "readOnly": {
          "type": "boolean",
          "description": "Readonly setting for the cachestore."
        },
        "transformer": {
          "type": "string",
          "description": "Used by the associated view-scheme to transform values retrieved from the underlying cache."
        },
        "filter": {
          "type": "string",
          "description": "Filter used to to restrict the result set."
        },
        "cacheValues": {
          "type": "boolean",
          "description": "Specifies if the view is to maintain both keys and values (the default; i.e. true), or only keys."
        }
      }
    },
    "topic": {
      "type": "object",
      "description": "Details of the particular topic.",
      "properties": {
        "name": {
          "type": "string",
          "description": "Name of the topic."
        },
        "nodeId": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "int64"
          },
          "description": "Topic members."
        },
        "service": {
          "type": "string",
          "description": "Name of the service."
        },
        "type": {
          "enum": [
            "PagedTopic"
          ]
        },
        "retainConsumed": {
          "type": "array",
          "items": {
            "type": "boolean"
          },
          "description": "Retain consumed values."
        },
        "reconnectRetry": {
          "$ref": "#/definitions/summaryNumber"
        },
        "publishedCount": {
          "$ref": "#/definitions/summaryNumber"
        },
        "channelCount": {
          "$ref": "#/definitions/summaryNumber"
        },
        "subscriberTimeout": {
          "$ref": "#/definitions/summaryNumber"
        },
        "allowUnownedCommits": {
          "type": "array",
          "items": {
            "type": "boolean"
          },
          "description": "Allow unowned commits"
        },
        "publishedOneMinuteRate": {
          "$ref": "#/definitions/summaryNumber"
        },
        "pageCapacity": {
          "$ref": "#/definitions/summaryNumber"
        },
        "elementCalculator": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Element calculator."
        },
        "publishedMeanRate": {
          "$ref": "#/definitions/summaryNumber"
        },
        "reconnectTimeout": {
          "$ref": "#/definitions/summaryNumber"
        },
        "publishedFifteenMinuteRate": {
          "$ref": "#/definitions/summaryNumber"
        },
        "publishedFiveMinuteRate": {
          "$ref": "#/definitions/summaryNumber"
        },
        "reconnectWait": {
          "$ref": "#/definitions/summaryNumber"
        }
      }
    },
    "cacheAggregate": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "Name of the cluster member."
        },
        "averageMissMillis": {
          "$ref": "#/definitions/summaryNumber"
        },
        "totalPutsMillis": {
          "type": "integer",
          "format": "int64"
        },
        "highUnits": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "viewAggregate": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "Name of the view."
        },
        "reconnectInterval": {
          "$ref": "#/definitions/summaryNumber"
        },
        "size": {
          "$ref": "#/definitions/summaryNumber"
        }
      }
    },
    "topicAggregate": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "Name of the topic."
        },
        "reconnectRetry": {
          "$ref": "#/definitions/summaryNumber"
        },
        "retainConsumed": {
          "type": "boolean"
        },
        "elementCalculator": {
          "type": "string",
          "description": "Element calculator that calculates size of an element based on the size of the serialized binary value."
        }
      }
    },
    "cacheMember": {
      "type": "object",
      "properties": {
        "nodeId": {
          "type": "integer",
          "format": "int64",
          "description": "The ID of member to which the MBean belongs",
          "readOnly": true
        },
        "location": {
          "type": "string",
          "description": "The location of the MBean server",
          "readOnly": true
        },
        "type": {
          "type": "string",
          "description": "The type of the MBean",
          "enum": [
            "Cache"
          ],
          "readOnly": true
        },
        "name": {
          "type": "string",
          "description": "The name of the cache",
          "readOnly": true
        },
        "service": {
          "type": "string",
          "description": "The cache service name"
        },
        "member": {
          "type": "string",
          "description": "Name of the cluster member"
        },
        "tier": {
          "type": "string",
          "description": "Tier of the cache.",
          "readOnly": true,
          "enum": [
            "front",
            "back"
          ]
        },
        "totalGetsMillis": {
          "type": "integer",
          "format": "int64",
          "description": "The total number of milliseconds spent on get() operations since the last time statistics were reset. This statistic is only tracked for caches that may incur expensive hits (for example the front of a near cache).",
          "readOnly": true
        },
        "description": {
          "type": "string",
          "description": "The cache description.",
          "readOnly": true
        },
        "lowUnits": {
          "type": "integer",
          "format": "int32",
          "description": "The number of units to which the cache will shrink when it prunes. This is often referred to as a `low water mark` of the cache.",
          "readOnly": false
        },
        "size": {
          "type": "integer",
          "format": "int32",
          "description": "The number of entries in the cache.",
          "readOnly": true
        },
        "queueDelay": {
          "type": "integer",
          "format": "int32",
          "description": "The number of seconds that an entry added to a write-behind queue will sit in the queue before being stored via a CacheStore. Applicable only for WRITE-BEHIND persistence type.",
          "readOnly": false
        },
        "storeWriteMillis": {
          "type": "integer",
          "format": "int64",
          "description": "The cumulative time (in milliseconds) spent on store and erase operations; -1 if persistence type is NONE or READ-ONLY. This statistic is only tracked for caches associated with a CacheStore.",
          "readOnly": true
        },
        "storeAverageReadMillis": {
          "type": "integer",
          "format": "int64",
          "description": "The average time (in millis) spent per read operation; -1 if persistence type is NONE. This statistic is only tracked for caches associated with a CacheStore.",
          "readOnly": true
        },
        "totalPuts": {
          "type": "integer",
          "format": "int64",
          "description": "The total number of put() operations since the last time statistics were reset.",
          "readOnly": true
        },
        "totalPutsMillis": {
          "type": "integer",
          "format": "int64",
          "description": "The total number of milliseconds spent on put() operations since the last time statistics were reset. This statistic is only tracked for caches that may incur expensive hits (for example the front of a near cache).",
          "readOnly": true
        },
        "refreshTime": {
          "type": "string",
          "format": "date-time",
          "description": "The timestamp when this model was last retrieved from a corresponding node. For local servers it is the local time.",
          "readOnly": true
        },
        "queueSize": {
          "type": "integer",
          "format": "int32",
          "description": "The size of the write-behind queue size. Applicable only for WRITE-BEHIND persistence type.",
          "readOnly": true
        },
        "requeueThreshold": {
          "type": "integer",
          "format": "int32",
          "description": "The maximum size of the write-behind queue for which failed CacheStore write operations are requeued. If zero, the write-behind requeueing will be disabled. Applicable only for WRITE-BEHIND persistence type.",
          "readOnly": false
        },
        "averageMissMillis": {
          "type": "number",
          "format": "double",
          "description": "The average number of milliseconds per get() invocation that is a miss. This statistic is only tracked for caches that may incur expensive hits (for example the front of a near cache).",
          "readOnly": true
        },
        "highUnits": {
          "type": "integer",
          "format": "int32",
          "description": "The limit of the cache size measured in units. The cache will prune itself automatically once it reaches its maximum unit level. This is often referred to as the `high water mark` of the cache.",
          "readOnly": false
        },
        "hitProbability": {
          "type": "number",
          "format": "double",
          "description": "The rough probability (0 <= p <= 1) that the next invocation will be a hit, based on the statistics collected  since the last time statistics were reset.",
          "readOnly": true
        },
        "storeReads": {
          "type": "integer",
          "format": "int64",
          "description": "The total number of load operations; -1 if persistence type is NONE.",
          "readOnly": true
        },
        "totalGets": {
          "type": "integer",
          "format": "int64",
          "description": "The total number of get() operations since the last time statistics were reset.",
          "readOnly": true
        },
        "unitFactor": {
          "type": "integer",
          "format": "int32",
          "description": "The factor by which the Units, LowUnits and HighUnits properties are adjusted. Using a BINARY unit calculator, for example, the factor of 1048576 could be used to count megabytes instead of bytes.",
          "readOnly": true
        },
        "averageHitMillis": {
          "type": "number",
          "format": "double",
          "description": "The average number of milliseconds per get() invocation that is a hit. This statistic is only tracked for caches that may incur expensive hits (for example the front of a near cache).",
          "readOnly": true
        },
        "refreshFactor": {
          "type": "number",
          "format": "double",
          "description": "The RefreshFactor attribute is used to calculate the `soft-expiration` time for cache entries. Soft-expiration is the point in time prior to the actual expiration after which any access request for an entry will schedule an asynchronous load request for the entry. This attribute is only applicable for a ReadWriteBackingMap which has an internal LocalCache with scheduled automatic expiration. The value of this element is expressed as a percentage of the internal LocalCache expiration interval. Valid values are doubles in the interval[0.0, 1.0]. If zero, refresh-ahead scheduling will be disabled.",
          "readOnly": false
        },
        "memoryUnits": {
          "type": "boolean",
          "description": "Determines if Units is measuring the memory usage of the cache.  If true, Units * UnitFactor is the number of bytes consumed by the cache.",
          "readOnly": true
        },
        "cachePrunesMillis": {
          "type": "integer",
          "format": "int64",
          "description": "The total number of milliseconds for the prune operations  since the last time statistics were reset.",
          "readOnly": true
        },
        "batchFactor": {
          "type": "number",
          "format": "double",
          "description": "The BatchFactor attribute is used to calculate the `soft-ripe` time for write-behind queue entries. A queue entry is considered to be `ripe` for a write operation if it has been in the write-behind queue for no less than the QueueDelay interval. The `soft-ripe` time is the point in time prior to the actual `ripe` time after which an entry will be included in a batched asynchronous write operation to the CacheStore (along with all other `ripe` and `soft-ripe` entries). This attribute is only applicable if asynchronous writes are enabled (i.e. the value of the QueueDelay attribute is greater than zero) and the CacheStore implements the storeAll() method. The value of the element is expressed as a percentage of the QueueDelay interval. Valid values are doubles in the interval [0.0, 1.0].",
          "readOnly": false
        },
        "cacheMissesMillis": {
          "type": "integer",
          "format": "int64",
          "description": "The total number of milliseconds ( since the last time statistics were reset) for the get() operations for which no entry existed in this map. This statistic is only tracked for caches that may incur expensive hits (for example the front of a near cache).",
          "readOnly": true
        },
        "averageGetMillis": {
          "type": "number",
          "format": "double",
          "description": "The average number of milliseconds per get() invocation since the last time statistics were reset. This statistic is only tracked for caches that may incur expensive hits (for example the front of a near cache).",
          "readOnly": true
        },
        "averagePutMillis": {
          "type": "number",
          "format": "double",
          "description": "The average number of milliseconds per put() invocation since the cache statistics were last reset. This statistic is only tracked for caches that may incur expensive hits (for example the front of a near cache).",
          "readOnly": true
        },
        "persistenceType": {
          "type": "string",
          "description": "Deprecated - use attribute CacheStoreType instead.",
          "readOnly": true
        },
        "storeAverageBatchSize": {
          "type": "integer",
          "format": "int64",
          "description": "The average number of entries stored per CacheStore write operation. A call to the store() method is counted as a batch of one, whereas a call to the storeAll() method is counted as a batch of the passed Map size. The value of this attribute is -1 if the persistence type is NONE.",
          "readOnly": true
        },
        "cacheStoreType": {
          "type": "string",
          "description": "The cache store type for this cache. Possible values include NONE, READ-ONLY, WRITE-THROUGH, WRITE-BEHIND.",
          "readOnly": true
        },
        "units": {
          "type": "integer",
          "format": "int32",
          "description": "The size of the cache measured in units. This value needs to be adjusted by the UnitFactor.",
          "readOnly": true
        },
        "cacheHits": {
          "type": "integer",
          "format": "int64",
          "description": "The rough number of cache hits  since the last time statistics were reset. A cache hit is a read operation invocation (i.e. get()) for which an entry exists in this map.",
          "readOnly": true
        },
        "storeReadMillis": {
          "type": "integer",
          "format": "int64",
          "description": "The cummulative time (in millis) spent on load operations; -1 if persistence type is NONE. This statistic is only tracked for caches associated with a CacheStore.",
          "readOnly": true
        },
        "storeFailures": {
          "type": "integer",
          "format": "int64",
          "description": "The total number of CacheStore failures (load, store and erase operations); -1 if persistence type is NONE.",
          "readOnly": true
        },
        "storeWrites": {
          "type": "integer",
          "format": "int64",
          "description": "The total number of store and erase operations; -1 if persistence type is NONE or READ-ONLY.",
          "readOnly": true
        },
        "cacheMisses": {
          "type": "integer",
          "format": "int64",
          "description": "The rough number of cache misses since the last time statistics were reset.",
          "readOnly": true
        },
        "expiryDelay": {
          "type": "integer",
          "format": "int32",
          "description": "The time-to-live for cache entries in milliseconds. Value of zero indicates that the automatic expiry is disabled. Change of this attribute will not affect already-scheduled expiry of existing entries.",
          "readOnly": false
        },
        "storeAverageWriteMillis": {
          "type": "integer",
          "format": "int64",
          "description": "The average time (in millis) spent per write operation; -1 if persistence type is NONE. This statistic is only tracked for caches associated with a CacheStore.",
          "readOnly": true
        },
        "cacheHitsMillis": {
          "type": "integer",
          "format": "int64",
          "description": "The total number of milliseconds (since the last time statistics were reset) for the get() operations for which an entry existed in this map. This statistic is only tracked for caches that may incur expensive hits (for example the front of a near cache).",
          "readOnly": true
        },
        "cachePrunes": {
          "type": "integer",
          "format": "int64",
          "description": "The number of `prune` operations  since the last time statistics were reset. A prune operation occurs every time the cache reaches its high watermark.",
          "readOnly": true
        },
        "evictionCount": {
          "type": "integer",
          "format": "int64",
          "description": "The number of evictions from the backing map managed by this StorageManager caused by entries expiry or insert operations that would make the underlying backing map to reach its configured size limit.  The eviction count is used to audit the cache size in a static system.  Cache Size =  Insert Count - Remove Count - Eviction count.  Therefore the eviction count is not reset by the reset statistics method.",
          "readOnly": true
        },
        "insertCount": {
          "type": "integer",
          "format": "int64",
          "description": "The number of inserts into the backing map managed by this StorageManager. In addition to standard inserts caused by put and invoke operations or synthetic inserts caused by get operations with read-through backing map topology, this counter is incremented when distribution transfers move resources `into` the underlying backing map and is decremented when  distribution transfers move data `out`.  The insert count is used to audit the cache size in a static system.  Cache Size =  Insert Count - Remove Count - Eviction count.  Therefore the insert count is not reset by the reset statistics method.",
          "readOnly": true
        },
        "listenerKeyCount": {
          "type": "integer",
          "format": "int32",
          "description": "The number of key-based listeners currently registered with the StorageManager.",
          "readOnly": true
        },
        "triggerInfo": {
          "type": "array",
          "description": "An array of information for each trigger applied to the portion of the partitioned cache managed by the StorageManager. Each element is a string value that represents a human-readable description of the corresponding MapTrigger.",
          "items": {
            "type": "string"
          },
          "readOnly": true
        },
        "nonOptimizedQueryTotalMillis": {
          "type": "integer",
          "format": "int64",
          "description": "The total execution time in milliseconds for queries that could not be resolved or were partially resolved against indexes since statistics were last reset.",
          "readOnly": true
        },
        "indexInfo": {
          "type": "array",
          "description": "An array of information for each index applied to the portion of the partitioned cache managed by the StorageManager. Each element is a string value that includes a ValueExtractor description, ordered flag (true to indicate that the contents of the index are ordered; false otherwise), and cardinality (number of unique values indexed).",
          "items": {
            "type": "string"
          },
          "readOnly": true
        },
        "listenerRegistrations": {
          "type": "integer",
          "format": "int64",
          "description": "The total number of listener registration requests processed by the StorageManager since the last time the statistics were reset.",
          "readOnly": true
        },
        "listenerFilterCount": {
          "type": "integer",
          "format": "int32",
          "description": "The number of filter-based listeners currently registered with the StorageManager.",
          "readOnly": true
        },
        "nonOptimizedQueryCount": {
          "type": "integer",
          "format": "int64",
          "description": "The total number of queries that could not be resolved or were partially resolved against indexes since statistics were last reset.",
          "readOnly": true
        },
        "locksGranted": {
          "type": "integer",
          "format": "int32",
          "description": "The number of locks currently granted for the portion of the partitioned cache managed by the StorageManager.",
          "readOnly": true
        },
        "indexTotalUnits": {
          "type": "integer",
          "format": "int64",
          "description": "The total units used by all indices on the associated cache.",
          "readOnly": true
        },
        "optimizedQueryAverageMillis": {
          "type": "integer",
          "format": "int64",
          "description": "The average duration in milliseconds per optimized query execution since the statistics were last reset.",
          "readOnly": true
        },
        "optimizedQueryTotalMillis": {
          "type": "integer",
          "format": "int64",
          "description": "The total execution time in milliseconds for queries that were fully resolved using indexes since statistics were last reset.",
          "readOnly": true
        },
        "removeCount": {
          "type": "integer",
          "format": "int64",
          "description": "The number of removes from the backing map managed by this StorageManager caused by operations such as clear, remove or invoke.  The remove count is used to audit the cache size in a static system.  Cache Size =  Insert Count - Remove Count - Eviction count.  Therefore the remove count is not reset by the reset statistics method.",
          "readOnly": true
        },
        "locksPending": {
          "type": "integer",
          "format": "int32",
          "description": "The number of pending lock requests for the portion of the partitioned cache managed by the StorageManager.",
          "readOnly": true
        },
        "queryContentionCount": {
          "type": "integer",
          "format": "int64",
          "description": "Total number of times a query had to be re-evaluated due to a concurrent update since statistics were last reset. This statistics provides a measure of an impact of concurrent updates on the query perfomance. If the total number of queries is Q and the number of contentions is C then the expected performance degradation factor should be no more than (Q + C)/Q.",
          "readOnly": true
        },
        "eventsDispatched": {
          "type": "integer",
          "format": "int64",
          "description": "The total number of events dispatched by the StorageManager since the last time the statistics were reset.",
          "readOnly": true
        },
        "optimizedQueryCount": {
          "type": "integer",
          "format": "int64",
          "description": "The total number of queries that were fully resolved using indexes since statistics were last reset.",
          "readOnly": true
        },
        "maxQueryDurationMillis": {
          "type": "integer",
          "format": "int64",
          "description": "The duration in milliseconds of the longest query execution since statistics were last reset.",
          "readOnly": true
        },
        "maxQueryThresholdMillis": {
          "type": "integer",
          "format": "int64",
          "description": "A query execution threshold in milliseconds The longest query executing longer than this threshold will be reported by the MaxQueryDescription attribute.",
          "readOnly": false
        },
        "maxQueryDescription": {
          "type": "string",
          "description": "A string representation of a query with the longest execution time exceeding the MaxQueryThresholdMillis since statistics were last reset.",
          "readOnly": true
        },
        "nonOptimizedQueryAverageMillis": {
          "type": "integer",
          "format": "int64",
          "description": "The average duration in milliseconds per non-optimized query execution since the statistics were last reset.",
          "readOnly": true
        },
        "eventInterceptorInfo": {
          "type": "array",
          "description": "An array of statistics for events processed by event interceptors.",
          "items": {
            "type": "string"
          },
          "readOnly": true
        }
      }
    },
    "viewMember": {
      "type": "object",
      "properties": {
        "readOnly": {
          "type": "boolean",
          "description": "Readonly setting for the cachestore.",
          "readOnly": true
        },
        "transformed": {
          "type": "boolean",
          "description": "Indicates if the view transforms values.",
          "readOnly": true
        },
        "transformer": {
          "type": "string",
          "description": "Used by the associated view-scheme to transform values retrieved from the underlying cache.",
          "readOnly": true
        },
        "reconnectInterval": {
          "type": "integer",
          "format": "int64",
          "description": "Indicates the period in which re-synchronization with the underlying cache will be delayed in the case the connection is severed.",
          "readOnly": true
        },
        "filter": {
          "type": "string",
          "description": "Filter used to to restrict the result set.",
          "readOnly": true
        },
        "size": {
          "type": "integer",
          "format": "int64",
          "description": "The number of entries in the cache.",
          "readOnly": true
        },
        "cacheValues": {
          "type": "boolean",
          "description": "Specifies if the view is to maintain both keys and values (the default; i.e. true), or only keys.",
          "readOnly": true
        },
        "viewName": {
          "type": "string",
          "description": "Name of the view cache.",
          "readOnly": true
        },
        "service": {
          "type": "string",
          "description": "The service name.",
          "readOnly": true
        },
        "name": {
          "type": "string",
          "description": "Name of the view cache.",
          "readOnly": true
        },
        "nodeId": {
          "type": "integer",
          "format": "int64",
          "description": "The ID of member to which the MBean belongs",
          "readOnly": true
        }
      }
    },
    "topicMember": {
      "type": "object",
      "properties": {
        "nodeId": {
          "type": "integer",
          "format": "int64",
          "description": "The ID of member to which the MBean belongs",
          "readOnly": true
        },
        "type": {
          "type": "string",
          "description": "The type of the MBean",
          "enum": [
            "PagedTopic"
          ],
          "readOnly": true
        },
        "name": {
          "type": "string",
          "description": "The name of the topic",
          "readOnly": true
        },
        "service": {
          "type": "string",
          "description": "The topic service name.",
          "readOnly": true
        },
        "cluster": {
          "type": "string",
          "description": "The cluster name.",
          "readOnly": true
        },
        "retainConsumed": {
          "type": "boolean",
          "description": "Determine whether to retain consumed values.",
          "readOnly": true
        },
        "reconnectRetry": {
          "type": "integer",
          "format": "int64",
          "description": "The amount of time publishers and subscribers will wait between attempts to reconnect after being disconnected.",
          "readOnly": true
        },
        "publishedCount": {
          "type": "integer",
          "format": "int64",
          "description": "The published messages count.",
          "readOnly": true
        },
        "channelCount": {
          "type": "integer",
          "format": "int32",
          "description": "The number of channels that this topic has.",
          "readOnly": true
        },
        "subscriberTimeout": {
          "type": "integer",
          "format": "int64",
          "description": "Number of milliseconds within which a subscriber must issue a heartbeat or be forcefully considered closed.",
          "readOnly": true
        },
        "allowUnownedCommits": {
          "type": "boolean",
          "description": "True if the topic allows commits for a position in a channel by subscribers that do not own the channel.",
          "readOnly": true
        },
        "publishedOneMinuteRate": {
          "type": "number",
          "format": "double",
          "description": "the published messages one-minute rate.",
          "readOnly": true
        },
        "pageCapacity": {
          "type": "integer",
          "format": "int64",
          "description": "the capacity of a page in the topic.",
          "readOnly": true
        },
        "elementCalculator": {
          "type": "string",
          "description": "The calculator name used to calculate element sizes.",
          "readOnly": true
        },
        "publishedMeanRate": {
          "type": "number",
          "format": "double",
          "description": "the published messages mean rate.",
          "readOnly": true
        },
        "reconnectTimeout": {
          "type": "integer",
          "format": "int64",
          "description": "The maximum amount of time publishers and subscribers will attempt to reconnect after being disconnected",
          "readOnly": true
        },
        "publishedFifteenMinuteRate": {
          "type": "number",
          "format": "double",
          "description": "The published messages fifteen minute rate.",
          "readOnly": true
        },
        "publishedFiveMinuteRate": {
          "type": "number",
          "format": "double",
          "description": "The published messages five minute rate.",
          "readOnly": true
        },
        "reconnectWait": {
          "type": "integer",
          "format": "int64",
          "description": "The maximum amount of time publishers and subscribers will wait before attempting to reconnect after being disconnected.",
          "readOnly": true
        },
        "channels": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/topicChannel"
          }
        }
      }
    },
    "topicChannel": {
      "type": "object",
      "properties": {
        "Channel": {
          "type": "integer",
          "format": "int32",
          "description": "The channel.",
          "readOnly": true
        },
        "PublishedCount": {
          "type": "integer",
          "format": "int64",
          "description": "The published messages count.",
          "readOnly": true
        },
        "PublishedFifteenMinuteRate": {
          "type": "number",
          "format": "double",
          "description": "The published messages fifteen minute rate.",
          "readOnly": true
        },
        "PublishedFiveMinuteRate": {
          "type": "number",
          "format": "double",
          "description": "The published messages five minute rate.",
          "readOnly": true
        },
        "PublishedOneMinuteRate": {
          "type": "number",
          "format": "double",
          "description": "The published messages one minute rate.",
          "readOnly": true
        },
        "PublishedMeanRate": {
          "type": "number",
          "format": "double",
          "description": "The published messages mean rate.",
          "readOnly": true
        },
        "Tail": {
          "type": "string",
          "description": "Tail position.",
          "readOnly": true
        }
      }
    },
    "subscriber": {
      "type":       "object",
      "properties": {
        "maxBacklog":         {
          "type":        "integer",
          "format":      "int64",
          "description": "The maximum allowed backlog of receive requests not yet complete.",
          "readOnly":    true
        },
        "channelCount":       {
          "type":        "integer",
          "format":      "int32",
          "description": "The number of channels the topic has.",
          "readOnly":    true
        },
        "receiveCompletions": {
          "type":        "integer",
          "format":      "int64",
          "description": "The number of completed received requests."
        },
        "stateName":          {
          "type":        "string",
          "description": "The subscriber's state.",
          "readOnly":    true
        },
        "waits":              {
          "type":        "integer",
          "format":      "int64",
          "description": "The number of times the subscriber has had to wait on an empty topic.",
          "readOnly":    true
        },
        "receiveErrors":      {
          "type":        "integer",
          "format":      "int64",
          "description": "The number of received requests completed in error.",
          "readOnly":    true
        },
        "subscriberGroup":    {
          "type":        "string",
          "description": "The group the subscriber belongs to, if part of a group.",
          "readOnly":    true
        },
        "channelAllocations": {
          "type":        "string",
          "description": "The subscriber's allocated channels.",
          "readOnly":    true
        },
        "channels":           {
          "type":  "object",
          "additionalProperties": {
            "$ref": "#/definitions/subscriberChannel"
          }
        },
        "polls":              {
          "type":        "integer",
          "format":      "int64",
          "description": "The number of times the subscriber has polled for messages.",
          "readOnly":    true
        },
        "receiveEmpty":       {
          "type":        "integer",
          "format":      "int64",
          "description": "The number of empty receive requests.",
          "readOnly":    true
        },
        "type":               {
          "type":        "string",
          "description": "The type of the MBean",
          "enum":        [
            "PagedTopicSubscriber"
          ],
          "readOnly":    true
        },
        "filter":             {
          "type":        "string",
          "description": "The optional filter being used to filter messages.",
          "readOnly":    true
        },
        "state":              {
          "type":        "integer",
          "format":      "int64",
          "description": "The state of the subscriber.",
          "readOnly":    true
        },
        "disconnections":     {
          "type":        "integer",
          "format":      "int64",
          "description": "The number of times this subscriber has disconnected.",
          "readOnly":    true
        },
        "converter":          {
          "type":        "string",
          "description": "The optional converter being used to transform messages.",
          "readOnly":    true
        },
        "backlog":            {
          "type":        "integer",
          "format":      "int64",
          "description": "The number of outstanding receive requests.",
          "readOnly":    true
        },
        "id":                 {
          "type":        "integer",
          "format":      "int64",
          "description": "The subscriber's identifier.",
          "readOnly":    true
        },
        "completeOnEmpty":    {
          "type":        "boolean",
          "description": "A flag indicating whether the subscriber completes receive requests with a null message when the topic is empty.",
          "readOnly":    true
        },
        "receivedCount":      {
          "type":        "integer",
          "format":      "int64",
          "description": "The number of elements received.",
          "readOnly":    true
        },
        "member":             {
          "type":        "string",
          "description": "Name of the cluster member",
          "readOnly":    true
        },
        "notifications":      {
          "type":        "integer",
          "format":      "int64",
          "description": "The number of channel notifications received.",
          "readOnly":    true
        },
        "serializer":         {
          "type":        "string",
          "description": "The serializer used to deserialize messages.",
          "readOnly":    true
        },
        "service":            {
          "type":        "string",
          "description": "The topic service name.",
          "readOnly":    true
        },
        "nodeId":             {
          "type":        "integer",
          "format":      "int64",
          "description": "The ID of member to which the MBean belongs",
          "readOnly":    true
        },
        "topic":              {
          "type":        "string",
          "description": "Name of the topic.",
          "readOnly":    true
        },
        "cluster":            {
          "type":        "string",
          "description": "The cluster name.",
          "readOnly":    true
        }
      }
    },
    "subscriberChannel": {
      "type": "object",
      "properties": {
        "Channel": {
          "type": "integer",
          "format": "int32",
          "description": "The channel.",
          "readOnly": true
        },
        "Empty": {
          "type": "boolean",
          "description": "True if the channel is empty.",
          "readOnly": true
        },
        "Head": {
          "type": "string",
          "description": "Head position.",
          "readOnly": true
        },
        "LastCommit": {
          "type": "string",
          "description": "Last committed position.",
          "readOnly": true
        },
        "LastReceived": {
          "type": "string",
          "description": "Last committed position.",
          "readOnly": true
        },
        "Owned": {
          "type": "boolean",
          "description": "True if the channel is owned by this subscriber.",
          "readOnly": true
        }
      }
    },
    "subscriberGroup": {
      "type": "object",
      "properties": {
        "polledFiveMinuteRate": {
          "type": "number",
          "format": "double",
          "description": "The polled messages five minute rate.",
          "readOnly": true
        },
        "transformer":  {
          "type": "string",
          "description": "The transformer for the subscriber group.",
          "readOnly": true
        },
        "channelCount":  {
          "type": "integer",
          "format": "int32",
          "description": "The channel count.",
          "readOnly": true
        },
        "filter": {
          "type": "string",
          "description": "The filter for the subscriber group.",
          "readOnly": true
        },
        "polledMeanRate": {
          "type": "number",
          "format": "double",
          "description": "The polled messages mean rate.",
          "readOnly": true
        },
        "polledFifteenMinuteRate": {
          "type": "number",
          "format": "double",
          "description": "The polled messages fifteen minute rate.",
          "readOnly": true
        },
        "polledOneMinuteRate": {
          "type": "number",
          "format": "double",
          "description": "The polled messages one minute rate.",
          "readOnly": true
        },
        "polledCount": {
          "type": "integer",
          "format": "int64",
          "description": "The polled messages count.",
          "readOnly": true
        },
        "channels": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/subscriberGroupChannel"
          }
        },
        "service": {
          "type": "string",
          "description": "The topic service name."
        },
        "type": {
          "type": "string",
          "description": "The type of the MBean",
          "enum": [
            "PagedTopicSubscriberGroup"
          ],
          "readOnly": true
        },
        "nodeId": {
          "type": "integer",
          "format": "int64",
          "description": "The ID of member to which the MBean belongs",
          "readOnly": true
        },
        "topic": {
          "type": "string",
          "description": "Name of the topic.",
          "readOnly": true
        },
        "name": {
          "type": "string",
          "description": "Name of the subscriber group.",
          "readOnly": true
        },
        "cluster": {
          "type": "string",
          "description": "The cluster name.",
          "readOnly": true
        }
      }
    },
    "subscriberGroupChannel": {
      "type": "object",
      "properties": {
        "Channel": {
          "type": "integer",
          "format": "int32",
          "description": "The channel.",
          "readOnly": true
        },
        "Head": {
          "type": "string",
          "description": "Head position.",
          "readOnly": true
        },
        "LastCommittedPosition": {
          "type": "string",
          "description": "Last committed position.",
          "readOnly": true
        },
        "LastCommittedTimestamp": {
          "type": "string",
          "format": "date-time",
          "description": "The last committed position.",
          "readOnly": true
        },
        "LastPolledTimestamp": {
          "type": "string",
          "format": "date-time",
          "description": "The last polled timestamp.",
          "readOnly": true
        },
        "OwningSubscriberId": {
          "type": "string",
          "description": "The owning subscriber.",
          "readOnly": true
        },
        "PolledCount": {
          "type": "integer",
          "format": "int64",
          "description": "The polled messages count.",
          "readOnly": true
        },
        "PolledFifteenMinuteRate": {
          "type": "number",
          "format": "double",
          "description": "The polled messages fifteen minute rate.",
          "readOnly": true
        },
        "PolledFiveMinuteRate": {
          "type": "number",
          "format": "double",
          "description": "The polled messages five minute rate.",
          "readOnly": true
        },
        "PolledOneMinuteRate": {
          "type": "number",
          "format": "double",
          "description": "The polled messages one minute rate.",
          "readOnly": true
        },
        "PolledMeanRate": {
          "type": "number",
          "format": "double",
          "description": "The polled messages mean rate.",
          "readOnly": true
        },
        "RemainingUnpolledMessages": {
          "type": "integer",
          "format": "int64",
          "description": "The remaining unpolled messages count.",
          "readOnly": true
        }
      }
    },
    "head": {
      "type": "object",
      "properties": {
        "Channel": {
          "type": "integer",
          "format": "int32",
          "description": "The channel.",
          "readOnly": true
        },
        "Position": {
          "type": "string",
          "description": "The position.",
          "readOnly": true
        }
      }
    },
    "remainingMessage": {
      "type": "object",
      "properties": {
        "Channel": {
          "type": "integer",
          "format": "int32",
          "description": "The channel.",
          "readOnly": true
        },
        "Count": {
          "type": "integer",
          "format": "int32",
          "description": "The count.",
          "readOnly": true
        }
      }
    },
    "partitionAssignment": {
      "type": "object",
      "properties": {
        "location": {
          "type": "string",
          "description": "The location of the MBean server",
          "readOnly": true
        },
        "type": {
          "type": "string",
          "description": "The type of the MBean",
          "enum": [
            "PartitionAssignment"
          ],
          "readOnly": true
        },
        "responsibility": {
          "type": "string",
          "description": "The responsibility type",
          "readOnly": true
        },
        "service": {
          "type": "string",
          "description": "The cache service name"
        },
        "partitionCount": {
          "type": "integer",
          "format": "int32",
          "description": "The configured number of partitions for the service.",
          "readOnly": true
        },
        "backupCount": {
          "type": "integer",
          "format": "int32",
          "description": "The configured number of partition backups to be maintained by the service.",
          "readOnly": true
        },
        "serviceNodeCount": {
          "type": "integer",
          "format": "int32",
          "description": "The number of storage-enabled nodes running this service.",
          "readOnly": true
        },
        "serviceMachineCount": {
          "type": "integer",
          "format": "int32",
          "description": "The number of machines that host storage-enabled nodes running this service.",
          "readOnly": true
        },
        "serviceRackCount": {
          "type": "integer",
          "format": "int32",
          "description": "The number of racks that host storage-enabled nodes running this service.",
          "readOnly": true
        },
        "serviceSiteCount": {
          "type": "integer",
          "format": "int32",
          "description": "The number of sites that host storage-enabled nodes running this service.",
          "readOnly": true
        },
        "HAStatus": {
          "type": "string",
          "description": "The High Availability status for this service. The values of MACHINE-SAFE, RACK-SAFE and SITE-SAFE mean that all the cluster nodes running on any given machine, rack, or site respectively could be stopped at once without any data loss. The value of NODE-SAFE means that any cluster node could be stopped without data loss. The value of ENDANGERED indicates that abnormal termination of any cluster node that runs this service could cause data loss.",
          "readOnly": true
        },
        "HATarget": {
          "type": "string",
          "description": "The High Availability status that this strategy attempts to achieve. Values are the same as for the HAStatus attribute.",
          "readOnly": true
        },
        "fairShareBackup": {
          "type": "integer",
          "format": "int32",
          "description": "The number of backup partitions per storage-enabled service member that this strategy will currently attempt to maintain.",
          "readOnly": true
        },
        "fairSharePrimary": {
          "type": "integer",
          "format": "int32",
          "description": "The number of primary partitions per storage-enabled service member that this strategy will currently attempt to maintain.",
          "readOnly": true
        },
        "strategyName": {
          "type": "string",
          "description": "The name of the partition assignment strategy in use.",
          "readOnly": true
        },
        "lastAnalysisTime": {
          "type": "string",
          "format": "date-time",
          "description": "The last time a distribution analysis was performed.",
          "readOnly": true
        },
        "coordinatorId": {
          "type": "integer",
          "format": "int32",
          "description": "The member id of the service node that is the ownership distribution coordinator.",
          "readOnly": true
        },
        "remainingDistributionCount": {
          "type": "integer",
          "format": "int32",
          "description": "The number of partition transfers that remain to be completed before the service achieves the goals set by this strategy.",
          "readOnly": true
        },
        "averagePartitionSizeKB": {
          "type": "integer",
          "format": "int64",
          "description": "The average partition storage size in kilobytes.",
          "readOnly": true
        },
        "maxPartitionSizeKB": {
          "type": "integer",
          "format": "int64",
          "description": "The maximum partition storage size in kilobytes.",
          "readOnly": true
        },
        "maxStorageSizeKB": {
          "type": "integer",
          "format": "int64",
          "description": "The maximum node storage size in kilobytes.",
          "readOnly": true
        },
        "averageStorageSizeKB": {
          "type": "integer",
          "format": "int64",
          "description": "The average node storage size in kilobytes.",
          "readOnly": true
        },
        "maxLoadNodeId": {
          "type": "integer",
          "format": "int32",
          "description": "The node ID with the maximum node storage size.",
          "readOnly": true
        }
      }
    },
    "service": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "Name of the service."
        },
        "type": {
          "type": "string",
          "description": "The type of the service"
        }
      }
    },
    "serviceAggregate": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "Name of the service."
        },
        "threadAverageActiveCount": {
          "$ref": "#/definitions/summaryNumber"
        },
        "threadCountMax": {
          "type": "integer",
          "format": "int64"
        },
        "taskMaxBacklog": {
          "type": "integer",
          "format": "int64"
        },
        "messagesSent": {
          "$ref": "#/definitions/summaryNumber"
        },
        "persistenceLatencyMax": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "serviceMember": {
      "type": "object",
      "properties": {
        "nodeId": {
          "type": "integer",
          "format": "int64",
          "description": "The ID of member to which the MBean belongs",
          "readOnly": true
        },
        "location": {
          "type": "string",
          "description": "The location of the MBean server",
          "readOnly": true
        },
        "type": {
          "type": "string",
          "description": "The type of the MBean",
          "enum": [
            "Service"
          ],
          "readOnly": true
        },
        "name": {
          "type": "string",
          "description": "Name of the service."
        },
        "member": {
          "type": "string",
          "description": "Name of the cluster member."
        },
        "taskTimeoutCount": {
          "type": "integer",
          "format": "int32",
          "description": "The total number of timed-out tasks since the last time the statistics were reset.",
          "readOnly": true
        },
        "persistenceLatencyMax": {
          "type": "integer",
          "format": "int64",
          "description": "The maximum latency (in millis) added to a mutating cache operation by an active persistence operation.",
          "readOnly": true
        },
        "threadAverageActiveCount": {
          "type": "number",
          "format": "float",
          "description": "The average number of active (not idle) threads in the service thread pool since the last time the statistics were reset.",
          "readOnly": true
        },
        "messagesSent": {
          "type": "integer",
          "format": "int64",
          "description": "The number of messages sent by this service since the last time the statistics were reset. This value accounts for messages sent by any (local, dedicated or shared) transport.",
          "readOnly": true
        },
        "threadCountMax": {
          "type": "integer",
          "format": "int32",
          "description": "The maximum thread count allowed for this service when dynamic thread pool sizing is enabled.",
          "readOnly": false
        },
        "refreshTime": {
          "type": "string",
          "format": "date-time",
          "description": "The timestamp when this model was last retrieved from a corresponding node. For local servers it is the local time.",
          "readOnly": true
        },
        "ownedPartitionsBackup": {
          "type": "integer",
          "format": "int32",
          "description": "The number of partitions that this Member backs up (responsible for the backup storage).",
          "readOnly": true
        },
        "taskMaxBacklog": {
          "type": "integer",
          "format": "int32",
          "description": "The maximum size of the backlog queue since the last time the statistics were reset.",
          "readOnly": true
        },
        "requestPendingCount": {
          "type": "integer",
          "format": "int64",
          "description": "The number of pending requests issued by the service.",
          "readOnly": true
        },
        "threadCountMin": {
          "type": "integer",
          "format": "int32",
          "description": "The minimum thread count for this service when dynamic thread pool sizing is enabled.",
          "readOnly": false
        },
        "eventBacklog": {
          "type": "integer",
          "format": "int32",
          "description": "The size of the backlog queue that holds events scheduled to be processed by the EventDispatcher thread.",
          "readOnly": true
        },
        "eventInterceptorInfo": {
          "type": "array",
          "description": "An array of statistics for events processed by event interceptors.",
          "items": {
            "type": "string"
          },
          "readOnly": true
        },
        "outgoingTransferCount": {
          "type": "integer",
          "format": "int32",
          "description": "The number of partitions that are currently being transferred by this service member to other members.",
          "readOnly": true
        },
        "taskTimeoutMillis": {
          "type": "integer",
          "format": "int64",
          "description": "The default timeout value in milliseconds for tasks that can be timed-out (e.g. implement the com.tangosol.net.PriorityTask interface), but do not explicitly specify the task execution timeout value.",
          "readOnly": false
        },
        "transportRetainedBytes": {
          "type": "integer",
          "format": "int64",
          "description": "The number of bytes retained by the service dedicated transport awaiting delivery acknowledgment.  This memory is allocated outside of the Java GC heap space.",
          "readOnly": true
        },
        "persistenceActiveSpaceTotal": {
          "type": "integer",
          "format": "int64",
          "description": "The total size (in bytes) of the file system used by the persistence layer to persist active cache data.",
          "readOnly": true
        },
        "persistenceBackupSpaceTotal": {
          "type": "integer",
          "format": "int64",
          "description": "The total size (in bytes) of the file system used by the persistence layer to persist backup cache data.",
          "readOnly": true
        },
        "threadIdleCount": {
          "type": "integer",
          "format": "int32",
          "description": "The number of currently idle threads in the service thread pool.",
          "readOnly": true
        },
        "memberCount": {
          "type": "integer",
          "format": "int32",
          "description": "Specifies the total number of cluster nodes running this service.",
          "readOnly": true
        },
        "taskHungTaskId": {
          "type": "string",
          "description": "The id of the of the longest currently executing hung task.",
          "readOnly": true
        },
        "persistenceMode": {
          "type": "string",
          "description": "The current persistence mode for this service. A value of 'active' indicates that all mutating cache operations will be persisted via the configured persistence-environment. A value of 'on-demand' indicates that a persistence-environment has been configured and is available but is not being actively used. In both modes a persistent snapshot can be taken of all caches managed by this service using the configured persistence-environment. A value of 'n/a' indicates that persistence is not configured for this service.",
          "readOnly": true
        },
        "threadAbandonedCount": {
          "type": "integer",
          "format": "int32",
          "description": "The number of abandoned threads from the service thread pool. A thread is abandoned and replaced with a new thread if it executes a task for a period of time longer than execution timeout and all attempts to interrupt it fail.",
          "readOnly": true
        },
        "transportSentMessages": {
          "type": "integer",
          "format": "int64",
          "description": "The number of messages sent by the service dedicated transport since the last time the statistics were reset.",
          "readOnly": true
        },
        "persistenceSnapshotSpaceAvailable": {
          "type": "integer",
          "format": "int64",
          "description": "The total remaining free space (in bytes) of the file system used by the persistence layer to store snapshots.",
          "readOnly": true
        },
        "running": {
          "type": "boolean",
          "description": "Specifies whether or not the service is running.",
          "readOnly": true
        },
        "requestMaxDuration": {
          "type": "integer",
          "format": "int64",
          "description": "The maximum duration (in milliseconds) of a request issued by the service since the last time the statistics were reset.",
          "readOnly": true
        },
        "transportSentBytes": {
          "type": "integer",
          "format": "int64",
          "description": "The number of bytes sent by the service dedicated transport since the last time the statistics were reset.",
          "readOnly": true
        },
        "eventCount": {
          "type": "integer",
          "format": "int64",
          "description": "The total number of processed events since the last time the statistics were reset.",
          "readOnly": true
        },
        "storageEnabled": {
          "type": "boolean",
          "description": "Specifies whether or not the local storage is enabled for this cluster Member.",
          "readOnly": true
        },
        "storageEnabledCount": {
          "type": "integer",
          "format": "int32",
          "description": "Specifies the total number of cluster nodes running this Service for which local storage is enabled.",
          "readOnly": true
        },
        "transportAddress": {
          "type": "string",
          "description": "The service dedicated transport address if any. When present this transport allows the service instance to communicate with other service members via a dedicated transport rather then using the shared cluster transport.",
          "readOnly": true
        },
        "partitionsVulnerable": {
          "type": "integer",
          "format": "int32",
          "description": "The total number of partitions that are backed up on the same machine where the primary partition owner resides.",
          "readOnly": true
        },
        "taskCount": {
          "type": "integer",
          "format": "int64",
          "description": "The total number of executed tasks since the last time the statistics were reset.",
          "readOnly": true
        },
        "threadCountUpdateTime": {
          "type": "string",
          "format": "date-time",
          "description": "The last time an update was made to the ThreadCount. This attribute is only valid when ThreadPoolSizingEnabled is true.",
          "readOnly": true
        },
        "transportStatus": {
          "type": "string",
          "description": "The service dedicated transport status information.",
          "readOnly": true
        },
        "partitionsUnbalanced": {
          "type": "integer",
          "format": "int32",
          "description": "The total number of primary and backup partitions which remain to be transferred until the partition distribution across the storage enabled service members is fully balanced.",
          "readOnly": true
        },
        "persistenceActiveSpaceUsed": {
          "type": "integer",
          "format": "int64",
          "description": "The total size (in bytes) used by the persistence layer to persist active cache data.",
          "readOnly": true
        },
        "persistenceBackupSpaceUsed": {
          "type": "integer",
          "format": "int64",
          "description": "The total size (in bytes) used by the persistence layer to persist backup cache data.",
          "readOnly": true
        },
        "persistenceLatencyAverage": {
          "type": "number",
          "format": "float",
          "description": "The average latency (in millis) added to a mutating cache operation by active persistence operations.",
          "readOnly": true
        },
        "backupCount": {
          "type": "integer",
          "format": "int32",
          "description": "The number of backups for every cache storage.",
          "readOnly": true
        },
        "taskBacklog": {
          "type": "integer",
          "format": "int32",
          "description": "The size of the backlog queue that holds tasks scheduled to be executed by one of the service threads.",
          "readOnly": true
        },
        "transportBackloggedConnectionList": {
          "type": "array",
          "description": "A list of currently backlogged connections on the service dedicated transport.",
          "items": {
            "type": "string"
          },
          "readOnly": true
        },
        "transportBackloggedConnections": {
          "type": "integer",
          "format": "int32",
          "description": "The number of currently backlogged connections on the service dedicated transport. Any new requests which require the connection will block until the backlog is cleared.",
          "readOnly": true
        },
        "transportReceivedMessages": {
          "type": "integer",
          "format": "int64",
          "description": "The number of messages received by the service dedicated transport since the last time the statistics were reset.",
          "readOnly": true
        },
        "requestTimeoutCount": {
          "type": "integer",
          "format": "int64",
          "description": "The total number of timed-out requests since the last time the statistics were reset.",
          "readOnly": true
        },
        "backupCountAfterWritebehind": {
          "type": "integer",
          "format": "int32",
          "description": "The number of members of the partitioned (distributed) cache service that will retain backup data that does _not_ require write-behind, i.e. data that is not vulnerable to being lost even if the entire cluster were shut down.",
          "readOnly": true
        },
        "taskHungThresholdMillis": {
          "type": "integer",
          "format": "int64",
          "description": "The amount of time in milliseconds that a task can execute before it is considered hung. Note that a posted task that has not yet started is never considered as hung.",
          "readOnly": false
        },
        "requestAverageDuration": {
          "type": "number",
          "format": "float",
          "description": "The average duration (in milliseconds) of an individual request issued by the service since the last time the statistics were reset.",
          "readOnly": true
        },
        "requestPendingDuration": {
          "type": "integer",
          "format": "int64",
          "description": "The duration (in milliseconds) of the oldest pending request issued by the service.",
          "readOnly": true
        },
        "ownedPartitionsPrimary": {
          "type": "integer",
          "format": "int32",
          "description": "The number of partitions that this Member owns (responsible for the primary storage).",
          "readOnly": true
        },
        "persistenceSnapshotSpaceTotal": {
          "type": "integer",
          "format": "int64",
          "description": "The total size (in bytes) of the file system used by the persistence layer to store snapshots.",
          "readOnly": true
        },
        "taskHungDuration": {
          "type": "integer",
          "format": "int64",
          "description": "The longest currently executing hung task duration in milliseconds.",
          "readOnly": true
        },
        "messagesLocal": {
          "type": "integer",
          "format": "int64",
          "description": "The total number of messages which were self-addressed messages since the last time the statistics were reset. Such messages are used for servicing process-local requests and do not have an associated network cost.",
          "readOnly": true
        },
        "taskAverageDuration": {
          "type": "number",
          "format": "float",
          "description": "The average duration (in milliseconds) of an individual task execution.",
          "readOnly": true
        },
        "partitionsEndangered": {
          "type": "integer",
          "format": "int32",
          "description": "The total number of partitions that are not currently backed up.",
          "readOnly": true
        },
        "statistics": {
          "type": "string",
          "description": "Statistics for this service in human readable format.",
          "readOnly": true
        },
        "partitionsAll": {
          "type": "integer",
          "format": "int32",
          "description": "The total number of partitions that every cache storage will be divided into.",
          "readOnly": true
        },
        "persistenceEnvironment": {
          "type": "string",
          "description": "A description of the configured persistence environment or 'n/a' if one has not been configured.",
          "readOnly": true
        },
        "messagesReceived": {
          "type": "integer",
          "format": "int64",
          "description": "The total number of messages received by this service since the last time the statistics were reset. This value accounts for messages received by any (local, dedicated or shared) transport.",
          "readOnly": true
        },
        "threadCount": {
          "type": "integer",
          "format": "int32",
          "description": "The number of threads in the service thread pool. For services that support dynamic thread pool sizing, this is the current thread pool size.",
          "readOnly": false
        },
        "transportConnections": {
          "type": "integer",
          "format": "int32",
          "description": "The number of connections currently maintained by the service dedicated transport. This count may be lower than MemberCount if some members have been not been configured to use the dedicated transport, or if it has been identified that there is no advantage in using the dedicated transport for communication with certain members.",
          "readOnly": true
        },
        "requestTimeoutMillis": {
          "type": "integer",
          "format": "int64",
          "description": "The default timeout value in milliseconds for requests that can be timed-out (e.g. implement the com.tangosol.net.PriorityTask interface), but do not explicitly specify the request timeout value.",
          "readOnly": false
        },
        "seniorMemberId": {
          "type": "integer",
          "format": "int32",
          "description": "The service senior member id; -1 if the service is not running.",
          "readOnly": true
        },
        "persistenceActiveSpaceAvailable": {
          "type": "integer",
          "format": "int64",
          "description": "The total remaining free space (in bytes) of the file system used by the persistence layer to persist active cache data.",
          "readOnly": true
        },
        "persistenceBackupSpaceAvailable": {
          "type": "integer",
          "format": "int64",
          "description": "The total remaining free space (in bytes) of the file system used by the persistence layer to persist backup cache data.",
          "readOnly": true
        },
        "joinTime": {
          "type": "string",
          "format": "date-time",
          "description": "The date/time value (in cluster time) that this Member joined the service.",
          "readOnly": true
        },
        "requestTotalCount": {
          "type": "integer",
          "format": "int64",
          "description": "The total number of synchronous requests issued by the service since the last time the statistics were reset.",
          "readOnly": true
        },
        "persistenceSnapshotArchiver": {
          "type": "string",
          "description": "A description of the configured snapshot archiver or 'n/a' if one has not been configured.",
          "readOnly": true
        },
        "quorumStatus": {
          "type": "string",
          "description": "The current state of the service quorum.",
          "readOnly": true
        },
        "taskHungCount": {
          "type": "integer",
          "format": "int32",
          "description": "The total number of currently executing hung tasks.",
          "readOnly": true
        },
        "statusHA": {
          "type": "string",
          "description": "The High Availability status for this service. The value of MACHINE-SAFE means that all the cluster nodes running on any given machine could be stopped at once without data loss. The value of NODE-SAFE means that any cluster node could be stopped without data loss.  The value of ENDANGERED indicates that abnormal termination of any cluster node that runs this service may cause data loss. If either or both site and rack groupings are configured, the values SITE-SAFE and RACK-SAFE mean that all the cluster nodes running on any given site or rack, respectively,  could be stopped at once without data loss.",
          "readOnly": true
        },
        "threadPoolSizingEnabled": {
          "type": "boolean",
          "description": "Whether or not dynamic thread pool sizing is enabled for this service.",
          "readOnly": true
        },
        "transportReceivedBytes": {
          "type": "integer",
          "format": "int64",
          "description": "The number of bytes received by the service dedicated transport since the last time the statistics were reset.",
          "readOnly": true
        }
      }
    },
    "coherenceWebApplication": {
      "type": "object",
      "properties": {
        "appId": {
          "type": "string",
          "description": "Id of the application."
        }
      }
    },
    "coherenceWebMember": {
      "type": "object",
      "properties": {
        "nodeId": {
          "type": "integer",
          "format": "int64",
          "description": "The ID of member to which the MBean belongs",
          "readOnly": true
        },
        "location": {
          "type": "string",
          "description": "The location of the MBean server",
          "readOnly": true
        },
        "type": {
          "type": "string",
          "description": "The type of the MBean",
          "enum": [
            "HttpSessionManager"
          ],
          "readOnly": true
        },
        "member": {
          "type": "string",
          "description": "Name of the cluster member"
        },
        "appId": {
          "type": "string",
          "description": "ID of the Coherence*Web application"
        },
        "averageReapDuration": {
          "type": "integer",
          "format": "int64",
          "readOnly": true
        },
        "averageReapedSessions": {
          "type": "integer",
          "format": "int64",
          "readOnly": true
        },
        "collectionClassName": {
          "type": "string",
          "readOnly": true
        },
        "factoryClassName": {
          "type": "string",
          "readOnly": true
        },
        "lastReapDuration": {
          "type": "integer",
          "format": "int64",
          "readOnly": true
        },
        "lastReapCycle": {
          "type": "string",
          "format": "date",
          "readOnly": true
        },
        "localAttributeCacheName": {
          "type": "string",
          "readOnly": true
        },
        "localAttributeCount": {
          "type": "string",
          "readOnly": true
        },
        "localSessionCacheName": {
          "type": "string",
          "readOnly": true
        },
        "localSessionCount": {
          "type": "integer",
          "format": "int64",
          "readOnly": true
        },
        "maxReapedSessions": {
          "type": "integer",
          "format": "int64",
          "readOnly": true
        },
        "maxReapDuration": {
          "type": "integer",
          "format": "int64",
          "readOnly": true
        },
        "nextReapCycle": {
          "type": "string",
          "format": "date",
          "readOnly": true
        },
        "overflowAverageSize": {
          "type": "integer",
          "format": "int64",
          "readOnly": true
        },
        "overflowCacheName": {
          "type": "string",
          "readOnly": true
        },
        "overflowMaxSize": {
          "type": "integer",
          "format": "int64",
          "readOnly": true
        },
        "overflowThreshold": {
          "type": "integer",
          "format": "int64",
          "readOnly": true
        },
        "overflowUpdates": {
          "type": "integer",
          "format": "int64",
          "readOnly": true
        },
        "reapedSessions": {
          "type": "integer",
          "format": "int64",
          "readOnly": true
        },
        "reapedSessionsTotal": {
          "type": "integer",
          "format": "int64",
          "readOnly": true
        },
        "sessionAverageLifetime": {
          "type": "integer",
          "format": "int64",
          "readOnly": true
        },
        "sessionAverageSize": {
          "type": "integer",
          "format": "int64",
          "readOnly": true
        },
        "sessionCacheName": {
          "type": "string",
          "readOnly": true
        },
        "sessionIdLength": {
          "type": "integer",
          "format": "int64",
          "readOnly": true
        },
        "sessionMaxSize": {
          "type": "integer",
          "format": "int64",
          "readOnly": true
        },
        "sessionMinSize": {
          "type": "integer",
          "format": "int64",
          "readOnly": true
        },
        "sessionStickyCount": {
          "type": "integer",
          "format": "int64",
          "readOnly": true
        },
        "sessionTimeout": {
          "type": "integer",
          "format": "int64",
          "readOnly": true
        },
        "sessionUpdates": {
          "type": "integer",
          "format": "int64",
          "readOnly": true
        },
        "servletContextCacheName": {
          "type": "string",
          "readOnly": true
        },
        "servletContextName": {
          "type": "string",
          "readOnly": true
        }
      }
    },
    "federationCoordinator": {
      "type": "object",
      "description": "Life-cycle Control for Federation.",
      "properties": {
        "location": {
          "type": "string",
          "description": "The location of the MBean server",
          "readOnly": true
        },
        "type": {
          "type": "string",
          "description": "The type of the MBean",
          "enum": [
            "Federation"
          ],
          "readOnly": true
        },
        "responsibility": {
          "type": "string",
          "description": "The responsibility type",
          "enum": [
            "Coordinator"
          ],
          "readOnly": true
        },
        "member": {
          "type": "string",
          "description": "Name of the cluster member"
        },
        "coordinatorId": {
          "description": "The federation coordinator node's member Id.",
          "type": "integer"
        },
        "nonFederatedCaches": {
          "description": "List of the names of the caches that belong to a Federated Cache Service, but are not being federated.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "pendingOutgoingMessageCount": {
          "description": "The number of pending outgoing messages.",
          "format": "int64",
          "type": "integer"
        },
        "traceLogging": {
          "default": "false",
          "description": "True if federation trace logging is on.",
          "type": "boolean"
        }
      }
    },
    "federationOutgoingStatistics": {
      "type": "object",
      "description": "Provides out-going replication statistics from a destination's perspective.",
      "properties": {
        "nodeId": {
          "type": "integer",
          "format": "int64",
          "description": "The ID of member to which the MBean belongs",
          "readOnly": true
        },
        "location": {
          "type": "string",
          "description": "The location of the MBean server",
          "readOnly": true
        },
        "type": {
          "type": "string",
          "description": "The type of the MBean",
          "enum": [
            "Destination"
          ],
          "readOnly": true
        },
        "member": {
          "type": "string",
          "description": "Name of the cluster member",
          "readOnly": true
        },
        "name": {
          "type": "string",
          "description": "Name of the remote participant",
          "readOnly": true
        },
        "recordBacklogDelayTimePercentileMillis": {
          "type": "integer",
          "format": "int64",
          "description": "The 90-percentile value of the time (in milliseconds) the Journal Records are in the Cache waiting to be replicated.",
          "readOnly": true
        },
        "sendTimeoutMillis": {
          "type": "integer",
          "format": "int64",
          "description": "Return the configured send timeout.",
          "readOnly": true
        },
        "connectRetryTimeoutMillis": {
          "type": "integer",
          "format": "int64",
          "description": "Return the configured connect retry timeout.",
          "readOnly": false
        },
        "geoIp": {
          "type": "string",
          "description": "Return the Geo-Ip metadata.",
          "readOnly": true
        },
        "status": {
          "type": "integer",
          "format": "int32",
          "description": "Return the participant status. 0 implies ok, 1 implies Warning, 2 implies Error.",
          "readOnly": true
        },
        "errorDescription": {
          "type": "string",
          "description": "Return an error description. This only returns a value if the sender is in an ERROR state.",
          "readOnly": true
        },
        "currentBandwidth": {
          "type": "number",
          "format": "double",
          "description": "The current utilized bandwidth in megabits per second for sending replicate message.",
          "readOnly": true
        },
        "maxBandwidth": {
          "type": "number",
          "format": "double",
          "description": "The maximum bandwidth in megabits per second for sending replicate message. \"-1.0\" means the max-bandwidth is not specified.",
          "readOnly": true
        },
        "participantType": {
          "type": "string",
          "description": "Return the participant type. Valid types are cluster and interceptor.",
          "readOnly": true
        },
        "msgApplyTimePercentileMillis": {
          "type": "integer",
          "format": "int64",
          "description": "The 90-percentile value of the time (in milliseconds) it took to apply the replication messages on the destination.",
          "readOnly": true
        },
        "msgNetworkRoundTripTimePercentileMillis": {
          "type": "integer",
          "format": "int64",
          "description": "The 90-percentile value of the time (in milliseconds) taken by transmission of replication messages and the corresponding ack messages over the network.",
          "readOnly": true
        },
        "replicateAllLastException": {
          "type": "string",
          "description": "The last exception recorded for a replicateAll request.",
          "readOnly": true
        },
        "replicateAllPartitionCompletedCount": {
          "type": "integer",
          "format": "int64",
          "description": "The total number of partitions completed for the replicateAll request.",
          "readOnly": true
        },
        "replicateAllPartitionCount": {
          "type": "integer",
          "format": "int64",
          "description": "The total number of partitions in the replicateAll request.",
          "readOnly": true
        },
        "replicateAllPartitionErrorCount": {
          "type": "integer",
          "format": "int64",
          "description": "The number of partitions with error responses for the replicateAll request. Check ReplicateAllLastException for details of the last exception and the log for details of all the errors.",
          "readOnly": true
        },
        "replicateAllPercentComplete": {
          "type": "integer",
          "format": "int64",
          "description": "The percent of work completed for the replicateAll request. If there are any problem in replicateAll, ReplicateAllPartitionErrorCount will be greater than 0.  Please look at the server log for details of the errors.",
          "readOnly": true
        },
        "estimatedReplicateAllRemainingTime": {
          "type": "integer",
          "format": "int64",
          "description": "The estimated remaining time (in milliseconds) in completing the replicateAll request.",
          "readOnly": true
        },
        "replicateAllTotalTime": {
          "type": "integer",
          "format": "int64",
          "description": "The total time (in milliseconds) the replicateAll request took.",
          "readOnly": true
        },
        "bytesSentSecs": {
          "type": "integer",
          "format": "int64",
          "description": "The bytes sent per second.",
          "readOnly": true
        },
        "msgsSentSecs": {
          "type": "integer",
          "format": "int64",
          "description": "The messages sent per second.",
          "readOnly": true
        },
        "state": {
          "type": "string",
          "description": "Return the participant state.",
          "readOnly": true
        },
        "stateCode": {
          "type": "integer",
          "format": "int32",
          "description": "Return the participant state code. The value of:\n 0: INITIAL\n 1: STARTING\n 2: CONNECTING\n 3: CONNECT_WAIT\n 4: IDLE\n 5: READY\n 6: SENDING\n 7: STOPPED\n 8: PAUSED\n 9: ERROR\n 10: YIELDING\n 11: DISCONNECTED\n 12: DISCONNECTING",
          "readOnly": true
        },
        "totalBytesSent": {
          "type": "integer",
          "format": "int64",
          "description": "The total number of bytes that were sent.",
          "readOnly": true
        },
        "totalEntriesSent": {
          "type": "integer",
          "format": "int64",
          "description": "The total number of cache entries that were sent.",
          "readOnly": true
        },
        "totalRecordsSent": {
          "type": "integer",
          "format": "int64",
          "description": "The total number of journal records that were sent. A Journal Record could consist of multiple cache entries that are part of the same transaction.",
          "readOnly": true
        },
        "totalMsgSent": {
          "type": "integer",
          "format": "int64",
          "description": "The total number of replication messages that were sent. A Replication message could contain multiple journal records.",
          "readOnly": true
        },
        "totalMsgUnacked": {
          "type": "integer",
          "format": "int64",
          "description": "The total number of un-acked replication messages.",
          "readOnly": true
        },
        "totalErrorResponses": {
          "type": "integer",
          "format": "int64",
          "description": "The total number of responses with error. Check the log for details of the errors",
          "readOnly": true
        },
        "traceLogging": {
          "default": "false",
          "type": "boolean",
          "description": "True if federation trace logging is turned on."
        }
      }
    },
    "federationIncomingStatistics": {
      "type": "object",
      "description": "Provides out-going replication statistics from a destination's perspective.",
      "properties": {
        "nodeId": {
          "type": "integer",
          "format": "int64",
          "description": "The ID of member to which the MBean belongs",
          "readOnly": true
        },
        "location": {
          "type": "string",
          "description": "The location of the MBean server",
          "readOnly": true
        },
        "type": {
          "type": "string",
          "description": "The type of the MBean",
          "enum": [
            "Origin"
          ],
          "readOnly": true
        },
        "member": {
          "type": "string",
          "description": "Name of the cluster member",
          "readOnly": true
        },
        "name": {
          "type": "string",
          "description": "Name of the remote participant",
          "readOnly": true
        },
        "msgApplyTimePercentileMillis": {
          "type": "integer",
          "format": "int64",
          "description": "The 90-percentile value of the time (in milliseconds) it took to apply the replication messages on the destination.",
          "readOnly": true
        },
        "recordBacklogDelayTimePercentileMillis": {
          "type": "integer",
          "format": "int64",
          "description": "The 90-percentile value of the time (in milliseconds) the Journal Records are in the Cache waiting to be replicated.",
          "readOnly": true
        },
        "bytesReceivedSecs": {
          "type": "integer",
          "format": "int64",
          "description": "The bytes received per second.",
          "readOnly": true
        },
        "msgsReceivedSecs": {
          "type": "integer",
          "format": "int64",
          "description": "The messages received per second.",
          "readOnly": true
        },
        "replicateMessageLastException": {
          "type": "string",
          "description": "The last exception recorded for a ReplicateMessage request.",
          "readOnly": true
        },
        "totalBytesReceived": {
          "type": "integer",
          "format": "int64",
          "description": "The total number of bytes that were received.",
          "readOnly": true
        },
        "totalEntriesReceived": {
          "type": "integer",
          "format": "int64",
          "description": "The total number of cache entries that were received.",
          "readOnly": true
        },
        "totalErrorRequests": {
          "type": "integer",
          "format": "int64",
          "description": "The total number of ReplicateMessage requests with error. Check the log for details of the errors.",
          "readOnly": true
        },
        "totalRecordsReceived": {
          "type": "integer",
          "format": "int64",
          "description": "The total number of journal records that were received. A Journal Record could consist of multiple cache entries that are part of the same transaction.",
          "readOnly": true
        },
        "totalMsgReceived": {
          "type": "integer",
          "format": "int64",
          "description": "The total number of replication messages that were received. A Replication message could contain multiple journal records.",
          "readOnly": true
        },
        "totalMsgUnacked": {
          "type": "integer",
          "format": "int64",
          "description": "The total number of un-acked replication messages.",
          "readOnly": true
        }
      }
    },
    "networkStats": {
      "type": "object",
      "properties": {
        "nodeId": {
          "type": "integer",
          "format": "int64",
          "description": "The ID of member to which the MBean belongs",
          "readOnly": true
        },
        "location": {
          "type": "string",
          "description": "The location of the MBean server",
          "readOnly": true
        },
        "type": {
          "type": "string",
          "description": "The type of the MBean",
          "enum": [
            "PointToPoint"
          ],
          "readOnly": true
        },
        "member": {
          "type": "string",
          "description": "Name of the cluster member",
          "readOnly": true
        },
        "currentMemberId": {
          "type": "integer",
          "description": "The Id of the member who is viewing."
        },
        "receiverSuccessRate": {
          "type": "number",
          "format": "float",
          "description": "The receiver success rate from the viewing node to the viewed node since the statistics were last reset.",
          "readOnly": true
        },
        "lastIn": {
          "type": "integer",
          "format": "int64",
          "description": "The number of milliseconds that have elapsed since the viewing member last received an acknowledgment from the viewed member.",
          "readOnly": true
        },
        "viewedMemberId": {
          "type": "integer",
          "format": "int32",
          "description": "The Id of the member being viewed.",
          "readOnly": false
        },
        "publisherSuccessRate": {
          "type": "number",
          "format": "float",
          "description": "The publisher success rate from the viewing node to the viewed node since the statistics were last reset.",
          "readOnly": true
        },
        "lastSlow": {
          "type": "integer",
          "format": "int64",
          "description": "The number of milliseconds that have elapsed since the viewing member declared the viewed member as slow, or -1 if the viewed member has never been declared slow.",
          "readOnly": true
        },
        "outstandingPackets": {
          "type": "integer",
          "format": "int32",
          "description": "The number of packets that the viewing member has sent to the viewed member which have yet to be acknowledged.  The value of this attribute is only meaningful if the viewing member has FlowControl enabled.",
          "readOnly": true
        },
        "refreshTime": {
          "type": "string",
          "format": "date-time",
          "description": "The timestamp when this model was last retrieved from a corresponding node. For local servers it is the local time.",
          "readOnly": true
        },
        "viewerStatistics": {
          "type": "array",
          "description": "Human readable summary of the point-to-point statistics from the viewing member for all other members.",
          "items": {
            "type": "string"
          },
          "readOnly": true
        },
        "lastOut": {
          "type": "integer",
          "format": "int64",
          "description": "The number of milliseconds that have elapsed since the viewing member last sent a packet to the viewed member.",
          "readOnly": true
        },
        "deferring": {
          "type": "boolean",
          "description": "Indicates whether or not the viewing member is currently deferring packets to the viewed member.  The value of this attribute is only meaningful if the viewing member has FlowControl enabled.",
          "readOnly": true
        },
        "pauseRate": {
          "type": "number",
          "format": "float",
          "description": "The percentage of time since the last time statistics were reset in which the viewing member considered the viewed member to be unresponsive. Under normal conditions this value should be very close to 0.0.  Values near 1.0 would indicate that the viewed node is nearly inoperable, likely due to extremely long GC pauses. The value of this attribute is only meaningful if the viewing member has FlowControl enabled.",
          "readOnly": true
        },
        "deferredPackets": {
          "type": "integer",
          "format": "int32",
          "description": "The number of packets addressed to the viewed member that the viewing member is currently deferring to send.  The viewing member will delay sending these packets until the number of outstanding packets falls below the value of the Threshold attribute. The value of this attribute is only meaningful if the viewing member has FlowControl enabled.",
          "readOnly": true
        },
        "paused": {
          "type": "boolean",
          "description": "Indicates whether or not the viewing member currently considers the viewed member to be unresponsive.  The value of this attribute is only meaningful if the viewing member has FlowControl enabled.",
          "readOnly": true
        },
        "threshold": {
          "type": "integer",
          "format": "int32",
          "description": "The maximum number of outstanding packets for the viewed member that the viewing member is allowed to accumulate before initiating the deferral algorithm.  The value of this attribute is only meaningful if the viewing member has FlowControl enabled.",
          "readOnly": true
        }
      }
    },
    "persistenceCoordinator": {
      "type": "object",
      "description": "Life-cycle Control for Federation.",
      "properties": {
        "location": {
          "type": "string",
          "description": "The location of the MBean server",
          "readOnly": true
        },
        "type": {
          "type": "string",
          "description": "The type of the MBean",
          "enum": [
            "Persistence"
          ],
          "readOnly": true
        },
        "responsibility": {
          "type": "string",
          "description": "The responsibility type",
          "enum": [
            "PersistenceCoordinator"
          ],
          "readOnly": true
        },
        "coordinatorId": {
          "description": "Specifies whether or not the persistence coordinator is idle.",
          "type": "integer",
          "readOnly": true
        },
        "operationStatus": {
          "description": "The status of the current operation issued by the persistence coordinator.",
          "type": "string",
          "readOnly": true
        },
        "idle": {
          "description": "Specifies whether or not the persistence coordinator is idle.",
          "type": "boolean",
          "readOnly": true
        }
      }
    },
    "participant": {
      "type": "object",
      "description": "Details of a particular participant.",
      "properties": {
        "participantName": {
          "type": "string",
          "description": "The name of the participant."
        },
        "participantType": {
          "type": "string",
          "description": "The type of the participant."
        },
        "isLocal": {
          "type": "boolean",
          "description": "True if the participant is the local participant."
        }
      }
    },
    "role": {
      "type": "object",
      "properties": {
        "Role": {
          "type": "string",
          "description": "The role of the cluster member."
        }
      }
    },
    "proxyInfo": {
      "type": "object",
      "description": "Details of the proxy service",
      "properties": {
        "nodeId": {
          "type": "integer",
          "format": "int64",
          "description": "The ID of member to which the MBean belongs",
          "readOnly": true
        },
        "location": {
          "type": "string",
          "description": "The location of the MBean server",
          "readOnly": true
        },
        "type": {
          "type": "string",
          "description": "The type of the MBean",
          "enum": [
            "ConnectionManager"
          ],
          "readOnly": true
        },
        "member": {
          "type": "string",
          "description": "Name of the cluster member",
          "readOnly": true
        },
        "protocol": {
          "type": "string",
          "description": "Protocol associated with this ConnectionManagerMBean. Valid values are tcp or http.",
          "readOnly": true,
          "enum": [
            "tcp",
            "http"
          ]
        },
        "hostIP": {
          "type": "string",
          "description": "The IP address and port of the Proxy host.",
          "readOnly": true
        },
        "requestsPerSecond": {
          "type": "number",
          "format": "float",
          "description": "The number of HTTP requests per second since the statistics were reset.",
          "readOnly": true
        },
        "messagingDebug": {
          "type": "boolean",
          "description": "Debug flag.  When true and the node's logging level is 6 or higher, sent and received messages will be logged for all the connections under this service.",
          "readOnly": false
        },
        "incomingBufferPoolCapacity": {
          "type": "integer",
          "format": "int64",
          "description": "The pool capacity (in bytes) of the incoming buffer.",
          "readOnly": true
        },
        "refreshTime": {
          "type": "string",
          "format": "date-time",
          "description": "The timestamp when this model was last retrieved from a corresponding node. For local servers it is the local time.",
          "readOnly": true
        },
        "connectionCount": {
          "type": "integer",
          "format": "int32",
          "description": "The number of client connections.",
          "readOnly": true
        },
        "averageRequestTime": {
          "type": "number",
          "format": "float",
          "description": "The average processing time in milliseconds for HTTP requests.",
          "readOnly": true
        },
        "outgoingBufferPoolSize": {
          "type": "integer",
          "format": "int32",
          "description": "The number of buffers in the outgoing pool.",
          "readOnly": true
        },
        "unauthorizedConnectionAttempts": {
          "type": "integer",
          "format": "int64",
          "description": "The number of connection attempts from unauthorized hosts.",
          "readOnly": true
        },
        "totalRequestCount": {
          "type": "integer",
          "format": "int64",
          "description": "The number of requests serviced since the HTTP server was started or the statistics were reset.",
          "readOnly": true
        },
        "totalBytesReceived": {
          "type": "integer",
          "format": "int64",
          "description": "The total number of bytes received by the Proxy host since the statistics were last reset.",
          "readOnly": true
        },
        "httpServerType": {
          "type": "string",
          "description": "The type of HTTP server or n/a if not using HTTP protocol.",
          "readOnly": true
        },
        "incomingBufferPoolSize": {
          "type": "integer",
          "format": "int32",
          "description": "The number of buffers in the incoming pool.",
          "readOnly": true
        },
        "totalBytesSent": {
          "type": "integer",
          "format": "int64",
          "description": "The total number of bytes sent by the Proxy host since the statistics were last reset.",
          "readOnly": true
        },
        "totalMessagesSent": {
          "type": "integer",
          "format": "int64",
          "description": "The total number of messages sent by the Proxy host since the statistics were last reset.",
          "readOnly": true
        },
        "responseCount2xx": {
          "type": "integer",
          "format": "int64",
          "description": "The number of HTTP responses in the 200-299 range.",
          "readOnly": true
        },
        "outgoingBufferPoolCapacity": {
          "type": "integer",
          "format": "int64",
          "description": "The pool capacity (in bytes) of the outgoing buffer.",
          "readOnly": true
        },
        "responseCount3xx": {
          "type": "integer",
          "format": "int64",
          "description": "The number of HTTP responses in the 300-399 range.",
          "readOnly": true
        },
        "totalMessagesReceived": {
          "type": "integer",
          "format": "int64",
          "description": "The total number of messages received by the Proxy host since the statistics were last reset.",
          "readOnly": true
        },
        "responseCount4xx": {
          "type": "integer",
          "format": "int64",
          "description": "The number of HTTP responses in the 400-499 range.",
          "readOnly": true
        },
        "responseCount5xx": {
          "type": "integer",
          "format": "int64",
          "description": "The number of HTTP responses in the 500-599 range.",
          "readOnly": true
        },
        "totalErrorCount": {
          "type": "integer",
          "format": "int64",
          "description": "The number of HTTP requests that caused errors.",
          "readOnly": true
        },
        "responseCount1xx": {
          "type": "integer",
          "format": "int64",
          "description": "The number of HTTP responses in the 100-199 range.",
          "readOnly": true
        },
        "outgoingMessageBacklog": {
          "type": "integer",
          "format": "int64",
          "description": "The backlog of the outgoing message queue.",
          "readOnly": true
        },
        "outgoingByteBacklog": {
          "type": "integer",
          "format": "int64",
          "description": "The backlog (in bytes) of the outgoing queue",
          "readOnly": true
        }
      }
    },
    "proxyConnection": {
      "type": "object",
      "description": "Details of the remote proxy connection",
      "properties": {
        "nodeId": {
          "type": "integer",
          "format": "int64",
          "description": "The ID of member to which the MBean belongs",
          "readOnly": true
        },
        "location": {
          "type": "string",
          "description": "The location of the MBean server",
          "readOnly": true
        },
        "type": {
          "type": "string",
          "description": "The type of the MBean",
          "enum": [
            "Connection"
          ],
          "readOnly": true
        },
        "member": {
          "type": "string",
          "description": "Name of the cluster member",
          "readOnly": true
        },
        "remoteAddress": {
          "type": "string",
          "description": "The IP address of the corresponding client.",
          "readOnly": true
        },
        "remotePort": {
          "type": "integer",
          "format": "int32",
          "description": "The port of the corresponding client.",
          "readOnly": true
        },
        "connectionTimeMillis": {
          "type": "integer",
          "format": "int64",
          "description": "The time duration (in milliseconds) that the client has been connected.",
          "readOnly": true
        },
        "totalBytesReceived": {
          "type": "integer",
          "format": "int64",
          "description": "The total number of bytes received since the last time the statistics were reset.",
          "readOnly": true
        },
        "messagingDebug": {
          "type": "boolean",
          "description": "Debug flag.  When true and the node's logging level is 6 or higher, sent and received messages will be logged for this connection. If this attribute in the ConnectionManager MBean is true and the node's logging level is 6 or higher, sent and received messages will also be logged.",
          "readOnly": false
        },
        "totalBytesSent": {
          "type": "integer",
          "format": "int64",
          "description": "The total number of bytes sent since the last time the statistics were reset.",
          "readOnly": true
        },
        "timestamp": {
          "type": "string",
          "format": "date-time",
          "description": "The date/time value (in local time) that the corresponding client connected to the Proxy.",
          "readOnly": true
        },
        "totalMessagesSent": {
          "type": "integer",
          "format": "int64",
          "description": "The total number of messages sent since the last time the statistics were reset.",
          "readOnly": true
        },
        "refreshTime": {
          "type": "string",
          "format": "date-time",
          "description": "The timestamp when this model was last retrieved from a corresponding node. For local servers it is the local time.",
          "readOnly": true
        },
        "totalMessagesReceived": {
          "type": "integer",
          "format": "int64",
          "description": "The total number of messages received since the last time the statistics were reset.",
          "readOnly": true
        },
        "UUID": {
          "type": "string",
          "description": "The unique identifier for this connection.",
          "readOnly": true
        },
        "outgoingMessageBacklog": {
          "type": "integer",
          "format": "int32",
          "description": "The backlog of the outgoing message queue.",
          "readOnly": true
        },
        "outgoingByteBacklog": {
          "type": "integer",
          "format": "int64",
          "description": "The backlog (in bytes) of the outgoing queue",
          "readOnly": true
        }
      }
    },
    "topology": {
      "type": "object",
      "properties": {
        "topologyName": {
          "type": "string",
          "description": "Name of the topology."
        },
        "memberCount": {
          "type": "integer",
          "description": "The number of members using this topology.",
          "readOnly": true
        }
      }
    },
    "topologyMember": {
      "type": "object",
      "properties": {
        "topologyType": {
          "type": "string",
          "description": "Return the topology type"
        },
        "cacheNames": {
          "type": "string",
          "description": "Return the names of the caches using this topology",
          "readOnly": true
        },
        "roleParticipants": {
          "type": "string",
          "description": "Return the map of roles and the participants in that role",
          "readOnly": true
        }
      }
    },
    "hotcacheMember": {
      "type": "object",
      "properties": {
        "nodeId": {
          "type": "integer",
          "format": "int64",
          "description": "The ID of member to which the MBean belongs",
          "readOnly": true
        },
        "location": {
          "type": "string",
          "description": "The location of the MBean server",
          "readOnly": true
        },
        "type": {
          "type": "string",
          "description": "The type of the MBean",
          "enum": [
            "CoherenceAdapter"
          ],
          "readOnly": true
        },
        "member": {
          "type": "string",
          "description": "Name of the cluster member",
          "readOnly": true
        },
        "cacheNames": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "The names of the caches refreshed by the CoherenceAdapter."
        },
        "numberOfOperationsProcessed": {
          "type": "integer",
          "format": "int64",
          "description": "The aggregate number of operations processed since statistics were last reset.",
          "readOnly": true
        },
        "startTime": {
          "type": "string",
          "format": "date-time",
          "description": "The time at which the CoherenceAdapter was started.",
          "readOnly": true
        }
      }
    },
    "jmxManagement": {
      "type": "object",
      "properties": {
        "location": {
          "type": "string",
          "description": "The location of the MBean server",
          "readOnly": true
        },
        "type": {
          "type": "string",
          "description": "The type of the MBean",
          "enum": [
            "Management"
          ],
          "readOnly": true
        },
        "expiryDelay": {
          "type": "integer",
          "format": "int64",
          "description": "The number of milliseconds that the MBeanServer will keep a remote model snapshot before refreshing."
        },
        "refreshPolicy": {
          "type": "string",
          "description": "The policy used to determine the behavior when refreshing remote models. Valid values are: refresh-ahead, refresh-behind, refresh-expired, refresh-onquery. Invalid values will convert to `refresh-expired`."
        },
        "refreshCount": {
          "type": "integer",
          "format": "int64",
          "description": "The total number of snapshots retrieved since the statistics were last reset."
        },
        "refreshExcessCount": {
          "type": "integer",
          "format": "int64",
          "description": "The number of times the MBean server predictively refreshed information and the information was not accessed."
        },
        "refreshOnQuery": {
          "type": "string",
          "description": "Specifies whether or not the refresh-on-query MBeanServer is configured. If this is true then the RefreshPolicy value should be `refresh-onquery`."
        },
        "refreshPredictionCount": {
          "type": "integer",
          "format": "int64",
          "description": "The number of times the MBeanServer used a predictive (refresh-behind, refresh-ahead, refresh-onquery) algorithm to refresh MBean information."
        },
        "refreshTimeoutCount": {
          "type": "integer",
          "format": "int64",
          "description": "The number of times this management node has timed out while attempting to refresh remote MBean attributes."
        },
        "remoteNotificationCount": {
          "type": "integer",
          "format": "int64",
          "description": "The total number of remote notifications received for all MBeans by this node since the last time the statistics were reset."
        }
      }
    },
    "jmxSettings": {
      "type": "object",
      "properties": {
        "expiryDelay": {
          "type": "integer",
          "format": "int64",
          "description": "The number of milliseconds that the MBeanServer will keep a remote model snapshot before refreshing."
        },
        "refreshPolicy": {
          "type": "string",
          "description": "The policy used to determine the behavior when refreshing remote models. Valid values are: refresh-ahead, refresh-behind, refresh-expired, refresh-onquery. Invalid values will convert to refresh-expired."
        }
      }
    },
    "jvmMemoryAggregate": {
      "type": "object",
      "properties": {
        "heapMemoryUsage": {
          "$ref": "#/definitions/memoryUsage"
        },
        "nonHeapMemoryUsage": {
          "$ref": "#/definitions/memoryUsage"
        },
        "objectPendingFinalizationCount": {
          "$ref": "#/definitions/summaryNumber"
        }
      }
    },
    "memoryUsage": {
      "type": "object",
      "properties": {
        "init": {
          "$ref": "#/definitions/summaryNumber"
        },
        "committed": {
          "$ref": "#/definitions/summaryNumber"
        },
        "max": {
          "$ref": "#/definitions/summaryNumber"
        },
        "used": {
          "$ref": "#/definitions/summaryNumber"
        }
      }
    },
    "summaryNumber": {
      "type": "object",
      "properties": {
        "sum": {
          "type": "integer",
          "format": "int64"
        },
        "average": {
          "type": "integer",
          "format": "int64"
        },
        "min": {
          "type": "integer",
          "format": "int64"
        },
        "max": {
          "type": "integer",
          "format": "int64"
        },
        "count": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "searchInput": {
      "type": "object",
      "example": [
        {
          "description": "Get cluster name and size",
          "fields": [
          "clusterName",
          "clusterSize"
        ],
        "links": []
        },
        {
          "description": "Get node id and member name for all cluster members",
          "children": {
            "members": {
              "fields": [
                "nodeId",
                "memberName"
              ],
              "links": []
            }
          },
          "fields": [],
          "links": []
        },
        {
          "description": "Get the name and type of all services",
          "children": {
            "services": {
              "fields": [
                "name",
                "type"
              ],
              "links": []
            }
          },
          "fields": [],
          "links": []
        }
      ],
      "properties": {
        "fields": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "links": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "children": {
          "type": "object",
          "properties": {
            "members": {
              "type": "object",
              "properties": {
                "fields": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "links": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "children": {
                  "type": "object",
                  "properties": {
                    "platform": {
                      "type": "object",
                      "properties": {
                        "children": {
                          "type": "object",
                          "properties": {
                            "memory": {
                              "type": "object",
                              "properties": {
                                "fields": {
                                  "type": "array",
                                  "items": {
                                    "type": "string"
                                  }
                                },
                                "links": {
                                  "type": "array",
                                  "items": {
                                    "type": "string"
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            },
            "services": {
              "type": "object",
              "properties": {
                "fields": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "links": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "children": {
                  "type": "object",
                  "properties": {
                    "children": {
                      "type": "object",
                      "properties": {
                        "members": {
                          "type": "object",
                          "properties": {
                            "fields": {
                              "type": "array",
                              "items": {
                                "type": "string"
                              }
                            },
                            "links": {
                              "type": "array",
                              "items": {
                                "type": "string"
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "searchOutput": {
      "allOf": [
        {
          "$ref": "#/definitions/cluster"
        },
        {
          "properties": {
            "services": {
              "type": "object",
              "properties": {
                "items": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "allOf": [
                      {
                        "$ref": "#/definitions/service"
                      },
                      {
                        "properties": {
                          "members": {
                            "type": "object",
                            "properties": {
                              "items": {
                                "type": "array",
                                "items": {
                                  "type": "object",
                                  "allOf": [
                                    {
                                      "$ref": "#/definitions/serviceMember"
                                    }
                                  ]
                                }
                              }
                            }
                          },
                          "caches": {
                            "type": "object",
                            "properties": {
                              "items": {
                                "type": "array",
                                "items": {
                                  "type": "object",
                                  "allOf": [
                                    {
                                      "$ref": "#/definitions/cache"
                                    },
                                    {
                                      "properties": {
                                        "members": {
                                          "type": "object",
                                          "properties": {
                                            "items": {
                                              "type": "array",
                                              "items": {
                                                "type": "object",
                                                "allOf": [
                                                  {
                                                    "$ref": "#/definitions/cacheMember"
                                                  }
                                                ]
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  ]
                                }
                              }
                            }
                          }
                        }
                      }
                    ]
                  }
                }
              }
            },
            "members": {
              "type": "object",
              "properties": {
                "items": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "allOf": [
                      {
                        "$ref": "#/definitions/member"
                      },
                      {
                        "properties": {
                          "members": {
                            "type": "object",
                            "properties": {
                              "platform": {
                                "type": "object",
                                "properties": {
                                  "memory": {
                                    "allOf": [
                                      {
                                        "$ref": "#/definitions/jvmMemory"
                                      }
                                    ]
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      ]
    },
    "executor": {
      "type": "object",
      "properties": {
        "memberId": {
          "type": "string",
          "description": "The ID of member to which the MBean belongs",
          "readOnly": true
        },
        "tasksRejectedCount": {
          "type": "integer",
          "format": "int64",
          "description": "The tasks rejected count",
          "readOnly": true
        },
        "state": {
          "type": "string",
          "description": "The state of the executor",
          "enum": [
            "JOINING",
            "RUNNING",
            "CLOSING_GRACEFULLY",
            "CLOSING",
            "CLOSED",
            "REJECTING"
          ],
          "readOnly": true
        },
        "tasksCompletedCount": {
          "type": "integer",
          "format": "int64",
          "description": "The tasks completed count",
          "readOnly": true
        },
        "tasksInProgressCount": {
          "type": "integer",
          "format": "int64",
          "description": "The tasks in progress count",
          "readOnly": true
        },
        "traceLogging": {
          "default": "false",
          "type": "boolean",
          "description": "Indicates whether or not the executor trace logging is enabled."
        },
        "description": {
          "type": "string",
          "description": "The description of this executor.",
          "readOnly": true
        },
        "location": {
          "type": "string",
          "description": "The location where the executor is running",
          "readOnly": true
        },
        "id": {
          "type": "string",
          "description": "ID of the executor.",
          "readOnly": true
        },
        "name": {
          "type": "string",
          "description": "Name of the executor.",
          "readOnly": true
        }
      }
    },
    "storage": {
      "type": "object",
      "description": "Details of the particular storage manager.",
      "properties": {
        "cache": {
          "type": "string",
          "description": "Name of the cache."
        },
        "service": {
          "type": "string",
          "description": "Name of the service."
        },
        "nodeId": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "int64"
          },
          "description": "Storage manager members."
        },
        "insertCount": {
          "type": "integer",
          "format": "int64",
          "description": "The number of inserts into the backing map managed by this StorageManager. In addition to standard inserts caused by put and invoke operations or synthetic inserts caused by get operations with read-through backing map topology, this counter is incremented when distribution transfers move resources `into` the underlying backing map and is decremented when  distribution transfers move data `out`.  The insert count is used to audit the cache size in a static system.  Cache Size =  Insert Count - Remove Count - Eviction count.  Therefore the insert count is not reset by the reset statistics method.",
          "readOnly": true
        },
        "evictionCount": {
          "type": "integer",
          "format": "int64",
          "description": "The number of evictions from the backing map managed by this StorageManager caused by entries expiry or insert operations that would make the underlying backing map to reach its configured size limit.  The eviction count is used to audit the cache size in a static system.  Cache Size =  Insert Count - Remove Count - Eviction count.  Therefore the eviction count is not reset by the reset statistics method.",
          "readOnly": true
        },
        "indexingTotalMillis" : {
          "type": "integer",
          "format": "int64",
          "description": "The cumulative duration in milliseconds of index builds since statistics were last reset.",
          "readOnly": true
        },
        "listenerKeyCount": {
          "type": "integer",
          "format": "int32",
          "description": "The number of key-based listeners currently registered with the StorageManager.",
          "readOnly": true
        },
        "nonOptimizedQueryTotalMillis": {
          "type": "integer",
          "format": "int64",
          "description": "The total execution time in milliseconds for queries that could not be resolved or were partially resolved against indexes since statistics were last reset.",
          "readOnly": true
        },
        "listenerRegistrations": {
          "type": "integer",
          "format": "int64",
          "description": "The total number of listener registration requests processed by the StorageManager since the last time the statistics were reset.",
          "readOnly": true
        },
        "listenerFilterCount": {
          "type": "integer",
          "format": "int32",
          "description": "The number of filter-based listeners currently registered with the StorageManager.",
          "readOnly": true
        },
        "nonOptimizedQueryCount": {
          "type": "integer",
          "format": "int64",
          "description": "The total number of queries that could not be resolved or were partially resolved against indexes since statistics were last reset.",
          "readOnly": true
        },
        "locksGranted": {
          "type": "integer",
          "format": "int32",
          "description": "The number of locks currently granted for the portion of the partitioned cache managed by the StorageManager.",
          "readOnly": true
        },
        "indexTotalUnits": {
          "type": "integer",
          "format": "int64",
          "description": "The total units used by all indices on the associated cache.",
          "readOnly": true
        },
        "optimizedQueryAverageMillis": {
          "type": "integer",
          "format": "int64",
          "description": "The average duration in milliseconds per optimized query execution since the statistics were last reset.",
          "readOnly": true
        },
        "optimizedQueryTotalMillis": {
          "type": "integer",
          "format": "int64",
          "description": "The total execution time in milliseconds for queries that were fully resolved using indexes since statistics were last reset.",
          "readOnly": true
        },
        "removeCount": {
          "type": "integer",
          "format": "int64",
          "description": "The number of removes from the backing map managed by this StorageManager caused by operations such as clear, remove or invoke.  The remove count is used to audit the cache size in a static system.  Cache Size =  Insert Count - Remove Count - Eviction count.  Therefore the remove count is not reset by the reset statistics method.",
          "readOnly": true
        },
        "locksPending": {
          "type": "integer",
          "format": "int32",
          "description": "The number of pending lock requests for the portion of the partitioned cache managed by the StorageManager.",
          "readOnly": true
        },
        "queryContentionCount": {
          "type": "integer",
          "format": "int64",
          "description": "Total number of times a query had to be re-evaluated due to a concurrent update since statistics were last reset. This statistics provides a measure of an impact of concurrent updates on the query perfomance. If the total number of queries is Q and the number of contentions is C then the expected performance degradation factor should be no more than (Q + C)/Q.",
          "readOnly": true
        },
        "eventsDispatched": {
          "type": "integer",
          "format": "int64",
          "description": "The total number of events dispatched by the StorageManager since the last time the statistics were reset.",
          "readOnly": true
        },
        "optimizedQueryCount": {
          "type": "integer",
          "format": "int64",
          "description": "The total number of queries that were fully resolved using indexes since statistics were last reset.",
          "readOnly": true
        },
        "maxQueryDurationMillis": {
          "type": "integer",
          "format": "int64",
          "description": "The duration in milliseconds of the longest query execution since statistics were last reset.",
          "readOnly": true
        },
        "maxQueryThresholdMillis": {
          "type": "integer",
          "format": "int64",
          "description": "A query execution threshold in milliseconds The longest query executing longer than this threshold will be reported by the MaxQueryDescription attribute.",
          "readOnly": false
        },
        "nonOptimizedQueryAverageMillis": {
          "type": "integer",
          "format": "int64",
          "description": "The average duration in milliseconds per non-optimized query execution since the statistics were last reset.",
          "readOnly": true
        }
      }
    }
  },
  "parameters": {
    "clusterName": {
      "name": "clusterName",
      "in": "path",
      "description": "Name of the Coherence cluster.",
      "required": true,
      "type": "string"
    },
    "healthIdentifier": {
      "name": "healthIdentifier",
      "in": "path",
      "description": "An identifier of a health check.",
      "required": true,
      "type": "string"
    },
    "memberIdentifier": {
      "name": "memberIdentifier",
      "in": "path",
      "description": "An identifier of the member, it can either be the name or the nodeId of the member.",
      "required": true,
      "type": "string"
    },
    "destinationMemberId": {
      "name": "destinationMemberId",
      "in": "path",
      "description": "ID of the destination cluster member.",
      "required": true,
      "type": "string"
    },
    "memberId": {
      "name": "memberId",
      "in": "path",
      "description": "An identifier of the member, it is the nodeId of the member.",
      "required": true,
      "type": "string"
    },
    "serviceName": {
      "name": "serviceName",
      "in": "path",
      "description": "Name of the cache service.",
      "required": true,
      "type": "string"
    },
    "cacheName": {
      "name": "cacheName",
      "in": "path",
      "description": "Name of the cache.",
      "required": true,
      "type": "string"
    },
    "viewName": {
      "name": "viewName",
      "in": "path",
      "description": "Name of the view cache.",
      "required": true,
      "type": "string"
    },
    "topicName": {
      "name": "topicName",
      "in": "path",
      "description": "Name of the topic.",
      "required": true,
      "type": "string"
    },
    "subscriberId": {
      "name": "subscriberId",
      "in": "path",
      "description": "ID of the subscriber.",
      "required": true,
      "type": "string"
    },
    "subscriberGroupName": {
      "name": "subscriberGroupName",
      "in": "path",
      "description": "Name of the subscriber group.",
      "required": true,
      "type": "string"
    },
    "channel": {
      "name": "channel",
      "in": "query",
      "description": "The channel identifier.",
      "required": true,
      "type": "integer"
    },
    "topologyName": {
      "name": "topologyName",
      "in": "path",
      "description": "Name of the topology.",
      "required": true,
      "type": "string"
    },
    "appId": {
      "name": "appId",
      "in": "path",
      "description": "ID pf the application.",
      "required": true,
      "type": "string"
    },
    "participantName": {
      "name": "participantName",
      "in": "path",
      "description": "Name of the participant.",
      "required": true,
      "type": "string"
    },
    "viewedMemberId": {
      "name": "viewedMemberId",
      "in": "path",
      "description": "ID of the cluster member being viewed.",
      "required": true,
      "type": "string"
    },
    "snapshotName": {
      "name": "snapshotName",
      "in": "path",
      "description": "Name of the snapshot.",
      "required": true,
      "type": "string"
    },
    "role": {
      "name": "role",
      "in": "query",
      "description": "The data from cluster member belonging to the role will be included in the response",
      "type": "string"
    },
    "tracingRatio": {
      "name": "tracingRatio",
      "in": "query",
      "description": "The ratio of spans to capture when tracing is enabled.  A value of -1 disables tracing.  A value of 0 means Coherence will not initiate tracing unless an active span is already present.  A value between 0 (exclusively) and 1.0 (inclusively) represents the percentage of tracing spans that will be captured.",
      "required": true,
      "type": "number",
      "format": "float"
    },
    "collector": {
      "name": "collector",
      "in": "query",
      "description": "The collector to use for aggregation",
      "type": "string",
      "enum": [
        "all",
        "avg",
        "count",
        "list",
        "max",
        "min",
        "set",
        "sum",
        "intsummary",
        "longsummary",
        "doublesummary"
      ]
    },
    "options": {
      "name": "options",
      "in": "query",
      "description": "A list of comma separated (JFR) options",
      "type": "string"
    },
    "jfrCmd": {
      "name": "jfrCmd",
      "in": "path",
      "required": true,
      "description": "The JFR command with its options. Valid commands are:\njfrStart: start a JFR recording\njfrStop:  stop a JFR recording\njfrDump:  dump the JFR recording to a file\njfrCheck: check the status of a JFR recording\n\nSee the jcmd JFR command for more information.\n\nExample: jfrStart?options=name=myJfr,duration=60s,filename=$jfrFolder/myRecording.jfr\n\nThe $jfrFolder must already exist on the node where the JFR is taken.  If no folder is\nspecified, the JFR recording will be saved in the current directory of the MBeanServer.\nIn the case of role based cluster wide operation, the filename can be a path and if so, \nthe JFR recording will be stored in $name-$nodeId.jfr",
      "type": "string"
    },
    "executorName": {
      "name": "executorName",
      "in": "path",
      "description": "Name of the executor.",
      "required": true,
      "type": "string"
    }
  }
}
