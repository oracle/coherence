<?xml version="1.0" encoding="UTF-8"?>
<!--
  Copyright (c) 2000, 2022, Oracle and/or its affiliates.

  Licensed under the Universal Permissive License v 1.0 as shown at
  https://oss.oracle.com/licenses/upl.
  -->
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"
         child.project.url.inherit.append.path="false">
  <modelVersion>4.0.0</modelVersion>

  <parent>
    <groupId>com.oracle.coherence.ce</groupId>
    <artifactId>coherence-dependencies</artifactId>
    <version>${revision}</version>
    <relativePath>./coherence-dependencies/pom.xml</relativePath>
  </parent>

  <artifactId>main</artifactId>
  <packaging>pom</packaging>

  <name>Coherence Project</name>
  <description>Oracle Coherence Community Edition</description>
  <url>https://coherence.community/</url>
  <inceptionYear>2000</inceptionYear>

  <organization>
    <name>Oracle</name>
    <url>http://www.oracle.com</url>
  </organization>

  <scm child.scm.developerConnection.inherit.append.path="false"
       child.scm.connection.inherit.append.path="false"
       child.scm.url.inherit.append.path="false">
    <developerConnection>scm:git:git@github.com:oracle/coherence.git</developerConnection>
    <connection>scm:git:git@github.com:oracle/coherence.git</connection>
    <tag>HEAD</tag>
    <url>https://github.com/oracle/coherence</url>
  </scm>

  <developers>
    <developer>
      <name>Harvey Raja</name>
      <url>https://github.com/harveyraja</url>
    </developer>
    <developer>
      <name>Aleks Seovic</name>
      <url>https://github.com/aseovic</url>
    </developer>
    <developer>
      <name>Jonathan Knight</name>
      <url>https://github.com/thegridman</url>
    </developer>
    <developer>
      <name>Patrick Fry</name>
      <url>https://github.com/fryp</url>
    </developer>
    <developer>
      <name>Bin Chen</name>
      <url>https://github.com/bbcadela</url>
    </developer>
    <developer>
      <name>Ryan Lubke</name>
      <url>https://github.com/rlubke</url>
    </developer>
    <developer>
      <name>Luk Ho</name>
      <url>https://github.com/lsho</url>
    </developer>
    <developer>
      <name>Joe Fialli</name>
      <url>https://github.com/jfialli</url>
    </developer>
    <developer>
      <name>Tim Middleton</name>
      <url>https://github.com/tmiddlet2666</url>
    </developer>
    <developer>
      <name>Chinmay Patel</name>
      <url>https://github.com/chpatel3</url>
    </developer>
    <developer>
      <name>Maurice Gamanho</name>
      <url>https://github.com/mgamanho</url>
    </developer>
  </developers>

  <distributionManagement>
    <snapshotRepository>
      <id>ossrh</id>
      <name>Coherence Snapshot Repository</name>
      <url>https://oss.sonatype.org/content/repositories/snapshots/</url>
    </snapshotRepository>
    <repository>
      <id>ossrh</id>
      <name>Coherence Release Repository</name>
      <url>https://oss.sonatype.org/service/local/staging/deploy/maven2/</url>
    </repository>
  </distributionManagement>

  <modules>
    <!--
      !!! MODULES MUST NEVER BE DEFINED HERE !!!

      ADVICE: Instead define them in the appropriate <profile>
              section as part of the <profiles> section below.
      -->
  </modules>

  <dependencyManagement>
    <!-- dependency management is in the coherence-dependencies pom.xml -->
  </dependencyManagement>

  <properties>
    <!-- version prefix used for cluster compatibility -->
    <project.version.prefix>14.1.1</project.version.prefix>

    <!-- The groupId of the Coherence product -->
    <coherence.group.id>com.oracle.coherence.ce</coherence.group.id>

    <!-- project information -->
    <project.build.number>0</project.build.number>
    <project.official>false</project.official>

    <build.timestamp>${maven.build.timestamp}</build.timestamp>
    <maven.build.timestamp.format>yyyy-MM-dd HH:mm</maven.build.timestamp.format>

    <!-- project encoding definition -->
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>

    <!-- project options -->
    <skip-sign-artifacts>true</skip-sign-artifacts>
    <skip-code-coverage>true</skip-code-coverage>

    <surefire.argLine>-Xmx2g -XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=${project.build.directory} -XX:+ExitOnOutOfMemoryError -Dfile.encoding=UTF-8</surefire.argLine>
    <failsafe.argLine>-Xmx1g -XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=${project.build.directory} -XX:+ExitOnOutOfMemoryError -Dfile.encoding=UTF-8</failsafe.argLine>
    <surefire.coverage.argline/>
    <failsafe.coverage.argline/>

    <skip.animal.sniffer.plugin>false</skip.animal.sniffer.plugin>

    <dependency-check.skip>false</dependency-check.skip>

    <copyright.svn>-p4</copyright.svn>

    <!-- tool versions -->
    <java.version>11</java.version>
    <java.version.release>11</java.version.release> <!-- maven-compiler-plugin "release" version -->
    <maven.version>3.6.0</maven.version>

    <!--
      Need to set the following to false because of the bug in 3.1 version of the
      maven-compiler-plugin, which incorrectly inverts the logic for this flag

      See http://jira.codehaus.org/browse/MCOMPILER-209 for details.
    -->
    <maven.compiler.useIncrementalCompilation>false</maven.compiler.useIncrementalCompilation>

    <!-- ================================================================== -->
    <!--                      Path Configuration                            -->
    <!-- ================================================================== -->

    <!-- the path to the "prj" directory -->
    <projects.path>${root.path}/prj</projects.path>

    <!-- the path to the "tools" directory -->
    <tools.path>${root.path}/tools</tools.path>

    <!-- the path to the "test" directory -->
    <tests.path>${projects.path}/test</tests.path>

    <!-- tde/tcmd project paths -->
    <tde.classpath>./../../tools/tde/lib/tde.jar</tde.classpath>
    <tde.projects.path>${root.path}/tde</tde.projects.path>
    <tde.projects.dependencies.path>${tde.projects.path}/core/1.3/ext</tde.projects.dependencies.path>

    <tde.projects.file.url>file:./../../tde</tde.projects.file.url>

    <copyright.exclude.files>${projects.path}/etc/copyright-exclude.txt</copyright.exclude.files>

    <!-- ================================================================== -->
    <!--                   External Tool Configuration                      -->
    <!-- ================================================================== -->

    <!-- java executable configuration (for shelling out to java) -->
    <java.home.path>${env.JAVA_HOME}</java.home.path>
    <jar.executable>${java.home.path}/bin/jar</jar.executable>
    <java.executable>${java.home.path}/bin/java</java.executable>
    <java.memory.minimum>1024m</java.memory.minimum>
    <java.memory.maximum>1024m</java.memory.maximum>

    <!-- ================================================================== -->
    <!--                       Javadoc Configuration                        -->
    <!-- ================================================================== -->

    <javadoc.copyright>
      Copyright &amp;copy; 2000, 2022, Oracle and/or its affiliates.

      Licensed under the Universal Permissive License v 1.0 as shown at
      http://oss.oracle.com/licenses/upl.
    </javadoc.copyright>
    <javadoc.copyright.header>
      &lt;b&gt;Java API Reference for Oracle&#174; Coherence Community Edition&lt;br&gt;
      (${project.version.official})&lt;/b&gt;
    </javadoc.copyright.header>
    <javadoc.copyright.bottom>&lt;center&gt;${javadoc.copyright}&lt;/center&gt;</javadoc.copyright.bottom>
    <javadoc.locale>en_US</javadoc.locale>
    <javadoc.window.title>Java API Reference for Oracle&#174; Coherence Community Edition</javadoc.window.title>
    <javadoc.doctitle>Coherence CE ${project.version.official} API</javadoc.doctitle>
  </properties>

  <build>
    <pluginManagement>
      <plugins>
          <!-- Plugin Management is in the coherence-dependencies pom.xml -->
      </plugins>
    </pluginManagement>

    <plugins>
      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>build-helper-maven-plugin</artifactId>
      </plugin>

      <plugin>
        <groupId>org.codehaus.gmaven</groupId>
        <artifactId>gmaven-plugin</artifactId>
      </plugin>

      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-compiler-plugin</artifactId>
      </plugin>

      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-enforcer-plugin</artifactId>
      </plugin>

      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-jar-plugin</artifactId>
      </plugin>

      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>flatten-maven-plugin</artifactId>
      </plugin>

      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-surefire-plugin</artifactId>
      </plugin>

      <plugin>
          <groupId>org.commonjava.maven.plugins</groupId>
          <artifactId>directory-maven-plugin</artifactId>
          <executions>
              <execution>
                  <id>generate-top-parent-basedir</id>
                  <goals>
                      <goal>highest-basedir</goal>
                  </goals>
                  <phase>validate</phase>
                  <configuration>
                      <property>top.parent.basedir</property>
                  </configuration>
              </execution>
          </executions>
      </plugin>
      <!-- maven-javadoc-plugin -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-javadoc-plugin</artifactId>
        <version>${maven.javadoc.plugin.version}</version>

        <!-- shared javadoc configuration -->
        <configuration>
          <minmemory>512m</minmemory>
          <maxmemory>512m</maxmemory>
          <verbose>false</verbose>
          <sourcepath>${project.build.sourceDirectory}</sourcepath>
          <additionalJOption>--no-module-directories</additionalJOption>

          <overview>src/main/javadoc/overview.html</overview>
          <show>protected</show>
          <locale>${javadoc.locale}</locale>
          <windowtitle>${javadoc.window.title}</windowtitle>
          <doctitle>${javadoc.doctitle}</doctitle>
          <header>${javadoc.copyright.header}</header>
          <bottom>${javadoc.copyright.bottom}</bottom>
          <nodeprecatedlist>true</nodeprecatedlist>
          <author>true</author>
          <version>true</version>
          <breakiterator>true</breakiterator>
          <source>${java.version}</source>

          <doclint>none</doclint>

          <skip>${skip.docs}</skip>

          <tags>
            <tag>
              <name>apiNote</name>
              <placement>a</placement>
              <head>API Note:</head>
            </tag>
            <tag>
              <name>implNote</name>
              <placement>a</placement>
              <head>Implementation Note:</head>
            </tag>
            <tag>
              <name>implSpec</name>
              <placement>a</placement>
              <head>Implementation Requirements:</head>
            </tag>
          </tags>
        </configuration>
        <executions>
          <execution>
            <id>attach-javadocs</id>
            <goals>
              <goal>jar</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-source-plugin</artifactId>
        <version>${maven.source.plugin.version}</version>
        <configuration>
          <skipSource>${skip.sources}</skipSource>
        </configuration>
        <executions>
          <execution>
            <id>attach-sources</id>
            <phase>package</phase>
            <goals>
              <goal>jar-no-fork</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
    </plugins>
  </build>

  <!-- ================================================================== -->
  <!--                             PROFILES                               -->
  <!-- ================================================================== -->
  <profiles>
    <!--
        The 'coherence' profile is shared by all other profiles.

        It builds main com.oracle.coherence module and must be included with every build, regardless of the environment.
      -->
    <profile>
      <id>coherence</id>

      <activation>
        <!-- This is a work-around for the fact that activeByDefault does not do what you'd think it should -->
        <file><exists>.</exists></file>
      </activation>

      <!-- the following modules are buildable by this profile -->
      <modules>
        <module>coherence-dependencies</module>

        <!-- internal/shaded modules -->
        <module>coherence-core</module>
        <module>coherence-core-components</module>
        <module>coherence-discovery</module>
        <module>coherence-tracing</module>

        <!-- distributed modules -->
        <module>coherence-bom</module>
        <module>coherence</module>
      </modules>
    </profile>

    <!--
        The 'modules' profile builds modules that depend on the main com.oracle.coherence module.

        It must be performed as a second stage of every build, regardless of the environment.
      -->
    <profile>
      <id>modules</id>

      <activation>
        <activeByDefault>false</activeByDefault>
      </activation>

      <!-- the following modules are buildable by this profile -->
      <modules>
        <!-- internal modules -->
        <module>coherence-dependencies</module>

        <module>coherence-testing-data</module>
        <module>coherence-testing-support</module>

        <!-- distributed modules -->
        <module>coherence-bedrock</module>
        <module>coherence-bom</module>
        <module>coherence-docker</module>
        <module>coherence-javadoc</module>
        <module>coherence-jcache</module>
        <module>coherence-json</module>
        <module>coherence-loadbalancer</module>
        <module>coherence-login</module>
        <module>coherence-management</module>
        <module>coherence-metrics</module>
        <module>coherence-micrometer</module>
        <module>coherence-mock</module>
        <module>coherence-http-netty</module>
        <module>coherence-rest</module>
        <module>coherence-cdi</module>
        <module>coherence-cdi-server</module>
        <module>coherence-mp</module>
        <module>coherence-grpc</module>
        <module>coherence-grpc-proxy</module>
        <module>coherence-java-client</module>
        <module>coherence-helidon-grpc</module>
        <module>coherence-helidon-grpc-proxy</module>
        <module>coherence-helidon-client</module>
        <module>coherence-concurrent</module>
        <module>coherence-caffeine</module>
        <module>plugins</module>

        <module>test/unit</module>
        <module>test/distribution</module>
        <module>test/functional</module>
        <module>test/performance</module>
      </modules>
    </profile>


    <!--
        The 'IntelliJ' profile is for working with the Coherence project inside
        the IntelliJ IDE.

        It is specifically designed to exclude artifacts and modules containing
        build instructions typically unsupported or unrecognizable by IDEs.

        For example: compiling, building and assembling native libraries and
        TDE-based/CDB-based artifacts is not supported by IntelliJ.

        Consequently, this profile MAY ONLY be used once a local 'coherence'
        build has occurred or after the native/TDE/CDB-based artifacts have
        been built or made available (via Maven).
      -->
    <profile>
      <id>IntelliJ</id>

      <activation>
        <property>
          <!--
              Automatically enabled when inside IntelliJ.
              IntelliJ sets the idea.version property when importing Maven projects.
          -->
          <name>idea.version</name>
        </property>
      </activation>

      <!-- the following additional modules are buildable by this profile -->
      <modules>
        <!-- internal modules -->
        <module>coherence-dependencies</module>

        <module>coherence-testing-data</module>
        <module>coherence-testing-support</module>

        <!-- distributed modules -->
        <module>coherence-bedrock</module>
        <module>coherence-bom</module>
        <module>coherence-docker</module>
        <module>coherence-jcache</module>
        <module>coherence-json</module>
        <module>coherence-loadbalancer</module>
        <module>coherence-login</module>
        <module>coherence-management</module>
        <module>coherence-metrics</module>
        <module>coherence-micrometer</module>
        <module>coherence-mock</module>
        <module>coherence-http-netty</module>
        <module>coherence-rest</module>
        <module>coherence-cdi</module>
        <module>coherence-cdi-server</module>
        <module>coherence-mp</module>
        <module>coherence-grpc</module>
        <module>coherence-grpc-proxy</module>
        <module>coherence-java-client</module>
        <module>coherence-helidon-grpc</module>
        <module>coherence-helidon-grpc-proxy</module>
        <module>coherence-helidon-client</module>
        <module>coherence-concurrent</module>
        <module>coherence-caffeine</module>
        <module>plugins</module>

        <module>examples</module>

        <!-- test modules -->
        <module>test/unit</module>
        <module>test/functional</module>
        <module>test/performance</module>
      </modules>
    </profile>

    <!--
      The examples profile builds the Coherence examples and guides
    -->
    <profile>
      <id>examples</id>

      <modules>
        <module>examples</module>
      </modules>
    </profile>

    <!-- this is purely to allow the versions plugin to pick up the tde module
         and therefore bump the version during the release process -->
    <profile>
      <id>_tde</id>

      <activation>
        <property>
          <name>_tde</name>
        </property>
      </activation>

      <!-- the following additional modules are buildable by this profile -->
      <modules>
        <module>tde</module>
      </modules>
    </profile>

    <!-- This profile will detect the .git/config directory and flip the copyright.svn
         property from p4 to git to do the copyright year check.  -->
    <profile>
      <id>git-copyright</id>
      <activation>
        <activeByDefault>false</activeByDefault>
        <file>
          <exists>../.git/config</exists>
        </file>
      </activation>
      <properties>
        <copyright.svn>-g</copyright.svn>
      </properties>
    </profile>

    <profile>
      <id>copyright</id>
      <activation>
        <activeByDefault>false</activeByDefault>
      </activation>
      <build>
          <plugins>
            <plugin>
              <groupId>org.codehaus.mojo</groupId>
              <artifactId>exec-maven-plugin</artifactId>
              <!-- inherited = false - we do not want/need this copyright check to execute in sub-modules -->
              <inherited>false</inherited>
              <executions>
                <execution>
                  <id>copyright-check</id>
                  <goals>
                    <goal>java</goal>
                  </goals>
                  <phase>validate</phase>
                  <configuration>
                    <mainClass>org.glassfish.copyright.Copyright</mainClass>
                    <additionalClasspathElements>${top.parent.basedir}/../tools/copyright/glassfish-copyright-maven-plugin-2.4-SNAPSHOT.jar</additionalClasspathElements>
                    <addOutputToClasspath>false</addOutputToClasspath>
                    <addResourcesToClasspath>false</addResourcesToClasspath>
                    <arguments>
                      <argument>-c</argument>
                      <argument>-X</argument>
                      <argument>@${copyright.exclude.files}</argument>
                      <argument>-C</argument>
                      <argument>${top.parent.basedir}/etc/header.txt</argument>
                      <argument>-A</argument>
                      <argument>${top.parent.basedir}/etc/header-2.txt</argument>
                      <argument>-A</argument>
                      <argument>${top.parent.basedir}/etc/header-3.txt</argument>
                      <argument>-A</argument>
                      <argument>${top.parent.basedir}/etc/header-4.txt</argument>
                      <argument>-A</argument>
                      <argument>${top.parent.basedir}/etc/header-5.txt</argument>
                      <argument>-A</argument>
                      <argument>${top.parent.basedir}/etc/header-6.txt</argument>
                      <argument>${copyright.svn}</argument>
                    </arguments>
                  </configuration>
                </execution>
              </executions>
            </plugin>
          </plugins>
      </build>
    </profile>

    <!--
    The release-coherence is used to select the modules to release to Maven central for coherence.jar
    -->
    <profile>
      <id>release-coherence</id>

      <modules>
        <!-- distributed modules -->
        <module>coherence-core</module>
        <module>coherence-discovery</module>
        <module>coherence-tracing</module>

        <module>coherence-testing-support</module>

        <module>coherence-bom</module>
        <module>coherence</module>
      </modules>

      <build>
        <plugins>
          <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-gpg-plugin</artifactId>
            <executions>
              <execution>
                <id>sign-artifacts</id>
                <phase>verify</phase>
                <goals>
                  <goal>sign</goal>
                </goals>
              </execution>
            </executions>
          </plugin>

          <plugin>
            <groupId>org.sonatype.plugins</groupId>
            <artifactId>nexus-staging-maven-plugin</artifactId>
            <extensions>true</extensions>
            <configuration>
              <serverId>ossrh</serverId>
              <nexusUrl>https://oss.sonatype.org/</nexusUrl>
              <autoReleaseAfterClose>true</autoReleaseAfterClose>
            </configuration>
          </plugin>
        </plugins>
      </build>
    </profile>

    <!--
    The release-coherence is used to select the modules to release to Maven central
    that depend on coherence.jar
    -->
    <profile>
      <id>release-modules</id>

      <modules>
        <!-- distributed modules -->
        <module>coherence-jcache</module>
        <module>coherence-loadbalancer</module>
        <module>coherence-login</module>
        <module>coherence-management</module>
        <module>coherence-metrics</module>
        <module>coherence-mock</module>
        <module>coherence-http-netty</module>
        <module>coherence-rest</module>
        <module>coherence-json</module>
        <module>coherence-cdi</module>
        <module>coherence-cdi-server</module>
        <module>coherence-mp</module>
        <module>coherence-grpc</module>
        <module>coherence-grpc-proxy</module>
        <module>coherence-micrometer</module>
        <module>coherence-helidon-client</module>
        <module>coherence-java-client</module>
        <module>coherence-concurrent</module>
        <module>coherence-bom</module>
        <module>plugins</module>
      </modules>

      <build>
        <plugins>
          <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-gpg-plugin</artifactId>
            <executions>
              <execution>
                <id>sign-artifacts</id>
                <phase>verify</phase>
                <goals>
                  <goal>sign</goal>
                </goals>
              </execution>
            </executions>
          </plugin>

          <plugin>
            <groupId>org.sonatype.plugins</groupId>
            <artifactId>nexus-staging-maven-plugin</artifactId>
            <extensions>true</extensions>
            <configuration>
              <serverId>ossrh</serverId>
              <nexusUrl>https://oss.sonatype.org/</nexusUrl>
              <autoReleaseAfterClose>true</autoReleaseAfterClose>
            </configuration>
          </plugin>
        </plugins>
      </build>
    </profile>

    <!--
       The stage* profiles are designed to divide the tests into segments which take 1 hour
       or less to run. These stages can be used to run the tests in parallel.

       stage1 runs all of the tests outside of the test/* modules
       For stage1, tests are disabled for this profile in the test/* pom files.

       stage2 to stage13 run tests under the test/* modules. The segmentation of the tests are
       defined in the test/* pom files. For stage2 to stage13, tests are disabled here and then are
       enabled in the respective test/* pom files.
    -->

    <!--
       stage2 to stage12 run the functional tests. The actual tests involved are defined
       in test/functional/pom.xml.
    -->
    <profile>
      <id>stage2</id>
      <properties>
        <skipTests>true</skipTests>
      </properties>
    </profile>

    <profile>
      <id>stage3</id>
      <properties>
        <skipTests>true</skipTests>
      </properties>
    </profile>

    <profile>
      <id>stage4</id>
      <properties>
        <skipTests>true</skipTests>
      </properties>
    </profile>

    <profile>
      <id>stage5</id>
      <properties>
        <skipTests>true</skipTests>
      </properties>
    </profile>

    <profile>
      <id>stage6</id>
      <properties>
        <skipTests>true</skipTests>
      </properties>
    </profile>

    <profile>
      <id>stage7</id>
      <properties>
        <skipTests>true</skipTests>
      </properties>
    </profile>

    <profile>
      <id>stage8</id>
      <properties>
        <skipTests>true</skipTests>
      </properties>
    </profile>

    <profile>
      <id>stage9</id>
      <properties>
        <skipTests>true</skipTests>
      </properties>
    </profile>

    <profile>
      <id>stage10</id>
      <properties>
        <skipTests>true</skipTests>
      </properties>
    </profile>

    <profile>
      <id>stage11</id>
      <properties>
        <skipTests>true</skipTests>
      </properties>
    </profile>

    <profile>
      <id>stage12</id>
      <properties>
        <skipTests>true</skipTests>
      </properties>
    </profile>

    <!--
       stage13 runs the test/distribution/* tests.
    -->
    <profile>
      <id>stage13</id>
      <properties>
        <skipTests>true</skipTests>
      </properties>
    </profile>

    <!--
       stage14 runs javadoc
    -->
    <profile>
      <id>stage14</id>
      <properties>
        <project.official>true</project.official>
        <skipTests>true</skipTests>
      </properties>
    </profile>

    <profile>
      <id>versioned</id>
      <activation>
        <property>
          <name>env.P4_CHANGELIST</name>
        </property>
      </activation>

      <properties>
        <project.build.number>${env.P4_CHANGELIST}</project.build.number>
      </properties>
    </profile>

    <profile>
      <id>docs</id>
      <modules>
        <module>docs</module>
      </modules>
    </profile>

    <profile>
      <id>modular-tests</id>
      <properties>
        <useModulePath>true</useModulePath>
        <bedrockUseModules>true</bedrockUseModules>

        <!-- This is a work-around due to FailSafe putting JUnit jars on both the classpath and module path -->
        <failsafe.modules.argline>
          --add-exports org.junit.platform.commons/org.junit.platform.commons=ALL-UNNAMED
          --add-exports org.junit.platform.commons/org.junit.platform.commons.util=ALL-UNNAMED
          --add-exports org.junit.platform.commons/org.junit.platform.commons.logging=ALL-UNNAMED
        </failsafe.modules.argline>
      </properties>
      <build>
        <plugins>
          <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-failsafe-plugin</artifactId>
            <executions>
              <execution>
                <goals>
                  <goal>integration-test</goal>
                  <goal>verify</goal>
                </goals>
                <configuration>
                  <useModulePath>${useModulePath}</useModulePath>
                  <systemProperties>
                    <com.oracle.bedrock.modules.enabled>${bedrockUseModules}</com.oracle.bedrock.modules.enabled>
                  </systemProperties>
                </configuration>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
    </profile>


    <profile>
      <id>security-manager</id>
      <activation>
        <property>
          <name>test.security.enabled</name>
          <value>true</value>
        </property>
      </activation>
      <build>
        <plugins>
          <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-failsafe-plugin</artifactId>
            <configuration>
              <systemProperties>
                <java.security.manager/>
                <java.security.policy>file:${tests.path}/test-security.policy</java.security.policy>
                <java.security.debug>${test.security.debug}</java.security.debug>
                <!-- validate static lambdas when validating security -->
                <coherence.lambdas>static</coherence.lambdas>
              </systemProperties>
            </configuration>
          </plugin>

          <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-surefire-plugin</artifactId>
            <configuration>
              <systemProperties>
                <java.security.manager/>
                <java.security.policy>file:${tests.path}/test-security.policy</java.security.policy>
                <java.security.debug>${test.security.debug}</java.security.debug>
                <!-- validate static lambdas when validating security -->
                <coherence.lambdas>static</coherence.lambdas>
              </systemProperties>
            </configuration>
          </plugin>
        </plugins>
      </build>
    </profile>

    <profile>
      <id>code-coverage</id>
      <activation>
        <property>
          <name>code.coverage.enabled</name>
          <value>true</value>
        </property>
      </activation>
      <properties>
        <jacoco.agent.ut.arg/>
        <jacoco.agent.it.arg/>
        <jacoco.report-missing.force-zere>true</jacoco.report-missing.force-zere>
        <!-- jacoco.agent.*.arg properties are generated by jacoco:prepare-agent -->
        <surefire.coverage.argline>${jacoco.agent.ut.arg} -Dcoverage.enabled=true</surefire.coverage.argline>
        <failsafe.coverage.argline>${jacoco.agent.it.arg} -Dcoverage.enabled=true</failsafe.coverage.argline>
        <maven.test.failure.ignore>true</maven.test.failure.ignore>
        <skip.animal.sniffer.plugin>true</skip.animal.sniffer.plugin>
      </properties>
      <modules>
        <module>coverage</module>
      </modules>
      <dependencies>
        <dependency>
            <groupId>org.jacoco</groupId>
            <artifactId>org.jacoco.agent</artifactId>
            <classifier>runtime</classifier>
            <scope>test</scope>
            <version>${jacoco.version}</version>
        </dependency>
      </dependencies>
      <build>
        <pluginManagement>
          <plugins>
            <plugin>
              <groupId>org.apache.maven.plugins</groupId>
              <artifactId>maven-surefire-plugin</artifactId>
              <version>${maven.surefire.plugin.version}</version>
              <configuration>
                <systemPropertyVariables>
                  <bedrock.profile.coverage>auto</bedrock.profile.coverage>
                  <bedrock.profile.coverage.classname>com.oracle.coherence.testing.bedrock.CoverageProfile</bedrock.profile.coverage.classname>
                  <jacoco-agent.destfile>${project.build.directory}/jacoco/jacoco-ut.exec</jacoco-agent.destfile>
                  <coherence.lambdas>static</coherence.lambdas>
                </systemPropertyVariables>
                <excludes>
                  <exclude>**/StreamTest.java</exclude>
                  <exclude>**/IntStreamTest.java</exclude>
                  <exclude>**/LongStreamTest.java</exclude>
                  <!-- Repository tests -->
                  <exclude>**/DefaultRepositoryTest.java</exclude>
                  <exclude>**/DefaultAsyncRepositoryTest.java</exclude>
                </excludes>
              </configuration>
            </plugin>
            <plugin>
              <groupId>org.apache.maven.plugins</groupId>
              <artifactId>maven-failsafe-plugin</artifactId>
              <version>${maven.failsafe.plugin.version}</version>
              <configuration>
                <systemPropertyVariables>
                  <bedrock.profile.coverage>auto</bedrock.profile.coverage>
                  <bedrock.profile.coverage.classname>com.oracle.coherence.testing.bedrock.CoverageProfile</bedrock.profile.coverage.classname>
                  <jacoco-agent.destfile>${project.build.directory}/jacoco/jacoco-it.exec</jacoco-agent.destfile>
                  <coherence.lambdas>static</coherence.lambdas>
                </systemPropertyVariables>
                <reportsDirectory>${project.build.directory}/surefire-reports</reportsDirectory>
              </configuration>
            </plugin>
            <plugin>
              <groupId>org.jacoco</groupId>
              <artifactId>jacoco-maven-plugin</artifactId>
              <version>${jacoco.version}</version>
            </plugin>
          </plugins>
        </pluginManagement>
        <plugins>
          <plugin>
            <groupId>org.jacoco</groupId>
            <artifactId>jacoco-maven-plugin</artifactId>
            <configuration>
              <excludes>
                <!-- exclude the coherence byte-code manipulation packages -->
                <exclude>**/com/tangosol/internal/asm/*.*</exclude>
                <exclude>**/com/tangosol/dev/**.*</exclude>
                <exclude>**/com/tangosol/engarde/*.*</exclude>
                <exclude>**/com/tangosol/license/*.*</exclude>
                <exclude>**/com/tangosol/java/type/*.*</exclude>
                <exclude>**/com/tangosol/internal/util/**/*.*</exclude>

                <!-- exclude packages using lambdas -->
                <exclude>com/tangosol/util/function/Remote/*.*</exclude>
                <exclude>**/com/tangosol/util/stream/*.*</exclude>
                <exclude>**/com/oracle/coherence/repository/*.*</exclude>
                <exclude>**/com/oracle/coherence/concurrent/locks/*.*</exclude>

                <!-- exclude deprecated features -->
                <exclude>com/tangosol/io/lh/*.*</exclude>

                <!-- exclude TDE component features -->
                <exclude>com/tangosol/coherence/component/net/jmxHelper/*.*</exclude>

                <!-- other excludes -->
                <exclude>com/tangosol/run/jca/*.*</exclude>
                <exclude>com/tangosol/net/management/jmx/*.*</exclude>
              </excludes>
              <classDumpDir>${project.build.directory}/jacoco-classes</classDumpDir>
            </configuration>
            <executions>
              <execution>
                <id>instrument</id>
                <goals>
                    <goal>instrument</goal>
                </goals>
              </execution>
              <execution>
                <id>restore</id>
                <phase>post-integration-test</phase>
                <goals>
                    <goal>restore-instrumented-classes</goal>
                </goals>
              </execution>
              <execution>
                <id>merge-results</id>
                <phase>verify</phase>
                <goals>
                  <goal>merge</goal>
                </goals>
                <configuration>
                  <fileSets>
                    <fileSet>
                      <directory>${project.build.directory}/jacoco</directory>
                      <includes>
                        <include>*.exec</include>
                      </includes>
                    </fileSet>
                  </fileSets>
                  <destFile>${project.build.directory}/jacoco.exec</destFile>
                </configuration>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
    </profile>

    <!--
       settings required to be able to run tests with Java 8
    -->
    <profile>
      <id>test-jdk8</id>
      <properties>
        <surefire.argLine>-Xmx2g -XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=${project.build.directory} -XX:+ExitOnOutOfMemoryError -Dfile.encoding=UTF-8</surefire.argLine>
        <failsafe.argLine>-Xmx1g -XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=${project.build.directory} -XX:+ExitOnOutOfMemoryError -XX:+UnlockCommercialFeatures -Dfile.encoding=UTF-8</failsafe.argLine>
      </properties>
    </profile>

    <profile>
      <id>test-jdk16</id>
      <properties>
        <surefire.argLine>-Xmx2g -XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=${project.build.directory} -XX:+ExitOnOutOfMemoryError -Dfile.encoding=UTF-8 --add-exports=java.base/jdk.internal.ref=ALL-UNNAMED --add-opens=java.base/java.lang.invoke=ALL-UNNAMED --add-opens java.base/java.nio=ALL-UNNAMED --add-exports java.management/sun.management=ALL-UNNAMED --add-opens java.base/java.util=ALL-UNNAMED --add-opens java.base/java.lang=ALL-UNNAMED</surefire.argLine>
        <failsafe.argLine>-Xmx1g -XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=${project.build.directory} -XX:+ExitOnOutOfMemoryError -Dfile.encoding=UTF-8 --add-exports=java.base/jdk.internal.ref=ALL-UNNAMED --add-opens=java.base/java.lang.invoke=ALL-UNNAMED --add-opens java.base/java.nio=ALL-UNNAMED --add-exports java.management/sun.management=ALL-UNNAMED --add-opens java.base/java.util=ALL-UNNAMED --add-opens java.base/java.lang=ALL-UNNAMED</failsafe.argLine>
      </properties>
      <build>
        <pluginManagement>
          <plugins>
            <plugin>
              <groupId>org.apache.maven.plugins</groupId>
              <artifactId>maven-surefire-plugin</artifactId>
              <version>${maven.surefire.plugin.version}</version>
              <configuration>
                <systemPropertyVariables>
                  <bedrock.profile.illegalaccess>deny</bedrock.profile.illegalaccess>
                  <bedrock.profile.illegalaccess.classname>com.oracle.coherence.testing.bedrock.IllegalaccessProfile</bedrock.profile.illegalaccess.classname>
                </systemPropertyVariables>
              </configuration>
            </plugin>
            <plugin>
              <groupId>org.apache.maven.plugins</groupId>
              <artifactId>maven-failsafe-plugin</artifactId>
              <version>${maven.failsafe.plugin.version}</version>
              <configuration>
                <systemPropertyVariables>
                  <bedrock.profile.illegalaccess>deny</bedrock.profile.illegalaccess>
                  <bedrock.profile.illegalaccess.classname>com.oracle.coherence.testing.bedrock.IllegalaccessProfile</bedrock.profile.illegalaccess.classname>
                </systemPropertyVariables>
              </configuration>
            </plugin>
          </plugins>
        </pluginManagement>
      </build>
    </profile>

    <profile>
      <id>test-jdk17</id>
      <properties>
        <surefire.argLine>-Xmx2g -XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=${project.build.directory} -XX:+ExitOnOutOfMemoryError -Dfile.encoding=UTF-8 --add-exports=java.base/jdk.internal.ref=ALL-UNNAMED --add-opens=java.base/java.lang.invoke=ALL-UNNAMED --add-opens java.base/java.nio=ALL-UNNAMED --add-exports java.management/sun.management=ALL-UNNAMED --add-opens java.base/java.util=ALL-UNNAMED --add-opens java.base/java.lang=ALL-UNNAMED</surefire.argLine>
        <failsafe.argLine>-Xmx1g -XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=${project.build.directory} -XX:+ExitOnOutOfMemoryError -Dfile.encoding=UTF-8 --add-exports=java.base/jdk.internal.ref=ALL-UNNAMED --add-opens=java.base/java.lang.invoke=ALL-UNNAMED --add-opens java.base/java.nio=ALL-UNNAMED --add-exports java.management/sun.management=ALL-UNNAMED --add-opens java.base/java.util=ALL-UNNAMED --add-opens java.base/java.lang=ALL-UNNAMED</failsafe.argLine>
      </properties>
      <build>
        <pluginManagement>
          <plugins>
            <plugin>
              <groupId>org.apache.maven.plugins</groupId>
              <artifactId>maven-surefire-plugin</artifactId>
              <version>${maven.surefire.plugin.version}</version>
              <configuration>
                <systemPropertyVariables>
                  <bedrock.profile.illegalaccess>deny</bedrock.profile.illegalaccess>
                  <bedrock.profile.illegalaccess.classname>com.oracle.coherence.testing.bedrock.IllegalaccessProfile</bedrock.profile.illegalaccess.classname>
                </systemPropertyVariables>
              </configuration>
            </plugin>
            <plugin>
              <groupId>org.apache.maven.plugins</groupId>
              <artifactId>maven-failsafe-plugin</artifactId>
              <version>${maven.failsafe.plugin.version}</version>
              <configuration>
                <systemPropertyVariables>
                  <bedrock.profile.illegalaccess>deny</bedrock.profile.illegalaccess>
                  <bedrock.profile.illegalaccess.classname>com.oracle.coherence.testing.bedrock.IllegalaccessProfile</bedrock.profile.illegalaccess.classname>
                </systemPropertyVariables>
              </configuration>
            </plugin>
          </plugins>
        </pluginManagement>
      </build>
    </profile>

    <profile>
      <id>test-production-mode</id>
      <properties>
        <surefire.argLine>-Xmx2g -XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=${project.build.directory} -XX:+ExitOnOutOfMemoryError -Dfile.encoding=UTF-8 -Dcoherence.mode=prod</surefire.argLine>
        <failsafe.argLine>-Xmx1g -XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=${project.build.directory} -XX:+ExitOnOutOfMemoryError -Dfile.encoding=UTF-8 -Dcoherence.mode=prod</failsafe.argLine>
      </properties>
      <build>
        <pluginManagement>
          <plugins>
            <plugin>
              <groupId>org.apache.maven.plugins</groupId>
              <artifactId>maven-surefire-plugin</artifactId>
              <version>${maven.surefire.plugin.version}</version>
              <configuration>
                <systemPropertyVariables>
                  <bedrock.profile.productionmode>prod</bedrock.profile.productionmode>
                  <bedrock.profile.productionmode.classname>com.oracle.coherence.testing.bedrock.ProductionmodeProfile</bedrock.profile.productionmode.classname>
                </systemPropertyVariables>
              </configuration>
            </plugin>
            <plugin>
              <groupId>org.apache.maven.plugins</groupId>
              <artifactId>maven-failsafe-plugin</artifactId>
              <version>${maven.failsafe.plugin.version}</version>
              <configuration>
                <systemPropertyVariables>
                  <bedrock.profile.productionmode>prod</bedrock.profile.productionmode>
                  <bedrock.profile.productionmode.classname>com.oracle.coherence.testing.bedrock.ProductionmodeProfile</bedrock.profile.productionmode.classname>
                </systemPropertyVariables>
              </configuration>
            </plugin>
          </plugins>
        </pluginManagement>
      </build>
    </profile>

    <profile>
      <id>dependency-check</id>
      <build>
        <plugins>
          <plugin>
            <groupId>org.owasp</groupId>
            <artifactId>dependency-check-maven</artifactId>
            <executions>
              <execution>
                <goals>
                  <goal>check</goal>
                </goals>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
    </profile>
    <profile>
      <id>Windows</id>
      <activation>
        <os>
          <family>Windows</family>
        </os>
      </activation>
      <properties>
        <copyright.exclude.files>${top.parent.basedir}\etc\copyright-exclude-windows.txt</copyright.exclude.files>
      </properties>
    </profile>
  </profiles>

  <repositories>
    <!-- required for Berkeley DB -->
    <repository>
      <id>oracleReleases</id>
      <name>Oracle Released Java Packages</name>
      <url>https://download.oracle.com/maven</url>
      <layout>default</layout>
      <releases>
        <enabled>true</enabled>
      </releases>
      <snapshots/>
    </repository>

    <repository>
      <id>ossrh-staging</id>
      <name>OSS Sonatype Staging</name>
      <url>https://oss.sonatype.org/content/groups/staging/</url>
      <snapshots>
        <enabled>false</enabled>
      </snapshots>
      <releases>
        <enabled>true</enabled>
      </releases>
    </repository>
    
    <repository>
      <id>snapshots-repo</id>
      <url>https://oss.sonatype.org/content/repositories/snapshots</url>
      <releases>
        <enabled>false</enabled>
      </releases>
      <snapshots>
        <enabled>true</enabled>
      </snapshots>
    </repository>
  </repositories>

  <pluginRepositories>
    <pluginRepository>
      <id>central</id>
      <url>https://repo1.maven.org/maven2/</url>
      <releases>
        <enabled>true</enabled>
      </releases>
      <snapshots>
        <enabled>false</enabled>
      </snapshots>
    </pluginRepository>

    <!-- required for custom Moditect plugin -->
    <pluginRepository>
      <id>snapshots-repo</id>
      <url>https://oss.sonatype.org/content/repositories/snapshots</url>
      <releases>
        <enabled>false</enabled>
      </releases>
      <snapshots>
        <enabled>true</enabled>
      </snapshots>
    </pluginRepository>
  </pluginRepositories>

  <licenses>
    <license>
      <name>Universal Permissive License v 1.0</name>
      <url>http://oss.oracle.com/licenses/upl</url>
      <distribution>repo</distribution>
      <comments>
        Copyright (c) 2000, 2022, Oracle and/or its affiliates.

        Licensed under the Universal Permissive License v 1.0 as shown at
        http://oss.oracle.com/licenses/upl.
      </comments>
    </license>
  </licenses>
</project>
