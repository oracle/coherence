<?xml version="1.0"?>
<!--
  Copyright (c) 2000, 2025, Oracle and/or its affiliates.

  Licensed under the Universal Permissive License v 1.0 as shown at
  https://oss.oracle.com/licenses/upl.
  -->
<cache-config xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
              xmlns="http://xmlns.oracle.com/coherence/coherence-cache-config"
              xsi:schemaLocation="http://xmlns.oracle.com/coherence/coherence-cache-config coherence-cache-config.xsd"
              xml-override="{coherence.cacheconfig.override}">
  <defaults>
    <scope-name>${coherence.scope}</scope-name>
    <serializer>${coherence.serializer}</serializer>
  </defaults>

  <caching-scheme-mapping>
    <cache-mapping>
      <cache-name>*</cache-name>
      <scheme-name>thin-${coherence.client direct}</scheme-name>
    </cache-mapping>
  </caching-scheme-mapping>

  <topic-scheme-mapping>
    <topic-mapping>
      <topic-name>*</topic-name>
      <scheme-name>topic-server</scheme-name>
    </topic-mapping>
  </topic-scheme-mapping>

  <caching-schemes>
    <!-- remote caching scheme for accessing the proxy from extend clients -->
    <remote-cache-scheme>
      <scheme-name>thin-remote</scheme-name>
      <service-name>RemoteCache</service-name>
      <proxy-service-name system-property="coherence.extend.proxy.service">Proxy</proxy-service-name>
      <defer-key-association-check system-property="coherence.extend.defer.key.association"/>
    </remote-cache-scheme>

    <!-- remote caching scheme for accessing the proxy from extend clients -->
    <remote-cache-scheme>
      <scheme-name>thin-remote-fixed</scheme-name>
      <service-name>RemoteCache</service-name>
      <initiator-config>
        <tcp-initiator>
          <remote-addresses>
            <socket-address>
              <address system-property="coherence.extend.address"/>
              <port system-property="coherence.extend.port"/>
            </socket-address>
          </remote-addresses>
        </tcp-initiator>
      </initiator-config>
      <defer-key-association-check system-property="coherence.extend.defer.key.association"/>
    </remote-cache-scheme>

    <!--
    A remote caching scheme for accessing a gRPC proxy.
    The NameService will be used to look up the host
    names and ports for the gRPC proxies.
    -->
    <remote-grpc-cache-scheme>
      <scheme-name>thin-grpc</scheme-name>
      <remote-scope-name system-property="coherence.grpc.remote.scope"/>
      <service-name>RemoteGrpcCache</service-name>
      <cluster-name system-property="coherence.grpc.remote.cluster"/>
      <proxy-service-name system-property="coherence.grpc.remote.proxy"/>
      <grpc-channel system-property="coherence.grpc.channel">
        <name-service-addresses>
          <socket-address>
            <address system-property="coherence.grpc.address"/>
            <port system-property="coherence.grpc.port"/>
          </socket-address>
        </name-service-addresses>
        <socket-provider system-property="coherence.grpc.socketprovider"/>
      </grpc-channel>
      <defer-key-association-check system-property="coherence.grpc.defer.key.association"/>
    </remote-grpc-cache-scheme>

    <!--
    A remote caching scheme for accessing a gRPC proxy.
    The specified address(es) will be used to connect
    directly to a gRPC proxy.
    -->
    <remote-grpc-cache-scheme>
      <scheme-name>thin-grpc-fixed</scheme-name>
      <remote-scope-name system-property="coherence.grpc.remote.scope"/>
      <service-name>RemoteGrpcCache</service-name>
      <cluster-name system-property="coherence.grpc.remote.cluster"/>
      <grpc-channel system-property="coherence.grpc.channel">
        <remote-addresses>
          <socket-address>
            <address system-property="coherence.grpc.address"/>
            <port system-property="coherence.grpc.port"/>
          </socket-address>
        </remote-addresses>
        <socket-provider system-property="coherence.grpc.socketprovider"/>
      </grpc-channel>
      <defer-key-association-check system-property="coherence.grpc.defer.key.association"/>
    </remote-grpc-cache-scheme>

    <!-- partitioned caching scheme for clustered clients -->
    <distributed-scheme>
      <scheme-name>thin-direct</scheme-name>
      <scheme-ref>server</scheme-ref>
      <local-storage system-property="coherence.distributed.localstorage">false</local-storage>
      <autostart>false</autostart>
    </distributed-scheme>

    <!-- partitioned caching scheme for servers -->
    <distributed-scheme>
      <scheme-name>server</scheme-name>
      <service-name>${coherence.service.name PartitionedCache}</service-name>
      <local-storage system-property="coherence.distributed.localstorage">true</local-storage>
      <partition-count system-property="coherence.distributed.partitions">${coherence.distributed.partitioncount 257}</partition-count>
      <backing-map-scheme>
        <storage-authorizer system-property="coherence.storage.authorizer"/>
        <local-scheme>
          <high-units>{back-limit-bytes 0B}</high-units>
        </local-scheme>
      </backing-map-scheme>
      <autostart>true</autostart>
    </distributed-scheme>

    <!-- partitioned topic scheme for servers -->
    <paged-topic-scheme>
      <scheme-name>topic-server</scheme-name>
      <service-name>${coherence.service.name Partitioned}Topic</service-name>
      <local-storage system-property="coherence.distributed.localstorage">true</local-storage>
      <partition-count system-property="coherence.distributed.partitions">${coherence.distributed.partitioncount 257}</partition-count>
      <autostart system-property="coherence.topic.enabled">true</autostart>
      <channel-count system-property="coherence.topic.channel.count"/>
      <high-units>{topic-high-units-bytes 0B}</high-units>
      <reconnect-wait system-property="coherence.topic.reconnect.wait"/>
      <reconnect-timeout system-property="coherence.topic.reconnect.timeout"/>
      <reconnect-retry system-property="coherence.topic.reconnect.retry"/>
    </paged-topic-scheme>

    <!--
    A proxy scheme that allows Extend clients to connect to the cluster over TCP/IP.
    The configuration below will bind to all local network interfaces on an ephemeral port.
    A fixed address can be configured by setting the coherence.extend.address system property,
    or the COHERENCE_EXTEND_ADDRESS environment variable.
    A fixed port can be configured by setting the coherence.extend.port system property
    or the COHERENCE_EXTEND_PORT environment variable.
    -->
    <proxy-scheme>
      <service-name>Proxy</service-name>
      <acceptor-config>
        <tcp-acceptor>
          <local-address>
            <address system-property="coherence.extend.address"/>
            <port system-property="coherence.extend.port"/>
          </local-address>
        </tcp-acceptor>
      </acceptor-config>
      <autostart system-property="coherence.proxy.enabled">true</autostart>
    </proxy-scheme>
  </caching-schemes>
</cache-config>
