
/*
 * Copyright (c) 2000, 2024, Oracle and/or its affiliates.
 *
 * Licensed under the Universal Permissive License v 1.0 as shown at
 * https://oss.oracle.com/licenses/upl.
 */

// ---- class: com.tangosol.coherence.component.net.Cluster

package com.tangosol.coherence.component.net;

import com.oracle.coherence.common.collections.NullableSortedMap;

import com.tangosol.coherence.component.application.console.Coherence;
import com.tangosol.coherence.component.net.extend.util.TcpUtil;
import com.tangosol.coherence.component.net.memberSet.ActualMemberSet;
import com.tangosol.coherence.component.net.memberSet.actualMemberSet.ServiceMemberSet;
import com.tangosol.coherence.component.net.memberSet.actualMemberSet.serviceMemberSet.MasterMemberSet;
import com.tangosol.coherence.component.net.packet.MessagePacket;
import com.tangosol.coherence.component.net.socket.UdpSocket;
import com.tangosol.coherence.component.util.Daemon;
import com.tangosol.coherence.component.util.Queue;
import com.tangosol.coherence.component.util.daemon.queueProcessor.Service;
import com.tangosol.coherence.component.util.daemon.queueProcessor.packetProcessor.PacketListener;
import com.tangosol.coherence.component.util.daemon.queueProcessor.service.Grid;
import com.tangosol.coherence.component.util.daemon.queueProcessor.service.peer.initiator.TcpInitiator;
import com.oracle.coherence.common.base.Blocking;
import com.oracle.coherence.common.base.Disposable;
import com.oracle.coherence.common.internal.Platform;
import com.oracle.coherence.common.internal.net.DemultiplexedSocketProvider;
import com.oracle.coherence.common.internal.net.MultiplexedSocketProvider;
import com.oracle.coherence.common.internal.net.socketbus.SocketBusDriver;
import com.oracle.coherence.common.io.BufferManager;
import com.oracle.coherence.common.io.BufferManagers;
import com.oracle.coherence.common.io.Buffers;
import com.oracle.coherence.common.net.InetAddressComparator;
import com.oracle.coherence.common.net.InetAddresses;
import com.oracle.coherence.common.net.InetSocketAddress32;
import com.oracle.coherence.common.net.SocketProvider;
import com.oracle.coherence.common.net.TcpSocketProvider;
import com.oracle.coherence.common.net.exabus.Depot;
import com.oracle.coherence.common.net.exabus.EndPoint;
import com.oracle.coherence.common.net.exabus.spi.Driver;
import com.oracle.coherence.common.net.exabus.util.SimpleDepot;
import com.oracle.coherence.common.util.Duration;
import com.oracle.coherence.common.util.Threads;
import com.tangosol.coherence.config.Config;
import com.tangosol.coherence.config.builder.ServiceFailurePolicyBuilder;
import com.tangosol.coherence.config.builder.SocketProviderBuilder;
import com.tangosol.coherence.config.unit.Millis;
import com.tangosol.config.expression.NullParameterResolver;
import com.tangosol.internal.io.BufferManagerWriteBufferPool;
import com.tangosol.internal.net.cluster.DefaultClusterDependencies;
import com.tangosol.internal.net.cluster.DefaultServiceFailurePolicy;
import com.tangosol.internal.net.service.extend.NameServiceDependencies;
import com.tangosol.internal.net.service.extend.remote.DefaultRemoteServiceDependencies;
import com.tangosol.internal.net.service.grid.DefaultGridDependencies;
import com.tangosol.internal.net.service.peer.acceptor.TcpAcceptorDependencies;
import com.tangosol.internal.net.service.peer.initiator.DefaultTcpInitiatorDependencies;
import com.tangosol.internal.tracing.LegacyXmlTracingHelper;
import com.tangosol.internal.tracing.TracingHelper;
import com.tangosol.internal.util.LoggingBridge;
import com.tangosol.io.nio.ByteBufferInputStream;
import com.tangosol.io.nio.ByteBufferOutputStream;
import com.tangosol.license.ProcessorInfo;
import com.tangosol.net.ActionPolicy;
import com.tangosol.net.AddressProvider;
import com.tangosol.net.CacheFactory;
import com.tangosol.net.ClusterDependencies;
import com.tangosol.net.CompositeAddressProvider;
import com.tangosol.net.DatagramSocketProvider;
import com.tangosol.net.Guardian;
import com.tangosol.net.InetAddressHelper;
import com.tangosol.net.MemberIdentity;
import com.tangosol.net.RequestTimeoutException;
import com.tangosol.net.ServiceFailurePolicy;
import com.tangosol.net.SystemDatagramSocketProvider;
import com.tangosol.net.TcpDatagramSocket;
import com.tangosol.net.TcpDatagramSocketProvider;
import com.tangosol.net.internal.PacketIdentifier;
import com.tangosol.net.internal.SubstitutionSocketAddressProvider;
import com.tangosol.net.messaging.ConnectionException;
import com.tangosol.net.security.LocalPermission;
import com.tangosol.run.xml.XmlElement;
import com.tangosol.util.Base;
import com.tangosol.util.Binary;
import com.tangosol.util.ExternalizableHelper;
import com.tangosol.util.Filter;
import com.tangosol.util.ImmutableArrayList;
import com.tangosol.util.SimpleEnumerator;
import com.tangosol.util.SimpleResourceRegistry;
import java.io.ByteArrayOutputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.IOException;
import java.net.BindException;
import java.net.DatagramPacket;
import java.net.DatagramSocket;
import java.net.InetAddress;
import java.net.InetSocketAddress;
import java.net.MulticastSocket;
import java.net.NetworkInterface;
import java.net.ServerSocket;
import java.net.UnknownHostException;
import java.nio.ByteBuffer;
import java.nio.channels.SelectionKey;
import java.nio.channels.ServerSocketChannel;
import java.util.ArrayList;
import java.util.Collections;
import java.util.ConcurrentModificationException;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Random;
import java.util.Set;
import java.util.concurrent.ConcurrentHashMap;
import javax.naming.NamingException;

/**
 * The "real" Cluster implementation.
 */
@SuppressWarnings({"deprecation", "rawtypes", "unused", "unchecked", "ConstantConditions", "DuplicatedCode", "ForLoopReplaceableByForEach", "IfCanBeSwitch", "RedundantArrayCreation", "RedundantSuppression", "SameParameterValue", "TryFinallyCanBeTryWithResources", "TryWithIdenticalCatches", "UnnecessaryBoxing", "UnnecessaryUnboxing", "UnusedAssignment"})
public class Cluster
        extends    com.tangosol.coherence.component.Net
        implements com.tangosol.net.Cluster,
                   com.tangosol.net.NameService.LookupCallback
    {
    // ---- Fields declarations ----
    
    /**
     * Property ClusterName
     *
     * The name of this cluster (could be empty).
     */
    private String __m_ClusterName;
    
    /**
     * Property ClusterNameBuffer
     *
     * ByteBuffer containing the Cluster's name in UTF format.
     */
    private java.nio.ByteBuffer __m_ClusterNameBuffer;
    
    /**
     * Property ClusterService
     *
     * The default (number zero) Service that handles membership, cluster time
     * synchronization and Service registration.
     */
    private Cluster.ClusterService __m_ClusterService;
    
    /**
     * Property Dependencies
     *
     * The configuration information for the cluster that must be supplied
     * before the cluster can be instructed to start.
     */
    private com.tangosol.net.ClusterDependencies __m_Dependencies;
    
    /**
     * Property Guardian
     *
     * The Guardian daemon.
     */
    private Cluster.PublicGuardian __m_Guardian;
    
    /**
     * Property GuardRecoverCount
     *
     * The number of recovery attempts executed for all guardables on this node
     * since the node statistics were last reset.
     * 
     * @volatile
     */
    private volatile int __m_GuardRecoverCount;
    
    /**
     * Property GuardTerminateCount
     *
     * The number of termination attempts executed for all guardables on this
     * node since the node statistics were last reset.
     * 
     * @volatile
     */
    private volatile int __m_GuardTerminateCount;
    
    /**
     * Property Halted
     *
     * True iff the cluster has been halted.
     */
    private transient boolean __m_Halted;
    
    /**
     * Property IpMonitor
     *
     * The IpMonitor daemon.
     */
    private Cluster.IpMonitor __m_IpMonitor;
    
    /**
     * Property Management
     *
     * The management gateway.
     */
    private transient com.tangosol.net.management.Registry __m_Management;
    
    /**
     * Property MAX_SYSTEM_SERVICE
     *
     * The maximum pre-registered service id.  These ids are reserved for
     * "system" services that are registered before starting the cluster, see
     * onInit().
     */
    public static final int MAX_SYSTEM_SERVICE = 1;
    
    /**
     * Property MessagePublisher
     *
     * The shared MessagePublisher which services (other then cluster service)
     * may use for communicating with other cluster members.
     * 
     * This starts as a reference to the PacketPublisher, but will be switched
     * to the TransportService.MessageHandler if the TransportService is
     * enabled.
     * 
     * @since 12.1.3
     */
    private com.tangosol.internal.util.MessagePublisher __m_MessagePublisher;
    
    /**
     * Property NameService
     *
     * The NameService
     */
    private Cluster.NameService __m_NameService;
    
    /**
     * Property NameServiceBridge
     *
     * The NameServiceBridge, i.e. connection to a NS running on the same
     * machine but withing another cluster. 
     */
    private Cluster.NameServiceBridge __m_NameServiceBridge;
    
    /**
     * Property OperationalContext
     *
     * The OperationalContext for this Cluster.
     */
    private com.tangosol.net.OperationalContext __m_OperationalContext;
    
    /**
     * Property PointListener
     *
     * The PacketListener (datagram point-to-point) daemon for packets up to
     * the cluster's MaximumPacketLength on the Member's advertised port.
     */
    private Cluster.PacketListener1 __m_PointListener;
    
    /**
     * Property POOL_RX_PACKETS
     *
     * The default maximum size of the allocator pool used by the Receiver,
     * Listener(s) and Services inbound queues expressed in a number of
     * packets, where the packet size is auto-calculated or configured value
     * for the preferred socket.
     */
    public static final int POOL_RX_PACKETS = 8192;
    
    /**
     * Property POOL_TX_PACKETS
     *
     * The default maximum size of the allocator pool used by the Publisher and
     * Speaker expressed in a number of packets, where the packet size is
     * auto-calculated or configured value for the preferred socket.
     */
    public static final int POOL_TX_PACKETS = 2048;
    
    /**
     * Property PreferredListener
     *
     * The PacketListener (datagram point-to-point) daemon for packets up to
     * the Member's PreferredPacketLength on the Member's preferred port.
     */
    private Cluster.PacketListener1P __m_PreferredListener;
    
    /**
     * Property Publisher
     *
     * The PacketPublisher daemon.
     */
    private Cluster.PacketPublisher __m_Publisher;
    
    /**
     * Property Receiver
     *
     * The PacketReceiver daemon.
     */
    private Cluster.PacketReceiver __m_Receiver;
    
    /**
     * Property ResourceRegistry
     *
     * ResourceRegistry used to manage Cluster resources and dispose of
     * resources upon Cluster shutdown.
     */
    private transient com.tangosol.util.ResourceRegistry __m_ResourceRegistry;
    
    /**
     * Property ShutdownTimeout
     *
     * Timeout (in millis) for waiting for graceful shutdown and stop of all
     * services. Configure via property coherence.shutdown.timeout using
     * Duration String format, i.e. "5s", "10m" or "1h".
     */
    private transient long __m_ShutdownTimeout;
    
    /**
     * Property Speaker
     *
     * The PacketSpeaker daemon.
     */
    private Cluster.PacketSpeaker __m_Speaker;
    
    /**
     * Property StartException
     *
     * The exception (if any) that occurred during startup that caused startup
     * to fail.
     */
    private Throwable __m_StartException;
    
    /**
     * Property State
     *
     * The current state of the cluster.
     * 
     * @volatile
     */
    private volatile int __m_State;
    
    /**
     * Property STATE_EXITED
     *
     * The Cluster component has completed its shutdown and is now dead.
     */
    public static final int STATE_EXITED = 6;
    
    /**
     * Property STATE_INITIAL
     *
     * The Cluster component is newly instantiated and not necessarily fully
     * configured.
     */
    public static final int STATE_INITIAL = 0;
    
    /**
     * Property STATE_JOINING
     *
     * Cluster component is starting Service 0 (the "Cluster Service").
     */
    public static final int STATE_JOINING = 2;
    
    /**
     * Property STATE_LEAVING
     *
     * The Cluster component is about to shut down; its Services are being
     * stopped.
     */
    public static final int STATE_LEAVING = 4;
    
    /**
     * Property STATE_RUNNING
     *
     * The Cluster component has successfully started and (minimally) Service 0
     * is running.
     */
    public static final int STATE_RUNNING = 3;
    
    /**
     * Property STATE_STARTING
     *
     * Cluster component is configuring and starting its daemons.
     */
    public static final int STATE_STARTING = 1;
    
    /**
     * Property STATE_STOPPING
     *
     * The Cluster component is stopping itself and releasing its resources.
     */
    public static final int STATE_STOPPING = 5;
    
    /**
     * Property TcpBroadcastListener
     *
     * The PacketListener daemon for packets up to the Member's
     * MaximumPacketLength on the Clusters port.
     */
    private Cluster.PacketListenerBT __m_TcpBroadcastListener;
    
    /**
     * Property ThreadGroup
     *
     * The ThreadGroup that all cluster daemons will use.
     */
    private ThreadGroup __m_ThreadGroup;
    
    /**
     * Property TracingControl
     *
     * Allows for flush/close of a tracer, may be null.
     */
    private com.tangosol.internal.tracing.TracingShim.Control __m_TracingControl;
    
    /**
     * Property TRANSPORT_DATAGRAM
     *
     * The "datagram" protocol.
     */
    public static final String TRANSPORT_DATAGRAM = "datagram";
    
    /**
     * Property TransportService
     *
     * The shared bus-based TransportService.  Only started if a shared-bus
     * will be used.
     * 
     * @since Coherence 12.1.3
     */
    private Cluster.TransportService __m_TransportService;
    
    /**
     * Property UdpBroadcastListener
     *
     * The PacketListener daemon for packets up to the Member's
     * MaximumPacketLength on the Clusters port.
     */
    private Cluster.PacketListenerBU __m_UdpBroadcastListener;
    
    /**
     * Property WrapperStreamFactoryList
     *
     * List of WrapperStreamFactory objects that affect how Messages sent from
     * / to this Member are written and read.
     */
    private java.util.List __m_WrapperStreamFactoryList;
    
    // Default constructor
    public Cluster()
        {
        this(null, null, true);
        }
    
    // Initializing constructor
    public Cluster(String sName, com.tangosol.coherence.Component compParent, boolean fInit)
        {
        super(sName, compParent, false);
        
        if (fInit)
            {
            __init();
            }
        }
    
    // Main initializer
    public void __init()
        {
        // private initialization
        __initPrivate();
        
        // state initialization: public and protected properties
        try
            {
            setHalted(false);
            setResourceRegistry(new com.tangosol.util.SimpleResourceRegistry());
            }
        catch (java.lang.Exception e)
            {
            // re-throw as a runtime exception
            throw new com.tangosol.util.WrapperException(e);
            }
        
        // containment initialization: children
        _addChild(new Cluster.ClusterService("ClusterService", this, true), "ClusterService");
        _addChild(new Cluster.IpMonitor("IpMonitor", this, true), "IpMonitor");
        _addChild(new Cluster.NameService("NameService", this, true), "NameService");
        _addChild(new Cluster.NameServiceBridge("NameServiceBridge", this, true), "NameServiceBridge");
        _addChild(new Cluster.PacketListener1("PacketListener1", this, true), "PacketListener1");
        _addChild(new Cluster.PacketListener1P("PacketListener1P", this, true), "PacketListener1P");
        _addChild(new Cluster.PacketListenerBT("PacketListenerBT", this, true), "PacketListenerBT");
        _addChild(new Cluster.PacketListenerBU("PacketListenerBU", this, true), "PacketListenerBU");
        _addChild(new Cluster.PacketPublisher("PacketPublisher", this, true), "PacketPublisher");
        _addChild(new Cluster.PacketReceiver("PacketReceiver", this, true), "PacketReceiver");
        _addChild(new Cluster.PacketSpeaker("PacketSpeaker", this, true), "PacketSpeaker");
        _addChild(new Cluster.PublicGuardian("PublicGuardian", this, true), "PublicGuardian");
        _addChild(new Cluster.ShutdownHook("ShutdownHook", this, true), "ShutdownHook");
        _addChild(new Cluster.SocketManager("SocketManager", this, true), "SocketManager");
        _addChild(new Cluster.TransportService("TransportService", this, true), "TransportService");
        
        // signal the end of the initialization
        set_Constructed(true);
        }
    
    // Private initializer
    protected void __initPrivate()
        {
        
        super.__initPrivate();
        }
    
    //++ getter for static property _Instance
    /**
     * Getter for property _Instance.<p>
    * Auto generated
     */
    public static com.tangosol.coherence.Component get_Instance()
        {
        return new com.tangosol.coherence.component.net.Cluster();
        }
    
    //++ getter for static property _CLASS
    /**
     * Getter for property _CLASS.<p>
    * Property with auto-generated accessor that returns the Class object for a
    * given component.
     */
    public static Class get_CLASS()
        {
        Class clz;
        try
            {
            clz = Class.forName("com.tangosol.coherence/component/net/Cluster".replace('/', '.'));
            }
        catch (ClassNotFoundException e)
            {
            throw new NoClassDefFoundError(e.getMessage());
            }
        return clz;
        }
    
    //++ getter for autogen property _Module
    /**
     * This is an auto-generated method that returns the global [design time]
    * parent component.
    * 
    * Note: the class generator will ignore any custom implementation for this
    * behavior.
     */
    private com.tangosol.coherence.Component get_Module()
        {
        return this;
        }
    
    /**
     * Install the configured protocol filters onto the supplied service.
     */
    protected void applyWrapperStreamFactories(com.tangosol.coherence.component.util.daemon.queueProcessor.service.Grid service, java.util.List listNames)
        {
        // import com.tangosol.util.ImmutableArrayList;
        // import java.util.List;
        
        if (listNames != null && !listNames.isEmpty())
            {
            List listFilter = instantiateWrapperStreamFactoryList(listNames);
            if (!listFilter.isEmpty())
                {
                service.setWrapperStreamFactoryList(new ImmutableArrayList(listFilter));
                }
            }
        
        service.setWrapperStreamFactoryAllList(getWrapperStreamFactoryList());
        }
    
    /**
     * Bind the specified Grid service into this Cluster node. Called on a
    * client thread.
     */
    protected void bindService(com.tangosol.coherence.component.util.daemon.queueProcessor.service.Grid service)
        {
        // import com.tangosol.coherence.config.builder.ServiceFailurePolicyBuilder;
        // import com.tangosol.config.expression.NullParameterResolver;
        // import com.tangosol.internal.net.cluster.DefaultServiceFailurePolicy;
        // import com.tangosol.net.ClusterDependencies;
        // import com.tangosol.net.ServiceFailurePolicy;
        // import java.util.List;;
        // import java.util.List;
        
        ClusterDependencies         config  = getDependencies();
        ServiceFailurePolicyBuilder builder = config.getServiceFailurePolicyBuilder();
        ServiceFailurePolicy        policy  = builder == null || service instanceof Cluster.TransportService
          ? new DefaultServiceFailurePolicy(DefaultServiceFailurePolicy.POLICY_EXIT_CLUSTER)
          : builder.realize(new NullParameterResolver(), getContextClassLoader(), null);
        
        String sServiceType;
        if (service instanceof Cluster.ClusterService)
            {
            // The ClusterService's service name is just "Cluster", though it is configured
            // as "ClusterService", so this logic has to be special cased.
            sServiceType = "ClusterService";
            }
        else
            {
            service.setCluster(this);
            sServiceType = service.getServiceType();
            }
        
        service.setThreadGroup         (getThreadGroup());
        service.setDefaultGuardTimeout (config.getGuardTimeoutMillis());
        service.setServiceFailurePolicy(policy);
        service.setBufferManager       (getReceiver().getBufferManager());
        
        // apply protocol filters
        applyWrapperStreamFactories(service,
            (List) config.getServiceFilterMap().get(sServiceType));
        }
    
    /**
     * Security check.
     */
    protected void checkShutdownPermission()
        {
        // import com.tangosol.net.security.LocalPermission;
        
        SecurityManager security = System.getSecurityManager();
        if (security != null)
            {
            security.checkPermission(
                new LocalPermission("Cluster.shutdown"));
            }
        }
    
    // From interface: com.tangosol.net.Cluster
    /**
     * @see com.tangosol.net.Cluster
     */
    public synchronized void configure(com.tangosol.run.xml.XmlElement xml)
        {
        // TODO: remove this method once Controllable no longer has configure(xml)
        //       see SafeCluster.configure for bridge code
        throw new UnsupportedOperationException();
        }
    
    /**
     * Configure broadcast facilities.
     */
    protected void configureBroadcast()
        {
        // import Component.Net.Socket.UdpSocket;
        // import com.tangosol.net.AddressProvider;
        // import com.tangosol.net.ClusterDependencies;
        // import com.tangosol.net.CompositeAddressProvider;
        // import java.net.InetAddress;
        // import java.net.InetSocketAddress;
        // import java.util.Set;
        
        ClusterDependencies config    = getDependencies();
        Cluster.SocketManager      manager   = getSocketManager();
        UdpSocket           socketU   = manager.getUnicastUdpSocket();
        UdpSocket           socketP   = manager.getPreferredUnicastUdpSocket();
        UdpSocket           socketBU  = manager.getBroadcastUdpSocket();
        UdpSocket           socketBT  = manager.getBroadcastTcpSocket();
        Cluster.PacketPublisher    publisher = getPublisher();
        AddressProvider     provider  = config.getWellKnownAddresses();
        
        if (provider == null)
            {
            // configure publisher multicast
            publisher.setMulticastAddress(new InetSocketAddress(config.getGroupAddress(), config.getGroupPort()));
            publisher.setUdpSocketMulticast(socketBU);
            }
        else
            {
            // Wrap the WKA AddressProvider in a CompositeAddressProvider so changes
            // to the underlying set of WKA addresses will be reflected in the
            // broadcast set as well as allowing broadcast addressed to be added to
            // setBroadcast without effecting the WKA "set"
            Set setBroadcast = new CompositeAddressProvider(provider);
        
            Cluster.ClusterService service = getClusterService();
            service.setBroadcastAddresses(setBroadcast);
            service.setWellKnownAddresses(provider instanceof Set
                    ? (Set) provider
                    : new CompositeAddressProvider(provider));
        
            publisher.setBroadcastAddresses(setBroadcast);
            publisher.setMulticastEnabled(false);
            }
        
        // ensure broadcast listener on run onInterval even if nothing is coming in
        // this allows it to detect that its UC binding and/or MC group membership have failed
        socketBU.setSoTimeout(config.getClusterHeartbeatDelayMillis());
        
        // set broadcast listen ports
        int nPortGroup = config.getGroupPort();
        socketBU.setPort(nPortGroup);
        socketBT.setPort(nPortGroup);
        
        // set broadcast packet and buffer sizes to be the same as unicast socket
        int cbPacketMax = socketU.getPacketLength();
        socketBU.setPacketLength(cbPacketMax);
        socketBT.setPacketLength(cbPacketMax);
        
        int cbBuffer = socketU.getBufferSentBytes();
        socketBU.setBufferSentBytes(cbBuffer);
        socketBT.setBufferSentBytes(cbBuffer);
        
        cbBuffer = socketU.getBufferReceivedBytes();
        socketBU.setBufferReceivedBytes(cbBuffer);
        socketBT.setBufferReceivedBytes(cbBuffer);
        }
    
    /**
     * Configure all TCMP daemons.
     */
    protected void configureDaemons()
        {
        // import Component.Net.Member$FlowControl as Member.FlowControl;
        // import Component.Net.MemberSet.ActualMemberSet.ServiceMemberSet.MasterMemberSet;
        // import Component.Util.Daemon.QueueProcessor.PacketProcessor.PacketSpeaker$BundlingQueue as com.tangosol.coherence.component.util.daemon.queueProcessor.packetProcessor.PacketSpeaker.BundlingQueue;
        // import Component.Util.Daemon.QueueProcessor.Service.Grid.ClusterService$TcpRing as com.tangosol.coherence.component.util.daemon.queueProcessor.service.grid.ClusterService.TcpRing;
        // import Component.Util.Queue;
        // import com.oracle.coherence.common.io.BufferManager;
        // import com.oracle.coherence.common.io.BufferManagers;
        // import com.tangosol.coherence.config.builder.SocketProviderBuilder;
        // import com.tangosol.coherence.config.Config;
        // import com.tangosol.config.expression.NullParameterResolver;
        // import com.tangosol.internal.net.service.extend.NameServiceDependencies;
        // import com.tangosol.internal.net.service.extend.remote.DefaultRemoteServiceDependencies;
        // import com.tangosol.internal.net.service.peer.acceptor.TcpAcceptorDependencies;
        // import com.tangosol.internal.net.service.peer.initiator.DefaultTcpInitiatorDependencies;
        // import com.tangosol.io.nio.ByteBufferOutputStream;
        // import com.tangosol.internal.net.cluster.DefaultClusterDependencies;
        // import com.tangosol.internal.net.service.grid.DefaultGridDependencies;
        // import com.tangosol.net.ActionPolicy;
        // import com.tangosol.net.CacheFactory;
        // import com.tangosol.net.NameService as com.tangosol.net.NameService;
        // import com.tangosol.net.MemberIdentity;
        // import com.tangosol.net.internal.SubstitutionSocketAddressProvider;
        // import com.oracle.coherence.common.net.TcpSocketProvider;
        // import com.tangosol.internal.io.BufferManagerWriteBufferPool;
        // import com.tangosol.util.Base;
        // import com.tangosol.util.ImmutableArrayList;
        // import com.oracle.coherence.common.net.SocketProvider;
        // import java.io.DataOutputStream;
        // import java.io.IOException;
        // import java.nio.ByteBuffer;
        // import java.net.InetAddress;
        // import java.nio.channels.ServerSocketChannel;
        // import java.util.List;
        
        DefaultClusterDependencies config  = (DefaultClusterDependencies) getDependencies();
        Cluster.SocketManager             manager = getSocketManager();
        
        // configure the daemons: ThreadGroup
        
        ThreadGroup group = getThreadGroup();
        if (group == null)
            {
            group = new ThreadGroup(get_Name());
            group.setDaemon(true);
            setThreadGroup(group);
            }
        
        Cluster.ClusterService   daemonClusterService = getClusterService();
        Cluster.TransportService daemonTransport      = getTransportService();
        Cluster.IpMonitor        daemonIpMonitor      = getIpMonitor();
        Cluster.PublicGuardian   daemonGuardian       = getGuardian();
        
        // pre-configure the cluster service using DefaultGridDependencies
        // (see Grid.cloneDependencies())
        daemonClusterService.setCluster(this);
        daemonClusterService.setDependencies(null);
        
        daemonClusterService.setThreadGroup(group);
        daemonTransport     .setThreadGroup(group);
        daemonIpMonitor     .setThreadGroup(group);
        daemonGuardian      .setThreadGroup(group);
        
        Cluster.SocketManager.UnicastUdpSocket          udpsocketUnicast      = manager.getUnicastUdpSocket();
        Cluster.SocketManager.PreferredUnicastUdpSocket udpsocketUnicastPref  = manager.getPreferredUnicastUdpSocket();
        Cluster.SocketManager.BroadcastUdpSocket        udpsocketUdpBroadcast = manager.getBroadcastUdpSocket();
        Cluster.SocketManager.BroadcastTcpSocket        udpsocketTcpBroadcast = manager.getBroadcastTcpSocket();
        ServerSocketChannel        channelTcpRing        = manager.getAcceptorChannel().getChannel();
        
        // configure the temporary "this" Member (called the "announce"
        // Member because it is used to announce this Member's intention
        // to join the cluster in the period before the cluster time
        // adjustment has been made)
        Member member = daemonClusterService.instantiateMember();
        member.configure(config, config.computeLocalAddress(),
                udpsocketUnicast.getPort(),
                channelTcpRing == null ? 0 : channelTcpRing.socket().getLocalPort(),
                getCounters());
        daemonClusterService.setAnnounceMember(member);
        
        int cbPacket     = config.getPacketMaxLength();        // configured
        int cbPacketPref = udpsocketUnicastPref.getPacketLength(); // potentially computed at startup
        
        // configure the cluster MemberSet
        MasterMemberSet setMember = daemonClusterService.getClusterMemberSet();
        setMember.setMaximumPacketLength(cbPacket);
        
        int cHeartbeatMillis = config.getClusterHeartbeatDelayMillis();
        int cTimeoutMillis   = config.getPublisherResendTimeoutMillis();
        
        // configure misc attributes
        
        // configure the cluster service to announce for a certain period
        // ensusre that it will make at leasnt ANNOUNCD_BIND_THRESHOLD broadcasts, see ClusterService$NewMemberAnnounce#onReceived tie breaker
        int cMillisRepeatDelay = config.getPublisherResendDelayMillis();
        daemonClusterService.setBroadcastTimeoutMillis(Math.max(
            config.getClusterAnnounceTimeoutMillis(), cMillisRepeatDelay * Cluster.ClusterService.ANNOUNCE_BIND_THRESHOLD));
        daemonClusterService.setBroadcastRepeatMillis(cMillisRepeatDelay);
        daemonClusterService.setDeliveryTimeoutMillis(cTimeoutMillis);
        daemonClusterService.setMaximumPacketLength(cbPacket);
        daemonClusterService.setTimestampMaxVariance(config.getClusterTimestampMaxVarianceMillis());
        setMember.setRecycleMillis(cTimeoutMillis * 4);
        
        try
            {
            com.tangosol.coherence.component.util.daemon.queueProcessor.service.grid.ClusterService.TcpRing ring = daemonClusterService.getTcpRing();
            if (config.isTcpRingEnabled())
                {
                ring.setEnabled(true);
                ring.setSocketProvider(manager.getTcpRingSocketProvider());
                ring.setServerSocketChannel(manager.getAcceptorChannel().getChannel());
                ring.setRedundancyLevel(Integer.parseInt(Config.getProperty("coherence.tcpRing.redundancyLevel", "1"))); // TODO: XML config?
                }
            else
                {
                ring.setEnabled(false);
        
                _trace("TcpRing has been explicitly disabled, this is not a recommended "
                    + "practice and will result in a minimum death detection time of "
                    + (cTimeoutMillis / 1000L) + " seconds for failed processes.", 2);
        
                // even though the ring is disabled ClusterService still relies upon its
                // Selector for its wait state, so we simply allocate one
                ring.setSelector(java.nio.channels.Selector.open());
                }
            }
        catch (IOException e)
            {
            throw Base.ensureRuntimeException(e);
            }
        
        // configure the TransportService
        if (isTransportServiceEnabled())
            {
            DefaultGridDependencies depsTrans = new DefaultGridDependencies();
            depsTrans.setReliableTransport(config.getReliableTransport());
            daemonTransport.setDependencies(depsTrans);
            daemonTransport.setEnabled(true);
            }
        
        // configure the com.tangosol.net.NameService
        Cluster.NameService ns = getNameService();
        ns.setCluster(this);
        ns.setOperationalContext(getOperationalContext());
        ns.configure(CacheFactory.getServiceConfig(com.tangosol.net.NameService.NAME_DEFAULT));
        getResourceRegistry().registerResource(com.tangosol.net.NameService.class, ns);
        
        // configure the IpMonitor
        boolean fIpMonitorEnabled = config.isIpMonitorEnabled();
        if (fIpMonitorEnabled)
            {
            // Configure the IpMonitor daemon
            daemonIpMonitor.configure(config, daemonClusterService);
            daemonIpMonitor.setWaitMillis(cHeartbeatMillis);
            }
        else
            {
            _trace("IPMonitor has been explicitly disabled, this is not a recommended "
                + "practice and will result in a minimum death detection time of "
                + (cTimeoutMillis / 1000L) + " seconds for failed machines or networks."
                , 2);
            }
        
        // configure the Guardian
        daemonGuardian.setWaitMillis(cHeartbeatMillis);
        
        // configure the action policy
        ActionPolicy policyAction = (ActionPolicy) config.getClusterActionPolicyBuilder().realize(new NullParameterResolver(), getContextClassLoader(), null);
        daemonClusterService.setActionPolicy(policyAction);
        
        // configure the cluster service heartbeat rate
        daemonClusterService.setHeartbeatDelay(cHeartbeatMillis);
        
        // Note: We don't guard the TCMP daemons as profiling and performance
        // testing has shown that this is extremely expensive.  Furthermore,
        // the TCMP heartbeat mechanism should protect against the TCMP daemons
        // themselves becoming deadlocked.  If the publisher, speaker, or unicast
        // listener becomes deadlocked, incoming packets will not be ACK'd and
        // the sender will kill us.  The only interaction that the multicast
        // listener has is with the receiver queue, so any deadlock on the MC
        // listener thread would have to be with the receiver.
        //
        // Guardian-Guardable relationships:
        //  - ClusterService, and IpMonitor guard each other
        //    (if IpMonitor is disabled, then ClusterService is unguarded)
        //  - ClusterService guards each other service
        //  - Each service guards its EventDispatcher and any worker Daemons
        //
        
        long cGuardMillis = config.getGuardTimeoutMillis();
        daemonClusterService.setDefaultGuardTimeout(cGuardMillis);
        daemonIpMonitor     .setDefaultGuardTimeout(cGuardMillis);
        daemonGuardian      .setDefaultGuardTimeout(cGuardMillis);
        
        // ClusterService and IpMonitor guard each other
        if (cGuardMillis > 0 && fIpMonitorEnabled)
            {
            daemonClusterService.guard(daemonIpMonitor.getGuardable());
            daemonIpMonitor.guard(daemonClusterService.getGuardable());
            }
        
        // configure packet processor daemons
        Cluster.PacketListener1  daemonPointListener        = getPointListener();
        Cluster.PacketListener1P daemonPreferredListener    = getPreferredListener();
        Cluster.PacketListenerBT daemonTcpBroadcastListener = getTcpBroadcastListener();
        Cluster.PacketListenerBU daemonUdpBroadcastListener = getUdpBroadcastListener();
        Cluster.PacketReceiver   daemonReceiver             = getReceiver();
        Cluster.PacketSpeaker    daemonSpeaker              = getSpeaker();
        Cluster.PacketPublisher  daemonPublisher            = getPublisher();
        
        daemonPointListener       .setThreadGroup(group);
        daemonPreferredListener   .setThreadGroup(group);
        daemonUdpBroadcastListener.setThreadGroup(group);
        daemonTcpBroadcastListener.setThreadGroup(group);
        daemonReceiver            .setThreadGroup(group);
        daemonSpeaker             .setThreadGroup(group);
        daemonPublisher           .setThreadGroup(group);
        
        // configure the daemons: Priority
        daemonPointListener       .setPriority(config.getLocalListenerPriority());
        daemonUdpBroadcastListener.setPriority(config.getLocalListenerPriority());
        daemonTcpBroadcastListener.setPriority(config.getLocalListenerPriority());
        daemonPreferredListener   .setPriority(config.getLocalListenerPriority());
        daemonReceiver            .setPriority(config.getReceiverPriority());
        daemonSpeaker             .setPriority(config.getSpeakerPriority());
        daemonPublisher           .setPriority(config.getPublisherPriority());
        daemonIpMonitor           .setPriority(config.getIpMonitorPriority());
        
        // configure the daemons: MemberSet
        daemonPointListener       .setMemberSet(setMember);
        daemonPreferredListener   .setMemberSet(setMember);
        daemonUdpBroadcastListener.setMemberSet(setMember);
        daemonTcpBroadcastListener.setMemberSet(setMember);
        daemonReceiver            .setMemberSet(setMember);
        daemonSpeaker             .setMemberSet(setMember);
        daemonPublisher           .setMemberSet(setMember);
        
        // configure the length encoded clustername for broadcasts
        ByteBuffer bufClusterName = ByteBuffer.allocate(MemberIdentity.MEMBER_IDENTITY_LIMIT * 2 + 2);
        try
            {
            DataOutputStream outName = new DataOutputStream(new ByteBufferOutputStream(bufClusterName));
            outName.writeUTF(config.getMemberIdentity().getClusterName());
            outName.close();
            bufClusterName.flip();
            ByteBuffer bufTrim = ByteBuffer.allocate(bufClusterName.remaining());
            bufTrim.put(bufClusterName).flip();
            bufClusterName = bufTrim;
        
            setClusterNameBuffer(bufClusterName);
            daemonPublisher.setClusterNameBuffer(bufClusterName);
            }
        catch (IOException e)
            {
            throw Base.ensureRuntimeException(e);
            }
        
        // Currently we require a heap based buffer manager since we need
        // to supply an underlying byte array to incoming datagram packets.
        // The only type of ByteBuffer that "guarantees" that is the heap based one.
        // Once TCMP becomes datagram channel-based (which requires Java 1.7 for multicast)
        // we would be able to switch to direct buffers (allowing for zero-copy)
        BufferManager bufferManager = BufferManagers.getHeapManager();
        
        // configure Point-Listener daemon
        daemonPointListener.setUdpSocket(udpsocketUnicast);
        daemonPointListener.setBufferManager(bufferManager);
        daemonPointListener.setPacketLength(Math.max(cbPacket, cbPacketPref));
        
        // configure Preferred-Listener daemon
        daemonPreferredListener.setUdpSocket(udpsocketUnicastPref);
        daemonPreferredListener.setBufferManager(bufferManager);
        daemonPreferredListener.setPacketLength(cbPacketPref);
        
        // configure Broadcast-Listener daemon
        daemonUdpBroadcastListener.setUdpSocket(udpsocketUdpBroadcast);
        daemonUdpBroadcastListener.setBufferManager(bufferManager);
        daemonUdpBroadcastListener.setPacketLength(Math.max(cbPacket, cbPacketPref));
        
        // configure Aux Broadcast-Listener daemon
        daemonTcpBroadcastListener.setUdpSocket(udpsocketTcpBroadcast);
        daemonTcpBroadcastListener.setBufferManager(bufferManager);
        daemonTcpBroadcastListener.setPacketLength(Math.max(cbPacket, cbPacketPref));
        
        // configure Receiver daemon
        daemonReceiver.setClusterService(daemonClusterService);
        daemonReceiver.setAckSendQueue(daemonPublisher.getAckQueue());
        daemonReceiver.setConfirmationQueue(daemonPublisher.getConfirmationQueue());
        daemonReceiver.setBufferManager(bufferManager);
        daemonReceiver.setMaximumPacketLength(cbPacket);
        daemonReceiver.setPreferredPacketLength(cbPacketPref);
        daemonReceiver.setNackEnabled(config.isReceiverNackEnabled());
        daemonReceiver.setPublisher(daemonPublisher);
        
        if (!daemonTransport.isEnabled() && config.isSpeakerEnabled())
            {
            // configure the Speaker daemon (only if bus is not enabled)
            com.tangosol.coherence.component.util.daemon.queueProcessor.packetProcessor.PacketSpeaker.BundlingQueue queueSpeaker = (com.tangosol.coherence.component.util.daemon.queueProcessor.packetProcessor.PacketSpeaker.BundlingQueue) daemonSpeaker.getQueue();
            int          nVolume      = config.getSpeakerVolumeMinimum();
        
            try
                {
                queueSpeaker.setVolumeTunable(nVolume < 0);
                queueSpeaker.setVolumeThreshold(nVolume < 0
                    ? udpsocketUnicast.getDatagramSocket().getSendBufferSize() / cbPacketPref : nVolume);
                if (queueSpeaker.isBundlingEnabled())
                    {
                    queueSpeaker.setDeferralThresholdNanos(config.getPacketBundlingThresholdNanos());
                    queueSpeaker.setBundlingAggression(config.getPacketBundlingAggression());
                    }
                queueSpeaker.setCloggedCount(config.getPublisherCloggedCount());
                queueSpeaker.setCloggedDelay(config.getPublisherCloggedDelayMillis());
                }
            catch (IOException e)
                {
                throw Base.ensureRuntimeException(e);
                }
            }
        
        // configure Publisher daemon
        // Note: publisher sends unicast via the advertised port, not the preferred port
        // this is because testing on Linux has shown that there can be contention between
        // sending and receiving threads for a given socket. Since the preferred socket
        // should receive most of the inbound traffic, we'll use a different socket for
        // sending. The advertised socket works well for this, since there should be little
        // inbound traffic.
        daemonPublisher.setUdpSocketUnicast(udpsocketUnicast);
        daemonPublisher.setUdpSocketMulticast(udpsocketUdpBroadcast);
        daemonPublisher.setSendQueue(daemonSpeaker.getQueue());
        daemonPublisher.setMaximumPacketLength(cbPacket);
        daemonPublisher.setPreferredPacketLength(cbPacketPref);
        daemonPublisher.setNackEnabled(config.isReceiverNackEnabled());
        daemonPublisher.setNackDelayMillis(config.getPublisherNackDelayMillis());
        
        // Configure the Message allocator
        daemonPublisher.setMessageBufferAllocator(new BufferManagerWriteBufferPool(bufferManager));
        
        // configure Member.FlowControl
        // performed after creation of memberThis to avoid class GC
        if (config.isFlowControlEnabled())
            {
            // must be thread-safe Queue, see Publisher.onMemberLeft
            daemonPublisher.setDeferredReadyQueue(new Queue());
        
            Member.FlowControl.setEnabled(true);
            int iMax = config.getOutstandingPacketMaximum();
            int iMin = config.getOutstandingPacketMinimum();
        
            Member.FlowControl.setOutstandingPacketMaximum(iMax);
            Member.FlowControl.setOutstandingPacketMinimum(iMin);
            Member.FlowControl.setLostPacketThreshold(config.getLostPacketThreshold());
        
            // additional hidden configuration in Member.FlowControl._initStatic();
            }
        
        daemonPublisher.setResendDelay(config.getPublisherResendDelayMillis());
        daemonPublisher.setResendTimeout(cTimeoutMillis);
        daemonPublisher.setAckDelay(config.getPublisherAckDelayMillis());
        daemonPublisher.setCloggedCount(config.getPublisherCloggedCount());
        daemonPublisher.setCloggedDelay(config.getPublisherCloggedDelayMillis());
        daemonPublisher.setMulticastThreshold(config.getPublisherGroupThreshold() / 100.0);
        
        // configure protocol filters
        List listFilterNames = config.getFilterList();
        if (listFilterNames != null && !listFilterNames.isEmpty())
            {
            List listFilter = instantiateWrapperStreamFactoryList(listFilterNames);
            if (!listFilter.isEmpty())
                {
                setWrapperStreamFactoryList(new ImmutableArrayList(listFilter));
                }
            }
        
        // configure NameServiceBridge
        Cluster.NameServiceBridge nsClient = getNameServiceBridge();
        nsClient.setOperationalContext(getOperationalContext());
        
        NameServiceDependencies         depsNS      = (NameServiceDependencies) getNameService().getDependencies();
        TcpAcceptorDependencies         depsAccept  = (TcpAcceptorDependencies) depsNS.getAcceptorDependencies();
        DefaultTcpInitiatorDependencies depsFNsInit = new DefaultTcpInitiatorDependencies();
        
        depsFNsInit.setRemoteSocketAddressProviderBuilder(SubstitutionSocketAddressProvider.createBuilder(
            depsAccept.getLocalAddressProviderBuilder(), InetAddress.getLoopbackAddress(), config.getGroupPort(), 0));
        depsFNsInit.setSocketProviderBuilder(new SocketProviderBuilder(TcpSocketProvider.MULTIPLEXED, false));
        depsFNsInit.setConnectTimeoutMillis(100L); // it's always a local connection
        depsFNsInit.setRequestSendTimeoutMillis(100L);
        depsFNsInit.setRequestTimeoutMillis(100L);
        
        DefaultRemoteServiceDependencies depsFNs = new DefaultRemoteServiceDependencies();
        depsFNs.setRemoteServiceName("NameService");
        depsFNs.setInitiatorDependencies(depsFNsInit);
        
        nsClient.setDependencies(depsFNs);
        }
    
    /**
     * Configure point-to-point Socket components use by TCMP daemons.
     */
    protected void configureSockets()
        {
        // import com.tangosol.config.expression.NullParameterResolver;
        // import com.tangosol.coherence.config.builder.SocketProviderBuilder;
        // import com.tangosol.internal.net.cluster.DefaultClusterDependencies;
        // import com.tangosol.net.DatagramSocketProvider;
        // import com.tangosol.net.SystemDatagramSocketProvider;
        // import com.tangosol.net.InetAddressHelper;
        // import com.tangosol.run.xml.XmlElement;
        // import com.tangosol.util.Base;
        // import com.oracle.coherence.common.internal.net.MultiplexedSocketProvider$WellKnownSubPorts as com.oracle.coherence.common.internal.net.MultiplexedSocketProvider.WellKnownSubPorts;
        // import java.io.IOException;
        // import java.net.InetAddress;
        
        DefaultClusterDependencies config = (DefaultClusterDependencies) getDependencies();
        
        // determine local address and port
        InetAddress addrLocal = config.computeLocalAddress();
        if (InetAddressHelper.isLoopbackAddress(addrLocal))
            {
            _trace("Local address \"" + InetAddressHelper.toString(addrLocal)
                 + "\" is a loopback address; this cluster node will not connect"
                 + " to nodes located on different machines", 2);
            }
        
        // setup the socket provider
        Cluster.SocketManager manager = getSocketManager();
        
        SocketProviderBuilder bldrUnicastSocketProvider = config.getUnicastSocketProviderBuilder();
        
        DatagramSocketProvider provider = bldrUnicastSocketProvider.getDatagramSocketProvider(
            com.oracle.coherence.common.internal.net.MultiplexedSocketProvider.WellKnownSubPorts.COHERENCE_TCMP_DATAGRAM.getSubPort());

        // set socket provider for UnicastUdpSocket
        manager.setUnicastUdpSocketProvider(provider);
        
        // set TcpRing Socket Provider
        manager.setTcpRingSocketProvider(
            bldrUnicastSocketProvider.getDemultiplexedSocketProvider(
                com.oracle.coherence.common.internal.net.MultiplexedSocketProvider.WellKnownSubPorts.COHERENCE_TCP_RING.getSubPort()));
        
        // determine packet sizes
        int cbPacket     = config.getPacketMaxLength();
        int cbPacketPref = config.getPacketPreferredLength();
        
        // determine header sizes; since a cluster can be ipv4 and ipv6 we always choose ipv6 safe values
        int cbHeaderSize = provider instanceof SystemDatagramSocketProvider ? 48 : 68;
        
        // select default values based on MTU and socket provider
        if (cbPacketPref == 0)
            {
            int nMTU = 0;
            try
                {
                nMTU = InetAddressHelper.getLocalMTU(addrLocal);
                }
            catch (IllegalArgumentException e) {}
        
            if (nMTU == 0)
                {
                nMTU = InetAddressHelper.getLocalMTU();
                }
        
            // If the discovered MTU is huge (> 64K), we will artificially limit ourselves to 64K
            // both because UDP shouldn't accept more, and because our buffer pools would be less
            // efficient. Note we only impose this limit for auto-config.
            nMTU = Math.min(65535, nMTU);
        
            cbPacketPref = nMTU - cbHeaderSize; // TODO: account for SSL packet overhead?
            }
        
        // determine the socket buffer sizes; if unset (0), default them based
        // on the preferred packet size, i.e. larger pref == larger buff
        int cbBufferSent = config.getPublisherSocketBufferSize();
        if (cbBufferSent == 0)
            {
            if (isTransportServiceEnabled() || cbPacketPref < 1500) // standard ethernet MTU
                {
                cbBufferSent = Math.max(16 * cbPacketPref, 32*1024);
                }
            else if (cbPacketPref < 9000) // normal jumbo MTU
                {
                cbBufferSent = 256*1024;
                }
            else // "super" jumbo
                {
                cbBufferSent = 512*1024;
                }
            }
        else if (cbBufferSent < 0)
            {
            // indicates how many packets to buffer
            cbBufferSent *= -cbPacketPref;
            }
        cbBufferSent = Math.max(Math.max(cbPacket, cbPacketPref), cbBufferSent);
        
        int cbBufferPref = config.getLocalBufferSize();
        if (cbBufferPref == 0)
            {
            if (isTransportServiceEnabled() || cbPacketPref < 1500) // standard ethernet MTU
                {
                cbBufferPref = Math.max(16 * cbPacketPref, 2*1024*1024);
                }
            else if (cbPacketPref < 9000) // normal jumbo MTU
                {
                cbBufferPref = 4*1024*1024;
                }
            else // "super" jumbo
                {
                cbBufferPref = 8*1024*1024;
                }
            }
        else if (cbBufferPref < 0)
            {
            // indicates how many packets to buffer
            cbBufferPref *= -cbPacketPref;
            }
        cbBufferPref = Math.max(Math.max(cbPacket, cbPacketPref), cbBufferPref);
        
        int cbBufferGroup = config.getGroupBufferSize();
        if (cbBufferGroup == 0)
            {
            if (isTransportServiceEnabled() || cbPacketPref < 1500) // standard ethernet MTU
                {
                cbBufferGroup = Math.max(16 * cbPacketPref, 1*1024*1024);
                }
            else if (cbPacketPref < 9000) // normal jumbo MTU
                {
                cbBufferGroup = 2*1024*1024;
                }
            else // "super" jumbo
                {
                cbBufferGroup = 4*1024*1024;
                }
            }
        else if (cbBufferGroup < 0)
            {
            // indicates how many packets to buffer
            cbBufferGroup *= -cbPacketPref;
            }
        cbBufferGroup = Math.max(Math.max(cbPacket, cbPacketPref), cbBufferGroup);
        
        // create the point-to-point sockets
        Cluster.SocketManager.UnicastUdpSocket          udpsocketUnicast      = manager.getUnicastUdpSocket();
        Cluster.SocketManager.PreferredUnicastUdpSocket udpsocketUnicastPref  = manager.getPreferredUnicastUdpSocket();
        Cluster.SocketManager.BroadcastUdpSocket        udpsocketUdpBroadcast = manager.getBroadcastUdpSocket();
        Cluster.SocketManager.BroadcastTcpSocket        udpsocketTcpBroadcast = manager.getBroadcastTcpSocket();
        
        InetAddress addrDiscovery = config.getLocalDiscoveryAddress();
        
        InetAddress addrUnicast = config.getLocalAddress();
        if (addrUnicast == null)
            {
            // since the unicast address was not explicitly configured if WKA and the discovery address is wildcard
            // we'll re-use wildcard here allowing us to select our ultimate member address as part of the
            // join protocol.  If disovery is explicitly locked down, then we'll simply compute a value for unicast
            addrUnicast = addrDiscovery.isAnyLocalAddress() && config.getWellKnownAddresses() != null
                ? addrDiscovery
                : addrLocal; // use computed default local address
            }
        
        if (InetAddressHelper.isNatLocalAddress(addrUnicast, config.getLocalPort(), config.getLocalPortAutoAdjust()))
            {
            // for NAT we always listen on wildcard
            addrUnicast = InetAddressHelper.ADDR_ANY;
            }
        
        // test discovery re-using the member ports, as cluster port could be held by another member
        if (InetAddressHelper.isNatLocalAddress(addrDiscovery, config.getLocalPort(), config.getLocalPortAutoAdjust()))
            {
            // for NAT we always listen on wildcard
            addrDiscovery = InetAddressHelper.ADDR_ANY;
            }
        
        // Advertised used for all unicast outbound, and large unicast inbound
        udpsocketUnicast.setBufferSentBytes(cbBufferSent);
        udpsocketUnicast.setBufferReceivedBytes(cbBufferGroup); // re-use group buffer; similar traffic level
        udpsocketUnicast.setInetAddress(addrUnicast);
        udpsocketUnicast.setPacketLength(Math.max(cbPacket, cbPacketPref)); // does all sends; we must support largest possible packet
        
        // Preferred used for most unicast inbound
        udpsocketUnicastPref.setBufferReceivedBytes(cbBufferPref);
        udpsocketUnicastPref.setInetAddress(addrUnicast);
        udpsocketUnicastPref.setPacketLength(cbPacketPref);
        
        // Broadcast sockets
        // ignore local discovery address when using multicast
        InetAddress addrBroadcast = config.getWellKnownAddresses() == null ?
            InetAddressHelper.ADDR_ANY : addrDiscovery;
        
        udpsocketUdpBroadcast.setBufferReceivedBytes(cbBufferGroup);
        udpsocketUdpBroadcast.setInetAddress(addrBroadcast);
        udpsocketUdpBroadcast.setPacketLength(65535); // cross-cluster, use UDP max size
        
        udpsocketTcpBroadcast.setBufferReceivedBytes(cbBufferGroup);
        udpsocketTcpBroadcast.setInetAddress(addrBroadcast);
        udpsocketTcpBroadcast.setPacketLength(65535); // cross-cluster, use UDP max size
        
        // The Acceptor channel is bound regardless if TcpRing is used or not
        // it's binding ensures that we can use the same port with various sub-ports
        // for other parts of Coherence
        try
            {
            Cluster.SocketManager.AcceptorChannel channel = manager.getAcceptorChannel();
            channel.setInetAddress(addrDiscovery);
            channel.setBacklog(config.getTcpBacklog());
            getClusterService().getTcpRing().getSocketOptions()
                .copyOptions(config.getTcpRingSocketOptions());
            }
        catch (IOException e)
            {
            throw Base.ensureRuntimeException(e);
            }
        }
    
    /**
     * Configure OpenTracing
     */
    public boolean configureTracing(com.tangosol.internal.tracing.TracingShim.Dependencies deps)
        {
        // import com.tangosol.internal.tracing.TracingHelper;
        // import com.tangosol.internal.tracing.TracingShim$Control as com.tangosol.internal.tracing.TracingShim.Control;
        // import com.tangosol.coherence.config.Config;
        // import com.tangosol.net.ClusterDependencies;
        // import com.tangosol.net.MemberIdentity;
        
        com.tangosol.internal.tracing.TracingShim.Control control = getTracingControl();
        if (control != null)
            {
            control.close();
            setTracingControl(null);
            }
        
        if (deps == null)
            {
            return true;
            }
        
        if (deps.getIdentity() == null)
            {
            ClusterDependencies config   = getDependencies();
            MemberIdentity      identity = config.getMemberIdentity();
        
            String sIdentity = identity.getMemberName();
            if (sIdentity == null)
                {
                sIdentity = identity.getClusterName() + "." + identity.getRoleName();
                }
        
            deps = TracingHelper.defaultDependencies(deps)
                .setIdentity(sIdentity);
            }
        
        control = TracingHelper.initialize(deps);
        
        if (control != null)
            {
            setTracingControl(control);
            return true;
            }
        // else; retain any one we previously obtained
        
        return false;
        }
    
    /**
     * Create an MessageBus for this node using a pre-configured  transport.
    * 
    * @return a MessageBus intstance or null if the shared transport
    * (Cluster.getMessagePublisher) is to be used
     */
    public com.oracle.coherence.common.net.exabus.MessageBus createMessageBus(String sServiceType, String sTransport)
        {
        Cluster.SocketManager mgrSocket  = getSocketManager();
        return createMessageBus(sServiceType, sTransport, mgrSocket.getDepot(),
                getClusterService().getThisMember().getAddress().getHostAddress(),
                mgrSocket.getAcceptorChannel().getPort());
        }
    
    /**
     * Create an MessageBus for this node using a pre-configured  transport.
    * 
    * @return a MessageBus instance or null if the shared transport
    * (Cluster.getMessagePublisher) is to be used
     */
    public com.oracle.coherence.common.net.exabus.MessageBus createMessageBus(String sServiceType, String sTransport, com.oracle.coherence.common.net.exabus.Depot depot, String sAddr, int nPort)
        {
        return createMessageBus(sServiceType, sTransport, depot, sAddr, nPort, /* fMultiplexed */ true);
        }
    
    /**
     * Create an MessageBus for this node using a pre-configured  transport.
    * 
    * @return a MessageBus instance or null if the shared transport
    * (Cluster.getMessagePublisher) is to be used
     */
    public com.oracle.coherence.common.net.exabus.MessageBus createMessageBus(String sServiceType, String sTransport, com.oracle.coherence.common.net.exabus.Depot depot, String sAddr, int nPort, boolean fMultiplexed)
        {
        // import com.oracle.coherence.common.internal.Platform;
        
        // deprecated "imb" and "imbs" support, map to "tmb" and "tmbs"
        if (sTransport != null && !sTransport.isEmpty())
            {
            if (sTransport.equals("imb"))
                {
                sTransport = "tmb";
                }
            else if (sTransport.equals("imbs"))
                {
                sTransport = "tmbs";
                }
            }
        
        String  sTransportOrig = sTransport;
        String  sPort          = Integer.toString(nPort);
        
        if (sTransport != null && sTransport.isEmpty())
            {
            sTransportOrig = sTransport = null;
            }
        
        if (sTransport == null && getTransportService().getServiceType().equals(sServiceType))
            {
            if (Platform.getPlatform().isExaEnabled())
                {
                // deprecated "imb" and "imbs" support, default to "tmb" and "tmbs" on Exalogic platform
                sTransport = getSocketManager().getUnicastUdpSocketProvider().isSecure()
                    ? "tmbs" // will trigger fall-through to other encrypted transports if unavailble (doesn't exist yet)
                    : "tmb";
                }
            else
                {
                sTransport = getSocketManager().getUnicastUdpSocketProvider().isSecure() ? "tmbs" : "tmb";
                }
            }
        
        while (true)
            {
            // handle well-known protocols
            if (sTransport == null)
                {
                return null; // shared
                }
            else if (sTransport.equals("tmb")   ||
                     sTransport.equals("tmbs")  ||
                     sTransport.equals("sdmb")  ||
                     sTransport.equals("sdmbs"))
                {
                // If configured to use sdmb and ephemeral ports, we further relax what ports the bus can listen on,
                // i.e. double ephemeral. This is critical for SDMB which could end up hitting a port
                // conflict on SDP which was not protected by TCMP which only pre-allocates UDP and TCP ports.
                boolean fEphemeral = getDependencies().getLocalPort() == 0 && sTransport.startsWith("sdmb");
                sTransport += "://{member-ip}:"
                    + (fEphemeral
                        ? "0.0"
                        : (fMultiplexed ? "{member-port}.0" : "{member-port}"));
                }
            else if (sTransport.equals(TRANSPORT_DATAGRAM))
                {
                throw new IllegalArgumentException(TRANSPORT_DATAGRAM + " is not a bus transport");
                }
            // else; unknown (to coherence) protocol; just lookup in depot
        
            // perform macro replacement
            sTransport = sTransport.replace("{member-ip}", sAddr);
            sTransport = sTransport.replace("{member-port}", sPort);
        
            // resolve
            try
                {
                return depot.createMessageBus(depot.resolveEndPoint(sTransport));
                }
            catch (RuntimeException e)
                {
                if (sTransportOrig == null)
                    {
                    // still trying to autoselect best bus impl
                    sTransport = sTransport.startsWith("sdmbs") ? "tmbs"
                                : sTransport.startsWith("sdmb" ) ? "tmb"
                                : null;
                    }
                else
                    {
                    throw e;
                    }
                }
            }
        }
    
    // From interface: com.tangosol.net.Cluster
    /**
     * @see com.tangosol.net.Cluster
     */
    public com.tangosol.net.Service ensureService(String sName, String sType)
        {
        // import Component.Util.Daemon.QueueProcessor.Service.Grid;
        // import com.tangosol.util.Base;
        // import com.tangosol.util.ImmutableArrayList;
        // import java.util.List;
        
        if (sName == null || sName.length() == 0)
            {
            throw new IllegalArgumentException("Invalid service name: " + sName);
            }
        
        Grid service = (Grid) getService(sName);
        if (service == null || !service.isRunning())
            {
            synchronized (this)
                {
                if (service == null)
                    {
                    service = (Grid) getService(sName);
                    }
                else
                    {
                    // the service must be stopping;
                    // synchronize to wait until it unregisters ...
                    for (int cTries = 0; cTries < 10; cTries++)
                        {
                        synchronized (service)
                            {
                            service = (Grid) getService(sName);
                            if (service == null || service.isRunning())
                                {
                                break;
                                }
                            }
        
                        if (cTries == 9)
                            {
                            throw new IllegalStateException("Failed to unregister: " + service);
                            }
        
                        // the maximum total wait time is 450ms
                        Base.sleep(10*(cTries+1));
                        }
                    }
        
                if (service == null)
                    {
                    String sComponent = (String) getDependencies().getServiceMap().get(sType);
                    if (sComponent != null)
                        {
                        try
                            {
                            // potential TODO: improve
                            service = (Grid) _newInstance(
                                "Component.Util.Daemon.QueueProcessor.Service.Grid." + sComponent);
                            }
                        catch (SecurityException e)
                            {
                            throw Base.ensureRuntimeException(null,
                                sType + " service: " + e.getMessage());
                            }
                        }
        
                    if (service == null)
                        {
                        throw new IllegalArgumentException("Unknown service type: " + sType + ":" + sComponent);
                        }
        
                    service.setServiceName(sName);
                    bindService(service);
                    }
                }
            }
        
        if (!service.getServiceType().equals(sType))
            {
            throw new IllegalArgumentException("Requested service type \"" + sType +
                "\", but the existing service has type \"" + service.getServiceType() + '"');
            }
        return service;
        }
    
    /**
     * Ensure that the cluster has stopped.  This method will not attempt to
    * stop the cluster, it will only ensure that the cluster has stopped before
    * returning normally.
    * 
    * @throws RequestTimeoutException if the cluster does not stop within the
    * configured time interval.
     */
    public void ensureStopped()
        {
        // import com.oracle.coherence.common.base.Blocking;
        // import com.tangosol.net.RequestTimeoutException;
        // import com.tangosol.util.Base;
        
        if (getState() != STATE_EXITED)
            {
            long ldtTimeout = Base.getSafeTimeMillis() +
                                (4 * getDependencies().getClusterHeartbeatDelayMillis());
            while (true)
                {
                try
                    {
                    Blocking.sleep(10L);
                    }
                catch (InterruptedException e)
                    {
                    Thread.currentThread().interrupt();
                    throw Base.ensureRuntimeException(e);
                    }
        
                if (getState() == STATE_EXITED)
                    {
                    return;
                    }
                else if (Base.getSafeTimeMillis() >= ldtTimeout)
                    {
                    throw new RequestTimeoutException(
                        "Timeout while waiting for cluster to stop.");
                    }
                }
            }
        }
    
    /**
     * return p2p stats
     */
    public String formatPointToPointStats()
        {
        // import Component.Net.MemberSet.ActualMemberSet.ServiceMemberSet.MasterMemberSet;
        // import java.util.ConcurrentModificationException;
        // import java.util.Iterator;
        
        MasterMemberSet members    = getClusterService().getClusterMemberSet();
        Member          memberThis = members.getThisMember();
        StringBuffer    sb         = new StringBuffer();
        
        try
            {
            for (Iterator iter = members.iterator(); iter.hasNext(); )
                {
                Member member = (Member) iter.next();
                if (member != null && member != memberThis)
                    {
                    sb.append("\nMember=").append(member.getId()).append(", ")
                      .append(member.formatStats());
                    }
                }
            }
        catch (ConcurrentModificationException e)
            {
            // just reporting stats, eat the exception
            }
        
        return sb.toString();
        }
    
    public String formatStats()
        {
        StringBuffer sb = new StringBuffer();
        
        // listener stats currently contain no useful information
        // sb.append("\nUnicastListener  : ")
        //  .append(getPointListener().formatStats());
        
        // $PacketListenerN multiListener = getMultiListener();
        // if (multiListener.isStarted())
        //    {
        //    sb.append("\nMulticastListener: ")  
        //      .append(multiListener.formatStats());
        //    }
        
        sb.append("\nPacketPublisher: ")
          .append(getPublisher().formatStats())
          .append("\nPacketSpeaker  : ")
          .append(getSpeaker().formatStats())
          .append("\nPacketReceiver : ")
          .append(getReceiver().formatStats());
        
        if (getDependencies().isTcpRingEnabled())
            {
            sb.append("\nTcpRing        : ")
              .append(getClusterService().getTcpRing().formatStats());
            }
        
        Cluster.IpMonitor ipMonitor = getIpMonitor();
        if (ipMonitor.isStarted())
            {
            sb.append("\nIpMonitor      : ")
              .append(ipMonitor.formatStats());
            }
        
        return sb.toString();
        }
    
    // From interface: com.tangosol.net.Cluster
    // Accessor for the property "ClusterName"
    /**
     * Getter for property ClusterName.<p>
    * The name of this cluster (could be empty).
     */
    public String getClusterName()
        {
        return __m_ClusterName;
        }
    
    // Accessor for the property "ClusterNameBuffer"
    /**
     * Getter for property ClusterNameBuffer.<p>
    * ByteBuffer containing the Cluster's name in UTF format.
     */
    public java.nio.ByteBuffer getClusterNameBuffer()
        {
        return __m_ClusterNameBuffer;
        }
    
    // Accessor for the property "ClusterService"
    /**
     * Getter for property ClusterService.<p>
    * The default (number zero) Service that handles membership, cluster time
    * synchronization and Service registration.
     */
    public Cluster.ClusterService getClusterService()
        {
        return __m_ClusterService;
        }
    
    // From interface: com.tangosol.net.Cluster
    /**
     * Not used. See SafeCluster.
     */
    public ClassLoader getContextClassLoader()
        {
        return null;
        }
    
    public int[] getCounters()
        {
        // import com.tangosol.net.ClusterDependencies;
        // import com.tangosol.net.InetAddressHelper;
        // import com.tangosol.license.LicensedObject$LicenseData as com.tangosol.license.LicensedObject.LicenseData;
        // import com.tangosol.license.ProcessorInfo;
        // import java.net.InetAddress;
        
        ClusterDependencies config = getDependencies();
        
        // determine machine id
        int nMachineId = config.getMemberIdentity().getMachineId();
        if (nMachineId == 0)
            {
            try
                {
                InetAddress addr = InetAddressHelper.getLocalHost();
        
                long lAddr = InetAddressHelper.toLong(addr);
                nMachineId = ((int) (((lAddr & 0xFF000000L) >>> 24) & 0xFF
                                   ^ ((lAddr & 0x00FF0000L) >>> 16) & 0xFF
                                   ^ ((lAddr & 0x0000FF00L) >>>  8) & 0xFF) << 8)
                            | (int)   (lAddr & 0x000000FFL) & 0xFF;
                }
            catch (Throwable e) // UnknownHostException
                {
                }
        
            if (nMachineId == 0)
                {
                nMachineId = 1;
                }
            }
        
        int nCpu = Runtime.getRuntime().availableProcessors();
        int[] ac =  new int[]
            {
            nCpu,
            nCpu, // filled in by Cluster$ClusterConfig()
            nMachineId
            };
            
        
        com.tangosol.license.LicensedObject.LicenseData[] aLicense = (com.tangosol.license.LicensedObject.LicenseData[]) ((Cluster) get_Module()).getClusterService().get_Feed();
        if (aLicense != null && aLicense.length > 0)
            {
            // determine Socket and Cores
            ProcessorInfo procinfo = new ProcessorInfo(aLicense[0].uid);
            ac[0] = procinfo.getCpuCount();
            ac[1] = procinfo.getSocketCount();
            }
        return ac;
        }
    
    // From interface: com.tangosol.net.Cluster
    // Accessor for the property "Dependencies"
    /**
     * Getter for property Dependencies.<p>
    * The configuration information for the cluster that must be supplied
    * before the cluster can be instructed to start.
     */
    public com.tangosol.net.ClusterDependencies getDependencies()
        {
        return __m_Dependencies;
        }
    
    // Accessor for the property "Guardian"
    /**
     * Getter for property Guardian.<p>
    * The Guardian daemon.
     */
    public Cluster.PublicGuardian getGuardian()
        {
        return __m_Guardian;
        }
    
    // Accessor for the property "GuardRecoverCount"
    /**
     * Getter for property GuardRecoverCount.<p>
    * The number of recovery attempts executed for all guardables on this node
    * since the node statistics were last reset.
    * 
    * @volatile
     */
    public int getGuardRecoverCount()
        {
        return __m_GuardRecoverCount;
        }
    
    // Accessor for the property "GuardTerminateCount"
    /**
     * Getter for property GuardTerminateCount.<p>
    * The number of termination attempts executed for all guardables on this
    * node since the node statistics were last reset.
    * 
    * @volatile
     */
    public int getGuardTerminateCount()
        {
        return __m_GuardTerminateCount;
        }
    
    // Accessor for the property "IpMonitor"
    /**
     * Getter for property IpMonitor.<p>
    * The IpMonitor daemon.
     */
    public Cluster.IpMonitor getIpMonitor()
        {
        return __m_IpMonitor;
        }
    
    // From interface: com.tangosol.net.Cluster
    /**
     * @see com.tangosol.net.Cluster
     */
    public com.tangosol.net.Member getLocalMember()
        {
        return getClusterService().getClusterMemberSet().getThisMember();
        }
    
    // From interface: com.tangosol.net.Cluster
    // Accessor for the property "Management"
    /**
     * Getter for property Management.<p>
    * The management gateway.
     */
    public com.tangosol.net.management.Registry getManagement()
        {
        return __m_Management;
        }
    
    // From interface: com.tangosol.net.Cluster
    /**
     * @see com.tangosol.net.Cluster
     */
    public java.util.Set getMemberSet()
        {
        return getClusterService().getClusterMemberSet();
        }
    
    // Accessor for the property "MessagePublisher"
    /**
     * Getter for property MessagePublisher.<p>
    * The shared MessagePublisher which services (other then cluster service)
    * may use for communicating with other cluster members.
    * 
    * This starts as a reference to the PacketPublisher, but will be switched
    * to the TransportService.MessageHandler if the TransportService is
    * enabled.
    * 
    * @since 12.1.3
     */
    public com.tangosol.internal.util.MessagePublisher getMessagePublisher()
        {
        return __m_MessagePublisher;
        }
    
    // Accessor for the property "NameService"
    /**
     * Getter for property NameService.<p>
    * The NameService
     */
    public Cluster.NameService getNameService()
        {
        return __m_NameService;
        }
    
    // Accessor for the property "NameServiceBridge"
    /**
     * Getter for property NameServiceBridge.<p>
    * The NameServiceBridge, i.e. connection to a NS running on the same
    * machine but withing another cluster. 
     */
    public Cluster.NameServiceBridge getNameServiceBridge()
        {
        return __m_NameServiceBridge;
        }
    
    // From interface: com.tangosol.net.Cluster
    public com.tangosol.net.Member getOldestMember()
        {
        return getClusterService().getClusterOldestMember();
        }
    
    // Accessor for the property "OperationalContext"
    /**
     * Getter for property OperationalContext.<p>
    * The OperationalContext for this Cluster.
     */
    public com.tangosol.net.OperationalContext getOperationalContext()
        {
        return __m_OperationalContext;
        }
    
    // Accessor for the property "PointListener"
    /**
     * Getter for property PointListener.<p>
    * The PacketListener (datagram point-to-point) daemon for packets up to the
    * cluster's MaximumPacketLength on the Member's advertised port.
     */
    public Cluster.PacketListener1 getPointListener()
        {
        return __m_PointListener;
        }
    
    // Accessor for the property "PreferredListener"
    /**
     * Getter for property PreferredListener.<p>
    * The PacketListener (datagram point-to-point) daemon for packets up to the
    * Member's PreferredPacketLength on the Member's preferred port.
     */
    public Cluster.PacketListener1P getPreferredListener()
        {
        return __m_PreferredListener;
        }
    
    // Accessor for the property "Publisher"
    /**
     * Getter for property Publisher.<p>
    * The PacketPublisher daemon.
     */
    public Cluster.PacketPublisher getPublisher()
        {
        return __m_Publisher;
        }
    
    // Accessor for the property "Receiver"
    /**
     * Getter for property Receiver.<p>
    * The PacketReceiver daemon.
     */
    public Cluster.PacketReceiver getReceiver()
        {
        return __m_Receiver;
        }
    
    // From interface: com.tangosol.net.Cluster
    /**
     * {@inheritDoc}
     */
    public com.oracle.coherence.common.base.Disposable getResource(String sName)
        {
        // import com.oracle.coherence.common.base.Disposable;
        
        return (Disposable) getResourceRegistry().getResource(Disposable.class, sName);
        }
    
    // From interface: com.tangosol.net.Cluster
    // Accessor for the property "ResourceRegistry"
    /**
     * Getter for property ResourceRegistry.<p>
    * ResourceRegistry used to manage Cluster resources and dispose of
    * resources upon Cluster shutdown.
     */
    public com.tangosol.util.ResourceRegistry getResourceRegistry()
        {
        return __m_ResourceRegistry;
        }
    
    // From interface: com.tangosol.net.Cluster
    /**
     * @see com.tangosol.net.Cluster
     */
    public com.tangosol.net.Service getService(String sName)
        {
        return getClusterService().getService(sName);
        }
    
    // From interface: com.tangosol.net.Cluster
    /**
     * @see com.tangosol.net.Cluster
     */
    public com.tangosol.net.ServiceInfo getServiceInfo(String sName)
        {
        return getClusterService().getServiceInfo(sName);
        }
    
    // From interface: com.tangosol.net.Cluster
    // Accessor for the property "ServiceNames"
    /**
     * @see com.tangosol.net.Cluster
     */
    public java.util.Enumeration getServiceNames()
        {
        // import Component.Net.ServiceInfo;
        // import com.tangosol.util.SimpleEnumerator;
        // import java.util.List;
        // import java.util.ArrayList;
        
        List list = new ArrayList();
        
        Cluster.ClusterService service = getClusterService();
        int cServices = service.getServiceInfoCount();
        for (int i = 0; i < cServices; ++i)
            {
            ServiceInfo info = service.getServiceInfo(i);
            if (info != null)
                {
                list.add(info.getServiceName());
                }
            }
        
        return new SimpleEnumerator(list.toArray(new String[list.size()]));
        }
    
    // Accessor for the property "ShutdownTimeout"
    /**
     * Getter for property ShutdownTimeout.<p>
    * Timeout (in millis) for waiting for graceful shutdown and stop of all
    * services. Configure via property coherence.shutdown.timeout using
    * Duration String format, i.e. "5s", "10m" or "1h".
     */
    public long getShutdownTimeout()
        {
        return __m_ShutdownTimeout;
        }
    
    // Accessor for the property "SocketManager"
    /**
     * Getter for property SocketManager.<p>
     */
    public Cluster.SocketManager getSocketManager()
        {
        return (Cluster.SocketManager) _findChild("SocketManager");
        }
    
    // Accessor for the property "Speaker"
    /**
     * Getter for property Speaker.<p>
    * The PacketSpeaker daemon.
     */
    public Cluster.PacketSpeaker getSpeaker()
        {
        return __m_Speaker;
        }
    
    // Accessor for the property "StartException"
    /**
     * Getter for property StartException.<p>
    * The exception (if any) that occurred during startup that caused startup
    * to fail.
     */
    public Throwable getStartException()
        {
        return __m_StartException;
        }
    
    // Accessor for the property "State"
    /**
     * Getter for property State.<p>
    * The current state of the cluster.
    * 
    * @volatile
     */
    public int getState()
        {
        return __m_State;
        }
    
    // Accessor for the property "TcpBroadcastListener"
    /**
     * Getter for property TcpBroadcastListener.<p>
    * The PacketListener daemon for packets up to the Member's
    * MaximumPacketLength on the Clusters port.
     */
    public Cluster.PacketListenerBT getTcpBroadcastListener()
        {
        return __m_TcpBroadcastListener;
        }
    
    /**
     * Return the broadcast listener which listens on TCP
     */
    public Cluster.PacketListenerBT getTcpBroadcastListenera()
        {
        return null;
        }
    
    // Accessor for the property "ThreadGroup"
    /**
     * Getter for property ThreadGroup.<p>
    * The ThreadGroup that all cluster daemons will use.
     */
    public ThreadGroup getThreadGroup()
        {
        return __m_ThreadGroup;
        }
    
    // From interface: com.tangosol.net.Cluster
    /**
     * @see com.tangosol.net.Cluster
     */
    public long getTimeMillis()
        {
        return getClusterService().getTimestamp();
        }
    
    // Accessor for the property "TracingControl"
    /**
     * Getter for property TracingControl.<p>
    * Allows for flush/close of a tracer, may be null.
     */
    public com.tangosol.internal.tracing.TracingShim.Control getTracingControl()
        {
        return __m_TracingControl;
        }
    
    // Accessor for the property "TransportService"
    /**
     * Getter for property TransportService.<p>
    * The shared bus-based TransportService.  Only started if a shared-bus will
    * be used.
    * 
    * @since Coherence 12.1.3
     */
    public Cluster.TransportService getTransportService()
        {
        return __m_TransportService;
        }
    
    // Accessor for the property "UdpBroadcastListener"
    /**
     * Getter for property UdpBroadcastListener.<p>
    * The PacketListener daemon for packets up to the Member's
    * MaximumPacketLength on the Clusters port.
     */
    public Cluster.PacketListenerBU getUdpBroadcastListener()
        {
        return __m_UdpBroadcastListener;
        }
    
    // Accessor for the property "WrapperStreamFactoryList"
    /**
     * Getter for property WrapperStreamFactoryList.<p>
    * List of WrapperStreamFactory objects that affect how Messages sent from /
    * to this Member are written and read.
     */
    public java.util.List getWrapperStreamFactoryList()
        {
        return __m_WrapperStreamFactoryList;
        }
    
    /**
     * Forcefully and abruptly halt the Cluster and the ClusterService and
    * communication daemons. 
    * This method ensures that the local node leaves the Cluster and may leave
    * the Cluster in an inconsistent state.  This method should only be called
    * when the Cluster or system has reached a state that prevents a more
    * graceful termination (e.g. "stop()" has failed), and only as a last
    * resort.
     */
    public void halt()
        {
        setHalted(true);
        
        /*
        * Note: We first halt the publisher here.  The primary goal
        * of halt() is to ensure that the local node leaves the cluster.
        * Beyond that, it is impossible to guarantee (and is in fact
        * quite messy to try) to ensure that other services are halted.
        * It is quite likely that any attempt to halt other services may
        * simply cause them to deadlock (e.g. service.onExit() logic is
        * quite likely to acquire synchronization, etc.)
        *
        * Instead, we halt the publisher, which will ensure that it is put
        * into an unusable state.  Either the publisher was involved in the
        * original deadlock in which case we will get kicked from the cluster
        * within a packet-timeout, or it was not, in which case tearing down
        * the publisher will ensure that we are kicked.
        *
        * By leaving the rest of the service threads in-place, it also leaves
        * open the possibility of performing post-mortem analysis (e.g. via
        * external debugger) of how Coherence got into this state.
        *
        * Because of the terminal nature of halt() and the unknown state of
        * the cluster, exceptions thrown by halt actions are caught and
        * discarded silently, allowing as much of the halt() process to complete
        * as possible.
        */
        try
            {
            // the primary goal: send no more messages
            getPublisher().halt();
            }
        catch (Exception ignored) {}
        
        try
            {
            // the other primary goal: send no more messages
            getTransportService().halt();
            }
        catch (Exception ignored) {}
        
        try
            {
            // allow others to reuse the cluster port
            getSocketManager().getBroadcastUdpSocket().close();
            }
        catch (Exception ignored) {}
        
        try
            {
            // allow others to reuse the cluster port
            getSocketManager().getBroadcastTcpSocket().close();
            }
        catch (Exception ignored) {}
        
        try
            {
            // allow others to reuse the cluster port
            getNameService().halt();
            }
        catch (Exception ignored) {}
        
        try
            {
            // don't hold a registration in another NS; this would block others from taking it
            getNameServiceBridge().halt();
            }
        catch (Exception ignored) {}
        
        // it is now safe for us to try more graceful cleanup:
        try
            {
            // close the SocketManager to ensure that TcpRing will detect our
            // death when using TcpDatagramSocket
            getSocketManager().releaseSockets();
            }
        catch (Exception ignored) {}
        
        try
            {
            // close TcpRing to help encourage quick detection of our death
            getClusterService().getTcpRing().close();
            }
        catch (Exception ignored) {}
        }
    
    protected java.util.List instantiateWrapperStreamFactoryList(java.util.List listNames)
        {
        // import com.tangosol.net.ClusterDependencies;
        // import com.tangosol.io.WrapperStreamFactory as com.tangosol.io.WrapperStreamFactory;
        // import java.util.ArrayList;
        // import java.util.Iterator;
        // import java.util.List;
        // import java.util.Map;
        
        ClusterDependencies config     = getDependencies();
        List                listFilter = new ArrayList();
        Map                 mapFilter  = config.getFilterMap();
        
        for (Iterator iter = listNames.iterator(); iter.hasNext(); )
            {
            String               sName   = (String) iter.next();
            com.tangosol.io.WrapperStreamFactory factory = (com.tangosol.io.WrapperStreamFactory) mapFilter.get(sName);
            if (factory == null)
                {
                _trace("Cannot find com.tangosol.io.WrapperStreamFactory for filter-name: " + sName, 1);
                continue;
                }
            listFilter.add(factory);
            }
        
        return listFilter;
        }
    
    public boolean isAuthorizedHost(java.net.InetAddress addr)
        {
        // import com.tangosol.util.Filter;
        
        Filter filterHost = getDependencies().getAuthorizedHostFilter();
        try
            {
            return filterHost == null || filterHost.evaluate(addr);
            }
        catch (Throwable e)
            {
            _trace(filterHost + " evaluation failed: " + e, 1); 
            }
        
        return false;
        }
    
    // Accessor for the property "ClusterPortBound"
    /**
     * Getter for property ClusterPortBound.<p>
    * True if this node currently hold the cluster port binding for this
    * machine, either directly or indirectly via the NameServiceBridge.  In the
    * case of the latter value can actually transition back to false upon death
    * of the NS process.
     */
    public boolean isClusterPortBound()
        {
        return getTcpBroadcastListener().isStarted() || getNameServiceBridge().isForeignBroadcastBound();
        }
    
    // Accessor for the property "ClusterPortSharingEnabled"
    /**
     * Getter for property ClusterPortSharingEnabled.<p>
    * Return true iff this member's cluster port is sharable with other
    * clusters.
     */
    public boolean isClusterPortSharingEnabled()
        {
        // currently the following types of configurations do not support port sharing
        // - MC threshold < 100% is not supported because we don't have a means to identify the cluster for non-broadcast MC packets
        //   support could be added in a number of ways but all are too costly to be worth it, and we have long intend to move away
        //   from MC data transfers.
        // - SSL protected clusters are not supported as we'd need broadcast packets to be sent in the clear in order to forward them
        //   and doing so opens up an attack vector into the otherwise protected cluster.  One simple attack is to send SeniorMemberKill
        //   or even a SeniorMemberHeartBeat.
        
        return getDependencies().getPublisherGroupThreshold() >= 100 &&
              !getSocketManager().getUnicastUdpSocketProvider().isSecure();
        }
    
    /**
     * While TCMP is responsible for the message delivery SLA, it is the
    * ClusterServices responsibility to ensure some necessary minimal flow of
    * communication between nodes (via MemberHeartbeat messages). However, TCMP
    * may have additional requirements regarding the communication frequency
    * between the nodes.
    * For example, the legacy TCMP strictly orders all outgoing messages, but
    * sends only the Trint portion of the message id, which is later returned
    * as a part of the response. If the gap between that previous outgoing
    * message id and the now-current outgoing message id grows too large, it
    * may become impossible to use the now-current outgoing message id to
    * correlate the id that comes as a part of the response with the request
    * that initiated it. This method checks whether or not such a potential gap
    * exists.
    * 
    * @return true if communication is required to the specified Member in
    * order to ensure the integrity of the conversation
     */
    public boolean isCommEndangered(Member member)
        {
        // import Component.Net.Packet;
        // import com.tangosol.net.internal.PacketIdentifier;
        
        // get an estimate of the current MessageFromId trint cutoff 
        long lTrintCutoff =
            getPublisher().getMessageOutgoing().getLastIndex() - (Packet.TRINT_MAX_VARIANCE >>> 3);
        
        // determine the last MessageFromId sent to that member
        PacketIdentifier packetidTo = member.getContiguousToPacketId();
        return packetidTo == null ||  packetidTo.getFromMessageId() < lTrintCutoff;
        }
    
    // Accessor for the property "Halted"
    /**
     * Getter for property Halted.<p>
    * True iff the cluster has been halted.
     */
    public boolean isHalted()
        {
        return __m_Halted;
        }
    
    // From interface: com.tangosol.net.Cluster
    // Accessor for the property "Running"
    /**
     * Cluster API method to determine if the cluster is running.
     */
    public boolean isRunning()
        {
        // import com.oracle.coherence.common.base.Blocking;
        
        while (true)
            {
            switch (getState())
                {
                case STATE_RUNNING:
                    return true;
                case STATE_INITIAL:
                case STATE_LEAVING:
                case STATE_STOPPING:
                case STATE_EXITED:
                    return false;
                default:
                    // wait till stabilizes
                    synchronized (this)
                        {
                        try
                            {
                            Blocking.wait(this, 1000);
                            }
                        catch (InterruptedException e)
                            {
                            Thread.currentThread().interrupt();
                            return getState() == STATE_RUNNING;
                            }
                        }
                    continue;
                }
            }
        }
    
    // Accessor for the property "TransportServiceEnabled"
    /**
     * Getter for property TransportServiceEnabled.<p>
    * Return true if this member is configured to use a MessageBus as its
    * primary transport.
     */
    public boolean isTransportServiceEnabled()
        {
        return !TRANSPORT_DATAGRAM.equals(getDependencies().getReliableTransport());
        }
    
    // From interface: com.tangosol.net.NameService$LookupCallback
    public Object lookup(String sName, com.tangosol.net.Cluster cluster, com.tangosol.net.NameService.RequestContext ctx)
            throws javax.naming.NamingException
        {
        // import Component.Application.Console.Coherence;
        // import com.oracle.coherence.common.net.InetAddresses;
        // import java.util.Iterator;
        // import java.util.HashSet;
        
        String sPrefix = "Cluster/"; // NS names are services; or service scoped, so we use the ClusterService name
        if (sName != null && sName.startsWith(sPrefix))
            {    
            sName = sName.substring(sPrefix.length());
            if (sName.equals("info"))
                {
                return toString();
                }
            else if (sName.equals("version"))
                {
                return Coherence.VERSION;
                }
            else if (sName.equals("edition"))
                {
                return Coherence.EDITION_NAMES[((Coherence) Coherence.get_Instance()).getEdition()];
                }
            else if (sName.equals("mode"))
                {
                return Coherence.MODE_NAMES[((Coherence) Coherence.get_Instance()).getMode()];
                }
            else if (sName.equals("name"))
                {
                return getClusterService().getClusterName();
                }
            else if (sName.equals("size"))
                {
                return Integer.toString(getClusterService().getServiceMemberSet().size());
                }
            else if (sName.equals("foreign"))
                {
                HashSet setClusters = new HashSet();
                for (Iterator iter = getNameService().getDirectory().keySet().iterator(); iter.hasNext(); )
                    {
                    sName = (String) iter.next();
                    sPrefix = "Cluster/foreign/";
                    if (sName.startsWith(sPrefix))
                        {
                        sName = sName.substring(sPrefix.length());
                        setClusters.add(sName.substring(0, sName.indexOf('/')));
                        }
                    }
                
                return setClusters;
                }
            else if (sName.equals("localMember"))
                {
                return getClusterService().getThisMember();
                }
            else if (sName.equals("localDiscoveryInetAddress"))
                {
                return getDependencies().getLocalDiscoveryAddress();
                }
            else if (sName.equals("localInetAddress"))
                {
                return getClusterService().getThisMember().getAddress();
                }
            else if (sName.equals("IPv4Stack"))
                {
                return Boolean.valueOf(InetAddresses.PreferIPv4Stack);
                }
            else if (sName.equals("multicastInetAddress"))
                {
                return getClusterService().isWkaEnabled()
                    ? null
                    : getDependencies().getGroupAddress();
                }
            }
        
        return null;
        }
    
    /**
     * Invoked when a broadcast packet is received by any listener
     */
    protected void onBroadcastPacket(java.net.DatagramSocket socketIn, java.net.SocketAddress addrSrc, java.nio.ByteBuffer buffer)
        {
        // import com.oracle.coherence.common.io.Buffers;
        // import java.nio.ByteBuffer;
        
        ByteBuffer  bufClusterName = getClusterNameBuffer();
        int         cbName         = bufClusterName.remaining();
        int         nPos           = buffer.position();
        final int   cbHeader       = 4;
        if (buffer.remaining() >= cbHeader + cbName &&
            Buffers.equals(buffer, nPos + cbHeader, bufClusterName, bufClusterName.position(), cbName))
            {
            Cluster.PacketReceiver.AddressedBuffer bufferAddr = new Cluster.PacketReceiver.AddressedBuffer();
            bufferAddr.setSourceAddress(addrSrc);
            bufferAddr.setBuffer(buffer);
        
            getReceiver().getQueue().add(bufferAddr);
        
            Cluster.PacketListenerBU listenerBU = getUdpBroadcastListener();
            if (listenerBU.isInGroup())
                {
                // assumed that the broadcast packet must be MC as it is for this MC cluster
                listenerBU.resetSuspectGroupTimestamp();
                }
            }
        else
            {
            onForeignPacket(socketIn, addrSrc, buffer);
            }
        }
    
    /**
     * This event occurs when an exception is thrown by any of the cluster
    * daemons.
    * 
    * @param e  the Throwable object (a RuntimeException or an Error)
     */
    public void onException(Throwable e)
        {
        int nState = getState();
        
        if (nState < Cluster.STATE_RUNNING)
            {
            setStartException(e);
            }
        
        if (nState < Cluster.STATE_STOPPING)
            {
            // protect from OOME thrown by the logger
            try
                {
                _trace(e, "Stopping cluster due to unhandled exception");
                }
            finally
                {
                stop();
                }
            }
        }
    
    /**
     * Invoked when a packet for another cluster is received.
     */
    public void onForeignPacket(java.net.DatagramSocket socketIn, java.net.SocketAddress addrSrc, java.nio.ByteBuffer buffer)
        {
        // import com.tangosol.io.nio.ByteBufferInputStream;
        // import com.oracle.coherence.common.io.Buffers;
        // import com.oracle.coherence.common.io.BufferManager;
        // import java.io.IOException;
        // import java.io.DataInputStream;
        // import java.net.DatagramPacket;
        // import java.net.InetAddress;
        // import java.net.InetSocketAddress;
        // import java.nio.ByteBuffer;
        
        if (isClusterPortSharingEnabled())
            {
            // extract foreign cluster name from packet
            BufferManager mgr = getReceiver().getBufferManager();
            try
                {
                Cluster.NameService    ns       = getNameService();
                int             nPos     = buffer.position();
                int             nLim     = buffer.limit();
                DataInputStream in       = new DataInputStream(new ByteBufferInputStream(buffer));
                int             nType    = in.readInt();
                String          sCluster = in.readUTF();
                int             nSource  = in.readUnsignedShort();
                int             nMsgType = in.readShort();
                int             ofCbMsg  = buffer.position() - nPos;
                int             cbMsg    = in.readShort();
                
                in.close();
                buffer.position(nPos).limit(nLim);
        
                // lookup colocated cluster member's address
                InetSocketAddress addr = (InetSocketAddress) ns.lookup("Cluster/foreign/" + sCluster + "/Cluster/localAddress");
                
                // forward packet using the same datagram socket on which it came it on, this ensures it is
                // compatibile with the destination
                if (addr != null)
                    {
                    if (nMsgType == Cluster.ClusterService.NewMemberAnnounce.MESSAGE_TYPE)
                        {
                        Integer NVer = (Integer) ns.lookup("Cluster/foreign/" + sCluster + "/Cluster/announceVersion");
                        int     nVer = NVer == null ? 0 : NVer.intValue();
                        if (nVer > 0)
                            {
                            // augment with source address for auto-NAT support
                            InetSocketAddress addrInetSrc = (InetSocketAddress) addrSrc;
                            InetAddress       addrIpSrc   = addrInetSrc.getAddress();
                            byte[]            abIpSrc     = addrIpSrc.getAddress();
                            int               cbAbIpSrc   = abIpSrc.length;
                            int               cbAdd       = 4 + cbAbIpSrc + 4;
                            ByteBuffer bufNew = mgr.acquire(buffer.remaining() + cbAdd);
                            bufNew.put(buffer)
                                  .putInt(cbAbIpSrc)
                                  .put(abIpSrc)
                                  .putInt(addrInetSrc.getPort())
                                  .flip();
        
                            // update the BodyLength portion of the packet
                            bufNew.putShort(ofCbMsg, (short) (cbMsg + cbAdd));
                            mgr.release(buffer);
                            buffer = bufNew;
                            }
                        }
                    
                    socketIn.send(new DatagramPacket(
                        buffer.array(), buffer.arrayOffset() + buffer.position(), buffer.remaining(),
                        addr));
                    }
                }
            catch (Exception e) {}
            finally
                {
                mgr.release(buffer);
                }
            }
        else
            {
            // accept the foreign packet so that the ClusterService can be aware that
            // multiple clusters exist in this communication domain.  Note if we were to filter
            // here we'd still leave MC data packets unprotected and those could
            // cause random and much harder to diagnose errors.
        
            getReceiver().getQueue().add(buffer);
            }
        }
    
    /**
     * This method is called when a recovery attempt is performed.
    * 
    * Note: this method is called by threads exclusively created to perform
    * Guardian recover actions. We intentionally disregard a possibility of
    * concurrent counter update as a non-consequential.
     */
    public void onGuardableRecover()
        {
        setGuardRecoverCount(getGuardRecoverCount() + 1);
        }
    
    /**
     * This method is called when a termination attempt is performed.
    * 
    * Note: this method is called by threads exclusively created to perform
    * Guardian terminate actions. We intentionally disregard a possibility of
    * concurrent counter update as a non-consequential.
     */
    public void onGuardableTerminate()
        {
        setGuardTerminateCount(getGuardTerminateCount() + 1);
        }
    
    // Declared at the super level
    /**
     * The "component has been initialized" method-notification called out of
    * setConstructed() for the topmost component and that in turn notifies all
    * the children.
    * 
    * This notification gets called before the control returns back to this
    * component instantiator (using <code>new Component.X()</code> or
    * <code>_newInstance(sName)</code>) and on the same thread. In addition,
    * visual components have a "posted" notification <code>onInitUI</code> that
    * is called after (or at the same time as) the control returns back to the
    * instantiator and possibly on a different thread.
     */
    public void onInit()
        {
        // import com.oracle.coherence.common.util.Duration;
        // import com.tangosol.coherence.config.Config;
        // import com.tangosol.coherence.config.unit.Millis;
        // import Component.Util.Daemon.QueueProcessor.Service.Grid;
        
        super.onInit();
        
        setPointListener       ((Cluster.PacketListener1 )   _findName("PacketListener1" ));
        setPreferredListener   ((Cluster.PacketListener1P)   _findName("PacketListener1P"));
        setTcpBroadcastListener((Cluster.PacketListenerBT)   _findName("PacketListenerBT"));
        setUdpBroadcastListener((Cluster.PacketListenerBU)   _findName("PacketListenerBU"));
        setReceiver            ((Cluster.PacketReceiver  )   _findName("PacketReceiver"  ));
        setPublisher           ((Cluster.PacketPublisher )   _findName("PacketPublisher" ));
        setSpeaker             ((Cluster.PacketSpeaker   )   _findName("PacketSpeaker"   ));
        setTransportService    ((Cluster.TransportService)   _findName("TransportService"));
        setNameService         ((Cluster.NameService)        _findName("NameService"     ));
        setNameServiceBridge   ((Cluster.NameServiceBridge)  _findName("NameServiceBridge"));
        setIpMonitor           ((Cluster.IpMonitor       )   _findName("IpMonitor"       ));
        setGuardian            ((Cluster.PublicGuardian  )   _findName("PublicGuardian"  ));
        setMessagePublisher    (getPublisher()); // may be reset in startCoreServices
        setClusterService      ((Cluster.ClusterService  )   _findName("ClusterService"  ));
        
        setShutdownTimeout(new Millis(Config.getDuration("coherence.shutdown.timeout",
            new Duration("2m"))).get());
        
        // reserve TransportService id both for consistency and to ensure that it is stopped
        // after all other services during shutdown
        Grid svcTransport = getTransportService();
        getClusterService().ensureServiceInfo(1,
            svcTransport.getServiceName(), svcTransport.getServiceType());
        }
    
    /**
     * Called on the ClusterService thread to signal that the specified member
    * has joined the cluster.
    * 
    * @param member  the member that has joined the cluster
     */
    public void onMemberJoined(Member member)
        {
        if (getDependencies().isIpMonitorEnabled())
           {
           // notify IpMonitor
           getIpMonitor().onMemberJoined(member);
           }
        }
    
    /**
     * Called on the ClusterService thread to signal that the specified member
    * has left the cluster.
    * 
    * @param member  the member that has left the cluster
     */
    public void onMemberLeft(Member member)
        {
        // notify publisher
        getPublisher().onMemberLeft(member);
        
        // notify receiver
        getReceiver().onMemberLeft(member);
        
        if (getDependencies().isIpMonitorEnabled())
           {
           // notify IpMonitor
           getIpMonitor().onMemberLeft(member);
           }
        }
    
    /**
     * Invoked when a packet is received by any listener.
     */
    public void onPacket(com.tangosol.coherence.component.util.daemon.queueProcessor.packetProcessor.PacketListener listener, java.net.SocketAddress addrSrc, java.nio.ByteBuffer buffer)
        {
        // import Component.Net.Packet;
        
        if (buffer.remaining() >= 4)
            {
            int nType = buffer.getInt(buffer.position());
            if ((nType & 0xFFFFFFF0) == 0x0DDF00D0) // coherence packet
                {
                switch (nType)
                    {
                    case Packet.TYPE_BROADCAST:
                        onBroadcastPacket(listener.getUdpSocket().getDatagramSocket(), addrSrc, buffer);
                        return;
                        
                    case Packet.TYPE_NAME_SERVICE:
                        getNameService().onDatagramLookup(listener.getUdpSocket().getDatagramSocket(), addrSrc, buffer);
                        return;
                        
                    default:
                        if (getClusterService().getClusterMemberSet().getMember(addrSrc) != null &&
                            getReceiver().getQueue().add(buffer))
                            {
                            return;
                            }
                        // fall through
                    }
                }
            }
        
        listener.getBufferManager().release(buffer);
        }
    
    /**
     * Called to do the work of starting the cluster.
     */
    protected void onStart()
        {
        // import com.tangosol.internal.tracing.LegacyXmlTracingHelper;
        // import com.tangosol.internal.tracing.TracingHelper;
        // import com.tangosol.net.CacheFactory;
        // import com.tangosol.net.ClusterDependencies;
        // import com.tangosol.net.Cluster;
        // import com.tangosol.net.Guardian;
        // import com.tangosol.run.xml.XmlElement;
        // import com.tangosol.util.Base;
        // import java.io.IOException;
        
        // config is required
        ClusterDependencies config = getDependencies();
        
        if (config == null)
            {
            throw new IllegalArgumentException("Cluster dependencies must be set!");
            }
        
        // ensure TCMP clustering is configured
        if (!config.isTcmpEnabled())
            {
            throw new UnsupportedOperationException("TCMP clustering has been disabled;"
                + " this configuration may only access clustered services via Extend"
                + " proxies.");
            }
        
        // load the security module (if necessary)
        Security.getInstance();
        
        // setup the cluster name
        setClusterName(config.getMemberIdentity().getClusterName());
        
        XmlElement xmlTracing = CacheFactory.getServiceConfig("$Tracing");
        if (xmlTracing != null)
            {
            configureTracing(LegacyXmlTracingHelper.fromXml(xmlTracing, TracingHelper.defaultDependencies()));
            }
        
        configureSockets();
        
        configureBroadcast();
        
        // bind the sockets to the specified local address
        // and (possibly auto-adjusted) port
        try
            {
            getSocketManager().bindSockets();
            }
        catch (IOException e)
            {
            throw Base.ensureRuntimeException(e);
            }
        
        configureDaemons();
        
        startDaemons();
        
        // now the Cluster component has "started" but the Service 0 is
        // not yet running so the network "join" of an existing cluster
        // has not yet occurred
        setState(STATE_JOINING);
        
        startSystemServices();
        
        // now the Cluster is running
        setState(STATE_RUNNING);
        
        // add the ShutdownHook
        int nShutdownOption = config.getShutdownHookOption();
        if (nShutdownOption != ClusterDependencies.SHUTDOWN_NONE)
            {
            try
                {
                Cluster.ShutdownHook hook = (Cluster.ShutdownHook) _findName("ShutdownHook");
                hook.setGraceful(nShutdownOption == ClusterDependencies.SHUTDOWN_GRACEFUL);
                hook.register();
                }
            catch (Throwable e) {}
            }
        
        // register the Guardian with the ResourceRegistry
        getResourceRegistry().registerResource(Guardian.class, getGuardian());
        }
    
    // From interface: com.tangosol.net.Cluster
    /**
     * {@inheritDoc}
     */
    public void registerResource(String sName, com.oracle.coherence.common.base.Disposable disposable)
        {
        // import com.oracle.coherence.common.base.Disposable;
        
        getResourceRegistry().registerResource(Disposable.class, sName, disposable);
        }
    
    /**
     * reset the p2p stats
     */
    public void resetPointToPointStats()
        {
        // import java.util.ConcurrentModificationException;
        // import java.util.Iterator;
        
        try
            {
            for (Iterator iter = getClusterService().getClusterMemberSet().iterator();
                     iter.hasNext(); )
                {
                Member member = (Member) iter.next();
                if (member != null)
                    {
                    member.resetStats();
                    }
                }
            }
        catch (ConcurrentModificationException e)
            {
            // just reporting stats, eat the exception
            }
        }
    
    public void resetStats()
        {
        getPointListener()              .resetStats();
        getPreferredListener()          .resetStats();
        getUdpBroadcastListener()       .resetStats();
        getTcpBroadcastListener()       .resetStats();
        getSpeaker()                    .resetStats();
        getPublisher()                  .resetStats();
        getReceiver()                   .resetStats();
        getClusterService().getTcpRing().resetStats();
        setGuardTerminateCount(0);
        setGuardRecoverCount(0);
        }
    
    // From interface: com.tangosol.net.Cluster
    public void resumeService(String sService)
        {
        getClusterService().doServiceQueiscence(sService, /*fResume*/ true);
        }
    
    // Accessor for the property "ClusterName"
    /**
     * Setter for property ClusterName.<p>
    * The name of this cluster (could be empty).
     */
    protected void setClusterName(String sClusterName)
        {
        _assert(sClusterName != null);
        
        if (getClusterService().isStarted())
            {
            throw new IllegalStateException("Cluster name cannot be changed.");
            }
        
        __m_ClusterName = (sClusterName);
        }
    
    // Accessor for the property "ClusterNameBuffer"
    /**
     * Setter for property ClusterNameBuffer.<p>
    * ByteBuffer containing the Cluster's name in UTF format.
     */
    protected void setClusterNameBuffer(java.nio.ByteBuffer sProperty)
        {
        __m_ClusterNameBuffer = sProperty;
        }
    
    // Accessor for the property "ClusterService"
    /**
     * Setter for property ClusterService.<p>
    * The default (number zero) Service that handles membership, cluster time
    * synchronization and Service registration.
     */
    protected void setClusterService(Cluster.ClusterService daemon)
        {
        __m_ClusterService = daemon;
        }
    
    // From interface: com.tangosol.net.Cluster
    /**
     * Not used. See SafeCluster.
     */
    public void setContextClassLoader(ClassLoader loader)
        {
        }
    
    // From interface: com.tangosol.net.Cluster
    // Accessor for the property "Dependencies"
    /**
     * Setter for property Dependencies.<p>
    * The configuration information for the cluster that must be supplied
    * before the cluster can be instructed to start.
     */
    public void setDependencies(com.tangosol.net.ClusterDependencies deps)
        {
        // import com.tangosol.internal.net.cluster.DefaultClusterDependencies;
        
        if (getDependencies() == null)
            {
            __m_Dependencies = (new DefaultClusterDependencies(deps).validate());
            }
        else
            {
            throw new IllegalStateException("Cluster dependencies cannot be reset");
            }
        }
    
    // Accessor for the property "Guardian"
    /**
     * Setter for property Guardian.<p>
    * The Guardian daemon.
     */
    protected void setGuardian(Cluster.PublicGuardian daemon)
        {
        __m_Guardian = daemon;
        }
    
    // Accessor for the property "GuardRecoverCount"
    /**
     * Setter for property GuardRecoverCount.<p>
    * The number of recovery attempts executed for all guardables on this node
    * since the node statistics were last reset.
    * 
    * @volatile
     */
    protected void setGuardRecoverCount(int cRecover)
        {
        __m_GuardRecoverCount = cRecover;
        }
    
    // Accessor for the property "GuardTerminateCount"
    /**
     * Setter for property GuardTerminateCount.<p>
    * The number of termination attempts executed for all guardables on this
    * node since the node statistics were last reset.
    * 
    * @volatile
     */
    protected void setGuardTerminateCount(int cTerminate)
        {
        __m_GuardTerminateCount = cTerminate;
        }
    
    // Accessor for the property "Halted"
    /**
     * Setter for property Halted.<p>
    * True iff the cluster has been halted.
     */
    protected void setHalted(boolean fHalted)
        {
        __m_Halted = fHalted;
        }
    
    // Accessor for the property "IpMonitor"
    /**
     * Setter for property IpMonitor.<p>
    * The IpMonitor daemon.
     */
    protected void setIpMonitor(Cluster.IpMonitor daemon)
        {
        __m_IpMonitor = daemon;
        }
    
    // From interface: com.tangosol.net.Cluster
    // Accessor for the property "Management"
    /**
     * Setter for property Management.<p>
    * The management gateway.
     */
    public void setManagement(com.tangosol.net.management.Registry registry)
        {
        __m_Management = registry;
        }
    
    // Accessor for the property "MessagePublisher"
    /**
     * Setter for property MessagePublisher.<p>
    * The shared MessagePublisher which services (other then cluster service)
    * may use for communicating with other cluster members.
    * 
    * This starts as a reference to the PacketPublisher, but will be switched
    * to the TransportService.MessageHandler if the TransportService is
    * enabled.
    * 
    * @since 12.1.3
     */
    protected void setMessagePublisher(com.tangosol.internal.util.MessagePublisher publisher)
        {
        __m_MessagePublisher = publisher;
        }
    
    // Accessor for the property "NameService"
    /**
     * Setter for property NameService.<p>
    * The NameService
     */
    public void setNameService(Cluster.NameService serviceName)
        {
        __m_NameService = serviceName;
        }
    
    // Accessor for the property "NameServiceBridge"
    /**
     * Setter for property NameServiceBridge.<p>
    * The NameServiceBridge, i.e. connection to a NS running on the same
    * machine but withing another cluster. 
     */
    public void setNameServiceBridge(Cluster.NameServiceBridge bridgeService)
        {
        __m_NameServiceBridge = bridgeService;
        }
    
    // Accessor for the property "OperationalContext"
    /**
     * Setter for property OperationalContext.<p>
    * The OperationalContext for this Cluster.
     */
    public void setOperationalContext(com.tangosol.net.OperationalContext operationalContext)
        {
        __m_OperationalContext = operationalContext;
        }
    
    // Accessor for the property "PointListener"
    /**
     * Setter for property PointListener.<p>
    * The PacketListener (datagram point-to-point) daemon for packets up to the
    * cluster's MaximumPacketLength on the Member's advertised port.
     */
    protected void setPointListener(Cluster.PacketListener1 daemon)
        {
        __m_PointListener = daemon;
        }
    
    // Accessor for the property "PreferredListener"
    /**
     * Setter for property PreferredListener.<p>
    * The PacketListener (datagram point-to-point) daemon for packets up to the
    * Member's PreferredPacketLength on the Member's preferred port.
     */
    protected void setPreferredListener(Cluster.PacketListener1P daemon)
        {
        __m_PreferredListener = daemon;
        }
    
    // Accessor for the property "Publisher"
    /**
     * Setter for property Publisher.<p>
    * The PacketPublisher daemon.
     */
    protected void setPublisher(Cluster.PacketPublisher daemon)
        {
        __m_Publisher = daemon;
        }
    
    // Accessor for the property "Receiver"
    /**
     * Setter for property Receiver.<p>
    * The PacketReceiver daemon.
     */
    protected void setReceiver(Cluster.PacketReceiver daemon)
        {
        __m_Receiver = daemon;
        }
    
    // Accessor for the property "ResourceRegistry"
    /**
     * Setter for property ResourceRegistry.<p>
    * ResourceRegistry used to manage Cluster resources and dispose of
    * resources upon Cluster shutdown.
     */
    public void setResourceRegistry(com.tangosol.util.ResourceRegistry sProperty)
        {
        __m_ResourceRegistry = sProperty;
        }
    
    // Accessor for the property "ShutdownTimeout"
    /**
     * Setter for property ShutdownTimeout.<p>
    * Timeout (in millis) for waiting for graceful shutdown and stop of all
    * services. Configure via property coherence.shutdown.timeout using
    * Duration String format, i.e. "5s", "10m" or "1h".
     */
    protected void setShutdownTimeout(long lTimeout)
        {
        __m_ShutdownTimeout = lTimeout;
        }
    
    // Accessor for the property "Speaker"
    /**
     * Setter for property Speaker.<p>
    * The PacketSpeaker daemon.
     */
    protected void setSpeaker(Cluster.PacketSpeaker daemon)
        {
        __m_Speaker = daemon;
        }
    
    // Accessor for the property "StartException"
    /**
     * Setter for property StartException.<p>
    * The exception (if any) that occurred during startup that caused startup
    * to fail.
     */
    public void setStartException(Throwable e)
        {
        if (getStartException() == null)
            {
            __m_StartException = (e);
            }
        }
    
    // Accessor for the property "State"
    /**
     * Setter for property State.<p>
    * The current state of the cluster.
    * 
    * @volatile
     */
    protected synchronized void setState(int nState)
        {
        __m_State = (nState);
        notifyAll();
        }
    
    // Accessor for the property "TcpBroadcastListener"
    /**
     * Setter for property TcpBroadcastListener.<p>
    * The PacketListener daemon for packets up to the Member's
    * MaximumPacketLength on the Clusters port.
     */
    protected void setTcpBroadcastListener(Cluster.PacketListenerBT daemon)
        {
        __m_TcpBroadcastListener = daemon;
        }
    
    // Accessor for the property "ThreadGroup"
    /**
     * Setter for property ThreadGroup.<p>
    * The ThreadGroup that all cluster daemons will use.
     */
    protected void setThreadGroup(ThreadGroup threadgroup)
        {
        _assert(getState() < STATE_RUNNING);
        __m_ThreadGroup = (threadgroup);
        }
    
    // Accessor for the property "TracingControl"
    /**
     * Setter for property TracingControl.<p>
    * Allows for flush/close of a tracer, may be null.
     */
    public void setTracingControl(com.tangosol.internal.tracing.TracingShim.Control sProperty)
        {
        __m_TracingControl = sProperty;
        }
    
    // Accessor for the property "TransportService"
    /**
     * Setter for property TransportService.<p>
    * The shared bus-based TransportService.  Only started if a shared-bus will
    * be used.
    * 
    * @since Coherence 12.1.3
     */
    protected void setTransportService(Cluster.TransportService serviceTransport)
        {
        __m_TransportService = serviceTransport;
        }
    
    // Accessor for the property "UdpBroadcastListener"
    /**
     * Setter for property UdpBroadcastListener.<p>
    * The PacketListener daemon for packets up to the Member's
    * MaximumPacketLength on the Clusters port.
     */
    protected void setUdpBroadcastListener(Cluster.PacketListenerBU daemon)
        {
        __m_UdpBroadcastListener = daemon;
        }
    
    // Accessor for the property "WrapperStreamFactoryList"
    /**
     * Setter for property WrapperStreamFactoryList.<p>
    * List of WrapperStreamFactory objects that affect how Messages sent from /
    * to this Member are written and read.
     */
    protected void setWrapperStreamFactoryList(java.util.List list)
        {
        __m_WrapperStreamFactoryList = list;
        }
    
    // From interface: com.tangosol.net.Cluster
    /**
     * Cluster API method to stop this Member of the cluster.
     */
    public synchronized void shutdown()
        {
        // import Component.Util.Daemon.QueueProcessor.Service;
        // import Component.Util.Queue;
        // import com.tangosol.util.Base;
        // import com.oracle.coherence.common.base.Blocking;
        
        switch (getState())
            {
            case STATE_INITIAL:
                // nothing started -- nothing to shut down
                setState(STATE_EXITED);
                break;
        
            case STATE_STARTING:
            case STATE_JOINING:
                // finish starting so shutdown can proceed
                start();
                // fall through
        
            case STATE_RUNNING:
                try
                    {
                    checkShutdownPermission();
        
                    // shutdown services in reverse order (i.e. shut down system services last)
                    setState(STATE_LEAVING);
                    Cluster.ClusterService svcCluster = getClusterService();
                    for (int i = svcCluster.getServiceCount(); i >= 0; --i)
                        {
                        Service service = svcCluster.getService(i);
                        if (service != null)
                            {
                            service.shutdown();
                            }
                        }
                    }
                finally
                    {
                    stop();
                    }
                // fall through
        
            case STATE_LEAVING:
                // fall through
        
            case STATE_STOPPING:
                while (getState() != STATE_EXITED)
                    {
                    try
                        {
                        Blocking.wait(this);
                        }
                    catch (InterruptedException e)
                        {
                        Thread.currentThread().interrupt();
                        throw Base.ensureRuntimeException(e);
                        }
                    }
                // fall through
        
            case STATE_EXITED:
                break;
        
            default:
                throw new IllegalStateException("Unknown State=" + getState());
            }
        }
    
    // From interface: com.tangosol.net.Cluster
    /**
     * Cluster API method to start this Member of the cluster.
     */
    public synchronized void start()
        {
        // import com.tangosol.util.Base;
        // import com.oracle.coherence.common.base.Blocking;
        
        try
            {
            switch (getState())
                {
                case STATE_INITIAL:
                    setState(STATE_STARTING);
                    try
                        {
                        onStart();
                        }
                    catch (RuntimeException e)
                        {
                        setStartException(e);
                        throw e;
                        }
                    // fall through
        
                case STATE_STARTING:
                case STATE_JOINING:
                    // wait for the Cluster to finish starting
                    while (getState() < STATE_RUNNING)
                        {
                        try
                            {
                            Blocking.wait(this);
                            }
                        catch (InterruptedException e)
                            {
                            Thread.currentThread().interrupt();
                            if (getStartException() == null)
                                {
                                throw Base.ensureRuntimeException(e,
                                    "Interrupted while waiting for Cluster start");
                                }
                            }
        
                        Throwable e = getStartException();
                        if (e != null)
                            {
                            throw Base.ensureRuntimeException(e);
                            }
                        }
                    // fall through
        
                case STATE_RUNNING:
                    break;
        
                case STATE_LEAVING:
                case STATE_STOPPING:
                    throw new IllegalStateException("Cluster is shutting down!");
        
                case STATE_EXITED:
                    throw new IllegalStateException("Cluster is dead!");
        
                default:
                    throw new IllegalStateException("Unknown State=" + getState());
                }
            }
        catch (Throwable e)
            {
            try
                {
                stop(); // cleanup
                }
            catch (Exception x) {}
        
            if (e instanceof Error)
                {
                throw (Error) e;
                }
            throw (RuntimeException) e;
            }
        }
    
    /**
     * Start daemon threads.
     */
    protected void startDaemons()
        {
        // import com.tangosol.net.ClusterDependencies;
        
        ClusterDependencies deps = getDependencies();
        
        if (!getTransportService().isEnabled())
            {
            // only enable the perofrmance oriented packet daemons if we're not using a bus
            getPreferredListener().start();
            if (deps.isSpeakerEnabled())
                {
                getSpeaker().start();
                }
            }
        
        if (deps.getPublisherGroupThreshold() < 100 && getClusterService().getWellKnownAddresses() == null)
            {
            // multicast cluster which is allowed to use MC for non-broadcast transmits, we must start the
            // broadcast listener and join the MC group on startup
            Cluster.PacketListenerBU listenerBU = getUdpBroadcastListener();
            listenerBU.joinGroup();
            listenerBU.start();
            }
        
        getPointListener().start();
        getReceiver()     .start();
        getPublisher()    .start();
        
        if (deps.isIpMonitorEnabled())
            {
            getIpMonitor().start();
            }
        }
    
    /**
     * Start system services, i.e. services on which other user services depend.
     */
    public void startSystemServices()
        {
        // start & wait for this Member to join the cluster
        Cluster.ClusterService svcCluster = getClusterService();
        bindService(svcCluster);
        svcCluster.start();
        
        // optionally start TransportService
        Cluster.TransportService svcTrans = getTransportService();
        if (svcTrans.isEnabled())
            {
            bindService(svcTrans);
            svcTrans.start();
            setMessagePublisher(svcTrans.getMessageHandler());
            }
        
        // NS startup is in ClusterService.onTimerAnnouncing which ensures that the senior can't
        // start a cluster without being able to bind NS on all required IPs
        }
    
    // From interface: com.tangosol.net.Cluster
    /**
     * Cluster API method to hard-stop this Member of the cluster. Use
    * <code>shutdown()</code> for normal cluster termination.
     */
    public synchronized void stop()
        {
        // import Component.Util.Daemon.QueueProcessor.Service;
        // import com.tangosol.internal.tracing.TracingShim$Control as com.tangosol.internal.tracing.TracingShim.Control;
        // import com.tangosol.util.Base;
        // import com.tangosol.util.SimpleResourceRegistry;
        // import com.oracle.coherence.common.base.Disposable;
        // import java.util.Iterator;
        // import java.util.List;
        // import java.util.LinkedList;
        // import java.util.Map;
        // import java.util.Map$Entry as java.util.Map.Entry;
        
        if (getState() != STATE_EXITED)
            {
            checkShutdownPermission();
        
            setState(STATE_STOPPING);
            try
                {
                // unregister the shutdown hook
                Cluster.ShutdownHook hook = (Cluster.ShutdownHook) _findName("ShutdownHook");
                hook.unregister();
        
                // mute this node
                stopDaemons();
                Service svcTransport = getTransportService();
                if (svcTransport.isRunning())
                    {
                    svcTransport.stop();
                    }
        
                // kill all services; reverse order ensures system services are killed last
                Cluster.ClusterService daemonClusterService = getClusterService();
                int             cServices            = daemonClusterService.getServiceCount();
                List            listThreads          = new LinkedList();
                Thread          threadThis           = Thread.currentThread();
                for (int i = cServices - 1; i > 0; --i)
                    {
                    Service service = daemonClusterService.getService(i);
                    if (service != null)
                        {
                        service.stop();
        
                        Thread thread = service.getThread();
                        if (thread != null && thread != threadThis)
                            {
                            listThreads.add(thread);
                            }
                        }
                    }
        
                // allow for all services to cleanup for up to shutdown timeout duration
                long    cMillisMax   = getShutdownTimeout();
                boolean fInterrupted = false;
                for (Iterator iter = listThreads.iterator(); cMillisMax > 0 && iter.hasNext();)
                    {
                    Thread  thread = (Thread) iter.next();
        
                    while (thread.isAlive() && !fInterrupted && cMillisMax > 0)
                        {
                        long lStart = Base.getSafeTimeMillis();
                            
                        try
                            {
                            thread.join(1000L);
                            }
                        catch (InterruptedException e)
                            {
                            fInterrupted = true;
                            }
                        cMillisMax -= (Base.getSafeTimeMillis() - lStart);
                        }
                    }
        
                // stop the ClusterService after waiting for other services have *completed* shutdown;
                // minimally this is important for persistence as we don't want our shared disk peers
                // to detect us as dead before we've unlocked our persistent stores
                // Note: since we ultimately only wait for shutdown timeout duration even this approach is
                // no guarentee, and with persistence you must either use graceful shutdown or kill -9
                Thread threadCluster = daemonClusterService.getThread();
                cMillisMax = 2 * getDependencies().getClusterHeartbeatDelayMillis();
                fInterrupted = false;
                daemonClusterService.stop();
                if (threadCluster != null && threadCluster != threadThis && cMillisMax > 0)
                    {
                    try
                        {
                        threadCluster.join(cMillisMax);
                        }
                    catch (InterruptedException e)
                        {
                        fInterrupted = true;
                        }            
                    }
        
                if (fInterrupted)
                    {
                    threadThis.interrupt();
                    }
        
                getSocketManager().releaseSockets();
        
                // dispose of the registered resources (COH-4268)
                getResourceRegistry().dispose();
                setResourceRegistry(new SimpleResourceRegistry());
                }
            finally
                {
                getSocketManager().releaseSockets();
                com.tangosol.internal.tracing.TracingShim.Control control = getTracingControl();
                if (control != null)
                    {
                    control.close();
                    }
                setState(STATE_EXITED);
                }
            }
        }
    
    /**
     * Stop all daemon threads.
     */
    protected void stopDaemons()
        {
        getPointListener       ().stop();
        getPreferredListener   ().stop();
        // see ClusterService.onExit; getUdpBroadcastListener().stop();
        // see ClusterService.onExit; getTcpBroadcastListener().stop();
        getReceiver            ().stop();
        getPublisher           ().stop();
        getSpeaker             ().stop();
        getIpMonitor           ().stop();
        getGuardian            ().stop();
        }
    
    // From interface: com.tangosol.net.Cluster
    public void suspendService(String sService)
        {
        suspendService(sService, /*fResumeFailover*/ false);
        }
    
    /**
     * Suspend the service with the provided name.
    * 
    * @param fResumeOnFailover  it's always the responsibility of the service
    * coordinator to resume the service operations,
    *     however if the coordinator departs, this flag set to 'true' will
    * ensure the new coordinator 
    *     will complete the suspend/resume protocol
     */
    public void suspendService(String sService, boolean fResumeOnFailover)
        {
        getClusterService().doServiceQueiscence(sService, /*fResume*/ false, fResumeOnFailover);
        }
    
    // Declared at the super level
    public String toString()
        {
        // import com.tangosol.net.ClusterDependencies;
        // import com.tangosol.net.AddressProvider;
        // import com.tangosol.net.InetAddressHelper;
        // import java.net.InetSocketAddress;
        // import java.util.Iterator;
        // import java.util.Set;
        
        if (getState() == STATE_RUNNING)
            {
            StringBuffer        sb           = new StringBuffer();
            ClusterDependencies deps         = getDependencies();
            String              sClusterName = getClusterName();
            int                 nClusterPort = getDependencies().getGroupPort();    
        
            sb.append("Name=")
              .append(sClusterName.length() == 0 ? "n/a" : sClusterName)
              .append(", ClusterPort=").append(nClusterPort)
              .append("\n\n");
        
            AddressProvider providerWka = getDependencies().getWellKnownAddresses();
            if (providerWka == null)
                {
                sb.append("Group{Address=")
                  .append(InetAddressHelper.toString(deps.getGroupAddress()))
                  .append(", TTL=")
                  .append(deps.getGroupTimeToLive())
                  .append('}');        
                }
            else if (providerWka instanceof Set)
                {
                Set setWka = (Set) providerWka;
                sb.append("WellKnownAddressList(");
              
                for (Iterator iterWka = setWka.iterator(); iterWka.hasNext(); )
                    {
                    InetSocketAddress addr = (InetSocketAddress) iterWka.next();
                    sb.append("\n  ").append(InetAddressHelper.toString(addr.getAddress()));
                      
                    int nPort = addr.getPort();
                    if (nPort != nClusterPort)
                        {
                        sb.append(":").append(nPort);
                        }
                    }
            
                sb.append("\n  )");
                }
            else
                {
                sb.append("WellKnownAddressProvider(")
                  .append(providerWka)
                  .append(")");
                }
        
            Cluster.ClusterService service = getClusterService();
            sb.append("\n\n")
              .append(service.getClusterMemberSet())
              .append("\n\n")
              .append(service.getTcpRing())
              .append("\n")
              .append(getIpMonitor())
              .append("\n");
        
            return sb.toString();
            }
        else
            {
            return "Cluster is not running: State=" + getState();
            }
        }
    
    // From interface: com.tangosol.net.Cluster
    /**
     * {@inheritDoc}
     */
    public com.oracle.coherence.common.base.Disposable unregisterResource(String sName)
        {
        // import com.oracle.coherence.common.base.Disposable;
        
        Disposable disposable = (Disposable) getResourceRegistry().
                getResource(Disposable.class, sName);
        
        getResourceRegistry().unregisterResource(Disposable.class, sName);
        
        return disposable;
        }
    
    /**
     * During shutdown, after the "MemberLeft" message is sent, we may not
    * receive any confirmations since other nodes mark as "departed": OTOH, we
    * need to prevent the immediate TCMP shutdown to give it a chance to
    * deliver the message. This method sleeps for the specified amount of time
    * unless it can determine the delivery of all outstanding messages.
     */
    public void waitHeuristicDelivery(int cMillis)
        {
        // import com.oracle.coherence.common.base.Blocking;
        // import Component.Util.Queue;
        
        Cluster.PacketPublisher publisher  = getPublisher();
        Queue           queueSend   = publisher.getQueue();
        Queue           queueResend = publisher.getResendQueue();
        
        // wait up to the specified time for all outgoing messages to clear
        Thread.yield();
        
        for (int i = 0, c = cMillis / 10;
             i < c && !(queueSend.isEmpty() && queueResend.isEmpty());
             ++i)
            {
            try
                {
                Blocking.sleep(10);
                }
            catch (InterruptedException e)
                {
                Thread.currentThread().interrupt();
                break;
                }
            }
        
        if (!queueSend.isEmpty() || !queueResend.isEmpty())
            {
            _trace("Shutdown send queue size=" + queueSend.size() +
                   " resend queue size=" + queueResend.size(), 3);
            }
        }
    
    /**
     * Log a warning indicating that the guardian was improperly disabled for
    * the specified context.
    * 
    * See COH-3090
    * 
    * @param sContext    a string representation of the context that is
    * improperly configured.
    *                                     For example "cluster", "service
    * PartitionedCache"
     */
    public void warnDisabledGuardian(String sContext)
        {
        // import com.tangosol.internal.net.cluster.DefaultServiceFailurePolicy;
        
        _trace("Disabling the service-guardian by setting a timeout of 0 has "
             + "been deprecated. Instead, please configure a "
             + "\"service-failure-policy\" of \"logging\" which will perform "
             + "non-invasive monitoring of Coherence services.\n Configuring "
             + "the " + sContext + " with a \"logging\" policy with a timeout of "
             + DefaultServiceFailurePolicy.DEFAULT_LOGGING_INTERVAL + "ms", 2);
        }

    // ---- class: com.tangosol.coherence.component.net.Cluster$ClusterService
    
    /**
     * ClusterService is the "ring zero" Service with ServiceId=0 providing
     * generic cluster services such as cluster time and cluster membership.
     * 
     * Note: we MUST not change the message types for later releases to allow
     * the discovery part of the protocol be backward compatible to detect the
     * service version incompatibility.
     * 
     * The message range from [33,128] is reserved for usage by the
     * ClusterService component (as well as some historically preserved message
     * numbers).
     * 
     * Currently used MessageTypes:
     * 5     NewMemberAcceptId (removed as of 3.7.1)
     * 6     NewMemberInduct (was NewMemberAcceptIdReply before 3.7.1)
     * 7     NewMemberAnnounce
     * 8     NewMemberAnnounceReply
     * 9     NewMemberAnnounceWait
     * 10   NewMemberRequestId
     * 11   NewMemberRequestIdReject
     * 12   NewMemberRequestIdReply
     * 13   NewMemberRequestIdWait
     * 17   SeniorMemberHeartbeat
     * 33   MemberHeartbeat
     * 34   *unused* (was MemberJoined before 12.2.1)
     * 35   MemberLeaving
     * 36   MemberLeft
     * 37   NewMemberWelcome
     * 38   NewMemberWelcomeAnnounce
     * 39   NewMemberWelcomeRequest
     * 40   SeniorMemberKill
     * 41   SeniorMemberPanic
     * 42   ServiceJoinRequest
     * 43   ServiceJoining   (was "ServiceJoined"  before 3.6)
     * 44   ServiceLeaving
     * 45   ServiceLeft
     * 46   ServiceRegister
     * 47   ServiceRegisterRequest
     * 48   ServiceUpdateResponse
     * 49   ServiceJoined
     * 50   ServiceSecureRequest
     * 51   NewMemberTimestampRequest
     * 52   NewMemberTimestampResponse
     * 53   QuorumRollCall
     * 54   NotifyTcmpTimeout
     * 55   NotifyIpTimeout
     * 56   WitnessRequest
     * 57   ServiceQuiescenceRequest
     */
    @SuppressWarnings({"deprecation", "rawtypes", "unused", "unchecked", "ConstantConditions", "DuplicatedCode", "ForLoopReplaceableByForEach", "IfCanBeSwitch", "RedundantArrayCreation", "RedundantSuppression", "SameParameterValue", "TryFinallyCanBeTryWithResources", "TryWithIdenticalCatches", "UnnecessaryBoxing", "UnnecessaryUnboxing", "UnusedAssignment"})
    public static class ClusterService
            extends    com.tangosol.coherence.component.util.daemon.queueProcessor.service.grid.ClusterService
        {
        // ---- Fields declarations ----
        private static com.tangosol.util.ListMap __mapChildren;
        
        // Static initializer
        static
            {
            __initStatic();
            }
        
        // Default static initializer
        private static void __initStatic()
            {
            // register child classes
            __mapChildren = new com.tangosol.util.ListMap();
            __mapChildren.put("Acknowledgement", Cluster.ClusterService.Acknowledgement.get_CLASS());
            __mapChildren.put("BusEventMessage", Cluster.ClusterService.BusEventMessage.get_CLASS());
            __mapChildren.put("ConfigRequest", Cluster.ClusterService.ConfigRequest.get_CLASS());
            __mapChildren.put("ConfigResponse", Cluster.ClusterService.ConfigResponse.get_CLASS());
            __mapChildren.put("ConfigSync", Cluster.ClusterService.ConfigSync.get_CLASS());
            __mapChildren.put("ConfigUpdate", Cluster.ClusterService.ConfigUpdate.get_CLASS());
            __mapChildren.put("DispatchEvent", Cluster.ClusterService.DispatchEvent.get_CLASS());
            __mapChildren.put("DispatchNotification", Cluster.ClusterService.DispatchNotification.get_CLASS());
            __mapChildren.put("MemberConfigUpdate", Cluster.ClusterService.MemberConfigUpdate.get_CLASS());
            __mapChildren.put("MemberHeartbeat", Cluster.ClusterService.MemberHeartbeat.get_CLASS());
            __mapChildren.put("MemberJoined", Cluster.ClusterService.MemberJoined.get_CLASS());
            __mapChildren.put("MemberLeaving", Cluster.ClusterService.MemberLeaving.get_CLASS());
            __mapChildren.put("MemberLeft", Cluster.ClusterService.MemberLeft.get_CLASS());
            __mapChildren.put("MemberWelcome", Cluster.ClusterService.MemberWelcome.get_CLASS());
            __mapChildren.put("MemberWelcomeRequest", Cluster.ClusterService.MemberWelcomeRequest.get_CLASS());
            __mapChildren.put("MemberWelcomeRequestTask", Cluster.ClusterService.MemberWelcomeRequestTask.get_CLASS());
            __mapChildren.put("NewMemberAnnounce", Cluster.ClusterService.NewMemberAnnounce.get_CLASS());
            __mapChildren.put("NewMemberAnnounceReply", Cluster.ClusterService.NewMemberAnnounceReply.get_CLASS());
            __mapChildren.put("NewMemberAnnounceWait", Cluster.ClusterService.NewMemberAnnounceWait.get_CLASS());
            __mapChildren.put("NewMemberInduct", Cluster.ClusterService.NewMemberInduct.get_CLASS());
            __mapChildren.put("NewMemberRequestId", Cluster.ClusterService.NewMemberRequestId.get_CLASS());
            __mapChildren.put("NewMemberRequestIdReject", Cluster.ClusterService.NewMemberRequestIdReject.get_CLASS());
            __mapChildren.put("NewMemberRequestIdReply", Cluster.ClusterService.NewMemberRequestIdReply.get_CLASS());
            __mapChildren.put("NewMemberRequestIdWait", Cluster.ClusterService.NewMemberRequestIdWait.get_CLASS());
            __mapChildren.put("NewMemberTimestampRequest", Cluster.ClusterService.NewMemberTimestampRequest.get_CLASS());
            __mapChildren.put("NewMemberTimestampResponse", Cluster.ClusterService.NewMemberTimestampResponse.get_CLASS());
            __mapChildren.put("NewMemberWelcome", Cluster.ClusterService.NewMemberWelcome.get_CLASS());
            __mapChildren.put("NewMemberWelcomeAnnounce", Cluster.ClusterService.NewMemberWelcomeAnnounce.get_CLASS());
            __mapChildren.put("NewMemberWelcomeRequest", Cluster.ClusterService.NewMemberWelcomeRequest.get_CLASS());
            __mapChildren.put("NotifyConnectionClose", Cluster.ClusterService.NotifyConnectionClose.get_CLASS());
            __mapChildren.put("NotifyConnectionOpen", Cluster.ClusterService.NotifyConnectionOpen.get_CLASS());
            __mapChildren.put("NotifyIpTimeout", Cluster.ClusterService.NotifyIpTimeout.get_CLASS());
            __mapChildren.put("NotifyMemberJoined", Cluster.ClusterService.NotifyMemberJoined.get_CLASS());
            __mapChildren.put("NotifyMemberLeaving", Cluster.ClusterService.NotifyMemberLeaving.get_CLASS());
            __mapChildren.put("NotifyMemberLeft", Cluster.ClusterService.NotifyMemberLeft.get_CLASS());
            __mapChildren.put("NotifyMessageReceipt", Cluster.ClusterService.NotifyMessageReceipt.get_CLASS());
            __mapChildren.put("NotifyPollClosed", Cluster.ClusterService.NotifyPollClosed.get_CLASS());
            __mapChildren.put("NotifyResponse", Cluster.ClusterService.NotifyResponse.get_CLASS());
            __mapChildren.put("NotifyServiceAnnounced", Cluster.ClusterService.NotifyServiceAnnounced.get_CLASS());
            __mapChildren.put("NotifyServiceJoining", Cluster.ClusterService.NotifyServiceJoining.get_CLASS());
            __mapChildren.put("NotifyServiceLeaving", Cluster.ClusterService.NotifyServiceLeaving.get_CLASS());
            __mapChildren.put("NotifyServiceLeft", Cluster.ClusterService.NotifyServiceLeft.get_CLASS());
            __mapChildren.put("NotifyServiceQuiescence", Cluster.ClusterService.NotifyServiceQuiescence.get_CLASS());
            __mapChildren.put("NotifyShutdown", Cluster.ClusterService.NotifyShutdown.get_CLASS());
            __mapChildren.put("NotifyStartup", Cluster.ClusterService.NotifyStartup.get_CLASS());
            __mapChildren.put("NotifyTcmpTimeout", Cluster.ClusterService.NotifyTcmpTimeout.get_CLASS());
            __mapChildren.put("PingRequest", Cluster.ClusterService.PingRequest.get_CLASS());
            __mapChildren.put("ProtocolContext", Cluster.ClusterService.ProtocolContext.get_CLASS());
            __mapChildren.put("QuorumRollCall", Cluster.ClusterService.QuorumRollCall.get_CLASS());
            __mapChildren.put("Response", Cluster.ClusterService.Response.get_CLASS());
            __mapChildren.put("SeniorMemberHeartbeat", Cluster.ClusterService.SeniorMemberHeartbeat.get_CLASS());
            __mapChildren.put("SeniorMemberKill", Cluster.ClusterService.SeniorMemberKill.get_CLASS());
            __mapChildren.put("SeniorMemberPanic", Cluster.ClusterService.SeniorMemberPanic.get_CLASS());
            __mapChildren.put("ServiceJoined", Cluster.ClusterService.ServiceJoined.get_CLASS());
            __mapChildren.put("ServiceJoining", Cluster.ClusterService.ServiceJoining.get_CLASS());
            __mapChildren.put("ServiceJoinRequest", Cluster.ClusterService.ServiceJoinRequest.get_CLASS());
            __mapChildren.put("ServiceLeaving", Cluster.ClusterService.ServiceLeaving.get_CLASS());
            __mapChildren.put("ServiceLeft", Cluster.ClusterService.ServiceLeft.get_CLASS());
            __mapChildren.put("ServiceQuiescenceRequest", Cluster.ClusterService.ServiceQuiescenceRequest.get_CLASS());
            __mapChildren.put("ServiceRegister", Cluster.ClusterService.ServiceRegister.get_CLASS());
            __mapChildren.put("ServiceRegisterRequest", Cluster.ClusterService.ServiceRegisterRequest.get_CLASS());
            __mapChildren.put("ServiceUpdateResponse", Cluster.ClusterService.ServiceUpdateResponse.get_CLASS());
            __mapChildren.put("WitnessRequest", Cluster.ClusterService.WitnessRequest.get_CLASS());
            __mapChildren.put("WrapperGuardable", Cluster.ClusterService.WrapperGuardable.get_CLASS());
            }
        
        // Default constructor
        public ClusterService()
            {
            this(null, null, true);
            }
        
        // Initializing constructor
        public ClusterService(String sName, com.tangosol.coherence.Component compParent, boolean fInit)
            {
            super(sName, compParent, false);
            
            if (fInit)
                {
                __init();
                }
            }
        
        // Main initializer
        public void __init()
            {
            // private initialization
            __initPrivate();
            
            // state initialization: public and protected properties
            try
                {
                setAcceptingClients(false);
                setAcceptingOthers(true);
                setBroadcastRepeatMillis(256);
                setBroadcastTimeoutMillis(32768);
                setDaemonState(0);
                setDefaultGuardRecovery(0.9F);
                setDefaultGuardTimeout(60000L);
                setMessageClassMap(new java.util.HashMap());
                setNotifier(new com.oracle.coherence.common.base.SingleWaiterMultiNotifier());
                setOldestPendingRequestSUIDCounter(new java.util.concurrent.atomic.AtomicLong());
                setResourceRegistry(new com.tangosol.util.SimpleResourceRegistry());
                setSerializerMap(new java.util.WeakHashMap());
                setServiceId(0);
                setServiceName("Cluster");
                setSuspendPollLimit(new java.util.concurrent.atomic.AtomicLong());
                setTimestampMaxVariance(10);
                }
            catch (java.lang.Exception e)
                {
                // re-throw as a runtime exception
                throw new com.tangosol.util.WrapperException(e);
                }
            
            // containment initialization: children
            _addChild(new Cluster.ClusterService.DaemonPool("DaemonPool", this, true), "DaemonPool");
            _addChild(new Cluster.ClusterService.EventDispatcher("EventDispatcher", this, true), "EventDispatcher");
            _addChild(new Cluster.ClusterService.Guard("Guard", this, true), "Guard");
            _addChild(new com.tangosol.coherence.component.util.daemon.queueProcessor.service.Grid.MemberConfigListener("MemberConfigListener", this, true), "MemberConfigListener");
            _addChild(new Cluster.ClusterService.PollArray("PollArray", this, true), "PollArray");
            _addChild(new Cluster.ClusterService.QuorumControl("QuorumControl", this, true), "QuorumControl");
            _addChild(new com.tangosol.coherence.component.util.daemon.queueProcessor.service.Grid.ReceiveQueue("ReceiveQueue", this, true), "ReceiveQueue");
            _addChild(new Cluster.ClusterService.ServiceConfig("ServiceConfig", this, true), "ServiceConfig");
            _addChild(new Cluster.ClusterService.TcpRing("TcpRing", this, true), "TcpRing");
            
            // signal the end of the initialization
            set_Constructed(true);
            }
        
        // Private initializer
        protected void __initPrivate()
            {
            
            super.__initPrivate();
            }
        
        //++ getter for static property _Instance
        /**
         * Getter for property _Instance.<p>
        * Auto generated
         */
        public static com.tangosol.coherence.Component get_Instance()
            {
            return new com.tangosol.coherence.component.net.Cluster.ClusterService();
            }
        
        //++ getter for static property _CLASS
        /**
         * Getter for property _CLASS.<p>
        * Property with auto-generated accessor that returns the Class object
        * for a given component.
         */
        public static Class get_CLASS()
            {
            Class clz;
            try
                {
                clz = Class.forName("com.tangosol.coherence/component/net/Cluster$ClusterService".replace('/', '.'));
                }
            catch (ClassNotFoundException e)
                {
                throw new NoClassDefFoundError(e.getMessage());
                }
            return clz;
            }
        
        //++ getter for autogen property _Module
        /**
         * This is an auto-generated method that returns the global [design
        * time] parent component.
        * 
        * Note: the class generator will ignore any custom implementation for
        * this behavior.
         */
        private com.tangosol.coherence.Component get_Module()
            {
            return this.get_Parent();
            }
        
        //++ getter for autogen property _ChildClasses
        /**
         * This is an auto-generated method that returns the map of design time
        * [static] children.
        * 
        * Note: the class generator will ignore any custom implementation for
        * this behavior.
         */
        protected java.util.Map get_ChildClasses()
            {
            return __mapChildren;
            }
        
        /**
         * Attempt to become discoverable.
         */
        protected void ensureBroadcastDiscovery()
            {
            // import Component.Util.Daemon.QueueProcessor.PacketProcessor.PacketListener;
            
            Cluster            cluster    = (Cluster) get_Module();
            Cluster.NameServiceBridge nsClient   = cluster.getNameServiceBridge();
            PacketListener     listenerBT = cluster.getTcpBroadcastListener();
            Cluster.PacketListenerBU  listenerBU = cluster.getUdpBroadcastListener();
            
            if (nsClient.isForeignBroadcastBound())
                {
                // in case we've gone through resetBroadcastCounter we just re-join here
                if (getWellKnownAddresses() == null)
                    {
                    listenerBU.joinGroup();
                    listenerBU.tryStart();
                    }
                }
            else if (listenerBT.isStarted() || listenerBT.tryStart())
                {
                // once we've bound to the TCP port we don't need the nsClient as we will be able to bind the NS
                if (nsClient.isRunning())
                    {
                    nsClient.shutdown();
                    }
            
                // machine discovery node always starts BU but only joins the MC group if it is configured to use MC itself
                // and only because we believe we may be forming a cluster
                if (getWellKnownAddresses() == null)
                    {
                    listenerBU.joinGroup();
                    }
                
                listenerBU.tryStart();
                }
            else if (nsClient.tryForeignBind()) // another member or cluster holds the cluster port
                {
                // this node is not the machine discovery node, but it is trying to become the machine senior for its cluster and
                // as such it needs to hear MC broadcasts and thus must start BU and join MC before becoming senior, it is because
                // of this that the follwing if block has its condition in the revers order as compared to the above
                if (getWellKnownAddresses() == null)
                    {
                    listenerBU.joinGroup();
                    listenerBU.tryStart();
                    }
                }
            // else; we failed to setup the bridge, see tryForeignBind
            }
        
        // Declared at the super level
        /**
         * Ensure that this member has made the cluster discoverable via the NS,
        * this means that it either runs the NS on the cluster port or has
        * registered with a foreign NS so that traffic for this cluster can be
        * redirected to this node.
        * 
        * @return true if this member has made the cluster discoverable via the
        * NS
         */
        public boolean ensureDiscovery()
            {
            // import Component.Util.Daemon.QueueProcessor.PacketProcessor.PacketListener;
            // import com.tangosol.net.TcpDatagramSocketProvider;
            
            Cluster            cluster    = (Cluster) get_Module();
            Cluster.NameService       ns         = cluster.getNameService();
            Cluster.NameServiceBridge nsClient   = cluster.getNameServiceBridge();
            Cluster.PacketListenerBT  listenerBT = cluster.getTcpBroadcastListener();
            
            if ((listenerBT.isStarted() && ns.isStarted()) || nsClient.isFullyBound()) // common case for machine seniors
                {
                return true;
                }
            else if (nsClient.isForeignBroadcastBound()) // partially bound; we've just joined the cluster
                {
                // if we are the cluster discovery node we must run the NS
                if (!ns.isStarted())
                    {
                    ns.start();
                    }
            
                if (nsClient.tryForeignBind()) // complete full foreign binding
                    {
                    return true;
                    }
                }
            else // no NS bindings yet
                {
                // post join only the machine senior tries to become discoverable, and they do so by first ensuring they can
                // bind to the TCP port and only after do they try UDP as the UDP binding is sharable REUSEADDR=true
            
                // it is possible that a junior joined the group already being discoverable by winning the race to bind the
                // broadcast port on starup.  This is unlikely as the juniors bind attempt is delayed.  If the junior does
                // hold the binding it can't drop it (listeners aren't restartable) and thus it must eventually ensure just
                // as if it was a machine senior
            
                Cluster.PacketListenerBU listenerBU = cluster.getUdpBroadcastListener();
                if (getServiceMemberSet().getOldestLocalMember() == getThisMember() && !listenerBT.isStarted() && !listenerBT.tryStart())
                    {
                    // we didn't get the TCP cluster port, we still need to be discoverable, so start the NS on the member port and do
                    // and try to do a foreign registration in case the holder is another cluster
            
                    if (!ns.isStarted())
                        {
                        ns.start();
                        }
            
                    return nsClient.tryForeignBind();
                    }
                else if (listenerBT.isStarted() &&
                        (listenerBU.getUdpSocket().getDatagramSocketProvider().isSecure() || listenerBU.isStarted() || listenerBU.tryStart()))
                    {
                    // Note: BU SSL tryStart will always fail as we intentionally don't support MC in such a configuration as it is insecure even to listen on
                    //       Because SSL cluster do not support shared ports we can skip listening and move directly to starting the NS
            
                    // we hold the cluster TCP broadcast port so we must also run the NS and listen on the same port, even if we aren't the machine senior
                    if (!ns.isStarted())
                        {
                        ns.start();
                        }
            
                    if (ns.tryClusterBind())
                        {
                        nsClient.shutdown(); // in case it was started on a previous attempt
                        return true;
                        }
                    }
                // else; common case of machine juniors
                }
            
            return false;
            }
        
        public void ensureMulticastDiscovery()
            {
            // import Component.Net.MemberSet.ActualMemberSet.ServiceMemberSet;
            // import java.util.Iterator;
            
            // senior and off box runner up need to listen on MC
            ServiceMemberSet setMembers   = getServiceMemberSet();
            Member           memberSenior = setMembers.getOldestMember();
            Member           memberThis   = getThisMember();
            
            Cluster.PacketListenerBU listenerBU = ((Cluster) get_Module()).getUdpBroadcastListener();
            if (!listenerBU.isInGroup())
                {
                if (memberThis != memberSenior)
                    {
                    // find runner up which is on a different box (unit of failure) then senior
                    // if there are non then the runner up that is collocated
                    boolean fThisCollocated = memberThis.getMachineId() == memberSenior.getMachineId();        
                    for (Iterator iter = setMembers.iterator(); iter.hasNext(); )
                        {
                        Member memberNext = (Member) iter.next();
                        if (memberNext != memberSenior && memberNext != memberThis)
                            {
                            boolean fNextCollocated = memberNext.getMachineId() == memberSenior.getMachineId();
                            boolean fNextOlder      = setMembers.compareSeniority(memberNext, memberThis) < 0;
            
                            if ((fThisCollocated && (!fNextCollocated || fNextOlder)) || // I'm collocated any non-collocated node or older node is better then me
                                (!fNextCollocated && fNextOlder))                        // any non-collocated older node is also better
                                {                
                                // I'm on the same box as the senior, as soon as we see any member off box it is
                                // by definition better then me, it will select itself and join the group
                                return;
                                }
                            }
                        }
                    }
            
                listenerBU.joinGroup();
                if (!listenerBU.isStarted())
                    {
                    listenerBU.start();
                    }
                }
            // we don't both to consider if we should ever leave the group, the only place where we would would be when a single machine cluster grew to be
            // multi-machine, we'd have three members in the group.  Note that the "extra" member would be on the same machine as the senior and thus there
            // would be no additional network traffic, also as soon as the senior died then that "extra" node would need to rejoin the group anyway, so it
            // just doesn't appear necessary to maintain logic for leaving the group.  Note that leaving the group wouldn't allow us to terminate the
            // non-restartable listener and so there would be really no savings beyond the minimal packet processing overhead.
            }
        
        // Declared at the super level
        public String getMemberStatsDescription(Member member)
            {
            // import Component.Net.MemberSet.ActualMemberSet.ServiceMemberSet;
            // import Component.Net.MessageHandler$Connection as MessageHandler.Connection;
            // import com.tangosol.util.Base;
            // import com.oracle.coherence.common.net.exabus.EndPoint;
            
            String            s   = super.getMemberStatsDescription(member);
            Cluster.TransportService svc = ((Cluster) get_Module()).getTransportService();
            if (svc.isStarted())
                {
                // we also use the transport service, get connection stats as well
                ServiceMemberSet setMember = svc.getServiceMemberSet();
                if (setMember != null)
                    {
                    EndPoint peer = setMember.getServiceEndPoint(member.getId());
                    if (peer != null)
                        {
                        MessageHandler.Connection connection = (MessageHandler.Connection) svc.getMessageHandler().getConnectionMap().get(peer);
                        if (connection != null)
                            {
                            s += ", " + connection;
                            }
                        }
                    }
                // else; TransportService hasn't finished joining
                }
            
            return s;
            }
        
        // Declared at the super level
        /**
         * Check whether or not there is sufficient data to assume the member's
        * departure.
        * 
        * @return true if there is no data that contradicts the assumption;
        *               false if there is data that suggests that the member is
        * alive
         */
        public boolean isHeuristicallyDead(Member member)
            {
            // import Component.Net.MemberSet.ActualMemberSet.ServiceMemberSet;
            // import Component.Net.MessageHandler$Connection as MessageHandler.Connection;
            // import com.tangosol.util.Base;
            // import com.oracle.coherence.common.net.exabus.EndPoint;
            
            boolean fDead = super.isHeuristicallyDead(member);
            
            if (!fDead)
                {
                Cluster.TransportService svc = ((Cluster) get_Module()).getTransportService();
                if (svc.isStarted())
                    {
                    // we also use the transport service, verify connection health as well
                    EndPoint peer = svc.getServiceMemberSet().getServiceEndPoint(member.getId());
                    if (peer != null)
                        {
                        MessageHandler.Connection connection = (MessageHandler.Connection) svc.getMessageHandler().getConnectionMap().get(peer);
                        if (connection != null)
                            {
                            long ldtTimeout = connection.getSuspectTimeoutTimestamp();
                            if (ldtTimeout != 0 && Base.getSafeTimeMillis() > ldtTimeout - (getDeliveryTimeoutMillis() - getHeuristicTimeoutMillis()))
                                {
                                // the heuristic timeout has passed 
                                return true;
                                }
                            // else; the TransportService isn't currently having an issue with this member
                            }
                        }
                    }
                }
            
            return fDead;
            }
        
        // Declared at the super level
        /**
         * Check whether or not there is sufficient data to assume the member's
        * departure.
        * 
        * @return true if there has been a heuristic timeout within the last
        * packet delivery timeout window.
         */
        public boolean isRecentlyHeuristicallyDead(Member member)
            {
            // import Component.Net.MemberSet.ActualMemberSet.ServiceMemberSet;
            // import Component.Net.MessageHandler$Connection as MessageHandler.Connection;
            // import com.tangosol.util.Base;
            // import com.oracle.coherence.common.net.exabus.EndPoint;
            
            boolean fDead = super.isRecentlyHeuristicallyDead(member);
            
            if (!fDead)
                {
                Cluster.TransportService svc = ((Cluster) get_Module()).getTransportService();
                if (svc.isStarted())
                    {
                    // we also use the transport service, verify connection health as well
                    EndPoint peer = svc.getServiceMemberSet().getServiceEndPoint(member.getId());
                    if (peer != null)
                        {
                        MessageHandler.Connection connection = (MessageHandler.Connection) svc.getMessageHandler().getConnectionMap().get(peer);
                        if (connection != null)
                            {
                            return connection.getLastHeuristicDeathTimestamp() >= Base.getSafeTimeMillis() - getDeliveryTimeoutMillis();
                            }
                        }
                    }
                }
            
            return fDead;
            }
        
        // Declared at the super level
        /**
         * This event occurs when an exception is thrown from onEnter, onWait,
        * onNotify and onExit.
        * 
        * If the exception should terminate the daemon, call stop(). The
        * default implementation prints debugging information and terminates
        * the daemon.
        * 
        * @param e  the Throwable object (a RuntimeException or an Error)
        * 
        * @throws RuntimeException may be thrown; will terminate the daemon
        * @throws Error may be thrown; will terminate the daemon
         */
        public void onException(Throwable e)
            {
            Cluster cluster = (Cluster) get_Module();
            try
                {
                if (cluster.getState() < Cluster.STATE_RUNNING)
                    {
                    cluster.setStartException(e);
                    }
            
                super.onException(e);
                }
            finally
                {
                if (cluster.getState() < Cluster.STATE_STOPPING)
                    {
                    _trace(get_Name() + ": stopping cluster.", 1);
                    cluster.stop();
                    }
                }
            }
        
        // Declared at the super level
        /**
         * Event notification called right before the daemon thread terminates.
        * This method is guaranteed to be called only once and on the daemon's
        * thread.
         */
        protected void onExit()
            {
            Cluster cluster = (Cluster) getCluster();
            
            // stop discovery daemons in case of concurrent start (by the ClusterService thread) during cluster shutdown
            // these are treated specially as unlike the other daemons they can be started after cluster startup
            cluster.getTcpBroadcastListener().stop();
            cluster.getUdpBroadcastListener().stop();
            cluster.getNameService().stop();
            cluster.getNameServiceBridge().stop();
            
            super.onExit();
            }
        
        // Declared at the super level
        /**
         * Called on the ClusterService thread to signal that the specified
        * member has left the cluster.
        * 
        * @param member  the member that has left the cluster
         */
        protected void onMemberLeft(Member member)
            {
            // import com.oracle.coherence.common.net.InetAddresses;
            
            super.onMemberLeft(member);
            
            // ensure discovery "services"
            if (member != getThisMember())
                {
                if (InetAddresses.isLocalAddress(member.getAddress()))
                    {
                    ensureDiscovery();
                    }
            
                if (getWellKnownAddresses() == null)
                    {
                    ensureMulticastDiscovery();
                    }
                }
            }
        
        // Declared at the super level
        /**
         * This event is invoked when a Member that is running in a cluster
        * (State=JOINED) must immediately stop because a cluster membership
        * integrity error has been detected.
        * 
        * This event must stop the ClusterService on this Member.
        * 
        * @see ClusterService$SeniorMemberHeartbeat#onReceived
        * @see ClusterService$SeniorMemberKill#onReceived
         */
        public void onStopRunning()
            {
            // import com.oracle.coherence.common.util.Threads;
            
            // to get here something bad happened
            _trace("Exiting cluster\n" + ((Cluster) get_Module()).getTransportService().getMessageHandler()
                + "\n" + Threads.getThreadDump(), 2);
            
            super.onStopRunning();
            }
        
        // Declared at the super level
        /**
         * This event occurs when the member is in its announcing stage and the
        * timer fires.
         */
        public void onTimerAnnouncing()
            {
            // We only need to hear broadcasts if we are going to start the cluster, in which case we need to have
            // been able to hear them for awhile in case we're WKA and the cluster needs to find us. We delay
            // starting the broadcast listeners during join to try to let existing machine senior grab it.
            if (getBroadcastCounter() >= getBroadcastLimit() / ANNOUNCE_BIND_THRESHOLD)
                {
                ensureBroadcastDiscovery();
                }
            
            super.onTimerAnnouncing();
            }
        
        // Declared at the super level
        /**
         * This event occurs when the member is part of a running cluster and
        * the timer fires.
         */
        public void onTimerRunning()
            {
            // though rare it is possible that the cluster port is freed after the other member has left the cluster
            // i.e. via packet-timeout, in which case it may not be free during onMemberLeft
            ensureDiscovery();
            
            super.onTimerRunning();
            }
        
        // Declared at the super level
        /**
         * Reset the BroadcastCounter and log the reason if the node is already
        * in the interminable state
        * 
        * @since Coherence 3.1.1
         */
        public void resetBroadcastCounter(String sReason, com.tangosol.coherence.component.net.message.DiscoveryMessage msg)
            {
            super.resetBroadcastCounter(sReason, msg);
            
            Cluster cluster = (Cluster) get_Module();
            if (cluster.getDependencies().getPublisherGroupThreshold() >= 100)
                {
                Cluster.PacketListenerBU listenerBU = cluster.getUdpBroadcastListener();
                if (listenerBU.isInGroup())
                    {
                    listenerBU.leaveGroup();
                    }
                }
            }
        
        // Declared at the super level
        /**
         * Setter for property State.<p>
        * State of the ClusterService; one of:
        *     STATE_ANNOUNCE
        *     STATE_JOINING
        *     STATE_JOINED
         */
        public synchronized void setState(int nState)
            {
            // import Component.Application.Console.Coherence;
            // import Component.Application.Console.Coherence$Logger as com.tangosol.coherence.component.application.console.Coherence.Logger;
            // import com.tangosol.license.LicensedObject$LicenseData as com.tangosol.license.LicensedObject.LicenseData;
            // import java.util.Random;
            
            super.setState(nState);
            
            if (nState == STATE_JOINED)
                {
                // add CPU and license type information to the Coherence logger thread
                // name; this call was purposely placed here to obfuscate the source
                // of this information
                Coherence singleton = (Coherence) Coherence.get_Instance();
                com.tangosol.coherence.component.application.console.Coherence.Logger    logger    = singleton.getLogger();
            
                if (logger != null && logger.getHashCode() == System.identityHashCode(singleton))
                    {
                    int      nType = 0;
                    int      cCpus = 0;
                    Object[] aoLic = (Object[]) get_Feed();
                
                    for (int i = 0, c = aoLic.length; i < c; i++)
                        {
                        nType  = ((com.tangosol.license.LicensedObject.LicenseData) aoLic[i]).nLicenseType;
                        cCpus += ((com.tangosol.license.LicensedObject.LicenseData) aoLic[i]).cCpus;
                        }
            
                    logger.setHashCode((new Random().nextInt(77)
                                        + Math.max(0, Math.min(cCpus, 76)) * 77
                                        + Math.max(0, nType) * 5929) * 777);
                    }
                }
            }
        
        // Declared at the super level
        /**
         * Setter for property StatsCpu.<p>
        * Statistics: total time spent while processing messages.
         */
        public void setStatsCpu(long cMillis)
            {
            super.setStatsCpu(cMillis);
            }
        
        // Declared at the super level
        /**
         * Stop the Controllable.
         */
        public synchronized void shutdown()
            {
            super.shutdown();
            }

        // ---- class: com.tangosol.coherence.component.net.Cluster$ClusterService$Acknowledgement
        
        /**
         * This Message is meant to be used as a simple acknowledgement to a
         * RequestMessage requiring an poll response.
         */
        @SuppressWarnings({"deprecation", "rawtypes", "unused", "unchecked", "ConstantConditions", "DuplicatedCode", "ForLoopReplaceableByForEach", "IfCanBeSwitch", "RedundantArrayCreation", "RedundantSuppression", "SameParameterValue", "TryFinallyCanBeTryWithResources", "TryWithIdenticalCatches", "UnnecessaryBoxing", "UnnecessaryUnboxing", "UnusedAssignment"})
        public static class Acknowledgement
                extends    com.tangosol.coherence.component.util.daemon.queueProcessor.service.Grid.Acknowledgement
            {
            // ---- Fields declarations ----
            
            // Default constructor
            public Acknowledgement()
                {
                this(null, null, true);
                }
            
            // Initializing constructor
            public Acknowledgement(String sName, com.tangosol.coherence.Component compParent, boolean fInit)
                {
                super(sName, compParent, false);
                
                if (fInit)
                    {
                    __init();
                    }
                }
            
            // Main initializer
            public void __init()
                {
                // private initialization
                __initPrivate();
                
                // state initialization: public and protected properties
                try
                    {
                    setMessageType(1);
                    }
                catch (java.lang.Exception e)
                    {
                    // re-throw as a runtime exception
                    throw new com.tangosol.util.WrapperException(e);
                    }
                
                // signal the end of the initialization
                set_Constructed(true);
                }
            
            // Private initializer
            protected void __initPrivate()
                {
                
                super.__initPrivate();
                }
            
            //++ getter for static property _Instance
            /**
             * Getter for property _Instance.<p>
            * Auto generated
             */
            public static com.tangosol.coherence.Component get_Instance()
                {
                return new com.tangosol.coherence.component.net.Cluster.ClusterService.Acknowledgement();
                }
            
            //++ getter for static property _CLASS
            /**
             * Getter for property _CLASS.<p>
            * Property with auto-generated accessor that returns the Class
            * object for a given component.
             */
            public static Class get_CLASS()
                {
                Class clz;
                try
                    {
                    clz = Class.forName("com.tangosol.coherence/component/net/Cluster$ClusterService$Acknowledgement".replace('/', '.'));
                    }
                catch (ClassNotFoundException e)
                    {
                    throw new NoClassDefFoundError(e.getMessage());
                    }
                return clz;
                }
            
            //++ getter for autogen property _Module
            /**
             * This is an auto-generated method that returns the global [design
            * time] parent component.
            * 
            * Note: the class generator will ignore any custom implementation
            * for this behavior.
             */
            private com.tangosol.coherence.Component get_Module()
                {
                return this.get_Parent().get_Parent();
                }
            }

        // ---- class: com.tangosol.coherence.component.net.Cluster$ClusterService$BusEventMessage
        
        /**
         * BusEventMessage is an internal message used to pass Exabus events
         * onto the corresponding service thread.
         * 
         * Attributes:
         *     MessageHandler
         *     Event
         */
        @SuppressWarnings({"deprecation", "rawtypes", "unused", "unchecked", "ConstantConditions", "DuplicatedCode", "ForLoopReplaceableByForEach", "IfCanBeSwitch", "RedundantArrayCreation", "RedundantSuppression", "SameParameterValue", "TryFinallyCanBeTryWithResources", "TryWithIdenticalCatches", "UnnecessaryBoxing", "UnnecessaryUnboxing", "UnusedAssignment"})
        public static class BusEventMessage
                extends    com.tangosol.coherence.component.util.daemon.queueProcessor.service.Grid.BusEventMessage
            {
            // ---- Fields declarations ----
            
            // Default constructor
            public BusEventMessage()
                {
                this(null, null, true);
                }
            
            // Initializing constructor
            public BusEventMessage(String sName, com.tangosol.coherence.Component compParent, boolean fInit)
                {
                super(sName, compParent, false);
                
                if (fInit)
                    {
                    __init();
                    }
                }
            
            // Main initializer
            public void __init()
                {
                // private initialization
                __initPrivate();
                
                // state initialization: public and protected properties
                try
                    {
                    setMessageType(-21);
                    }
                catch (java.lang.Exception e)
                    {
                    // re-throw as a runtime exception
                    throw new com.tangosol.util.WrapperException(e);
                    }
                
                // signal the end of the initialization
                set_Constructed(true);
                }
            
            // Private initializer
            protected void __initPrivate()
                {
                
                super.__initPrivate();
                }
            
            //++ getter for static property _Instance
            /**
             * Getter for property _Instance.<p>
            * Auto generated
             */
            public static com.tangosol.coherence.Component get_Instance()
                {
                return new com.tangosol.coherence.component.net.Cluster.ClusterService.BusEventMessage();
                }
            
            //++ getter for static property _CLASS
            /**
             * Getter for property _CLASS.<p>
            * Property with auto-generated accessor that returns the Class
            * object for a given component.
             */
            public static Class get_CLASS()
                {
                Class clz;
                try
                    {
                    clz = Class.forName("com.tangosol.coherence/component/net/Cluster$ClusterService$BusEventMessage".replace('/', '.'));
                    }
                catch (ClassNotFoundException e)
                    {
                    throw new NoClassDefFoundError(e.getMessage());
                    }
                return clz;
                }
            
            //++ getter for autogen property _Module
            /**
             * This is an auto-generated method that returns the global [design
            * time] parent component.
            * 
            * Note: the class generator will ignore any custom implementation
            * for this behavior.
             */
            private com.tangosol.coherence.Component get_Module()
                {
                return this.get_Parent().get_Parent();
                }
            }

        // ---- class: com.tangosol.coherence.component.net.Cluster$ClusterService$ConfigRequest
        
        /**
         * This RequestMessage is a poll (where Poll is an instance child) that
         * all members send to the config coordinator Member to request that a
         * ConfigUpdate be sent.
         * 
         * Attributes:
         *     Key
         *     Value
         *     Remove
         */
        @SuppressWarnings({"deprecation", "rawtypes", "unused", "unchecked", "ConstantConditions", "DuplicatedCode", "ForLoopReplaceableByForEach", "IfCanBeSwitch", "RedundantArrayCreation", "RedundantSuppression", "SameParameterValue", "TryFinallyCanBeTryWithResources", "TryWithIdenticalCatches", "UnnecessaryBoxing", "UnnecessaryUnboxing", "UnusedAssignment"})
        public static class ConfigRequest
                extends    com.tangosol.coherence.component.util.daemon.queueProcessor.service.Grid.ConfigRequest
            {
            // ---- Fields declarations ----
            
            // Default constructor
            public ConfigRequest()
                {
                this(null, null, true);
                }
            
            // Initializing constructor
            public ConfigRequest(String sName, com.tangosol.coherence.Component compParent, boolean fInit)
                {
                super(sName, compParent, false);
                
                if (fInit)
                    {
                    __init();
                    }
                }
            
            // Main initializer
            public void __init()
                {
                // private initialization
                __initPrivate();
                
                // state initialization: public and protected properties
                try
                    {
                    setMessageType(-15);
                    }
                catch (java.lang.Exception e)
                    {
                    // re-throw as a runtime exception
                    throw new com.tangosol.util.WrapperException(e);
                    }
                
                // containment initialization: children
                _addChild(new com.tangosol.coherence.component.util.daemon.queueProcessor.service.Grid.ConfigRequest.Poll("Poll", this, true), "Poll");
                
                // signal the end of the initialization
                set_Constructed(true);
                }
            
            // Private initializer
            protected void __initPrivate()
                {
                
                super.__initPrivate();
                }
            
            //++ getter for static property _Instance
            /**
             * Getter for property _Instance.<p>
            * Auto generated
             */
            public static com.tangosol.coherence.Component get_Instance()
                {
                return new com.tangosol.coherence.component.net.Cluster.ClusterService.ConfigRequest();
                }
            
            //++ getter for static property _CLASS
            /**
             * Getter for property _CLASS.<p>
            * Property with auto-generated accessor that returns the Class
            * object for a given component.
             */
            public static Class get_CLASS()
                {
                Class clz;
                try
                    {
                    clz = Class.forName("com.tangosol.coherence/component/net/Cluster$ClusterService$ConfigRequest".replace('/', '.'));
                    }
                catch (ClassNotFoundException e)
                    {
                    throw new NoClassDefFoundError(e.getMessage());
                    }
                return clz;
                }
            
            //++ getter for autogen property _Module
            /**
             * This is an auto-generated method that returns the global [design
            * time] parent component.
            * 
            * Note: the class generator will ignore any custom implementation
            * for this behavior.
             */
            private com.tangosol.coherence.Component get_Module()
                {
                return this.get_Parent().get_Parent();
                }
            }

        // ---- class: com.tangosol.coherence.component.net.Cluster$ClusterService$ConfigResponse
        
        /**
         * This Message is sent by the config coordinator Member as a reponse
         * to the ConfigRequest (update or remove) poll. It serves as a proof
         * that the corresponding ConfigUpdate has been sent to all service
         * members.
         * 
         * Attributes:
         *     Acknowledged
         */
        @SuppressWarnings({"deprecation", "rawtypes", "unused", "unchecked", "ConstantConditions", "DuplicatedCode", "ForLoopReplaceableByForEach", "IfCanBeSwitch", "RedundantArrayCreation", "RedundantSuppression", "SameParameterValue", "TryFinallyCanBeTryWithResources", "TryWithIdenticalCatches", "UnnecessaryBoxing", "UnnecessaryUnboxing", "UnusedAssignment"})
        public static class ConfigResponse
                extends    com.tangosol.coherence.component.util.daemon.queueProcessor.service.Grid.ConfigResponse
            {
            // ---- Fields declarations ----
            
            // Default constructor
            public ConfigResponse()
                {
                this(null, null, true);
                }
            
            // Initializing constructor
            public ConfigResponse(String sName, com.tangosol.coherence.Component compParent, boolean fInit)
                {
                super(sName, compParent, false);
                
                if (fInit)
                    {
                    __init();
                    }
                }
            
            // Main initializer
            public void __init()
                {
                // private initialization
                __initPrivate();
                
                // state initialization: public and protected properties
                try
                    {
                    setMessageType(-16);
                    }
                catch (java.lang.Exception e)
                    {
                    // re-throw as a runtime exception
                    throw new com.tangosol.util.WrapperException(e);
                    }
                
                // signal the end of the initialization
                set_Constructed(true);
                }
            
            // Private initializer
            protected void __initPrivate()
                {
                
                super.__initPrivate();
                }
            
            //++ getter for static property _Instance
            /**
             * Getter for property _Instance.<p>
            * Auto generated
             */
            public static com.tangosol.coherence.Component get_Instance()
                {
                return new com.tangosol.coherence.component.net.Cluster.ClusterService.ConfigResponse();
                }
            
            //++ getter for static property _CLASS
            /**
             * Getter for property _CLASS.<p>
            * Property with auto-generated accessor that returns the Class
            * object for a given component.
             */
            public static Class get_CLASS()
                {
                Class clz;
                try
                    {
                    clz = Class.forName("com.tangosol.coherence/component/net/Cluster$ClusterService$ConfigResponse".replace('/', '.'));
                    }
                catch (ClassNotFoundException e)
                    {
                    throw new NoClassDefFoundError(e.getMessage());
                    }
                return clz;
                }
            
            //++ getter for autogen property _Module
            /**
             * This is an auto-generated method that returns the global [design
            * time] parent component.
            * 
            * Note: the class generator will ignore any custom implementation
            * for this behavior.
             */
            private com.tangosol.coherence.Component get_Module()
                {
                return this.get_Parent().get_Parent();
                }
            }

        // ---- class: com.tangosol.coherence.component.net.Cluster$ClusterService$ConfigSync
        
        /**
         * This Message is sent by the config coordinator Member to a new
         * Service Member to provide the current ConfigMap contents, and also
         * to update all Members when a new Member becomes the config
         * coordinator.
         * 
         * Attributes:
         *     SyncMap
         */
        @SuppressWarnings({"deprecation", "rawtypes", "unused", "unchecked", "ConstantConditions", "DuplicatedCode", "ForLoopReplaceableByForEach", "IfCanBeSwitch", "RedundantArrayCreation", "RedundantSuppression", "SameParameterValue", "TryFinallyCanBeTryWithResources", "TryWithIdenticalCatches", "UnnecessaryBoxing", "UnnecessaryUnboxing", "UnusedAssignment"})
        public static class ConfigSync
                extends    com.tangosol.coherence.component.util.daemon.queueProcessor.service.Grid.ConfigSync
            {
            // ---- Fields declarations ----
            
            // Default constructor
            public ConfigSync()
                {
                this(null, null, true);
                }
            
            // Initializing constructor
            public ConfigSync(String sName, com.tangosol.coherence.Component compParent, boolean fInit)
                {
                super(sName, compParent, false);
                
                if (fInit)
                    {
                    __init();
                    }
                }
            
            // Main initializer
            public void __init()
                {
                // private initialization
                __initPrivate();
                
                // state initialization: public and protected properties
                try
                    {
                    setMessageType(-17);
                    }
                catch (java.lang.Exception e)
                    {
                    // re-throw as a runtime exception
                    throw new com.tangosol.util.WrapperException(e);
                    }
                
                // signal the end of the initialization
                set_Constructed(true);
                }
            
            // Private initializer
            protected void __initPrivate()
                {
                
                super.__initPrivate();
                }
            
            //++ getter for static property _Instance
            /**
             * Getter for property _Instance.<p>
            * Auto generated
             */
            public static com.tangosol.coherence.Component get_Instance()
                {
                return new com.tangosol.coherence.component.net.Cluster.ClusterService.ConfigSync();
                }
            
            //++ getter for static property _CLASS
            /**
             * Getter for property _CLASS.<p>
            * Property with auto-generated accessor that returns the Class
            * object for a given component.
             */
            public static Class get_CLASS()
                {
                Class clz;
                try
                    {
                    clz = Class.forName("com.tangosol.coherence/component/net/Cluster$ClusterService$ConfigSync".replace('/', '.'));
                    }
                catch (ClassNotFoundException e)
                    {
                    throw new NoClassDefFoundError(e.getMessage());
                    }
                return clz;
                }
            
            //++ getter for autogen property _Module
            /**
             * This is an auto-generated method that returns the global [design
            * time] parent component.
            * 
            * Note: the class generator will ignore any custom implementation
            * for this behavior.
             */
            private com.tangosol.coherence.Component get_Module()
                {
                return this.get_Parent().get_Parent();
                }
            }

        // ---- class: com.tangosol.coherence.component.net.Cluster$ClusterService$ConfigUpdate
        
        /**
         * This Message is sent by the config coordinator Member to all other
         * Members running this service to inform them of a change to the
         * ConfigMap.
         * 
         * Attributes:
         *     Key
         *     Value
         *     Remove
         */
        @SuppressWarnings({"deprecation", "rawtypes", "unused", "unchecked", "ConstantConditions", "DuplicatedCode", "ForLoopReplaceableByForEach", "IfCanBeSwitch", "RedundantArrayCreation", "RedundantSuppression", "SameParameterValue", "TryFinallyCanBeTryWithResources", "TryWithIdenticalCatches", "UnnecessaryBoxing", "UnnecessaryUnboxing", "UnusedAssignment"})
        public static class ConfigUpdate
                extends    com.tangosol.coherence.component.util.daemon.queueProcessor.service.Grid.ConfigUpdate
            {
            // ---- Fields declarations ----
            
            // Default constructor
            public ConfigUpdate()
                {
                this(null, null, true);
                }
            
            // Initializing constructor
            public ConfigUpdate(String sName, com.tangosol.coherence.Component compParent, boolean fInit)
                {
                super(sName, compParent, false);
                
                if (fInit)
                    {
                    __init();
                    }
                }
            
            // Main initializer
            public void __init()
                {
                // private initialization
                __initPrivate();
                
                // state initialization: public and protected properties
                try
                    {
                    setMessageType(-18);
                    }
                catch (java.lang.Exception e)
                    {
                    // re-throw as a runtime exception
                    throw new com.tangosol.util.WrapperException(e);
                    }
                
                // signal the end of the initialization
                set_Constructed(true);
                }
            
            // Private initializer
            protected void __initPrivate()
                {
                
                super.__initPrivate();
                }
            
            //++ getter for static property _Instance
            /**
             * Getter for property _Instance.<p>
            * Auto generated
             */
            public static com.tangosol.coherence.Component get_Instance()
                {
                return new com.tangosol.coherence.component.net.Cluster.ClusterService.ConfigUpdate();
                }
            
            //++ getter for static property _CLASS
            /**
             * Getter for property _CLASS.<p>
            * Property with auto-generated accessor that returns the Class
            * object for a given component.
             */
            public static Class get_CLASS()
                {
                Class clz;
                try
                    {
                    clz = Class.forName("com.tangosol.coherence/component/net/Cluster$ClusterService$ConfigUpdate".replace('/', '.'));
                    }
                catch (ClassNotFoundException e)
                    {
                    throw new NoClassDefFoundError(e.getMessage());
                    }
                return clz;
                }
            
            //++ getter for autogen property _Module
            /**
             * This is an auto-generated method that returns the global [design
            * time] parent component.
            * 
            * Note: the class generator will ignore any custom implementation
            * for this behavior.
             */
            private com.tangosol.coherence.Component get_Module()
                {
                return this.get_Parent().get_Parent();
                }
            }

        // ---- class: com.tangosol.coherence.component.net.Cluster$ClusterService$DaemonPool
        
        /**
         * DaemonPool is a class thread pool implementation for processing
         * queued operations on one or more daemon threads.
         * 
         * The designable properties are:
         *     AutoStart
         *     DaemonCount
         * 
         * The simple API for the DaemonPool is:
         *     public void start()
         *     public boolean isStarted()
         *     public void add(Runnable task)
         *     public void stop()
         * 
         * The advanced API for the DaemonPool is:
         *     DaemonCount property
         *     Daemons property
         *     Queues property
         *     ThreadGroup property
         * 
         * The DaemonPool is composed of two key components:
         * 
         * 1) An array of WorkSlot components that may or may not share Queues
         * with other WorkSlots. 
         * 
         * 2) An array of Daemon components feeding off the Queues. This
         * collection is accessed by the DaemonCount and Daemons properties,
         * and is managed by the DaemonCount mutator.
         */
        @SuppressWarnings({"deprecation", "rawtypes", "unused", "unchecked", "ConstantConditions", "DuplicatedCode", "ForLoopReplaceableByForEach", "IfCanBeSwitch", "RedundantArrayCreation", "RedundantSuppression", "SameParameterValue", "TryFinallyCanBeTryWithResources", "TryWithIdenticalCatches", "UnnecessaryBoxing", "UnnecessaryUnboxing", "UnusedAssignment"})
        public static class DaemonPool
                extends    com.tangosol.coherence.component.util.daemon.queueProcessor.service.Grid.DaemonPool
            {
            // ---- Fields declarations ----
            private static com.tangosol.util.ListMap __mapChildren;
            
            // Static initializer
            static
                {
                __initStatic();
                }
            
            // Default static initializer
            private static void __initStatic()
                {
                // register child classes
                __mapChildren = new com.tangosol.util.ListMap();
                __mapChildren.put("Daemon", Cluster.ClusterService.DaemonPool.Daemon.get_CLASS());
                __mapChildren.put("ResizeTask", Cluster.ClusterService.DaemonPool.ResizeTask.get_CLASS());
                __mapChildren.put("ScheduleTask", Cluster.ClusterService.DaemonPool.ScheduleTask.get_CLASS());
                __mapChildren.put("StartTask", Cluster.ClusterService.DaemonPool.StartTask.get_CLASS());
                __mapChildren.put("StopTask", Cluster.ClusterService.DaemonPool.StopTask.get_CLASS());
                __mapChildren.put("WorkSlot", Cluster.ClusterService.DaemonPool.WorkSlot.get_CLASS());
                __mapChildren.put("WrapperTask", Cluster.ClusterService.DaemonPool.WrapperTask.get_CLASS());
                }
            
            // Default constructor
            public DaemonPool()
                {
                this(null, null, true);
                }
            
            // Initializing constructor
            public DaemonPool(String sName, com.tangosol.coherence.Component compParent, boolean fInit)
                {
                super(sName, compParent, false);
                
                if (fInit)
                    {
                    __init();
                    }
                }
            
            // Main initializer
            public void __init()
                {
                // private initialization
                __initPrivate();
                
                // state initialization: public and protected properties
                try
                    {
                    setAbandonThreshold(8);
                    setDaemonCountMax(2147483647);
                    setDaemonCountMin(1);
                    setScheduledTasks(new java.util.HashSet());
                    setStatsTaskAddCount(new java.util.concurrent.atomic.AtomicLong());
                    }
                catch (java.lang.Exception e)
                    {
                    // re-throw as a runtime exception
                    throw new com.tangosol.util.WrapperException(e);
                    }
                
                // containment initialization: children
                
                // signal the end of the initialization
                set_Constructed(true);
                }
            
            // Private initializer
            protected void __initPrivate()
                {
                
                super.__initPrivate();
                }
            
            //++ getter for static property _Instance
            /**
             * Getter for property _Instance.<p>
            * Auto generated
             */
            public static com.tangosol.coherence.Component get_Instance()
                {
                return new com.tangosol.coherence.component.net.Cluster.ClusterService.DaemonPool();
                }
            
            //++ getter for static property _CLASS
            /**
             * Getter for property _CLASS.<p>
            * Property with auto-generated accessor that returns the Class
            * object for a given component.
             */
            public static Class get_CLASS()
                {
                Class clz;
                try
                    {
                    clz = Class.forName("com.tangosol.coherence/component/net/Cluster$ClusterService$DaemonPool".replace('/', '.'));
                    }
                catch (ClassNotFoundException e)
                    {
                    throw new NoClassDefFoundError(e.getMessage());
                    }
                return clz;
                }
            
            //++ getter for autogen property _Module
            /**
             * This is an auto-generated method that returns the global [design
            * time] parent component.
            * 
            * Note: the class generator will ignore any custom implementation
            * for this behavior.
             */
            private com.tangosol.coherence.Component get_Module()
                {
                return this.get_Parent().get_Parent();
                }
            
            //++ getter for autogen property _ChildClasses
            /**
             * This is an auto-generated method that returns the map of design
            * time [static] children.
            * 
            * Note: the class generator will ignore any custom implementation
            * for this behavior.
             */
            protected java.util.Map get_ChildClasses()
                {
                return __mapChildren;
                }

            // ---- class: com.tangosol.coherence.component.net.Cluster$ClusterService$DaemonPool$Daemon
            
            /**
             * The prototypical Daemon thread component that will belong to the
             * DaemonPool. An instance of this component is created for each
             * thread in the pool.
             */
            @SuppressWarnings({"deprecation", "rawtypes", "unused", "unchecked", "ConstantConditions", "DuplicatedCode", "ForLoopReplaceableByForEach", "IfCanBeSwitch", "RedundantArrayCreation", "RedundantSuppression", "SameParameterValue", "TryFinallyCanBeTryWithResources", "TryWithIdenticalCatches", "UnnecessaryBoxing", "UnnecessaryUnboxing", "UnusedAssignment"})
            public static class Daemon
                    extends    com.tangosol.coherence.component.util.daemon.queueProcessor.service.Grid.DaemonPool.Daemon
                {
                // ---- Fields declarations ----
                
                // Default constructor
                public Daemon()
                    {
                    this(null, null, true);
                    }
                
                // Initializing constructor
                public Daemon(String sName, com.tangosol.coherence.Component compParent, boolean fInit)
                    {
                    super(sName, compParent, false);
                    
                    if (fInit)
                        {
                        __init();
                        }
                    }
                
                // Main initializer
                public void __init()
                    {
                    // private initialization
                    __initPrivate();
                    
                    // state initialization: public and protected properties
                    try
                        {
                        setDaemonState(0);
                        setDefaultGuardRecovery(0.9F);
                        setDefaultGuardTimeout(60000L);
                        setNotifier(new com.oracle.coherence.common.base.SingleWaiterMultiNotifier());
                        setThreadName("Worker");
                        }
                    catch (java.lang.Exception e)
                        {
                        // re-throw as a runtime exception
                        throw new com.tangosol.util.WrapperException(e);
                        }
                    
                    // containment initialization: children
                    _addChild(new Cluster.ClusterService.DaemonPool.Daemon.Guard("Guard", this, true), "Guard");
                    
                    // signal the end of the initialization
                    set_Constructed(true);
                    }
                
                // Private initializer
                protected void __initPrivate()
                    {
                    
                    super.__initPrivate();
                    }
                
                //++ getter for static property _Instance
                /**
                 * Getter for property _Instance.<p>
                * Auto generated
                 */
                public static com.tangosol.coherence.Component get_Instance()
                    {
                    return new com.tangosol.coherence.component.net.Cluster.ClusterService.DaemonPool.Daemon();
                    }
                
                //++ getter for static property _CLASS
                /**
                 * Getter for property _CLASS.<p>
                * Property with auto-generated accessor that returns the Class
                * object for a given component.
                 */
                public static Class get_CLASS()
                    {
                    Class clz;
                    try
                        {
                        clz = Class.forName("com.tangosol.coherence/component/net/Cluster$ClusterService$DaemonPool$Daemon".replace('/', '.'));
                        }
                    catch (ClassNotFoundException e)
                        {
                        throw new NoClassDefFoundError(e.getMessage());
                        }
                    return clz;
                    }
                
                //++ getter for autogen property _Module
                /**
                 * This is an auto-generated method that returns the global
                * [design time] parent component.
                * 
                * Note: the class generator will ignore any custom
                * implementation for this behavior.
                 */
                private com.tangosol.coherence.Component get_Module()
                    {
                    return this.get_Parent().get_Parent().get_Parent();
                    }

                // ---- class: com.tangosol.coherence.component.net.Cluster$ClusterService$DaemonPool$Daemon$Guard
                
                /**
                 * Guard provides the Guardable interface implementation for
                 * the Daemon.
                 */
                @SuppressWarnings({"deprecation", "rawtypes", "unused", "unchecked", "ConstantConditions", "DuplicatedCode", "ForLoopReplaceableByForEach", "IfCanBeSwitch", "RedundantArrayCreation", "RedundantSuppression", "SameParameterValue", "TryFinallyCanBeTryWithResources", "TryWithIdenticalCatches", "UnnecessaryBoxing", "UnnecessaryUnboxing", "UnusedAssignment"})
                public static class Guard
                        extends    com.tangosol.coherence.component.util.daemon.queueProcessor.Service.DaemonPool.Daemon.Guard
                    {
                    // ---- Fields declarations ----
                    private static com.tangosol.util.ListMap __mapChildren;
                    
                    // Static initializer
                    static
                        {
                        __initStatic();
                        }
                    
                    // Default static initializer
                    private static void __initStatic()
                        {
                        // register child classes
                        __mapChildren = new com.tangosol.util.ListMap();
                        __mapChildren.put("Abandon", Cluster.ClusterService.DaemonPool.Daemon.Guard.Abandon.get_CLASS());
                        }
                    
                    // Default constructor
                    public Guard()
                        {
                        this(null, null, true);
                        }
                    
                    // Initializing constructor
                    public Guard(String sName, com.tangosol.coherence.Component compParent, boolean fInit)
                        {
                        super(sName, compParent, false);
                        
                        if (fInit)
                            {
                            __init();
                            }
                        }
                    
                    // Main initializer
                    public void __init()
                        {
                        // private initialization
                        __initPrivate();
                        
                        
                        // containment initialization: children
                        
                        // signal the end of the initialization
                        set_Constructed(true);
                        }
                    
                    // Private initializer
                    protected void __initPrivate()
                        {
                        
                        super.__initPrivate();
                        }
                    
                    //++ getter for static property _Instance
                    /**
                     * Getter for property _Instance.<p>
                    * Auto generated
                     */
                    public static com.tangosol.coherence.Component get_Instance()
                        {
                        return new com.tangosol.coherence.component.net.Cluster.ClusterService.DaemonPool.Daemon.Guard();
                        }
                    
                    //++ getter for static property _CLASS
                    /**
                     * Getter for property _CLASS.<p>
                    * Property with auto-generated accessor that returns the
                    * Class object for a given component.
                     */
                    public static Class get_CLASS()
                        {
                        Class clz;
                        try
                            {
                            clz = Class.forName("com.tangosol.coherence/component/net/Cluster$ClusterService$DaemonPool$Daemon$Guard".replace('/', '.'));
                            }
                        catch (ClassNotFoundException e)
                            {
                            throw new NoClassDefFoundError(e.getMessage());
                            }
                        return clz;
                        }
                    
                    //++ getter for autogen property _Module
                    /**
                     * This is an auto-generated method that returns the global
                    * [design time] parent component.
                    * 
                    * Note: the class generator will ignore any custom
                    * implementation for this behavior.
                     */
                    private com.tangosol.coherence.Component get_Module()
                        {
                        return this.get_Parent().get_Parent().get_Parent().get_Parent();
                        }
                    
                    //++ getter for autogen property _ChildClasses
                    /**
                     * This is an auto-generated method that returns the map of
                    * design time [static] children.
                    * 
                    * Note: the class generator will ignore any custom
                    * implementation for this behavior.
                     */
                    protected java.util.Map get_ChildClasses()
                        {
                        return __mapChildren;
                        }

                    // ---- class: com.tangosol.coherence.component.net.Cluster$ClusterService$DaemonPool$Daemon$Guard$Abandon
                    
                    @SuppressWarnings({"deprecation", "rawtypes", "unused", "unchecked", "ConstantConditions", "DuplicatedCode", "ForLoopReplaceableByForEach", "IfCanBeSwitch", "RedundantArrayCreation", "RedundantSuppression", "SameParameterValue", "TryFinallyCanBeTryWithResources", "TryWithIdenticalCatches", "UnnecessaryBoxing", "UnnecessaryUnboxing", "UnusedAssignment"})
                    public static class Abandon
                            extends    com.tangosol.coherence.component.util.daemon.queueProcessor.Service.DaemonPool.Daemon.Guard.Abandon
                        {
                        // ---- Fields declarations ----
                        
                        // Default constructor
                        public Abandon()
                            {
                            this(null, null, true);
                            }
                        
                        // Initializing constructor
                        public Abandon(String sName, com.tangosol.coherence.Component compParent, boolean fInit)
                            {
                            super(sName, compParent, false);
                            
                            if (fInit)
                                {
                                __init();
                                }
                            }
                        
                        // Main initializer
                        public void __init()
                            {
                            // private initialization
                            __initPrivate();
                            
                            
                            // signal the end of the initialization
                            set_Constructed(true);
                            }
                        
                        // Private initializer
                        protected void __initPrivate()
                            {
                            
                            super.__initPrivate();
                            }
                        
                        //++ getter for static property _Instance
                        /**
                         * Getter for property _Instance.<p>
                        * Auto generated
                         */
                        public static com.tangosol.coherence.Component get_Instance()
                            {
                            return new com.tangosol.coherence.component.net.Cluster.ClusterService.DaemonPool.Daemon.Guard.Abandon();
                            }
                        
                        //++ getter for static property _CLASS
                        /**
                         * Getter for property _CLASS.<p>
                        * Property with auto-generated accessor that returns
                        * the Class object for a given component.
                         */
                        public static Class get_CLASS()
                            {
                            Class clz;
                            try
                                {
                                clz = Class.forName("com.tangosol.coherence/component/net/Cluster$ClusterService$DaemonPool$Daemon$Guard$Abandon".replace('/', '.'));
                                }
                            catch (ClassNotFoundException e)
                                {
                                throw new NoClassDefFoundError(e.getMessage());
                                }
                            return clz;
                            }
                        
                        //++ getter for autogen property _Module
                        /**
                         * This is an auto-generated method that returns the
                        * global [design time] parent component.
                        * 
                        * Note: the class generator will ignore any custom
                        * implementation for this behavior.
                         */
                        private com.tangosol.coherence.Component get_Module()
                            {
                            return this.get_Parent().get_Parent().get_Parent().get_Parent().get_Parent();
                            }
                        }
                    }
                }

            // ---- class: com.tangosol.coherence.component.net.Cluster$ClusterService$DaemonPool$ResizeTask
            
            /**
             * Runnable periodic task used to implement the dynamic resizing
             * algorithm.
             */
            @SuppressWarnings({"deprecation", "rawtypes", "unused", "unchecked", "ConstantConditions", "DuplicatedCode", "ForLoopReplaceableByForEach", "IfCanBeSwitch", "RedundantArrayCreation", "RedundantSuppression", "SameParameterValue", "TryFinallyCanBeTryWithResources", "TryWithIdenticalCatches", "UnnecessaryBoxing", "UnnecessaryUnboxing", "UnusedAssignment"})
            public static class ResizeTask
                    extends    com.tangosol.coherence.component.util.daemon.queueProcessor.Service.DaemonPool.ResizeTask
                {
                // ---- Fields declarations ----
                
                // Default constructor
                public ResizeTask()
                    {
                    this(null, null, true);
                    }
                
                // Initializing constructor
                public ResizeTask(String sName, com.tangosol.coherence.Component compParent, boolean fInit)
                    {
                    super(sName, compParent, false);
                    
                    if (fInit)
                        {
                        __init();
                        }
                    }
                
                // Main initializer
                public void __init()
                    {
                    // private initialization
                    __initPrivate();
                    
                    
                    // signal the end of the initialization
                    set_Constructed(true);
                    }
                
                // Private initializer
                protected void __initPrivate()
                    {
                    
                    super.__initPrivate();
                    }
                
                //++ getter for static property _Instance
                /**
                 * Getter for property _Instance.<p>
                * Auto generated
                 */
                public static com.tangosol.coherence.Component get_Instance()
                    {
                    return new com.tangosol.coherence.component.net.Cluster.ClusterService.DaemonPool.ResizeTask();
                    }
                
                //++ getter for static property _CLASS
                /**
                 * Getter for property _CLASS.<p>
                * Property with auto-generated accessor that returns the Class
                * object for a given component.
                 */
                public static Class get_CLASS()
                    {
                    Class clz;
                    try
                        {
                        clz = Class.forName("com.tangosol.coherence/component/net/Cluster$ClusterService$DaemonPool$ResizeTask".replace('/', '.'));
                        }
                    catch (ClassNotFoundException e)
                        {
                        throw new NoClassDefFoundError(e.getMessage());
                        }
                    return clz;
                    }
                
                //++ getter for autogen property _Module
                /**
                 * This is an auto-generated method that returns the global
                * [design time] parent component.
                * 
                * Note: the class generator will ignore any custom
                * implementation for this behavior.
                 */
                private com.tangosol.coherence.Component get_Module()
                    {
                    return this.get_Parent().get_Parent().get_Parent();
                    }
                }

            // ---- class: com.tangosol.coherence.component.net.Cluster$ClusterService$DaemonPool$ScheduleTask
            
            /**
             * Runnable task that is used to schedule a task to be added to the
             * DaemonPool.
             */
            @SuppressWarnings({"deprecation", "rawtypes", "unused", "unchecked", "ConstantConditions", "DuplicatedCode", "ForLoopReplaceableByForEach", "IfCanBeSwitch", "RedundantArrayCreation", "RedundantSuppression", "SameParameterValue", "TryFinallyCanBeTryWithResources", "TryWithIdenticalCatches", "UnnecessaryBoxing", "UnnecessaryUnboxing", "UnusedAssignment"})
            public static class ScheduleTask
                    extends    com.tangosol.coherence.component.util.daemon.queueProcessor.Service.DaemonPool.ScheduleTask
                {
                // ---- Fields declarations ----
                
                // Default constructor
                public ScheduleTask()
                    {
                    this(null, null, true);
                    }
                
                // Initializing constructor
                public ScheduleTask(String sName, com.tangosol.coherence.Component compParent, boolean fInit)
                    {
                    super(sName, compParent, false);
                    
                    if (fInit)
                        {
                        __init();
                        }
                    }
                
                // Main initializer
                public void __init()
                    {
                    // private initialization
                    __initPrivate();
                    
                    
                    // signal the end of the initialization
                    set_Constructed(true);
                    }
                
                // Private initializer
                protected void __initPrivate()
                    {
                    
                    super.__initPrivate();
                    }
                
                //++ getter for static property _Instance
                /**
                 * Getter for property _Instance.<p>
                * Auto generated
                 */
                public static com.tangosol.coherence.Component get_Instance()
                    {
                    return new com.tangosol.coherence.component.net.Cluster.ClusterService.DaemonPool.ScheduleTask();
                    }
                
                //++ getter for static property _CLASS
                /**
                 * Getter for property _CLASS.<p>
                * Property with auto-generated accessor that returns the Class
                * object for a given component.
                 */
                public static Class get_CLASS()
                    {
                    Class clz;
                    try
                        {
                        clz = Class.forName("com.tangosol.coherence/component/net/Cluster$ClusterService$DaemonPool$ScheduleTask".replace('/', '.'));
                        }
                    catch (ClassNotFoundException e)
                        {
                        throw new NoClassDefFoundError(e.getMessage());
                        }
                    return clz;
                    }
                
                //++ getter for autogen property _Module
                /**
                 * This is an auto-generated method that returns the global
                * [design time] parent component.
                * 
                * Note: the class generator will ignore any custom
                * implementation for this behavior.
                 */
                private com.tangosol.coherence.Component get_Module()
                    {
                    return this.get_Parent().get_Parent().get_Parent();
                    }
                }

            // ---- class: com.tangosol.coherence.component.net.Cluster$ClusterService$DaemonPool$StartTask
            
            /**
             * Runnable pseudo-task that is used to start one and only one
             * daemon thread.
             */
            @SuppressWarnings({"deprecation", "rawtypes", "unused", "unchecked", "ConstantConditions", "DuplicatedCode", "ForLoopReplaceableByForEach", "IfCanBeSwitch", "RedundantArrayCreation", "RedundantSuppression", "SameParameterValue", "TryFinallyCanBeTryWithResources", "TryWithIdenticalCatches", "UnnecessaryBoxing", "UnnecessaryUnboxing", "UnusedAssignment"})
            public static class StartTask
                    extends    com.tangosol.coherence.component.util.daemon.queueProcessor.Service.DaemonPool.StartTask
                {
                // ---- Fields declarations ----
                
                // Default constructor
                public StartTask()
                    {
                    this(null, null, true);
                    }
                
                // Initializing constructor
                public StartTask(String sName, com.tangosol.coherence.Component compParent, boolean fInit)
                    {
                    super(sName, compParent, false);
                    
                    if (fInit)
                        {
                        __init();
                        }
                    }
                
                // Main initializer
                public void __init()
                    {
                    // private initialization
                    __initPrivate();
                    
                    
                    // signal the end of the initialization
                    set_Constructed(true);
                    }
                
                // Private initializer
                protected void __initPrivate()
                    {
                    
                    super.__initPrivate();
                    }
                
                //++ getter for static property _Instance
                /**
                 * Getter for property _Instance.<p>
                * Auto generated
                 */
                public static com.tangosol.coherence.Component get_Instance()
                    {
                    return new com.tangosol.coherence.component.net.Cluster.ClusterService.DaemonPool.StartTask();
                    }
                
                //++ getter for static property _CLASS
                /**
                 * Getter for property _CLASS.<p>
                * Property with auto-generated accessor that returns the Class
                * object for a given component.
                 */
                public static Class get_CLASS()
                    {
                    Class clz;
                    try
                        {
                        clz = Class.forName("com.tangosol.coherence/component/net/Cluster$ClusterService$DaemonPool$StartTask".replace('/', '.'));
                        }
                    catch (ClassNotFoundException e)
                        {
                        throw new NoClassDefFoundError(e.getMessage());
                        }
                    return clz;
                    }
                
                //++ getter for autogen property _Module
                /**
                 * This is an auto-generated method that returns the global
                * [design time] parent component.
                * 
                * Note: the class generator will ignore any custom
                * implementation for this behavior.
                 */
                private com.tangosol.coherence.Component get_Module()
                    {
                    return this.get_Parent().get_Parent().get_Parent();
                    }
                }

            // ---- class: com.tangosol.coherence.component.net.Cluster$ClusterService$DaemonPool$StopTask
            
            /**
             * Runnable pseudo-task that is used to terminate one and only one
             * daemon thread.
             */
            @SuppressWarnings({"deprecation", "rawtypes", "unused", "unchecked", "ConstantConditions", "DuplicatedCode", "ForLoopReplaceableByForEach", "IfCanBeSwitch", "RedundantArrayCreation", "RedundantSuppression", "SameParameterValue", "TryFinallyCanBeTryWithResources", "TryWithIdenticalCatches", "UnnecessaryBoxing", "UnnecessaryUnboxing", "UnusedAssignment"})
            public static class StopTask
                    extends    com.tangosol.coherence.component.util.daemon.queueProcessor.Service.DaemonPool.StopTask
                {
                // ---- Fields declarations ----
                
                // Default constructor
                public StopTask()
                    {
                    this(null, null, true);
                    }
                
                // Initializing constructor
                public StopTask(String sName, com.tangosol.coherence.Component compParent, boolean fInit)
                    {
                    super(sName, compParent, false);
                    
                    if (fInit)
                        {
                        __init();
                        }
                    }
                
                // Main initializer
                public void __init()
                    {
                    // private initialization
                    __initPrivate();
                    
                    
                    // signal the end of the initialization
                    set_Constructed(true);
                    }
                
                // Private initializer
                protected void __initPrivate()
                    {
                    
                    super.__initPrivate();
                    }
                
                //++ getter for static property _Instance
                /**
                 * Getter for property _Instance.<p>
                * Auto generated
                 */
                public static com.tangosol.coherence.Component get_Instance()
                    {
                    return new com.tangosol.coherence.component.net.Cluster.ClusterService.DaemonPool.StopTask();
                    }
                
                //++ getter for static property _CLASS
                /**
                 * Getter for property _CLASS.<p>
                * Property with auto-generated accessor that returns the Class
                * object for a given component.
                 */
                public static Class get_CLASS()
                    {
                    Class clz;
                    try
                        {
                        clz = Class.forName("com.tangosol.coherence/component/net/Cluster$ClusterService$DaemonPool$StopTask".replace('/', '.'));
                        }
                    catch (ClassNotFoundException e)
                        {
                        throw new NoClassDefFoundError(e.getMessage());
                        }
                    return clz;
                    }
                
                //++ getter for autogen property _Module
                /**
                 * This is an auto-generated method that returns the global
                * [design time] parent component.
                * 
                * Note: the class generator will ignore any custom
                * implementation for this behavior.
                 */
                private com.tangosol.coherence.Component get_Module()
                    {
                    return this.get_Parent().get_Parent().get_Parent();
                    }
                }

            // ---- class: com.tangosol.coherence.component.net.Cluster$ClusterService$DaemonPool$WorkSlot
            
            /**
             * To reduce the contention across the worker threads, all tasks
             * added to the DaemonPool are directed to one of the WorkSlots in
             * a way that respects the association between tasks. The total
             * number of slots is fixed and calculated based on the number of
             * processors. Depending on the number of daemon threads, different
             * slots may share the queues.
             */
            @SuppressWarnings({"deprecation", "rawtypes", "unused", "unchecked", "ConstantConditions", "DuplicatedCode", "ForLoopReplaceableByForEach", "IfCanBeSwitch", "RedundantArrayCreation", "RedundantSuppression", "SameParameterValue", "TryFinallyCanBeTryWithResources", "TryWithIdenticalCatches", "UnnecessaryBoxing", "UnnecessaryUnboxing", "UnusedAssignment"})
            public static class WorkSlot
                    extends    com.tangosol.coherence.component.util.daemon.queueProcessor.Service.DaemonPool.WorkSlot
                {
                // ---- Fields declarations ----
                
                // Default constructor
                public WorkSlot()
                    {
                    this(null, null, true);
                    }
                
                // Initializing constructor
                public WorkSlot(String sName, com.tangosol.coherence.Component compParent, boolean fInit)
                    {
                    super(sName, compParent, false);
                    
                    if (fInit)
                        {
                        __init();
                        }
                    }
                
                // Main initializer
                public void __init()
                    {
                    // private initialization
                    __initPrivate();
                    
                    // state initialization: public and protected properties
                    try
                        {
                        setIndex(-1);
                        }
                    catch (java.lang.Exception e)
                        {
                        // re-throw as a runtime exception
                        throw new com.tangosol.util.WrapperException(e);
                        }
                    
                    // signal the end of the initialization
                    set_Constructed(true);
                    }
                
                // Private initializer
                protected void __initPrivate()
                    {
                    
                    super.__initPrivate();
                    }
                
                //++ getter for static property _Instance
                /**
                 * Getter for property _Instance.<p>
                * Auto generated
                 */
                public static com.tangosol.coherence.Component get_Instance()
                    {
                    return new com.tangosol.coherence.component.net.Cluster.ClusterService.DaemonPool.WorkSlot();
                    }
                
                //++ getter for static property _CLASS
                /**
                 * Getter for property _CLASS.<p>
                * Property with auto-generated accessor that returns the Class
                * object for a given component.
                 */
                public static Class get_CLASS()
                    {
                    Class clz;
                    try
                        {
                        clz = Class.forName("com.tangosol.coherence/component/net/Cluster$ClusterService$DaemonPool$WorkSlot".replace('/', '.'));
                        }
                    catch (ClassNotFoundException e)
                        {
                        throw new NoClassDefFoundError(e.getMessage());
                        }
                    return clz;
                    }
                
                //++ getter for autogen property _Module
                /**
                 * This is an auto-generated method that returns the global
                * [design time] parent component.
                * 
                * Note: the class generator will ignore any custom
                * implementation for this behavior.
                 */
                private com.tangosol.coherence.Component get_Module()
                    {
                    return this.get_Parent().get_Parent().get_Parent();
                    }
                }

            // ---- class: com.tangosol.coherence.component.net.Cluster$ClusterService$DaemonPool$WrapperTask
            
            /**
             * A task that is used to wrap the actual tasks.
             */
            @SuppressWarnings({"deprecation", "rawtypes", "unused", "unchecked", "ConstantConditions", "DuplicatedCode", "ForLoopReplaceableByForEach", "IfCanBeSwitch", "RedundantArrayCreation", "RedundantSuppression", "SameParameterValue", "TryFinallyCanBeTryWithResources", "TryWithIdenticalCatches", "UnnecessaryBoxing", "UnnecessaryUnboxing", "UnusedAssignment"})
            public static class WrapperTask
                    extends    com.tangosol.coherence.component.util.daemon.queueProcessor.Service.DaemonPool.WrapperTask
                {
                // ---- Fields declarations ----
                
                // Default constructor
                public WrapperTask()
                    {
                    this(null, null, true);
                    }
                
                // Initializing constructor
                public WrapperTask(String sName, com.tangosol.coherence.Component compParent, boolean fInit)
                    {
                    super(sName, compParent, false);
                    
                    if (fInit)
                        {
                        __init();
                        }
                    }
                
                // Main initializer
                public void __init()
                    {
                    // private initialization
                    __initPrivate();
                    
                    
                    // signal the end of the initialization
                    set_Constructed(true);
                    }
                
                // Private initializer
                protected void __initPrivate()
                    {
                    
                    super.__initPrivate();
                    }
                
                //++ getter for static property _Instance
                /**
                 * Getter for property _Instance.<p>
                * Auto generated
                 */
                public static com.tangosol.coherence.Component get_Instance()
                    {
                    return new com.tangosol.coherence.component.net.Cluster.ClusterService.DaemonPool.WrapperTask();
                    }
                
                //++ getter for static property _CLASS
                /**
                 * Getter for property _CLASS.<p>
                * Property with auto-generated accessor that returns the Class
                * object for a given component.
                 */
                public static Class get_CLASS()
                    {
                    Class clz;
                    try
                        {
                        clz = Class.forName("com.tangosol.coherence/component/net/Cluster$ClusterService$DaemonPool$WrapperTask".replace('/', '.'));
                        }
                    catch (ClassNotFoundException e)
                        {
                        throw new NoClassDefFoundError(e.getMessage());
                        }
                    return clz;
                    }
                
                //++ getter for autogen property _Module
                /**
                 * This is an auto-generated method that returns the global
                * [design time] parent component.
                * 
                * Note: the class generator will ignore any custom
                * implementation for this behavior.
                 */
                private com.tangosol.coherence.Component get_Module()
                    {
                    return this.get_Parent().get_Parent().get_Parent();
                    }
                }
            }

        // ---- class: com.tangosol.coherence.component.net.Cluster$ClusterService$DispatchEvent
        
        /**
         * Runnable event.
         */
        @SuppressWarnings({"deprecation", "rawtypes", "unused", "unchecked", "ConstantConditions", "DuplicatedCode", "ForLoopReplaceableByForEach", "IfCanBeSwitch", "RedundantArrayCreation", "RedundantSuppression", "SameParameterValue", "TryFinallyCanBeTryWithResources", "TryWithIdenticalCatches", "UnnecessaryBoxing", "UnnecessaryUnboxing", "UnusedAssignment"})
        public static class DispatchEvent
                extends    com.tangosol.coherence.component.util.daemon.queueProcessor.service.Grid.DispatchEvent
            {
            // ---- Fields declarations ----
            
            // Default constructor
            public DispatchEvent()
                {
                this(null, null, true);
                }
            
            // Initializing constructor
            public DispatchEvent(String sName, com.tangosol.coherence.Component compParent, boolean fInit)
                {
                super(sName, compParent, false);
                
                if (fInit)
                    {
                    __init();
                    }
                }
            
            // Main initializer
            public void __init()
                {
                // private initialization
                __initPrivate();
                
                
                // signal the end of the initialization
                set_Constructed(true);
                }
            
            // Private initializer
            protected void __initPrivate()
                {
                
                super.__initPrivate();
                }
            
            //++ getter for static property _Instance
            /**
             * Getter for property _Instance.<p>
            * Auto generated
             */
            public static com.tangosol.coherence.Component get_Instance()
                {
                return new com.tangosol.coherence.component.net.Cluster.ClusterService.DispatchEvent();
                }
            
            //++ getter for static property _CLASS
            /**
             * Getter for property _CLASS.<p>
            * Property with auto-generated accessor that returns the Class
            * object for a given component.
             */
            public static Class get_CLASS()
                {
                Class clz;
                try
                    {
                    clz = Class.forName("com.tangosol.coherence/component/net/Cluster$ClusterService$DispatchEvent".replace('/', '.'));
                    }
                catch (ClassNotFoundException e)
                    {
                    throw new NoClassDefFoundError(e.getMessage());
                    }
                return clz;
                }
            
            //++ getter for autogen property _Module
            /**
             * This is an auto-generated method that returns the global [design
            * time] parent component.
            * 
            * Note: the class generator will ignore any custom implementation
            * for this behavior.
             */
            private com.tangosol.coherence.Component get_Module()
                {
                return this.get_Parent().get_Parent();
                }
            }

        // ---- class: com.tangosol.coherence.component.net.Cluster$ClusterService$DispatchNotification
        
        @SuppressWarnings({"deprecation", "rawtypes", "unused", "unchecked", "ConstantConditions", "DuplicatedCode", "ForLoopReplaceableByForEach", "IfCanBeSwitch", "RedundantArrayCreation", "RedundantSuppression", "SameParameterValue", "TryFinallyCanBeTryWithResources", "TryWithIdenticalCatches", "UnnecessaryBoxing", "UnnecessaryUnboxing", "UnusedAssignment"})
        public static class DispatchNotification
                extends    com.tangosol.coherence.component.util.daemon.queueProcessor.service.Grid.DispatchNotification
            {
            // ---- Fields declarations ----
            
            // Default constructor
            public DispatchNotification()
                {
                this(null, null, true);
                }
            
            // Initializing constructor
            public DispatchNotification(String sName, com.tangosol.coherence.Component compParent, boolean fInit)
                {
                super(sName, compParent, false);
                
                if (fInit)
                    {
                    __init();
                    }
                }
            
            // Main initializer
            public void __init()
                {
                // private initialization
                __initPrivate();
                
                
                // signal the end of the initialization
                set_Constructed(true);
                }
            
            // Private initializer
            protected void __initPrivate()
                {
                
                super.__initPrivate();
                }
            
            //++ getter for static property _Instance
            /**
             * Getter for property _Instance.<p>
            * Auto generated
             */
            public static com.tangosol.coherence.Component get_Instance()
                {
                return new com.tangosol.coherence.component.net.Cluster.ClusterService.DispatchNotification();
                }
            
            //++ getter for static property _CLASS
            /**
             * Getter for property _CLASS.<p>
            * Property with auto-generated accessor that returns the Class
            * object for a given component.
             */
            public static Class get_CLASS()
                {
                Class clz;
                try
                    {
                    clz = Class.forName("com.tangosol.coherence/component/net/Cluster$ClusterService$DispatchNotification".replace('/', '.'));
                    }
                catch (ClassNotFoundException e)
                    {
                    throw new NoClassDefFoundError(e.getMessage());
                    }
                return clz;
                }
            
            //++ getter for autogen property _Module
            /**
             * This is an auto-generated method that returns the global [design
            * time] parent component.
            * 
            * Note: the class generator will ignore any custom implementation
            * for this behavior.
             */
            private com.tangosol.coherence.Component get_Module()
                {
                return this.get_Parent().get_Parent();
                }
            }

        // ---- class: com.tangosol.coherence.component.net.Cluster$ClusterService$EventDispatcher
        
        /**
         * This is a Daemon component that waits for items to process from a
         * Queue. Whenever the Queue contains an item, the onNotify event
         * occurs. It is expected that sub-classes will process onNotify as
         * follows:
         * <pre><code>
         * Object o;
         * while ((o = getQueue().removeNoWait()) != null)
         *     {
         *     // process the item
         *     // ...
         *     }
         * </code></pre>
         * <p>
         * The Queue is used as the synchronization point for the daemon.
         */
        @SuppressWarnings({"deprecation", "rawtypes", "unused", "unchecked", "ConstantConditions", "DuplicatedCode", "ForLoopReplaceableByForEach", "IfCanBeSwitch", "RedundantArrayCreation", "RedundantSuppression", "SameParameterValue", "TryFinallyCanBeTryWithResources", "TryWithIdenticalCatches", "UnnecessaryBoxing", "UnnecessaryUnboxing", "UnusedAssignment"})
        public static class EventDispatcher
                extends    com.tangosol.coherence.component.util.daemon.queueProcessor.service.Grid.EventDispatcher
            {
            // ---- Fields declarations ----
            private static com.tangosol.util.ListMap __mapChildren;
            
            // Static initializer
            static
                {
                __initStatic();
                }
            
            // Default static initializer
            private static void __initStatic()
                {
                // register child classes
                __mapChildren = new com.tangosol.util.ListMap();
                __mapChildren.put("Queue", Cluster.ClusterService.EventDispatcher.Queue.get_CLASS());
                }
            
            // Default constructor
            public EventDispatcher()
                {
                this(null, null, true);
                }
            
            // Initializing constructor
            public EventDispatcher(String sName, com.tangosol.coherence.Component compParent, boolean fInit)
                {
                super(sName, compParent, false);
                
                if (fInit)
                    {
                    __init();
                    }
                }
            
            // Main initializer
            public void __init()
                {
                // private initialization
                __initPrivate();
                
                // state initialization: public and protected properties
                try
                    {
                    setCloggedCount(1024);
                    setCloggedDelay(32);
                    setDaemonState(0);
                    setDefaultGuardRecovery(0.9F);
                    setDefaultGuardTimeout(60000L);
                    setNotifier(new com.oracle.coherence.common.base.SingleWaiterMultiNotifier());
                    }
                catch (java.lang.Exception e)
                    {
                    // re-throw as a runtime exception
                    throw new com.tangosol.util.WrapperException(e);
                    }
                
                // containment initialization: children
                _addChild(new com.tangosol.coherence.component.util.daemon.queueProcessor.Service.EventDispatcher.Guard("Guard", this, true), "Guard");
                
                // signal the end of the initialization
                set_Constructed(true);
                }
            
            // Private initializer
            protected void __initPrivate()
                {
                
                super.__initPrivate();
                }
            
            //++ getter for static property _Instance
            /**
             * Getter for property _Instance.<p>
            * Auto generated
             */
            public static com.tangosol.coherence.Component get_Instance()
                {
                return new com.tangosol.coherence.component.net.Cluster.ClusterService.EventDispatcher();
                }
            
            //++ getter for static property _CLASS
            /**
             * Getter for property _CLASS.<p>
            * Property with auto-generated accessor that returns the Class
            * object for a given component.
             */
            public static Class get_CLASS()
                {
                Class clz;
                try
                    {
                    clz = Class.forName("com.tangosol.coherence/component/net/Cluster$ClusterService$EventDispatcher".replace('/', '.'));
                    }
                catch (ClassNotFoundException e)
                    {
                    throw new NoClassDefFoundError(e.getMessage());
                    }
                return clz;
                }
            
            //++ getter for autogen property _Module
            /**
             * This is an auto-generated method that returns the global [design
            * time] parent component.
            * 
            * Note: the class generator will ignore any custom implementation
            * for this behavior.
             */
            private com.tangosol.coherence.Component get_Module()
                {
                return this.get_Parent().get_Parent();
                }
            
            //++ getter for autogen property _ChildClasses
            /**
             * This is an auto-generated method that returns the map of design
            * time [static] children.
            * 
            * Note: the class generator will ignore any custom implementation
            * for this behavior.
             */
            protected java.util.Map get_ChildClasses()
                {
                return __mapChildren;
                }

            // ---- class: com.tangosol.coherence.component.net.Cluster$ClusterService$EventDispatcher$Queue
            
            /**
             * This is the Queue to which items that need to be processed are
             * added, and from which the daemon pulls items to process.
             */
            @SuppressWarnings({"deprecation", "rawtypes", "unused", "unchecked", "ConstantConditions", "DuplicatedCode", "ForLoopReplaceableByForEach", "IfCanBeSwitch", "RedundantArrayCreation", "RedundantSuppression", "SameParameterValue", "TryFinallyCanBeTryWithResources", "TryWithIdenticalCatches", "UnnecessaryBoxing", "UnnecessaryUnboxing", "UnusedAssignment"})
            public static class Queue
                    extends    com.tangosol.coherence.component.util.daemon.queueProcessor.Service.EventDispatcher.Queue
                {
                // ---- Fields declarations ----
                private static com.tangosol.util.ListMap __mapChildren;
                
                // Static initializer
                static
                    {
                    __initStatic();
                    }
                
                // Default static initializer
                private static void __initStatic()
                    {
                    // register child classes
                    __mapChildren = new com.tangosol.util.ListMap();
                    __mapChildren.put("Iterator", Cluster.ClusterService.EventDispatcher.Queue.Iterator.get_CLASS());
                    }
                
                // Default constructor
                public Queue()
                    {
                    this(null, null, true);
                    }
                
                // Initializing constructor
                public Queue(String sName, com.tangosol.coherence.Component compParent, boolean fInit)
                    {
                    super(sName, compParent, false);
                    
                    if (fInit)
                        {
                        __init();
                        }
                    }
                
                // Main initializer
                public void __init()
                    {
                    // private initialization
                    __initPrivate();
                    
                    // state initialization: public and protected properties
                    try
                        {
                        setElementList(new com.tangosol.util.RecyclingLinkedList());
                        }
                    catch (java.lang.Exception e)
                        {
                        // re-throw as a runtime exception
                        throw new com.tangosol.util.WrapperException(e);
                        }
                    
                    // containment initialization: children
                    
                    // signal the end of the initialization
                    set_Constructed(true);
                    }
                
                // Private initializer
                protected void __initPrivate()
                    {
                    
                    super.__initPrivate();
                    }
                
                //++ getter for static property _Instance
                /**
                 * Getter for property _Instance.<p>
                * Auto generated
                 */
                public static com.tangosol.coherence.Component get_Instance()
                    {
                    return new com.tangosol.coherence.component.net.Cluster.ClusterService.EventDispatcher.Queue();
                    }
                
                //++ getter for static property _CLASS
                /**
                 * Getter for property _CLASS.<p>
                * Property with auto-generated accessor that returns the Class
                * object for a given component.
                 */
                public static Class get_CLASS()
                    {
                    Class clz;
                    try
                        {
                        clz = Class.forName("com.tangosol.coherence/component/net/Cluster$ClusterService$EventDispatcher$Queue".replace('/', '.'));
                        }
                    catch (ClassNotFoundException e)
                        {
                        throw new NoClassDefFoundError(e.getMessage());
                        }
                    return clz;
                    }
                
                //++ getter for autogen property _Module
                /**
                 * This is an auto-generated method that returns the global
                * [design time] parent component.
                * 
                * Note: the class generator will ignore any custom
                * implementation for this behavior.
                 */
                private com.tangosol.coherence.Component get_Module()
                    {
                    return this.get_Parent().get_Parent().get_Parent();
                    }
                
                //++ getter for autogen property _ChildClasses
                /**
                 * This is an auto-generated method that returns the map of
                * design time [static] children.
                * 
                * Note: the class generator will ignore any custom
                * implementation for this behavior.
                 */
                protected java.util.Map get_ChildClasses()
                    {
                    return __mapChildren;
                    }

                // ---- class: com.tangosol.coherence.component.net.Cluster$ClusterService$EventDispatcher$Queue$Iterator
                
                /**
                 * Iterator of a snapshot of the List object that backs the
                 * Queue. Supports remove(). Uses the Queue as the monitor if
                 * any synchronization is required.
                 */
                @SuppressWarnings({"deprecation", "rawtypes", "unused", "unchecked", "ConstantConditions", "DuplicatedCode", "ForLoopReplaceableByForEach", "IfCanBeSwitch", "RedundantArrayCreation", "RedundantSuppression", "SameParameterValue", "TryFinallyCanBeTryWithResources", "TryWithIdenticalCatches", "UnnecessaryBoxing", "UnnecessaryUnboxing", "UnusedAssignment"})
                public static class Iterator
                        extends    com.tangosol.coherence.component.util.daemon.queueProcessor.Service.EventDispatcher.Queue.Iterator
                    {
                    // ---- Fields declarations ----
                    
                    // Default constructor
                    public Iterator()
                        {
                        this(null, null, true);
                        }
                    
                    // Initializing constructor
                    public Iterator(String sName, com.tangosol.coherence.Component compParent, boolean fInit)
                        {
                        super(sName, compParent, false);
                        
                        if (fInit)
                            {
                            __init();
                            }
                        }
                    
                    // Main initializer
                    public void __init()
                        {
                        // private initialization
                        __initPrivate();
                        
                        
                        // signal the end of the initialization
                        set_Constructed(true);
                        }
                    
                    // Private initializer
                    protected void __initPrivate()
                        {
                        
                        super.__initPrivate();
                        }
                    
                    //++ getter for static property _Instance
                    /**
                     * Getter for property _Instance.<p>
                    * Auto generated
                     */
                    public static com.tangosol.coherence.Component get_Instance()
                        {
                        return new com.tangosol.coherence.component.net.Cluster.ClusterService.EventDispatcher.Queue.Iterator();
                        }
                    
                    //++ getter for static property _CLASS
                    /**
                     * Getter for property _CLASS.<p>
                    * Property with auto-generated accessor that returns the
                    * Class object for a given component.
                     */
                    public static Class get_CLASS()
                        {
                        Class clz;
                        try
                            {
                            clz = Class.forName("com.tangosol.coherence/component/net/Cluster$ClusterService$EventDispatcher$Queue$Iterator".replace('/', '.'));
                            }
                        catch (ClassNotFoundException e)
                            {
                            throw new NoClassDefFoundError(e.getMessage());
                            }
                        return clz;
                        }
                    
                    //++ getter for autogen property _Module
                    /**
                     * This is an auto-generated method that returns the global
                    * [design time] parent component.
                    * 
                    * Note: the class generator will ignore any custom
                    * implementation for this behavior.
                     */
                    private com.tangosol.coherence.Component get_Module()
                        {
                        return this.get_Parent().get_Parent().get_Parent().get_Parent();
                        }
                    }
                }
            }

        // ---- class: com.tangosol.coherence.component.net.Cluster$ClusterService$Guard
        
        /**
         * Guard provides the Guardable interface implementation for the Daemon.
         */
        @SuppressWarnings({"deprecation", "rawtypes", "unused", "unchecked", "ConstantConditions", "DuplicatedCode", "ForLoopReplaceableByForEach", "IfCanBeSwitch", "RedundantArrayCreation", "RedundantSuppression", "SameParameterValue", "TryFinallyCanBeTryWithResources", "TryWithIdenticalCatches", "UnnecessaryBoxing", "UnnecessaryUnboxing", "UnusedAssignment"})
        public static class Guard
                extends    com.tangosol.coherence.component.util.daemon.queueProcessor.service.Grid.Guard
            {
            // ---- Fields declarations ----
            private static com.tangosol.util.ListMap __mapChildren;
            
            // Static initializer
            static
                {
                __initStatic();
                }
            
            // Default static initializer
            private static void __initStatic()
                {
                // register child classes
                __mapChildren = new com.tangosol.util.ListMap();
                __mapChildren.put("StopService", Cluster.ClusterService.Guard.StopService.get_CLASS());
                }
            
            // Default constructor
            public Guard()
                {
                this(null, null, true);
                }
            
            // Initializing constructor
            public Guard(String sName, com.tangosol.coherence.Component compParent, boolean fInit)
                {
                super(sName, compParent, false);
                
                if (fInit)
                    {
                    __init();
                    }
                }
            
            // Main initializer
            public void __init()
                {
                // private initialization
                __initPrivate();
                
                
                // containment initialization: children
                
                // signal the end of the initialization
                set_Constructed(true);
                }
            
            // Private initializer
            protected void __initPrivate()
                {
                
                super.__initPrivate();
                }
            
            //++ getter for static property _Instance
            /**
             * Getter for property _Instance.<p>
            * Auto generated
             */
            public static com.tangosol.coherence.Component get_Instance()
                {
                return new com.tangosol.coherence.component.net.Cluster.ClusterService.Guard();
                }
            
            //++ getter for static property _CLASS
            /**
             * Getter for property _CLASS.<p>
            * Property with auto-generated accessor that returns the Class
            * object for a given component.
             */
            public static Class get_CLASS()
                {
                Class clz;
                try
                    {
                    clz = Class.forName("com.tangosol.coherence/component/net/Cluster$ClusterService$Guard".replace('/', '.'));
                    }
                catch (ClassNotFoundException e)
                    {
                    throw new NoClassDefFoundError(e.getMessage());
                    }
                return clz;
                }
            
            //++ getter for autogen property _Module
            /**
             * This is an auto-generated method that returns the global [design
            * time] parent component.
            * 
            * Note: the class generator will ignore any custom implementation
            * for this behavior.
             */
            private com.tangosol.coherence.Component get_Module()
                {
                return this.get_Parent().get_Parent();
                }
            
            //++ getter for autogen property _ChildClasses
            /**
             * This is an auto-generated method that returns the map of design
            * time [static] children.
            * 
            * Note: the class generator will ignore any custom implementation
            * for this behavior.
             */
            protected java.util.Map get_ChildClasses()
                {
                return __mapChildren;
                }
            
            // Declared at the super level
            public void recover()
                {
                // don't try to recover the ClusterService
                
                // Note: if we ever enable interrupting the ClusterService, the TcpRing needs
                // to be hardened to handle it, as any interaction with a [Server]SocketChannel
                // on an interrupted thread will result in the socket being closed. If this
                // were to happen without the node ultimately going down, we'd be left with
                // either a partially connected ring, or with our own acceptor gone, in which
                // case we'd get killed by our buddy.
                }

            // ---- class: com.tangosol.coherence.component.net.Cluster$ClusterService$Guard$StopService
            
            /**
             * StopService provides the logic to stop the associated service
             * within the Runnable interface, so that it is suitable to be run
             * on a dedicated thread.
             */
            @SuppressWarnings({"deprecation", "rawtypes", "unused", "unchecked", "ConstantConditions", "DuplicatedCode", "ForLoopReplaceableByForEach", "IfCanBeSwitch", "RedundantArrayCreation", "RedundantSuppression", "SameParameterValue", "TryFinallyCanBeTryWithResources", "TryWithIdenticalCatches", "UnnecessaryBoxing", "UnnecessaryUnboxing", "UnusedAssignment"})
            public static class StopService
                    extends    com.tangosol.coherence.component.util.daemon.queueProcessor.service.Grid.Guard.StopService
                {
                // ---- Fields declarations ----
                
                // Default constructor
                public StopService()
                    {
                    this(null, null, true);
                    }
                
                // Initializing constructor
                public StopService(String sName, com.tangosol.coherence.Component compParent, boolean fInit)
                    {
                    super(sName, compParent, false);
                    
                    if (fInit)
                        {
                        __init();
                        }
                    }
                
                // Main initializer
                public void __init()
                    {
                    // private initialization
                    __initPrivate();
                    
                    
                    // signal the end of the initialization
                    set_Constructed(true);
                    }
                
                // Private initializer
                protected void __initPrivate()
                    {
                    
                    super.__initPrivate();
                    }
                
                //++ getter for static property _Instance
                /**
                 * Getter for property _Instance.<p>
                * Auto generated
                 */
                public static com.tangosol.coherence.Component get_Instance()
                    {
                    return new com.tangosol.coherence.component.net.Cluster.ClusterService.Guard.StopService();
                    }
                
                //++ getter for static property _CLASS
                /**
                 * Getter for property _CLASS.<p>
                * Property with auto-generated accessor that returns the Class
                * object for a given component.
                 */
                public static Class get_CLASS()
                    {
                    Class clz;
                    try
                        {
                        clz = Class.forName("com.tangosol.coherence/component/net/Cluster$ClusterService$Guard$StopService".replace('/', '.'));
                        }
                    catch (ClassNotFoundException e)
                        {
                        throw new NoClassDefFoundError(e.getMessage());
                        }
                    return clz;
                    }
                
                //++ getter for autogen property _Module
                /**
                 * This is an auto-generated method that returns the global
                * [design time] parent component.
                * 
                * Note: the class generator will ignore any custom
                * implementation for this behavior.
                 */
                private com.tangosol.coherence.Component get_Module()
                    {
                    return this.get_Parent().get_Parent().get_Parent();
                    }
                }
            }

        // ---- class: com.tangosol.coherence.component.net.Cluster$ClusterService$MemberConfigUpdate
        
        /**
         * This Message is sent to all other Members running this service to
         * inform them of a change to this Member's ConfigMap for this Service.
         * 
         * Attributes:
         *     Key
         *     Value
         *     Remove
         */
        @SuppressWarnings({"deprecation", "rawtypes", "unused", "unchecked", "ConstantConditions", "DuplicatedCode", "ForLoopReplaceableByForEach", "IfCanBeSwitch", "RedundantArrayCreation", "RedundantSuppression", "SameParameterValue", "TryFinallyCanBeTryWithResources", "TryWithIdenticalCatches", "UnnecessaryBoxing", "UnnecessaryUnboxing", "UnusedAssignment"})
        public static class MemberConfigUpdate
                extends    com.tangosol.coherence.component.util.daemon.queueProcessor.service.Grid.MemberConfigUpdate
            {
            // ---- Fields declarations ----
            
            // Default constructor
            public MemberConfigUpdate()
                {
                this(null, null, true);
                }
            
            // Initializing constructor
            public MemberConfigUpdate(String sName, com.tangosol.coherence.Component compParent, boolean fInit)
                {
                super(sName, compParent, false);
                
                if (fInit)
                    {
                    __init();
                    }
                }
            
            // Main initializer
            public void __init()
                {
                // private initialization
                __initPrivate();
                
                // state initialization: public and protected properties
                try
                    {
                    setMessageType(-3);
                    }
                catch (java.lang.Exception e)
                    {
                    // re-throw as a runtime exception
                    throw new com.tangosol.util.WrapperException(e);
                    }
                
                // signal the end of the initialization
                set_Constructed(true);
                }
            
            // Private initializer
            protected void __initPrivate()
                {
                
                super.__initPrivate();
                }
            
            //++ getter for static property _Instance
            /**
             * Getter for property _Instance.<p>
            * Auto generated
             */
            public static com.tangosol.coherence.Component get_Instance()
                {
                return new com.tangosol.coherence.component.net.Cluster.ClusterService.MemberConfigUpdate();
                }
            
            //++ getter for static property _CLASS
            /**
             * Getter for property _CLASS.<p>
            * Property with auto-generated accessor that returns the Class
            * object for a given component.
             */
            public static Class get_CLASS()
                {
                Class clz;
                try
                    {
                    clz = Class.forName("com.tangosol.coherence/component/net/Cluster$ClusterService$MemberConfigUpdate".replace('/', '.'));
                    }
                catch (ClassNotFoundException e)
                    {
                    throw new NoClassDefFoundError(e.getMessage());
                    }
                return clz;
                }
            
            //++ getter for autogen property _Module
            /**
             * This is an auto-generated method that returns the global [design
            * time] parent component.
            * 
            * Note: the class generator will ignore any custom implementation
            * for this behavior.
             */
            private com.tangosol.coherence.Component get_Module()
                {
                return this.get_Parent().get_Parent();
                }
            }

        // ---- class: com.tangosol.coherence.component.net.Cluster$ClusterService$MemberHeartbeat
        
        /**
         * Message:
         *     MemberHeartbeat
         * 
         * Purpose:
         *     Informs one or more Members that the sender is alive.
         * 
         * Description:
         *     Cluster Members send heartbeats to each other to verify that the
         * other cluster Members are still alive. This works because any
         * undeliverable non-broadcast Message is assumed to mean that the
         * would-be recipient Member is dead.
         * 
         * Attributes:
         *     FromMemberUid
         *     LastReceivedMillis
         * 
         * Response to:
         *     n/a
         * 
         * Expected responses:
         *     n/a
         */
        @SuppressWarnings({"deprecation", "rawtypes", "unused", "unchecked", "ConstantConditions", "DuplicatedCode", "ForLoopReplaceableByForEach", "IfCanBeSwitch", "RedundantArrayCreation", "RedundantSuppression", "SameParameterValue", "TryFinallyCanBeTryWithResources", "TryWithIdenticalCatches", "UnnecessaryBoxing", "UnnecessaryUnboxing", "UnusedAssignment"})
        public static class MemberHeartbeat
                extends    com.tangosol.coherence.component.util.daemon.queueProcessor.service.grid.ClusterService.MemberHeartbeat
            {
            // ---- Fields declarations ----
            
            // Default constructor
            public MemberHeartbeat()
                {
                this(null, null, true);
                }
            
            // Initializing constructor
            public MemberHeartbeat(String sName, com.tangosol.coherence.Component compParent, boolean fInit)
                {
                super(sName, compParent, false);
                
                if (fInit)
                    {
                    __init();
                    }
                }
            
            // Main initializer
            public void __init()
                {
                // private initialization
                __initPrivate();
                
                // state initialization: public and protected properties
                try
                    {
                    setMessageType(33);
                    }
                catch (java.lang.Exception e)
                    {
                    // re-throw as a runtime exception
                    throw new com.tangosol.util.WrapperException(e);
                    }
                
                // signal the end of the initialization
                set_Constructed(true);
                }
            
            // Private initializer
            protected void __initPrivate()
                {
                
                super.__initPrivate();
                }
            
            //++ getter for static property _Instance
            /**
             * Getter for property _Instance.<p>
            * Auto generated
             */
            public static com.tangosol.coherence.Component get_Instance()
                {
                return new com.tangosol.coherence.component.net.Cluster.ClusterService.MemberHeartbeat();
                }
            
            //++ getter for static property _CLASS
            /**
             * Getter for property _CLASS.<p>
            * Property with auto-generated accessor that returns the Class
            * object for a given component.
             */
            public static Class get_CLASS()
                {
                Class clz;
                try
                    {
                    clz = Class.forName("com.tangosol.coherence/component/net/Cluster$ClusterService$MemberHeartbeat".replace('/', '.'));
                    }
                catch (ClassNotFoundException e)
                    {
                    throw new NoClassDefFoundError(e.getMessage());
                    }
                return clz;
                }
            
            //++ getter for autogen property _Module
            /**
             * This is an auto-generated method that returns the global [design
            * time] parent component.
            * 
            * Note: the class generator will ignore any custom implementation
            * for this behavior.
             */
            private com.tangosol.coherence.Component get_Module()
                {
                return this.get_Parent().get_Parent();
                }
            }

        // ---- class: com.tangosol.coherence.component.net.Cluster$ClusterService$MemberJoined
        
        /**
         * Message:
         *     MemberJoined
         * 
         * Purpose:
         *     Informs non-senior Members of the cluster that a new Member has
         * joined (has been assigned an id).
         * 
         * Description:
         *     Sent by the senior Member as soon as it assigns an id to a new
         * Member. Although this Message is in response to a
         * successfully-processed NewMemberRequestId message, this Message is
         * _not_ sent to the new Member, but rather is sent to all other
         * Members, who are then expected to sync with the new Member by
         * responding to NewMemberWelcomeRequest.
         * 
         * Attributes:
         *     MemberId
         *     ServiceVersion
         * 
         * Response to:
         *     NewMemberRequestId (from the new Member)
         * 
         * Expected responses:
         *     n/a
         */
        @SuppressWarnings({"deprecation", "rawtypes", "unused", "unchecked", "ConstantConditions", "DuplicatedCode", "ForLoopReplaceableByForEach", "IfCanBeSwitch", "RedundantArrayCreation", "RedundantSuppression", "SameParameterValue", "TryFinallyCanBeTryWithResources", "TryWithIdenticalCatches", "UnnecessaryBoxing", "UnnecessaryUnboxing", "UnusedAssignment"})
        public static class MemberJoined
                extends    com.tangosol.coherence.component.util.daemon.queueProcessor.service.grid.ClusterService.MemberJoined
            {
            // ---- Fields declarations ----
            
            // Default constructor
            public MemberJoined()
                {
                this(null, null, true);
                }
            
            // Initializing constructor
            public MemberJoined(String sName, com.tangosol.coherence.Component compParent, boolean fInit)
                {
                super(sName, compParent, false);
                
                if (fInit)
                    {
                    __init();
                    }
                }
            
            // Main initializer
            public void __init()
                {
                // private initialization
                __initPrivate();
                
                // state initialization: public and protected properties
                try
                    {
                    setMessageType(4);
                    }
                catch (java.lang.Exception e)
                    {
                    // re-throw as a runtime exception
                    throw new com.tangosol.util.WrapperException(e);
                    }
                
                // signal the end of the initialization
                set_Constructed(true);
                }
            
            // Private initializer
            protected void __initPrivate()
                {
                
                super.__initPrivate();
                }
            
            //++ getter for static property _Instance
            /**
             * Getter for property _Instance.<p>
            * Auto generated
             */
            public static com.tangosol.coherence.Component get_Instance()
                {
                return new com.tangosol.coherence.component.net.Cluster.ClusterService.MemberJoined();
                }
            
            //++ getter for static property _CLASS
            /**
             * Getter for property _CLASS.<p>
            * Property with auto-generated accessor that returns the Class
            * object for a given component.
             */
            public static Class get_CLASS()
                {
                Class clz;
                try
                    {
                    clz = Class.forName("com.tangosol.coherence/component/net/Cluster$ClusterService$MemberJoined".replace('/', '.'));
                    }
                catch (ClassNotFoundException e)
                    {
                    throw new NoClassDefFoundError(e.getMessage());
                    }
                return clz;
                }
            
            //++ getter for autogen property _Module
            /**
             * This is an auto-generated method that returns the global [design
            * time] parent component.
            * 
            * Note: the class generator will ignore any custom implementation
            * for this behavior.
             */
            private com.tangosol.coherence.Component get_Module()
                {
                return this.get_Parent().get_Parent();
                }
            }

        // ---- class: com.tangosol.coherence.component.net.Cluster$ClusterService$MemberLeaving
        
        /**
         * Message:
         *     MemberLeaving
         * 
         * Purpose:
         *     Informs all Members of the cluster of the intention of a Member
         * to leave.
         * 
         * Description:
         *     Sent by a Member when it knows it is leaving the cluster. A
         * Member could die, in which case the "leaving" and "left" Messages
         * may never come from the Member, and when the Member is determined to
         * be dead, only a "left" Message will be sent (from whatever other
         * Member determined that the Member died).
         * 
         * Attributes:
         *     MemberId
         *     MemberUid
         * 
         * Response to:
         *     n/a
         * 
         * Expected responses:
         *     n/a
         */
        @SuppressWarnings({"deprecation", "rawtypes", "unused", "unchecked", "ConstantConditions", "DuplicatedCode", "ForLoopReplaceableByForEach", "IfCanBeSwitch", "RedundantArrayCreation", "RedundantSuppression", "SameParameterValue", "TryFinallyCanBeTryWithResources", "TryWithIdenticalCatches", "UnnecessaryBoxing", "UnnecessaryUnboxing", "UnusedAssignment"})
        public static class MemberLeaving
                extends    com.tangosol.coherence.component.util.daemon.queueProcessor.service.grid.ClusterService.MemberLeaving
            {
            // ---- Fields declarations ----
            
            // Default constructor
            public MemberLeaving()
                {
                this(null, null, true);
                }
            
            // Initializing constructor
            public MemberLeaving(String sName, com.tangosol.coherence.Component compParent, boolean fInit)
                {
                super(sName, compParent, false);
                
                if (fInit)
                    {
                    __init();
                    }
                }
            
            // Main initializer
            public void __init()
                {
                // private initialization
                __initPrivate();
                
                // state initialization: public and protected properties
                try
                    {
                    setMessageType(35);
                    }
                catch (java.lang.Exception e)
                    {
                    // re-throw as a runtime exception
                    throw new com.tangosol.util.WrapperException(e);
                    }
                
                // signal the end of the initialization
                set_Constructed(true);
                }
            
            // Private initializer
            protected void __initPrivate()
                {
                
                super.__initPrivate();
                }
            
            //++ getter for static property _Instance
            /**
             * Getter for property _Instance.<p>
            * Auto generated
             */
            public static com.tangosol.coherence.Component get_Instance()
                {
                return new com.tangosol.coherence.component.net.Cluster.ClusterService.MemberLeaving();
                }
            
            //++ getter for static property _CLASS
            /**
             * Getter for property _CLASS.<p>
            * Property with auto-generated accessor that returns the Class
            * object for a given component.
             */
            public static Class get_CLASS()
                {
                Class clz;
                try
                    {
                    clz = Class.forName("com.tangosol.coherence/component/net/Cluster$ClusterService$MemberLeaving".replace('/', '.'));
                    }
                catch (ClassNotFoundException e)
                    {
                    throw new NoClassDefFoundError(e.getMessage());
                    }
                return clz;
                }
            
            //++ getter for autogen property _Module
            /**
             * This is an auto-generated method that returns the global [design
            * time] parent component.
            * 
            * Note: the class generator will ignore any custom implementation
            * for this behavior.
             */
            private com.tangosol.coherence.Component get_Module()
                {
                return this.get_Parent().get_Parent();
                }
            }

        // ---- class: com.tangosol.coherence.component.net.Cluster$ClusterService$MemberLeft
        
        /**
         * Message:
         *     MemberLeft
         * 
         * History:
         *     Starting with 12.1.2 the witness proctocol logic has been moved
         * to WitenessRequest message.
         * 
         * Purpose:
         *     Notify the cluster of dead/departed Member(s).
         * 
         * Description:
         * MemberLeft notification is used to synchronize the dead member set
         * across members.  It is also oportunistically used by a member
         * leaving the cluster to inform others of its departure.
         * 
         *  Attributes:
         *     SynchronizationRequest
         *     MemberCount
         *     MemberUids
         *     MemberIds
         *     MemberTimestamps (in cluster time)
         * 
         * Response to:
         *     MemberLeft if SynchronizationRequest=true
         * 
         * Expected responses:
         *     MemberLeft if SynchronizationRequest=true
         */
        @SuppressWarnings({"deprecation", "rawtypes", "unused", "unchecked", "ConstantConditions", "DuplicatedCode", "ForLoopReplaceableByForEach", "IfCanBeSwitch", "RedundantArrayCreation", "RedundantSuppression", "SameParameterValue", "TryFinallyCanBeTryWithResources", "TryWithIdenticalCatches", "UnnecessaryBoxing", "UnnecessaryUnboxing", "UnusedAssignment"})
        public static class MemberLeft
                extends    com.tangosol.coherence.component.util.daemon.queueProcessor.service.grid.ClusterService.MemberLeft
            {
            // ---- Fields declarations ----
            
            // Default constructor
            public MemberLeft()
                {
                this(null, null, true);
                }
            
            // Initializing constructor
            public MemberLeft(String sName, com.tangosol.coherence.Component compParent, boolean fInit)
                {
                super(sName, compParent, false);
                
                if (fInit)
                    {
                    __init();
                    }
                }
            
            // Main initializer
            public void __init()
                {
                // private initialization
                __initPrivate();
                
                // state initialization: public and protected properties
                try
                    {
                    setMessageType(36);
                    }
                catch (java.lang.Exception e)
                    {
                    // re-throw as a runtime exception
                    throw new com.tangosol.util.WrapperException(e);
                    }
                
                // signal the end of the initialization
                set_Constructed(true);
                }
            
            // Private initializer
            protected void __initPrivate()
                {
                
                super.__initPrivate();
                }
            
            //++ getter for static property _Instance
            /**
             * Getter for property _Instance.<p>
            * Auto generated
             */
            public static com.tangosol.coherence.Component get_Instance()
                {
                return new com.tangosol.coherence.component.net.Cluster.ClusterService.MemberLeft();
                }
            
            //++ getter for static property _CLASS
            /**
             * Getter for property _CLASS.<p>
            * Property with auto-generated accessor that returns the Class
            * object for a given component.
             */
            public static Class get_CLASS()
                {
                Class clz;
                try
                    {
                    clz = Class.forName("com.tangosol.coherence/component/net/Cluster$ClusterService$MemberLeft".replace('/', '.'));
                    }
                catch (ClassNotFoundException e)
                    {
                    throw new NoClassDefFoundError(e.getMessage());
                    }
                return clz;
                }
            
            //++ getter for autogen property _Module
            /**
             * This is an auto-generated method that returns the global [design
            * time] parent component.
            * 
            * Note: the class generator will ignore any custom implementation
            * for this behavior.
             */
            private com.tangosol.coherence.Component get_Module()
                {
                return this.get_Parent().get_Parent();
                }
            }

        // ---- class: com.tangosol.coherence.component.net.Cluster$ClusterService$MemberWelcome
        
        /**
         * This Message is used to welcome a new member into this Service.
         * 
         * Attributes:
         *     MemberConfigMap
         *     ServiceConfigMap  (optional)
         */
        @SuppressWarnings({"deprecation", "rawtypes", "unused", "unchecked", "ConstantConditions", "DuplicatedCode", "ForLoopReplaceableByForEach", "IfCanBeSwitch", "RedundantArrayCreation", "RedundantSuppression", "SameParameterValue", "TryFinallyCanBeTryWithResources", "TryWithIdenticalCatches", "UnnecessaryBoxing", "UnnecessaryUnboxing", "UnusedAssignment"})
        public static class MemberWelcome
                extends    com.tangosol.coherence.component.util.daemon.queueProcessor.service.Grid.MemberWelcome
            {
            // ---- Fields declarations ----
            
            // Default constructor
            public MemberWelcome()
                {
                this(null, null, true);
                }
            
            // Initializing constructor
            public MemberWelcome(String sName, com.tangosol.coherence.Component compParent, boolean fInit)
                {
                super(sName, compParent, false);
                
                if (fInit)
                    {
                    __init();
                    }
                }
            
            // Main initializer
            public void __init()
                {
                // private initialization
                __initPrivate();
                
                // state initialization: public and protected properties
                try
                    {
                    setMessageType(-2);
                    }
                catch (java.lang.Exception e)
                    {
                    // re-throw as a runtime exception
                    throw new com.tangosol.util.WrapperException(e);
                    }
                
                // signal the end of the initialization
                set_Constructed(true);
                }
            
            // Private initializer
            protected void __initPrivate()
                {
                
                super.__initPrivate();
                }
            
            //++ getter for static property _Instance
            /**
             * Getter for property _Instance.<p>
            * Auto generated
             */
            public static com.tangosol.coherence.Component get_Instance()
                {
                return new com.tangosol.coherence.component.net.Cluster.ClusterService.MemberWelcome();
                }
            
            //++ getter for static property _CLASS
            /**
             * Getter for property _CLASS.<p>
            * Property with auto-generated accessor that returns the Class
            * object for a given component.
             */
            public static Class get_CLASS()
                {
                Class clz;
                try
                    {
                    clz = Class.forName("com.tangosol.coherence/component/net/Cluster$ClusterService$MemberWelcome".replace('/', '.'));
                    }
                catch (ClassNotFoundException e)
                    {
                    throw new NoClassDefFoundError(e.getMessage());
                    }
                return clz;
                }
            
            //++ getter for autogen property _Module
            /**
             * This is an auto-generated method that returns the global [design
            * time] parent component.
            * 
            * Note: the class generator will ignore any custom implementation
            * for this behavior.
             */
            private com.tangosol.coherence.Component get_Module()
                {
                return this.get_Parent().get_Parent();
                }
            }

        // ---- class: com.tangosol.coherence.component.net.Cluster$ClusterService$MemberWelcomeRequest
        
        /**
         * This Message is sent to all other Members running this service to
         * request to be "welcomed" to the service (see $MemberWelcome)
         * 
         * Attributes:
         *     SenderMemberSet
         * 
         * As of Coherence 12.1.2 this message is not used by ClusterService
         */
        @SuppressWarnings({"deprecation", "rawtypes", "unused", "unchecked", "ConstantConditions", "DuplicatedCode", "ForLoopReplaceableByForEach", "IfCanBeSwitch", "RedundantArrayCreation", "RedundantSuppression", "SameParameterValue", "TryFinallyCanBeTryWithResources", "TryWithIdenticalCatches", "UnnecessaryBoxing", "UnnecessaryUnboxing", "UnusedAssignment"})
        public static class MemberWelcomeRequest
                extends    com.tangosol.coherence.component.util.daemon.queueProcessor.service.Grid.MemberWelcomeRequest
            {
            // ---- Fields declarations ----
            private static com.tangosol.util.ListMap __mapChildren;
            
            // Static initializer
            static
                {
                __initStatic();
                }
            
            // Default static initializer
            private static void __initStatic()
                {
                // register child classes
                __mapChildren = new com.tangosol.util.ListMap();
                __mapChildren.put("Poll", Cluster.ClusterService.MemberWelcomeRequest.Poll.get_CLASS());
                }
            
            // Default constructor
            public MemberWelcomeRequest()
                {
                this(null, null, true);
                }
            
            // Initializing constructor
            public MemberWelcomeRequest(String sName, com.tangosol.coherence.Component compParent, boolean fInit)
                {
                super(sName, compParent, false);
                
                if (fInit)
                    {
                    __init();
                    }
                }
            
            // Main initializer
            public void __init()
                {
                // private initialization
                __initPrivate();
                
                // state initialization: public and protected properties
                try
                    {
                    setMessageType(-1);
                    }
                catch (java.lang.Exception e)
                    {
                    // re-throw as a runtime exception
                    throw new com.tangosol.util.WrapperException(e);
                    }
                
                // containment initialization: children
                
                // signal the end of the initialization
                set_Constructed(true);
                }
            
            // Private initializer
            protected void __initPrivate()
                {
                
                super.__initPrivate();
                }
            
            //++ getter for static property _Instance
            /**
             * Getter for property _Instance.<p>
            * Auto generated
             */
            public static com.tangosol.coherence.Component get_Instance()
                {
                return new com.tangosol.coherence.component.net.Cluster.ClusterService.MemberWelcomeRequest();
                }
            
            //++ getter for static property _CLASS
            /**
             * Getter for property _CLASS.<p>
            * Property with auto-generated accessor that returns the Class
            * object for a given component.
             */
            public static Class get_CLASS()
                {
                Class clz;
                try
                    {
                    clz = Class.forName("com.tangosol.coherence/component/net/Cluster$ClusterService$MemberWelcomeRequest".replace('/', '.'));
                    }
                catch (ClassNotFoundException e)
                    {
                    throw new NoClassDefFoundError(e.getMessage());
                    }
                return clz;
                }
            
            //++ getter for autogen property _Module
            /**
             * This is an auto-generated method that returns the global [design
            * time] parent component.
            * 
            * Note: the class generator will ignore any custom implementation
            * for this behavior.
             */
            private com.tangosol.coherence.Component get_Module()
                {
                return this.get_Parent().get_Parent();
                }
            
            //++ getter for autogen property _ChildClasses
            /**
             * This is an auto-generated method that returns the map of design
            * time [static] children.
            * 
            * Note: the class generator will ignore any custom implementation
            * for this behavior.
             */
            protected java.util.Map get_ChildClasses()
                {
                return __mapChildren;
                }

            // ---- class: com.tangosol.coherence.component.net.Cluster$ClusterService$MemberWelcomeRequest$Poll
            
            /**
             * The Poll contains information regarding a request sent to one or
             * more Cluster Members that require responses. A Service may poll
             * other Members that are running the same Service, and the Poll is
             * used to wait for and assemble the responses from each of those
             * Members. A client thread may also use the Poll to block on a
             * response or set of responses, thus waiting for the completion of
             * the Poll. In its simplest form, which is a Poll that is sent to
             * one Member of the Cluster, the Poll actually represents the
             * request/response model.
             */
            @SuppressWarnings({"deprecation", "rawtypes", "unused", "unchecked", "ConstantConditions", "DuplicatedCode", "ForLoopReplaceableByForEach", "IfCanBeSwitch", "RedundantArrayCreation", "RedundantSuppression", "SameParameterValue", "TryFinallyCanBeTryWithResources", "TryWithIdenticalCatches", "UnnecessaryBoxing", "UnnecessaryUnboxing", "UnusedAssignment"})
            public static class Poll
                    extends    com.tangosol.coherence.component.util.daemon.queueProcessor.service.Grid.MemberWelcomeRequest.Poll
                {
                // ---- Fields declarations ----
                
                // Default constructor
                public Poll()
                    {
                    this(null, null, true);
                    }
                
                // Initializing constructor
                public Poll(String sName, com.tangosol.coherence.Component compParent, boolean fInit)
                    {
                    super(sName, compParent, false);
                    
                    if (fInit)
                        {
                        __init();
                        }
                    }
                
                // Main initializer
                public void __init()
                    {
                    // private initialization
                    __initPrivate();
                    
                    
                    // signal the end of the initialization
                    set_Constructed(true);
                    }
                
                // Private initializer
                protected void __initPrivate()
                    {
                    
                    super.__initPrivate();
                    }
                
                //++ getter for static property _Instance
                /**
                 * Getter for property _Instance.<p>
                * Auto generated
                 */
                public static com.tangosol.coherence.Component get_Instance()
                    {
                    return new com.tangosol.coherence.component.net.Cluster.ClusterService.MemberWelcomeRequest.Poll();
                    }
                
                //++ getter for static property _CLASS
                /**
                 * Getter for property _CLASS.<p>
                * Property with auto-generated accessor that returns the Class
                * object for a given component.
                 */
                public static Class get_CLASS()
                    {
                    Class clz;
                    try
                        {
                        clz = Class.forName("com.tangosol.coherence/component/net/Cluster$ClusterService$MemberWelcomeRequest$Poll".replace('/', '.'));
                        }
                    catch (ClassNotFoundException e)
                        {
                        throw new NoClassDefFoundError(e.getMessage());
                        }
                    return clz;
                    }
                
                //++ getter for autogen property _Module
                /**
                 * This is an auto-generated method that returns the global
                * [design time] parent component.
                * 
                * Note: the class generator will ignore any custom
                * implementation for this behavior.
                 */
                private com.tangosol.coherence.Component get_Module()
                    {
                    return this.get_Parent().get_Parent().get_Parent();
                    }
                }
            }

        // ---- class: com.tangosol.coherence.component.net.Cluster$ClusterService$MemberWelcomeRequestTask
        
        /**
         * Task to run MemberWelcomeRequest.
         */
        @SuppressWarnings({"deprecation", "rawtypes", "unused", "unchecked", "ConstantConditions", "DuplicatedCode", "ForLoopReplaceableByForEach", "IfCanBeSwitch", "RedundantArrayCreation", "RedundantSuppression", "SameParameterValue", "TryFinallyCanBeTryWithResources", "TryWithIdenticalCatches", "UnnecessaryBoxing", "UnnecessaryUnboxing", "UnusedAssignment"})
        public static class MemberWelcomeRequestTask
                extends    com.tangosol.coherence.component.util.daemon.queueProcessor.service.Grid.MemberWelcomeRequestTask
            {
            // ---- Fields declarations ----
            
            // Default constructor
            public MemberWelcomeRequestTask()
                {
                this(null, null, true);
                }
            
            // Initializing constructor
            public MemberWelcomeRequestTask(String sName, com.tangosol.coherence.Component compParent, boolean fInit)
                {
                super(sName, compParent, false);
                
                if (fInit)
                    {
                    __init();
                    }
                }
            
            // Main initializer
            public void __init()
                {
                // private initialization
                __initPrivate();
                
                
                // signal the end of the initialization
                set_Constructed(true);
                }
            
            // Private initializer
            protected void __initPrivate()
                {
                
                super.__initPrivate();
                }
            
            //++ getter for static property _Instance
            /**
             * Getter for property _Instance.<p>
            * Auto generated
             */
            public static com.tangosol.coherence.Component get_Instance()
                {
                return new com.tangosol.coherence.component.net.Cluster.ClusterService.MemberWelcomeRequestTask();
                }
            
            //++ getter for static property _CLASS
            /**
             * Getter for property _CLASS.<p>
            * Property with auto-generated accessor that returns the Class
            * object for a given component.
             */
            public static Class get_CLASS()
                {
                Class clz;
                try
                    {
                    clz = Class.forName("com.tangosol.coherence/component/net/Cluster$ClusterService$MemberWelcomeRequestTask".replace('/', '.'));
                    }
                catch (ClassNotFoundException e)
                    {
                    throw new NoClassDefFoundError(e.getMessage());
                    }
                return clz;
                }
            
            //++ getter for autogen property _Module
            /**
             * This is an auto-generated method that returns the global [design
            * time] parent component.
            * 
            * Note: the class generator will ignore any custom implementation
            * for this behavior.
             */
            private com.tangosol.coherence.Component get_Module()
                {
                return this.get_Parent().get_Parent();
                }
            }

        // ---- class: com.tangosol.coherence.component.net.Cluster$ClusterService$NewMemberAnnounce
        
        /**
         * DiscoveryMessage (broadcast):
         *     NewMemberAnnounce
         * 
         * Purpose:
         *     Broadcasts the presence of a new Member (sans id)
         * 
         * Description:
         *     This Message is broadcast by a new Member until it receives a
         * NewMemberAnnounceReply from the senior Member of the cluster or a
         * timeout occurs. If the timeout occurs, the new Member assumes that
         * no cluster already exists, and creates a new cluster with itself as
         * the senior Member. To prevent this from happening if a cluster is in
         * transition (e.g. the senior Member has died but has not yet been
         * determined to be dead), a non-senior Member may replay with the
         * NewMemberAnnounceWait, which tells the new Member to reset its
         * timeout.
         * 
         * Attributes:
         *     AttemptCounter
         *     AttemptLimit
         *     ThisSentTimestamp (auto-set by sender on write)
         *     ThisRecvTimestamp (calculated by receiving Member)
         * 
         * Response to:
         *     n/a
         * 
         * Expected responses:
         *     NewMemberAnnounceReply
         *     NewMemberAnnounceWait
         */
        @SuppressWarnings({"deprecation", "rawtypes", "unused", "unchecked", "ConstantConditions", "DuplicatedCode", "ForLoopReplaceableByForEach", "IfCanBeSwitch", "RedundantArrayCreation", "RedundantSuppression", "SameParameterValue", "TryFinallyCanBeTryWithResources", "TryWithIdenticalCatches", "UnnecessaryBoxing", "UnnecessaryUnboxing", "UnusedAssignment"})
        public static class NewMemberAnnounce
                extends    com.tangosol.coherence.component.util.daemon.queueProcessor.service.grid.ClusterService.NewMemberAnnounce
            {
            // ---- Fields declarations ----
            
            // Default constructor
            public NewMemberAnnounce()
                {
                this(null, null, true);
                }
            
            // Initializing constructor
            public NewMemberAnnounce(String sName, com.tangosol.coherence.Component compParent, boolean fInit)
                {
                super(sName, compParent, false);
                
                if (fInit)
                    {
                    __init();
                    }
                }
            
            // Main initializer
            public void __init()
                {
                // private initialization
                __initPrivate();
                
                // state initialization: public and protected properties
                try
                    {
                    setMessageType(7);
                    }
                catch (java.lang.Exception e)
                    {
                    // re-throw as a runtime exception
                    throw new com.tangosol.util.WrapperException(e);
                    }
                
                // signal the end of the initialization
                set_Constructed(true);
                }
            
            // Private initializer
            protected void __initPrivate()
                {
                
                super.__initPrivate();
                }
            
            //++ getter for static property _Instance
            /**
             * Getter for property _Instance.<p>
            * Auto generated
             */
            public static com.tangosol.coherence.Component get_Instance()
                {
                return new com.tangosol.coherence.component.net.Cluster.ClusterService.NewMemberAnnounce();
                }
            
            //++ getter for static property _CLASS
            /**
             * Getter for property _CLASS.<p>
            * Property with auto-generated accessor that returns the Class
            * object for a given component.
             */
            public static Class get_CLASS()
                {
                Class clz;
                try
                    {
                    clz = Class.forName("com.tangosol.coherence/component/net/Cluster$ClusterService$NewMemberAnnounce".replace('/', '.'));
                    }
                catch (ClassNotFoundException e)
                    {
                    throw new NoClassDefFoundError(e.getMessage());
                    }
                return clz;
                }
            
            //++ getter for autogen property _Module
            /**
             * This is an auto-generated method that returns the global [design
            * time] parent component.
            * 
            * Note: the class generator will ignore any custom implementation
            * for this behavior.
             */
            private com.tangosol.coherence.Component get_Module()
                {
                return this.get_Parent().get_Parent();
                }
            }

        // ---- class: com.tangosol.coherence.component.net.Cluster$ClusterService$NewMemberAnnounceReply
        
        /**
         * DiscoveryMessage (broadcast):
         *     NewMemberAnnounceReply
         * 
         * Purpose:
         *     Broadcast to the new Member to synchronize its time with the
         * cluster so that the new Member can request a cluster Member id.
         * 
         * Description:
         *     This Message is broadcast by the senior cluster Member when a
         * new Member has announced its presence. The cluster time information
         * is included so that the new Member can determine the offset of the
         * cluster time from its system time. Subsequently, the new Member will
         * be able to assemble its Member UID using the adjusted cluster time,
         * thus avoiding later quarrels over seniority.
         * 
         * Attributes:
         *     PrevSentTimestamp
         *     PrevRecvTimestamp
         *     ThisSentTimestamp
         *     ThisRecvTimestamp (calculated by recipient)
         *     MaxDeliveryVariance (configurable)
         * 
         * Response to:
         *     NewMemberAnnounce
         * 
         * Expected responses:
         *     NewMemberRequestId
         *     SeniorMemberPanic
         */
        @SuppressWarnings({"deprecation", "rawtypes", "unused", "unchecked", "ConstantConditions", "DuplicatedCode", "ForLoopReplaceableByForEach", "IfCanBeSwitch", "RedundantArrayCreation", "RedundantSuppression", "SameParameterValue", "TryFinallyCanBeTryWithResources", "TryWithIdenticalCatches", "UnnecessaryBoxing", "UnnecessaryUnboxing", "UnusedAssignment"})
        public static class NewMemberAnnounceReply
                extends    com.tangosol.coherence.component.util.daemon.queueProcessor.service.grid.ClusterService.NewMemberAnnounceReply
            {
            // ---- Fields declarations ----
            
            // Default constructor
            public NewMemberAnnounceReply()
                {
                this(null, null, true);
                }
            
            // Initializing constructor
            public NewMemberAnnounceReply(String sName, com.tangosol.coherence.Component compParent, boolean fInit)
                {
                super(sName, compParent, false);
                
                if (fInit)
                    {
                    __init();
                    }
                }
            
            // Main initializer
            public void __init()
                {
                // private initialization
                __initPrivate();
                
                // state initialization: public and protected properties
                try
                    {
                    setMessageType(8);
                    }
                catch (java.lang.Exception e)
                    {
                    // re-throw as a runtime exception
                    throw new com.tangosol.util.WrapperException(e);
                    }
                
                // signal the end of the initialization
                set_Constructed(true);
                }
            
            // Private initializer
            protected void __initPrivate()
                {
                
                super.__initPrivate();
                }
            
            //++ getter for static property _Instance
            /**
             * Getter for property _Instance.<p>
            * Auto generated
             */
            public static com.tangosol.coherence.Component get_Instance()
                {
                return new com.tangosol.coherence.component.net.Cluster.ClusterService.NewMemberAnnounceReply();
                }
            
            //++ getter for static property _CLASS
            /**
             * Getter for property _CLASS.<p>
            * Property with auto-generated accessor that returns the Class
            * object for a given component.
             */
            public static Class get_CLASS()
                {
                Class clz;
                try
                    {
                    clz = Class.forName("com.tangosol.coherence/component/net/Cluster$ClusterService$NewMemberAnnounceReply".replace('/', '.'));
                    }
                catch (ClassNotFoundException e)
                    {
                    throw new NoClassDefFoundError(e.getMessage());
                    }
                return clz;
                }
            
            //++ getter for autogen property _Module
            /**
             * This is an auto-generated method that returns the global [design
            * time] parent component.
            * 
            * Note: the class generator will ignore any custom implementation
            * for this behavior.
             */
            private com.tangosol.coherence.Component get_Module()
                {
                return this.get_Parent().get_Parent();
                }
            }

        // ---- class: com.tangosol.coherence.component.net.Cluster$ClusterService$NewMemberAnnounceWait
        
        /**
         * DiscoveryMessage (broadcast):
         *     NewMemberAnnounceWait
         * 
         * Purpose:
         *     Broadcasts to the new Member to keep announcing because there is
         * definitely a cluster already in existence
         * 
         * Description:
         *     This Message is broadcast by any non-senior cluster Member when
         * a new Member has passed a certain threshold in its announcement (its
         * repeated NewMemberAnnounce Messages). The non-senior cluster Member
         * determines that the new Member is getting close to starting its own
         * cluster because it has not yet received a reply from the senior
         * Member, so the non-senior cluster Member tells the new Member to
         * wait.
         * 
         * Attributes:
         *     SeniorMember
         * Response to:
         *     NewMemberAnnounce
         * 
         * Expected responses:
         *     n/a
         */
        @SuppressWarnings({"deprecation", "rawtypes", "unused", "unchecked", "ConstantConditions", "DuplicatedCode", "ForLoopReplaceableByForEach", "IfCanBeSwitch", "RedundantArrayCreation", "RedundantSuppression", "SameParameterValue", "TryFinallyCanBeTryWithResources", "TryWithIdenticalCatches", "UnnecessaryBoxing", "UnnecessaryUnboxing", "UnusedAssignment"})
        public static class NewMemberAnnounceWait
                extends    com.tangosol.coherence.component.util.daemon.queueProcessor.service.grid.ClusterService.NewMemberAnnounceWait
            {
            // ---- Fields declarations ----
            
            // Default constructor
            public NewMemberAnnounceWait()
                {
                this(null, null, true);
                }
            
            // Initializing constructor
            public NewMemberAnnounceWait(String sName, com.tangosol.coherence.Component compParent, boolean fInit)
                {
                super(sName, compParent, false);
                
                if (fInit)
                    {
                    __init();
                    }
                }
            
            // Main initializer
            public void __init()
                {
                // private initialization
                __initPrivate();
                
                // state initialization: public and protected properties
                try
                    {
                    setMessageType(9);
                    }
                catch (java.lang.Exception e)
                    {
                    // re-throw as a runtime exception
                    throw new com.tangosol.util.WrapperException(e);
                    }
                
                // signal the end of the initialization
                set_Constructed(true);
                }
            
            // Private initializer
            protected void __initPrivate()
                {
                
                super.__initPrivate();
                }
            
            //++ getter for static property _Instance
            /**
             * Getter for property _Instance.<p>
            * Auto generated
             */
            public static com.tangosol.coherence.Component get_Instance()
                {
                return new com.tangosol.coherence.component.net.Cluster.ClusterService.NewMemberAnnounceWait();
                }
            
            //++ getter for static property _CLASS
            /**
             * Getter for property _CLASS.<p>
            * Property with auto-generated accessor that returns the Class
            * object for a given component.
             */
            public static Class get_CLASS()
                {
                Class clz;
                try
                    {
                    clz = Class.forName("com.tangosol.coherence/component/net/Cluster$ClusterService$NewMemberAnnounceWait".replace('/', '.'));
                    }
                catch (ClassNotFoundException e)
                    {
                    throw new NoClassDefFoundError(e.getMessage());
                    }
                return clz;
                }
            
            //++ getter for autogen property _Module
            /**
             * This is an auto-generated method that returns the global [design
            * time] parent component.
            * 
            * Note: the class generator will ignore any custom implementation
            * for this behavior.
             */
            private com.tangosol.coherence.Component get_Module()
                {
                return this.get_Parent().get_Parent();
                }
            }

        // ---- class: com.tangosol.coherence.component.net.Cluster$ClusterService$NewMemberInduct
        
        /**
         * Message:
         *     NewMemberInduct
         * 
         * Purpose:
         *     Sends synchronization data (member and service lists)
         * 
         * Description:
         *     Response from the senior Member to the new Member to provide the
         * new Member with all of the information it needs about Members and
         * Services.
         * 
         * Attributes:
         *     MemberCount
         *     MemberId[]
         *     MemberUid[] (corresponding to MemberId[])
         *     MemberCpu[] (corresponding to MemberId[])
         *     ServiceVersion[] (corresponding to MemberId[])
         *     ServiceCount
         *     ServiceId[]
         *     ServiceName[]
         *     ServiceType[]
         * 
         * Response to:
         *     NewMemberRequestId
         * 
         * Expected responses:
         *     NewMemberWelcomeRequest
         */
        @SuppressWarnings({"deprecation", "rawtypes", "unused", "unchecked", "ConstantConditions", "DuplicatedCode", "ForLoopReplaceableByForEach", "IfCanBeSwitch", "RedundantArrayCreation", "RedundantSuppression", "SameParameterValue", "TryFinallyCanBeTryWithResources", "TryWithIdenticalCatches", "UnnecessaryBoxing", "UnnecessaryUnboxing", "UnusedAssignment"})
        public static class NewMemberInduct
                extends    com.tangosol.coherence.component.util.daemon.queueProcessor.service.grid.ClusterService.NewMemberInduct
            {
            // ---- Fields declarations ----
            
            // Default constructor
            public NewMemberInduct()
                {
                this(null, null, true);
                }
            
            // Initializing constructor
            public NewMemberInduct(String sName, com.tangosol.coherence.Component compParent, boolean fInit)
                {
                super(sName, compParent, false);
                
                if (fInit)
                    {
                    __init();
                    }
                }
            
            // Main initializer
            public void __init()
                {
                // private initialization
                __initPrivate();
                
                // state initialization: public and protected properties
                try
                    {
                    setMessageType(6);
                    }
                catch (java.lang.Exception e)
                    {
                    // re-throw as a runtime exception
                    throw new com.tangosol.util.WrapperException(e);
                    }
                
                // signal the end of the initialization
                set_Constructed(true);
                }
            
            // Private initializer
            protected void __initPrivate()
                {
                
                super.__initPrivate();
                }
            
            //++ getter for static property _Instance
            /**
             * Getter for property _Instance.<p>
            * Auto generated
             */
            public static com.tangosol.coherence.Component get_Instance()
                {
                return new com.tangosol.coherence.component.net.Cluster.ClusterService.NewMemberInduct();
                }
            
            //++ getter for static property _CLASS
            /**
             * Getter for property _CLASS.<p>
            * Property with auto-generated accessor that returns the Class
            * object for a given component.
             */
            public static Class get_CLASS()
                {
                Class clz;
                try
                    {
                    clz = Class.forName("com.tangosol.coherence/component/net/Cluster$ClusterService$NewMemberInduct".replace('/', '.'));
                    }
                catch (ClassNotFoundException e)
                    {
                    throw new NoClassDefFoundError(e.getMessage());
                    }
                return clz;
                }
            
            //++ getter for autogen property _Module
            /**
             * This is an auto-generated method that returns the global [design
            * time] parent component.
            * 
            * Note: the class generator will ignore any custom implementation
            * for this behavior.
             */
            private com.tangosol.coherence.Component get_Module()
                {
                return this.get_Parent().get_Parent();
                }
            
            // Declared at the super level
            /**
             * This is the event that is executed when a Message is received.
            * <p>
            * It is the main processing event of the Message called by the
            * <code>Service.onMessage()</code> event. With regards to the use
            * of Message components within clustered Services, Services are
            * designed by dragging Message components into them as static
            * children. These Messages are the components that a Service can
            * send to other running instances of the same Service within a
            * cluster. When the onReceived event is invoked by a Service, it
            * means that the Message has been received; the code in the
            * onReceived event is therefore the Message specific logic for
            * processing a received Message. For example, when onReceived is
            * invoked on a Message named FindData, the onReceived event should
            * do the work to "find the data", because it is being invoked by
            * the Service that received the "find the data" Message.
             */
            public void onReceived()
                {
                // import Component.Net.Cluster$ClusterService;
                
                super.onReceived();
                
                Cluster.ClusterService svc = (Cluster.ClusterService) get_Parent();
                if (svc.getWellKnownAddresses() == null)
                    {
                    svc.ensureMulticastDiscovery();
                    }
                svc.ensureDiscovery();
                }
            }

        // ---- class: com.tangosol.coherence.component.net.Cluster$ClusterService$NewMemberRequestId
        
        /**
         * DiscoveryMessage (broadcast):
         *     NewMemberRequestId
         * 
         * Purpose:
         *     Broadcasts the cluster UID of a new Member (sans id) and
         * requests a mini cluster Member id from the senior Member.
         * 
         * Description:
         *     This Message is broadcast by a new Member until it receives a
         * NewMemberRequestIdReply from the senior Member of the cluster or a
         * timeout occurs. If the timeout occurs, the new Member assumes that
         * no cluster already exists, and goes back to broadcasting the
         * NewMemberAnnounce Message. To prevent this from happening if a
         * cluster is in transition (e.g. the senior Member has died but has
         * not yet been determined to be dead), a non-senior Member may reply
         * with the NewMemberRequestIdWait, which tells the new Member to reset
         * its timeout.
         * 
         * Attributes:
         *     AttemptCounter
         *     AttemptLimit
         *     ServiceVersion (since 12.2.1 - VERSION_BARRIER)
         *     CpuCount (since 2.1)
         *     MaxPacketSize (since 2.4)
         *     WkaEnabled (since 3.1)
         *     ClusterName (since 3.1)
         * 
         * Response to:
         *     NewMemberAnnounceReply
         * 
         * Expected responses:
         *     NewMemberRequestIdReject
         *     NewMemberRequestIdReply
         *     NewMemberRequestIdWait
         *     NewMemberInduct
         *     MemberJoined (to all other Members)
         */
        @SuppressWarnings({"deprecation", "rawtypes", "unused", "unchecked", "ConstantConditions", "DuplicatedCode", "ForLoopReplaceableByForEach", "IfCanBeSwitch", "RedundantArrayCreation", "RedundantSuppression", "SameParameterValue", "TryFinallyCanBeTryWithResources", "TryWithIdenticalCatches", "UnnecessaryBoxing", "UnnecessaryUnboxing", "UnusedAssignment"})
        public static class NewMemberRequestId
                extends    com.tangosol.coherence.component.util.daemon.queueProcessor.service.grid.ClusterService.NewMemberRequestId
            {
            // ---- Fields declarations ----
            
            // Default constructor
            public NewMemberRequestId()
                {
                this(null, null, true);
                }
            
            // Initializing constructor
            public NewMemberRequestId(String sName, com.tangosol.coherence.Component compParent, boolean fInit)
                {
                super(sName, compParent, false);
                
                if (fInit)
                    {
                    __init();
                    }
                }
            
            // Main initializer
            public void __init()
                {
                // private initialization
                __initPrivate();
                
                // state initialization: public and protected properties
                try
                    {
                    setMessageType(10);
                    }
                catch (java.lang.Exception e)
                    {
                    // re-throw as a runtime exception
                    throw new com.tangosol.util.WrapperException(e);
                    }
                
                // signal the end of the initialization
                set_Constructed(true);
                }
            
            // Private initializer
            protected void __initPrivate()
                {
                
                super.__initPrivate();
                }
            
            //++ getter for static property _Instance
            /**
             * Getter for property _Instance.<p>
            * Auto generated
             */
            public static com.tangosol.coherence.Component get_Instance()
                {
                return new com.tangosol.coherence.component.net.Cluster.ClusterService.NewMemberRequestId();
                }
            
            //++ getter for static property _CLASS
            /**
             * Getter for property _CLASS.<p>
            * Property with auto-generated accessor that returns the Class
            * object for a given component.
             */
            public static Class get_CLASS()
                {
                Class clz;
                try
                    {
                    clz = Class.forName("com.tangosol.coherence/component/net/Cluster$ClusterService$NewMemberRequestId".replace('/', '.'));
                    }
                catch (ClassNotFoundException e)
                    {
                    throw new NoClassDefFoundError(e.getMessage());
                    }
                return clz;
                }
            
            //++ getter for autogen property _Module
            /**
             * This is an auto-generated method that returns the global [design
            * time] parent component.
            * 
            * Note: the class generator will ignore any custom implementation
            * for this behavior.
             */
            private com.tangosol.coherence.Component get_Module()
                {
                return this.get_Parent().get_Parent();
                }
            }

        // ---- class: com.tangosol.coherence.component.net.Cluster$ClusterService$NewMemberRequestIdReject
        
        /**
         * DiscoveryMessage (broadcast):
         *     NewMemberRequestIdReject
         * 
         * Purpose:
         *     Broadcasts to the new Member to tell it to kill itself.
         * 
         * Description:
         *     This Message is broadcast by any cluster Member when a new
         * Member has attempted to join the cluster but some reason prevents it
         * from joining.
         * 
         * Attributes:
         *     Reason
         * 
         * Response to:
         *     NewMemberRequestId
         * 
         * Expected responses:
         *     SeniorMemberPanic
         */
        @SuppressWarnings({"deprecation", "rawtypes", "unused", "unchecked", "ConstantConditions", "DuplicatedCode", "ForLoopReplaceableByForEach", "IfCanBeSwitch", "RedundantArrayCreation", "RedundantSuppression", "SameParameterValue", "TryFinallyCanBeTryWithResources", "TryWithIdenticalCatches", "UnnecessaryBoxing", "UnnecessaryUnboxing", "UnusedAssignment"})
        public static class NewMemberRequestIdReject
                extends    com.tangosol.coherence.component.util.daemon.queueProcessor.service.grid.ClusterService.NewMemberRequestIdReject
            {
            // ---- Fields declarations ----
            
            // Default constructor
            public NewMemberRequestIdReject()
                {
                this(null, null, true);
                }
            
            // Initializing constructor
            public NewMemberRequestIdReject(String sName, com.tangosol.coherence.Component compParent, boolean fInit)
                {
                super(sName, compParent, false);
                
                if (fInit)
                    {
                    __init();
                    }
                }
            
            // Main initializer
            public void __init()
                {
                // private initialization
                __initPrivate();
                
                // state initialization: public and protected properties
                try
                    {
                    setMessageType(11);
                    }
                catch (java.lang.Exception e)
                    {
                    // re-throw as a runtime exception
                    throw new com.tangosol.util.WrapperException(e);
                    }
                
                // signal the end of the initialization
                set_Constructed(true);
                }
            
            // Private initializer
            protected void __initPrivate()
                {
                
                super.__initPrivate();
                }
            
            //++ getter for static property _Instance
            /**
             * Getter for property _Instance.<p>
            * Auto generated
             */
            public static com.tangosol.coherence.Component get_Instance()
                {
                return new com.tangosol.coherence.component.net.Cluster.ClusterService.NewMemberRequestIdReject();
                }
            
            //++ getter for static property _CLASS
            /**
             * Getter for property _CLASS.<p>
            * Property with auto-generated accessor that returns the Class
            * object for a given component.
             */
            public static Class get_CLASS()
                {
                Class clz;
                try
                    {
                    clz = Class.forName("com.tangosol.coherence/component/net/Cluster$ClusterService$NewMemberRequestIdReject".replace('/', '.'));
                    }
                catch (ClassNotFoundException e)
                    {
                    throw new NoClassDefFoundError(e.getMessage());
                    }
                return clz;
                }
            
            //++ getter for autogen property _Module
            /**
             * This is an auto-generated method that returns the global [design
            * time] parent component.
            * 
            * Note: the class generator will ignore any custom implementation
            * for this behavior.
             */
            private com.tangosol.coherence.Component get_Module()
                {
                return this.get_Parent().get_Parent();
                }
            }

        // ---- class: com.tangosol.coherence.component.net.Cluster$ClusterService$NewMemberRequestIdReply
        
        /**
         * DiscoveryMessage (broadcast):
         *     NewMemberRequestIdReply
         * 
         * Purpose:
         *     Broadcast to the new Member to provide it with a cluster Member
         * id so that the new Member can send and receive non-broadcast
         * Messages.
         * 
         * Description:
         *     This Message is broadcast by the senior cluster Member when a
         * new Member has requested an id. The new Member can get its id from
         * this Message, and can then communicate directly with the senior
         * Member.
         * 
         * Attributes:
         *     ToMember contains the newly assigned mini-id
         *     ServiceVersion (since 12.2.1 - VERSION_BARRIER)
         *     MulticastTimeToLive (since 3.1)
         *     WkaListHashCode (since 3.1)
         * 
         * Response to:
         *     NewMemberRequestId
         * 
         * Expected responses:
         *     SeniorMemberPanic
         */
        @SuppressWarnings({"deprecation", "rawtypes", "unused", "unchecked", "ConstantConditions", "DuplicatedCode", "ForLoopReplaceableByForEach", "IfCanBeSwitch", "RedundantArrayCreation", "RedundantSuppression", "SameParameterValue", "TryFinallyCanBeTryWithResources", "TryWithIdenticalCatches", "UnnecessaryBoxing", "UnnecessaryUnboxing", "UnusedAssignment"})
        public static class NewMemberRequestIdReply
                extends    com.tangosol.coherence.component.util.daemon.queueProcessor.service.grid.ClusterService.NewMemberRequestIdReply
            {
            // ---- Fields declarations ----
            
            // Default constructor
            public NewMemberRequestIdReply()
                {
                this(null, null, true);
                }
            
            // Initializing constructor
            public NewMemberRequestIdReply(String sName, com.tangosol.coherence.Component compParent, boolean fInit)
                {
                super(sName, compParent, false);
                
                if (fInit)
                    {
                    __init();
                    }
                }
            
            // Main initializer
            public void __init()
                {
                // private initialization
                __initPrivate();
                
                // state initialization: public and protected properties
                try
                    {
                    setMessageType(12);
                    }
                catch (java.lang.Exception e)
                    {
                    // re-throw as a runtime exception
                    throw new com.tangosol.util.WrapperException(e);
                    }
                
                // signal the end of the initialization
                set_Constructed(true);
                }
            
            // Private initializer
            protected void __initPrivate()
                {
                
                super.__initPrivate();
                }
            
            //++ getter for static property _Instance
            /**
             * Getter for property _Instance.<p>
            * Auto generated
             */
            public static com.tangosol.coherence.Component get_Instance()
                {
                return new com.tangosol.coherence.component.net.Cluster.ClusterService.NewMemberRequestIdReply();
                }
            
            //++ getter for static property _CLASS
            /**
             * Getter for property _CLASS.<p>
            * Property with auto-generated accessor that returns the Class
            * object for a given component.
             */
            public static Class get_CLASS()
                {
                Class clz;
                try
                    {
                    clz = Class.forName("com.tangosol.coherence/component/net/Cluster$ClusterService$NewMemberRequestIdReply".replace('/', '.'));
                    }
                catch (ClassNotFoundException e)
                    {
                    throw new NoClassDefFoundError(e.getMessage());
                    }
                return clz;
                }
            
            //++ getter for autogen property _Module
            /**
             * This is an auto-generated method that returns the global [design
            * time] parent component.
            * 
            * Note: the class generator will ignore any custom implementation
            * for this behavior.
             */
            private com.tangosol.coherence.Component get_Module()
                {
                return this.get_Parent().get_Parent();
                }
            }

        // ---- class: com.tangosol.coherence.component.net.Cluster$ClusterService$NewMemberRequestIdWait
        
        /**
         * DiscoveryMessage (broadcast):
         *     NewMemberRequestIdWait
         * 
         * Purpose:
         *     Broadcasts to the new Member to keep announcing because there is
         * definitely a cluster already in existence
         * 
         * Description:
         *     This Message is broadcast by any non-senior cluster Member when
         * a new Member has passed a certain threshold in its repeated
         * NewMemberRequestId Messages. The non-senior cluster Member
         * determines that the new Member is getting close to going back to
         * announcing because it has not yet received a reply from the senior
         * Member, so the non-senior cluster Member tells the new Member to
         * wait.
         * 
         * Attributes:
         * 
         * Response to:
         *     NewMemberRequestId
         * 
         * Expected responses:
         *     n/a
         */
        @SuppressWarnings({"deprecation", "rawtypes", "unused", "unchecked", "ConstantConditions", "DuplicatedCode", "ForLoopReplaceableByForEach", "IfCanBeSwitch", "RedundantArrayCreation", "RedundantSuppression", "SameParameterValue", "TryFinallyCanBeTryWithResources", "TryWithIdenticalCatches", "UnnecessaryBoxing", "UnnecessaryUnboxing", "UnusedAssignment"})
        public static class NewMemberRequestIdWait
                extends    com.tangosol.coherence.component.util.daemon.queueProcessor.service.grid.ClusterService.NewMemberRequestIdWait
            {
            // ---- Fields declarations ----
            
            // Default constructor
            public NewMemberRequestIdWait()
                {
                this(null, null, true);
                }
            
            // Initializing constructor
            public NewMemberRequestIdWait(String sName, com.tangosol.coherence.Component compParent, boolean fInit)
                {
                super(sName, compParent, false);
                
                if (fInit)
                    {
                    __init();
                    }
                }
            
            // Main initializer
            public void __init()
                {
                // private initialization
                __initPrivate();
                
                // state initialization: public and protected properties
                try
                    {
                    setMessageType(13);
                    }
                catch (java.lang.Exception e)
                    {
                    // re-throw as a runtime exception
                    throw new com.tangosol.util.WrapperException(e);
                    }
                
                // signal the end of the initialization
                set_Constructed(true);
                }
            
            // Private initializer
            protected void __initPrivate()
                {
                
                super.__initPrivate();
                }
            
            //++ getter for static property _Instance
            /**
             * Getter for property _Instance.<p>
            * Auto generated
             */
            public static com.tangosol.coherence.Component get_Instance()
                {
                return new com.tangosol.coherence.component.net.Cluster.ClusterService.NewMemberRequestIdWait();
                }
            
            //++ getter for static property _CLASS
            /**
             * Getter for property _CLASS.<p>
            * Property with auto-generated accessor that returns the Class
            * object for a given component.
             */
            public static Class get_CLASS()
                {
                Class clz;
                try
                    {
                    clz = Class.forName("com.tangosol.coherence/component/net/Cluster$ClusterService$NewMemberRequestIdWait".replace('/', '.'));
                    }
                catch (ClassNotFoundException e)
                    {
                    throw new NoClassDefFoundError(e.getMessage());
                    }
                return clz;
                }
            
            //++ getter for autogen property _Module
            /**
             * This is an auto-generated method that returns the global [design
            * time] parent component.
            * 
            * Note: the class generator will ignore any custom implementation
            * for this behavior.
             */
            private com.tangosol.coherence.Component get_Module()
                {
                return this.get_Parent().get_Parent();
                }
            }

        // ---- class: com.tangosol.coherence.component.net.Cluster$ClusterService$NewMemberTimestampRequest
        
        /**
         * *** LICENSE ***
         * WARNING: This Message name is obfuscated.
         * 
         * Message:
         *     NewMemberTimestampRequest
         * 
         * Purpose:
         *     This Message is used to determine the total number of Real Time
         * Clients permitted by the license(s) deployed in the cluster.
         * 
         * Attributes:
         *     n/a
         * 
         * Response to:
         *     n/a
         * 
         * Expected responses:
         *     NewMemberTimestampResponse
         * 
         * @since Coherence 3.2
         */
        @SuppressWarnings({"deprecation", "rawtypes", "unused", "unchecked", "ConstantConditions", "DuplicatedCode", "ForLoopReplaceableByForEach", "IfCanBeSwitch", "RedundantArrayCreation", "RedundantSuppression", "SameParameterValue", "TryFinallyCanBeTryWithResources", "TryWithIdenticalCatches", "UnnecessaryBoxing", "UnnecessaryUnboxing", "UnusedAssignment"})
        public static class NewMemberTimestampRequest
                extends    com.tangosol.coherence.component.util.daemon.queueProcessor.service.grid.ClusterService.NewMemberTimestampRequest
            {
            // ---- Fields declarations ----
            private static com.tangosol.util.ListMap __mapChildren;
            
            // Static initializer
            static
                {
                __initStatic();
                }
            
            // Default static initializer
            private static void __initStatic()
                {
                // register child classes
                __mapChildren = new com.tangosol.util.ListMap();
                __mapChildren.put("Poll", Cluster.ClusterService.NewMemberTimestampRequest.Poll.get_CLASS());
                }
            
            // Default constructor
            public NewMemberTimestampRequest()
                {
                this(null, null, true);
                }
            
            // Initializing constructor
            public NewMemberTimestampRequest(String sName, com.tangosol.coherence.Component compParent, boolean fInit)
                {
                super(sName, compParent, false);
                
                if (fInit)
                    {
                    __init();
                    }
                }
            
            // Main initializer
            public void __init()
                {
                // private initialization
                __initPrivate();
                
                // state initialization: public and protected properties
                try
                    {
                    setMessageType(51);
                    }
                catch (java.lang.Exception e)
                    {
                    // re-throw as a runtime exception
                    throw new com.tangosol.util.WrapperException(e);
                    }
                
                // containment initialization: children
                
                // signal the end of the initialization
                set_Constructed(true);
                }
            
            // Private initializer
            protected void __initPrivate()
                {
                
                super.__initPrivate();
                }
            
            //++ getter for static property _Instance
            /**
             * Getter for property _Instance.<p>
            * Auto generated
             */
            public static com.tangosol.coherence.Component get_Instance()
                {
                return new com.tangosol.coherence.component.net.Cluster.ClusterService.NewMemberTimestampRequest();
                }
            
            //++ getter for static property _CLASS
            /**
             * Getter for property _CLASS.<p>
            * Property with auto-generated accessor that returns the Class
            * object for a given component.
             */
            public static Class get_CLASS()
                {
                Class clz;
                try
                    {
                    clz = Class.forName("com.tangosol.coherence/component/net/Cluster$ClusterService$NewMemberTimestampRequest".replace('/', '.'));
                    }
                catch (ClassNotFoundException e)
                    {
                    throw new NoClassDefFoundError(e.getMessage());
                    }
                return clz;
                }
            
            //++ getter for autogen property _Module
            /**
             * This is an auto-generated method that returns the global [design
            * time] parent component.
            * 
            * Note: the class generator will ignore any custom implementation
            * for this behavior.
             */
            private com.tangosol.coherence.Component get_Module()
                {
                return this.get_Parent().get_Parent();
                }
            
            //++ getter for autogen property _ChildClasses
            /**
             * This is an auto-generated method that returns the map of design
            * time [static] children.
            * 
            * Note: the class generator will ignore any custom implementation
            * for this behavior.
             */
            protected java.util.Map get_ChildClasses()
                {
                return __mapChildren;
                }

            // ---- class: com.tangosol.coherence.component.net.Cluster$ClusterService$NewMemberTimestampRequest$Poll
            
            /**
             * The Poll contains information regarding a request sent to one or
             * more Cluster Members that require responses. A Service may poll
             * other Members that are running the same Service, and the Poll is
             * used to wait for and assemble the responses from each of those
             * Members. A client thread may also use the Poll to block on a
             * response or set of responses, thus waiting for the completion of
             * the Poll. In its simplest form, which is a Poll that is sent to
             * one Member of the Cluster, the Poll actually represents the
             * request/response model.
             */
            @SuppressWarnings({"deprecation", "rawtypes", "unused", "unchecked", "ConstantConditions", "DuplicatedCode", "ForLoopReplaceableByForEach", "IfCanBeSwitch", "RedundantArrayCreation", "RedundantSuppression", "SameParameterValue", "TryFinallyCanBeTryWithResources", "TryWithIdenticalCatches", "UnnecessaryBoxing", "UnnecessaryUnboxing", "UnusedAssignment"})
            public static class Poll
                    extends    com.tangosol.coherence.component.util.daemon.queueProcessor.service.grid.ClusterService.NewMemberTimestampRequest.Poll
                {
                // ---- Fields declarations ----
                
                // Default constructor
                public Poll()
                    {
                    this(null, null, true);
                    }
                
                // Initializing constructor
                public Poll(String sName, com.tangosol.coherence.Component compParent, boolean fInit)
                    {
                    super(sName, compParent, false);
                    
                    if (fInit)
                        {
                        __init();
                        }
                    }
                
                // Main initializer
                public void __init()
                    {
                    // private initialization
                    __initPrivate();
                    
                    
                    // signal the end of the initialization
                    set_Constructed(true);
                    }
                
                // Private initializer
                protected void __initPrivate()
                    {
                    
                    super.__initPrivate();
                    }
                
                //++ getter for static property _Instance
                /**
                 * Getter for property _Instance.<p>
                * Auto generated
                 */
                public static com.tangosol.coherence.Component get_Instance()
                    {
                    return new com.tangosol.coherence.component.net.Cluster.ClusterService.NewMemberTimestampRequest.Poll();
                    }
                
                //++ getter for static property _CLASS
                /**
                 * Getter for property _CLASS.<p>
                * Property with auto-generated accessor that returns the Class
                * object for a given component.
                 */
                public static Class get_CLASS()
                    {
                    Class clz;
                    try
                        {
                        clz = Class.forName("com.tangosol.coherence/component/net/Cluster$ClusterService$NewMemberTimestampRequest$Poll".replace('/', '.'));
                        }
                    catch (ClassNotFoundException e)
                        {
                        throw new NoClassDefFoundError(e.getMessage());
                        }
                    return clz;
                    }
                
                //++ getter for autogen property _Module
                /**
                 * This is an auto-generated method that returns the global
                * [design time] parent component.
                * 
                * Note: the class generator will ignore any custom
                * implementation for this behavior.
                 */
                private com.tangosol.coherence.Component get_Module()
                    {
                    return this.get_Parent().get_Parent().get_Parent();
                    }
                }
            }

        // ---- class: com.tangosol.coherence.component.net.Cluster$ClusterService$NewMemberTimestampResponse
        
        /**
         * *** LICENSE ***
         * WARNING: This Message name is obfuscated.
         * 
         * Message:
         *     NewMemberTimestampResponse
         * 
         * Purpose:
         *     Response to the NewMemberTimestampRequest (poll)
         * 
         * Description:
         *     Informs the requestor of the total number of Real Time Clients
         * permitted by the license(s) deployed in the cluster.
         * 
         * Attributes:
         *     Timestamp (the number of licensed Real Time Clients)
         * 
         * Response to:
         *     NewMemberTimestampRequest
         * 
         * Expected responses:
         *     n/a
         * 
         * @since Coherence 3.2
         */
        @SuppressWarnings({"deprecation", "rawtypes", "unused", "unchecked", "ConstantConditions", "DuplicatedCode", "ForLoopReplaceableByForEach", "IfCanBeSwitch", "RedundantArrayCreation", "RedundantSuppression", "SameParameterValue", "TryFinallyCanBeTryWithResources", "TryWithIdenticalCatches", "UnnecessaryBoxing", "UnnecessaryUnboxing", "UnusedAssignment"})
        public static class NewMemberTimestampResponse
                extends    com.tangosol.coherence.component.util.daemon.queueProcessor.service.grid.ClusterService.NewMemberTimestampResponse
            {
            // ---- Fields declarations ----
            
            // Default constructor
            public NewMemberTimestampResponse()
                {
                this(null, null, true);
                }
            
            // Initializing constructor
            public NewMemberTimestampResponse(String sName, com.tangosol.coherence.Component compParent, boolean fInit)
                {
                super(sName, compParent, false);
                
                if (fInit)
                    {
                    __init();
                    }
                }
            
            // Main initializer
            public void __init()
                {
                // private initialization
                __initPrivate();
                
                // state initialization: public and protected properties
                try
                    {
                    setMessageType(52);
                    }
                catch (java.lang.Exception e)
                    {
                    // re-throw as a runtime exception
                    throw new com.tangosol.util.WrapperException(e);
                    }
                
                // signal the end of the initialization
                set_Constructed(true);
                }
            
            // Private initializer
            protected void __initPrivate()
                {
                
                super.__initPrivate();
                }
            
            //++ getter for static property _Instance
            /**
             * Getter for property _Instance.<p>
            * Auto generated
             */
            public static com.tangosol.coherence.Component get_Instance()
                {
                return new com.tangosol.coherence.component.net.Cluster.ClusterService.NewMemberTimestampResponse();
                }
            
            //++ getter for static property _CLASS
            /**
             * Getter for property _CLASS.<p>
            * Property with auto-generated accessor that returns the Class
            * object for a given component.
             */
            public static Class get_CLASS()
                {
                Class clz;
                try
                    {
                    clz = Class.forName("com.tangosol.coherence/component/net/Cluster$ClusterService$NewMemberTimestampResponse".replace('/', '.'));
                    }
                catch (ClassNotFoundException e)
                    {
                    throw new NoClassDefFoundError(e.getMessage());
                    }
                return clz;
                }
            
            //++ getter for autogen property _Module
            /**
             * This is an auto-generated method that returns the global [design
            * time] parent component.
            * 
            * Note: the class generator will ignore any custom implementation
            * for this behavior.
             */
            private com.tangosol.coherence.Component get_Module()
                {
                return this.get_Parent().get_Parent();
                }
            }

        // ---- class: com.tangosol.coherence.component.net.Cluster$ClusterService$NewMemberWelcome
        
        /**
         * Message:
         *     NewMemberWelcome
         * 
         * Purpose:
         *     Each cluster Member welcomes the new Member by sending its list
         * of Services that it is providing.
         * 
         * Description:
         *     After receiving the NewMemberAcceptIdReply, the new Member has
         * the Member ids and Service data, so it can accept Message from all
         * Members and it can match up Members and Services. This Message comes
         * in to the new Member from each and every cluster Member and provides
         * it with the information to match up Members and Services.
         * 
         * Attributes:
         *     FromMemberUid
         *     ServiceCount
         *     ServiceId[]
         *     ServiceName[]
         *     ServiceType[]
         *     ServiceVersion[]
         *     ServiceEndPoint[] @since 3.7.1
         *     ServiceJoinTime[]
         *     ServiceMembershipState[]
         *     ServiceMemberConfigMap[] @since 3.7.2
         *     PreferredPacketLength @since 3.6.1
         *     PreferredPort @since 3.6.1
         * 
         * Response to:
         *     NewMemberWelcomeRequest
         * 
         * Expected responses:
         *     n/a
         */
        @SuppressWarnings({"deprecation", "rawtypes", "unused", "unchecked", "ConstantConditions", "DuplicatedCode", "ForLoopReplaceableByForEach", "IfCanBeSwitch", "RedundantArrayCreation", "RedundantSuppression", "SameParameterValue", "TryFinallyCanBeTryWithResources", "TryWithIdenticalCatches", "UnnecessaryBoxing", "UnnecessaryUnboxing", "UnusedAssignment"})
        public static class NewMemberWelcome
                extends    com.tangosol.coherence.component.util.daemon.queueProcessor.service.grid.ClusterService.NewMemberWelcome
            {
            // ---- Fields declarations ----
            
            // Default constructor
            public NewMemberWelcome()
                {
                this(null, null, true);
                }
            
            // Initializing constructor
            public NewMemberWelcome(String sName, com.tangosol.coherence.Component compParent, boolean fInit)
                {
                super(sName, compParent, false);
                
                if (fInit)
                    {
                    __init();
                    }
                }
            
            // Main initializer
            public void __init()
                {
                // private initialization
                __initPrivate();
                
                // state initialization: public and protected properties
                try
                    {
                    setMessageType(37);
                    }
                catch (java.lang.Exception e)
                    {
                    // re-throw as a runtime exception
                    throw new com.tangosol.util.WrapperException(e);
                    }
                
                // signal the end of the initialization
                set_Constructed(true);
                }
            
            // Private initializer
            protected void __initPrivate()
                {
                
                super.__initPrivate();
                }
            
            //++ getter for static property _Instance
            /**
             * Getter for property _Instance.<p>
            * Auto generated
             */
            public static com.tangosol.coherence.Component get_Instance()
                {
                return new com.tangosol.coherence.component.net.Cluster.ClusterService.NewMemberWelcome();
                }
            
            //++ getter for static property _CLASS
            /**
             * Getter for property _CLASS.<p>
            * Property with auto-generated accessor that returns the Class
            * object for a given component.
             */
            public static Class get_CLASS()
                {
                Class clz;
                try
                    {
                    clz = Class.forName("com.tangosol.coherence/component/net/Cluster$ClusterService$NewMemberWelcome".replace('/', '.'));
                    }
                catch (ClassNotFoundException e)
                    {
                    throw new NoClassDefFoundError(e.getMessage());
                    }
                return clz;
                }
            
            //++ getter for autogen property _Module
            /**
             * This is an auto-generated method that returns the global [design
            * time] parent component.
            * 
            * Note: the class generator will ignore any custom implementation
            * for this behavior.
             */
            private com.tangosol.coherence.Component get_Module()
                {
                return this.get_Parent().get_Parent();
                }
            }

        // ---- class: com.tangosol.coherence.component.net.Cluster$ClusterService$NewMemberWelcomeAnnounce
        
        /**
         * DiscoveryMessage (broadcast):
         *     NewMemberWelcomeAnnounce
         * 
         * Purpose:
         *     Broadcasts the presence of a new Member (with id)
         * 
         * Description:
         *     This Message is broadcast by a new Member until it has closed
         * its NewMemberWelcomeRequest Poll. Its purpose is to provide the
         * other cluster Members with the knowledge of this Member and its id
         * just in case the senior Member dies before ensuring the delivery of
         * the "new member" information. Senior Member info is included as a
         * "proof".
         * 
         * Attributes:
         *     SeniorMember
         *     ServiceVersion
         * 
         * Response to:
         *     n/a
         * 
         * Expected responses:
         */
        @SuppressWarnings({"deprecation", "rawtypes", "unused", "unchecked", "ConstantConditions", "DuplicatedCode", "ForLoopReplaceableByForEach", "IfCanBeSwitch", "RedundantArrayCreation", "RedundantSuppression", "SameParameterValue", "TryFinallyCanBeTryWithResources", "TryWithIdenticalCatches", "UnnecessaryBoxing", "UnnecessaryUnboxing", "UnusedAssignment"})
        public static class NewMemberWelcomeAnnounce
                extends    com.tangosol.coherence.component.util.daemon.queueProcessor.service.grid.ClusterService.NewMemberWelcomeAnnounce
            {
            // ---- Fields declarations ----
            
            // Default constructor
            public NewMemberWelcomeAnnounce()
                {
                this(null, null, true);
                }
            
            // Initializing constructor
            public NewMemberWelcomeAnnounce(String sName, com.tangosol.coherence.Component compParent, boolean fInit)
                {
                super(sName, compParent, false);
                
                if (fInit)
                    {
                    __init();
                    }
                }
            
            // Main initializer
            public void __init()
                {
                // private initialization
                __initPrivate();
                
                // state initialization: public and protected properties
                try
                    {
                    setMessageType(38);
                    }
                catch (java.lang.Exception e)
                    {
                    // re-throw as a runtime exception
                    throw new com.tangosol.util.WrapperException(e);
                    }
                
                // signal the end of the initialization
                set_Constructed(true);
                }
            
            // Private initializer
            protected void __initPrivate()
                {
                
                super.__initPrivate();
                }
            
            //++ getter for static property _Instance
            /**
             * Getter for property _Instance.<p>
            * Auto generated
             */
            public static com.tangosol.coherence.Component get_Instance()
                {
                return new com.tangosol.coherence.component.net.Cluster.ClusterService.NewMemberWelcomeAnnounce();
                }
            
            //++ getter for static property _CLASS
            /**
             * Getter for property _CLASS.<p>
            * Property with auto-generated accessor that returns the Class
            * object for a given component.
             */
            public static Class get_CLASS()
                {
                Class clz;
                try
                    {
                    clz = Class.forName("com.tangosol.coherence/component/net/Cluster$ClusterService$NewMemberWelcomeAnnounce".replace('/', '.'));
                    }
                catch (ClassNotFoundException e)
                    {
                    throw new NoClassDefFoundError(e.getMessage());
                    }
                return clz;
                }
            
            //++ getter for autogen property _Module
            /**
             * This is an auto-generated method that returns the global [design
            * time] parent component.
            * 
            * Note: the class generator will ignore any custom implementation
            * for this behavior.
             */
            private com.tangosol.coherence.Component get_Module()
                {
                return this.get_Parent().get_Parent();
                }
            }

        // ---- class: com.tangosol.coherence.component.net.Cluster$ClusterService$NewMemberWelcomeRequest
        
        /**
         * Message:
         *     NewMemberWelcomeRequest
         * 
         * History:
         *     This message was added after the 1.1 release to take advantage
         * of the new Poll implementation and to solve a problem with Service
         * startup. Prior to this Message, the ClusterService would "finish
         * starting" as soon as it had a Member Id and the list of other
         * Members and Services. Using the Poll implementation, it is now
         * possible for the ClusterService to wait until it has been welcomed
         * by all other Members.
         * 
         * Purpose:
         *     The new Member requests a welcome from each other Member.
         * 
         * Description:
         *     After receiving the NewMemberRequestIdReply, the new Member has
         * the Member ids and Service data, so it can accept Message from all
         * Members and it can match up Members and Services. This Message
         * requests the NewMemberWelcome message that will provide the match-up
         * information of Members and Services.
         * 
         * Attributes:
         *     PreferredPacketLength @since 3.6.1
         *     PreferredPort @since 3.6.1
         *     ServiceVersion @since 12.2.1.1.0
         * 
         * Response to:
         *     NewMemberRequestIdReply (from senior Member)
         * 
         * Expected responses:
         *     NewMemberWelcome
         */
        @SuppressWarnings({"deprecation", "rawtypes", "unused", "unchecked", "ConstantConditions", "DuplicatedCode", "ForLoopReplaceableByForEach", "IfCanBeSwitch", "RedundantArrayCreation", "RedundantSuppression", "SameParameterValue", "TryFinallyCanBeTryWithResources", "TryWithIdenticalCatches", "UnnecessaryBoxing", "UnnecessaryUnboxing", "UnusedAssignment"})
        public static class NewMemberWelcomeRequest
                extends    com.tangosol.coherence.component.util.daemon.queueProcessor.service.grid.ClusterService.NewMemberWelcomeRequest
            {
            // ---- Fields declarations ----
            private static com.tangosol.util.ListMap __mapChildren;
            
            // Static initializer
            static
                {
                __initStatic();
                }
            
            // Default static initializer
            private static void __initStatic()
                {
                // register child classes
                __mapChildren = new com.tangosol.util.ListMap();
                __mapChildren.put("Poll", Cluster.ClusterService.NewMemberWelcomeRequest.Poll.get_CLASS());
                }
            
            // Default constructor
            public NewMemberWelcomeRequest()
                {
                this(null, null, true);
                }
            
            // Initializing constructor
            public NewMemberWelcomeRequest(String sName, com.tangosol.coherence.Component compParent, boolean fInit)
                {
                super(sName, compParent, false);
                
                if (fInit)
                    {
                    __init();
                    }
                }
            
            // Main initializer
            public void __init()
                {
                // private initialization
                __initPrivate();
                
                // state initialization: public and protected properties
                try
                    {
                    setMessageType(39);
                    }
                catch (java.lang.Exception e)
                    {
                    // re-throw as a runtime exception
                    throw new com.tangosol.util.WrapperException(e);
                    }
                
                // containment initialization: children
                
                // signal the end of the initialization
                set_Constructed(true);
                }
            
            // Private initializer
            protected void __initPrivate()
                {
                
                super.__initPrivate();
                }
            
            //++ getter for static property _Instance
            /**
             * Getter for property _Instance.<p>
            * Auto generated
             */
            public static com.tangosol.coherence.Component get_Instance()
                {
                return new com.tangosol.coherence.component.net.Cluster.ClusterService.NewMemberWelcomeRequest();
                }
            
            //++ getter for static property _CLASS
            /**
             * Getter for property _CLASS.<p>
            * Property with auto-generated accessor that returns the Class
            * object for a given component.
             */
            public static Class get_CLASS()
                {
                Class clz;
                try
                    {
                    clz = Class.forName("com.tangosol.coherence/component/net/Cluster$ClusterService$NewMemberWelcomeRequest".replace('/', '.'));
                    }
                catch (ClassNotFoundException e)
                    {
                    throw new NoClassDefFoundError(e.getMessage());
                    }
                return clz;
                }
            
            //++ getter for autogen property _Module
            /**
             * This is an auto-generated method that returns the global [design
            * time] parent component.
            * 
            * Note: the class generator will ignore any custom implementation
            * for this behavior.
             */
            private com.tangosol.coherence.Component get_Module()
                {
                return this.get_Parent().get_Parent();
                }
            
            //++ getter for autogen property _ChildClasses
            /**
             * This is an auto-generated method that returns the map of design
            * time [static] children.
            * 
            * Note: the class generator will ignore any custom implementation
            * for this behavior.
             */
            protected java.util.Map get_ChildClasses()
                {
                return __mapChildren;
                }

            // ---- class: com.tangosol.coherence.component.net.Cluster$ClusterService$NewMemberWelcomeRequest$Poll
            
            /**
             * The Poll contains information regarding a request sent to one or
             * more Cluster Members that require responses. A Service may poll
             * other Members that are running the same Service, and the Poll is
             * used to wait for and assemble the responses from each of those
             * Members. A client thread may also use the Poll to block on a
             * response or set of responses, thus waiting for the completion of
             * the Poll. In its simplest form, which is a Poll that is sent to
             * one Member of the Cluster, the Poll actually represents the
             * request/response model.
             */
            @SuppressWarnings({"deprecation", "rawtypes", "unused", "unchecked", "ConstantConditions", "DuplicatedCode", "ForLoopReplaceableByForEach", "IfCanBeSwitch", "RedundantArrayCreation", "RedundantSuppression", "SameParameterValue", "TryFinallyCanBeTryWithResources", "TryWithIdenticalCatches", "UnnecessaryBoxing", "UnnecessaryUnboxing", "UnusedAssignment"})
            public static class Poll
                    extends    com.tangosol.coherence.component.util.daemon.queueProcessor.service.grid.ClusterService.NewMemberWelcomeRequest.Poll
                {
                // ---- Fields declarations ----
                
                // Default constructor
                public Poll()
                    {
                    this(null, null, true);
                    }
                
                // Initializing constructor
                public Poll(String sName, com.tangosol.coherence.Component compParent, boolean fInit)
                    {
                    super(sName, compParent, false);
                    
                    if (fInit)
                        {
                        __init();
                        }
                    }
                
                // Main initializer
                public void __init()
                    {
                    // private initialization
                    __initPrivate();
                    
                    
                    // signal the end of the initialization
                    set_Constructed(true);
                    }
                
                // Private initializer
                protected void __initPrivate()
                    {
                    
                    super.__initPrivate();
                    }
                
                //++ getter for static property _Instance
                /**
                 * Getter for property _Instance.<p>
                * Auto generated
                 */
                public static com.tangosol.coherence.Component get_Instance()
                    {
                    return new com.tangosol.coherence.component.net.Cluster.ClusterService.NewMemberWelcomeRequest.Poll();
                    }
                
                //++ getter for static property _CLASS
                /**
                 * Getter for property _CLASS.<p>
                * Property with auto-generated accessor that returns the Class
                * object for a given component.
                 */
                public static Class get_CLASS()
                    {
                    Class clz;
                    try
                        {
                        clz = Class.forName("com.tangosol.coherence/component/net/Cluster$ClusterService$NewMemberWelcomeRequest$Poll".replace('/', '.'));
                        }
                    catch (ClassNotFoundException e)
                        {
                        throw new NoClassDefFoundError(e.getMessage());
                        }
                    return clz;
                    }
                
                //++ getter for autogen property _Module
                /**
                 * This is an auto-generated method that returns the global
                * [design time] parent component.
                * 
                * Note: the class generator will ignore any custom
                * implementation for this behavior.
                 */
                private com.tangosol.coherence.Component get_Module()
                    {
                    return this.get_Parent().get_Parent().get_Parent();
                    }
                }
            }

        // ---- class: com.tangosol.coherence.component.net.Cluster$ClusterService$NotifyConnectionClose
        
        /**
         * This internal Message is sent to all member aware services when an
         * extend client connection is closed or lost in ProxyService. The
         * NotifyMember refers to the extend client member leaving the
         * ProxyService.
         * 
         * Attributes:
         *     NotifyMember
         */
        @SuppressWarnings({"deprecation", "rawtypes", "unused", "unchecked", "ConstantConditions", "DuplicatedCode", "ForLoopReplaceableByForEach", "IfCanBeSwitch", "RedundantArrayCreation", "RedundantSuppression", "SameParameterValue", "TryFinallyCanBeTryWithResources", "TryWithIdenticalCatches", "UnnecessaryBoxing", "UnnecessaryUnboxing", "UnusedAssignment"})
        public static class NotifyConnectionClose
                extends    com.tangosol.coherence.component.util.daemon.queueProcessor.service.Grid.NotifyConnectionClose
            {
            // ---- Fields declarations ----
            
            // Default constructor
            public NotifyConnectionClose()
                {
                this(null, null, true);
                }
            
            // Initializing constructor
            public NotifyConnectionClose(String sName, com.tangosol.coherence.Component compParent, boolean fInit)
                {
                super(sName, compParent, false);
                
                if (fInit)
                    {
                    __init();
                    }
                }
            
            // Main initializer
            public void __init()
                {
                // private initialization
                __initPrivate();
                
                // state initialization: public and protected properties
                try
                    {
                    setMessageType(-24);
                    }
                catch (java.lang.Exception e)
                    {
                    // re-throw as a runtime exception
                    throw new com.tangosol.util.WrapperException(e);
                    }
                
                // signal the end of the initialization
                set_Constructed(true);
                }
            
            // Private initializer
            protected void __initPrivate()
                {
                
                super.__initPrivate();
                }
            
            //++ getter for static property _Instance
            /**
             * Getter for property _Instance.<p>
            * Auto generated
             */
            public static com.tangosol.coherence.Component get_Instance()
                {
                return new com.tangosol.coherence.component.net.Cluster.ClusterService.NotifyConnectionClose();
                }
            
            //++ getter for static property _CLASS
            /**
             * Getter for property _CLASS.<p>
            * Property with auto-generated accessor that returns the Class
            * object for a given component.
             */
            public static Class get_CLASS()
                {
                Class clz;
                try
                    {
                    clz = Class.forName("com.tangosol.coherence/component/net/Cluster$ClusterService$NotifyConnectionClose".replace('/', '.'));
                    }
                catch (ClassNotFoundException e)
                    {
                    throw new NoClassDefFoundError(e.getMessage());
                    }
                return clz;
                }
            
            //++ getter for autogen property _Module
            /**
             * This is an auto-generated method that returns the global [design
            * time] parent component.
            * 
            * Note: the class generator will ignore any custom implementation
            * for this behavior.
             */
            private com.tangosol.coherence.Component get_Module()
                {
                return this.get_Parent().get_Parent();
                }
            }

        // ---- class: com.tangosol.coherence.component.net.Cluster$ClusterService$NotifyConnectionOpen
        
        /**
         * This internal Message is sent to all member aware services  when an
         * extend client opens a connection in ProxyService. The NotifyMember
         * refers to the extend client member.
         * 
         * Attributes:
         *     NotifyMember
         */
        @SuppressWarnings({"deprecation", "rawtypes", "unused", "unchecked", "ConstantConditions", "DuplicatedCode", "ForLoopReplaceableByForEach", "IfCanBeSwitch", "RedundantArrayCreation", "RedundantSuppression", "SameParameterValue", "TryFinallyCanBeTryWithResources", "TryWithIdenticalCatches", "UnnecessaryBoxing", "UnnecessaryUnboxing", "UnusedAssignment"})
        public static class NotifyConnectionOpen
                extends    com.tangosol.coherence.component.util.daemon.queueProcessor.service.Grid.NotifyConnectionOpen
            {
            // ---- Fields declarations ----
            
            // Default constructor
            public NotifyConnectionOpen()
                {
                this(null, null, true);
                }
            
            // Initializing constructor
            public NotifyConnectionOpen(String sName, com.tangosol.coherence.Component compParent, boolean fInit)
                {
                super(sName, compParent, false);
                
                if (fInit)
                    {
                    __init();
                    }
                }
            
            // Main initializer
            public void __init()
                {
                // private initialization
                __initPrivate();
                
                // state initialization: public and protected properties
                try
                    {
                    setMessageType(-23);
                    }
                catch (java.lang.Exception e)
                    {
                    // re-throw as a runtime exception
                    throw new com.tangosol.util.WrapperException(e);
                    }
                
                // signal the end of the initialization
                set_Constructed(true);
                }
            
            // Private initializer
            protected void __initPrivate()
                {
                
                super.__initPrivate();
                }
            
            //++ getter for static property _Instance
            /**
             * Getter for property _Instance.<p>
            * Auto generated
             */
            public static com.tangosol.coherence.Component get_Instance()
                {
                return new com.tangosol.coherence.component.net.Cluster.ClusterService.NotifyConnectionOpen();
                }
            
            //++ getter for static property _CLASS
            /**
             * Getter for property _CLASS.<p>
            * Property with auto-generated accessor that returns the Class
            * object for a given component.
             */
            public static Class get_CLASS()
                {
                Class clz;
                try
                    {
                    clz = Class.forName("com.tangosol.coherence/component/net/Cluster$ClusterService$NotifyConnectionOpen".replace('/', '.'));
                    }
                catch (ClassNotFoundException e)
                    {
                    throw new NoClassDefFoundError(e.getMessage());
                    }
                return clz;
                }
            
            //++ getter for autogen property _Module
            /**
             * This is an auto-generated method that returns the global [design
            * time] parent component.
            * 
            * Note: the class generator will ignore any custom implementation
            * for this behavior.
             */
            private com.tangosol.coherence.Component get_Module()
                {
                return this.get_Parent().get_Parent();
                }
            }

        // ---- class: com.tangosol.coherence.component.net.Cluster$ClusterService$NotifyIpTimeout
        
        /**
         * Message:
         *    Notify  IP Timeout
         * 
         * Purpose:
         *     Enable the TcpRingListener thread to inform the ClusterServices
         * that some monitored IP addresses exceed the ip-timeout.
         * 
         * Description:
         *    The TcpRingListener daemon thread of the member with the lowest
         * member id on each machine monitors the IPaddresses used by the
         * members of the cluster.   While the monitor fails to detect the
         * availability of an address exceeding its tolerance, it uses this
         * message to notify the ClusterService.  The ClusterService thread may
         * then determine what action if any should be taken while the
         * condition persists.
         * 
         * Attributes:
         *     n/a
         * 
         * Response to:
         *     n/a
         * 
         * Expected responses:
         *     n/a
         */
        @SuppressWarnings({"deprecation", "rawtypes", "unused", "unchecked", "ConstantConditions", "DuplicatedCode", "ForLoopReplaceableByForEach", "IfCanBeSwitch", "RedundantArrayCreation", "RedundantSuppression", "SameParameterValue", "TryFinallyCanBeTryWithResources", "TryWithIdenticalCatches", "UnnecessaryBoxing", "UnnecessaryUnboxing", "UnusedAssignment"})
        public static class NotifyIpTimeout
                extends    com.tangosol.coherence.component.util.daemon.queueProcessor.service.grid.ClusterService.NotifyIpTimeout
            {
            // ---- Fields declarations ----
            
            // Default constructor
            public NotifyIpTimeout()
                {
                this(null, null, true);
                }
            
            // Initializing constructor
            public NotifyIpTimeout(String sName, com.tangosol.coherence.Component compParent, boolean fInit)
                {
                super(sName, compParent, false);
                
                if (fInit)
                    {
                    __init();
                    }
                }
            
            // Main initializer
            public void __init()
                {
                // private initialization
                __initPrivate();
                
                // state initialization: public and protected properties
                try
                    {
                    setMessageType(55);
                    }
                catch (java.lang.Exception e)
                    {
                    // re-throw as a runtime exception
                    throw new com.tangosol.util.WrapperException(e);
                    }
                
                // signal the end of the initialization
                set_Constructed(true);
                }
            
            // Private initializer
            protected void __initPrivate()
                {
                
                super.__initPrivate();
                }
            
            //++ getter for static property _Instance
            /**
             * Getter for property _Instance.<p>
            * Auto generated
             */
            public static com.tangosol.coherence.Component get_Instance()
                {
                return new com.tangosol.coherence.component.net.Cluster.ClusterService.NotifyIpTimeout();
                }
            
            //++ getter for static property _CLASS
            /**
             * Getter for property _CLASS.<p>
            * Property with auto-generated accessor that returns the Class
            * object for a given component.
             */
            public static Class get_CLASS()
                {
                Class clz;
                try
                    {
                    clz = Class.forName("com.tangosol.coherence/component/net/Cluster$ClusterService$NotifyIpTimeout".replace('/', '.'));
                    }
                catch (ClassNotFoundException e)
                    {
                    throw new NoClassDefFoundError(e.getMessage());
                    }
                return clz;
                }
            
            //++ getter for autogen property _Module
            /**
             * This is an auto-generated method that returns the global [design
            * time] parent component.
            * 
            * Note: the class generator will ignore any custom implementation
            * for this behavior.
             */
            private com.tangosol.coherence.Component get_Module()
                {
                return this.get_Parent().get_Parent();
                }
            }

        // ---- class: com.tangosol.coherence.component.net.Cluster$ClusterService$NotifyMemberJoined
        
        /**
         * This internal Message is sent to all services when a new Member
         * joins the cluster.
         * 
         * Attributes:
         *     NotifyMember
         */
        @SuppressWarnings({"deprecation", "rawtypes", "unused", "unchecked", "ConstantConditions", "DuplicatedCode", "ForLoopReplaceableByForEach", "IfCanBeSwitch", "RedundantArrayCreation", "RedundantSuppression", "SameParameterValue", "TryFinallyCanBeTryWithResources", "TryWithIdenticalCatches", "UnnecessaryBoxing", "UnnecessaryUnboxing", "UnusedAssignment"})
        public static class NotifyMemberJoined
                extends    com.tangosol.coherence.component.util.daemon.queueProcessor.service.Grid.NotifyMemberJoined
            {
            // ---- Fields declarations ----
            
            // Default constructor
            public NotifyMemberJoined()
                {
                this(null, null, true);
                }
            
            // Initializing constructor
            public NotifyMemberJoined(String sName, com.tangosol.coherence.Component compParent, boolean fInit)
                {
                super(sName, compParent, false);
                
                if (fInit)
                    {
                    __init();
                    }
                }
            
            // Main initializer
            public void __init()
                {
                // private initialization
                __initPrivate();
                
                // state initialization: public and protected properties
                try
                    {
                    setMessageType(-4);
                    }
                catch (java.lang.Exception e)
                    {
                    // re-throw as a runtime exception
                    throw new com.tangosol.util.WrapperException(e);
                    }
                
                // signal the end of the initialization
                set_Constructed(true);
                }
            
            // Private initializer
            protected void __initPrivate()
                {
                
                super.__initPrivate();
                }
            
            //++ getter for static property _Instance
            /**
             * Getter for property _Instance.<p>
            * Auto generated
             */
            public static com.tangosol.coherence.Component get_Instance()
                {
                return new com.tangosol.coherence.component.net.Cluster.ClusterService.NotifyMemberJoined();
                }
            
            //++ getter for static property _CLASS
            /**
             * Getter for property _CLASS.<p>
            * Property with auto-generated accessor that returns the Class
            * object for a given component.
             */
            public static Class get_CLASS()
                {
                Class clz;
                try
                    {
                    clz = Class.forName("com.tangosol.coherence/component/net/Cluster$ClusterService$NotifyMemberJoined".replace('/', '.'));
                    }
                catch (ClassNotFoundException e)
                    {
                    throw new NoClassDefFoundError(e.getMessage());
                    }
                return clz;
                }
            
            //++ getter for autogen property _Module
            /**
             * This is an auto-generated method that returns the global [design
            * time] parent component.
            * 
            * Note: the class generator will ignore any custom implementation
            * for this behavior.
             */
            private com.tangosol.coherence.Component get_Module()
                {
                return this.get_Parent().get_Parent();
                }
            }

        // ---- class: com.tangosol.coherence.component.net.Cluster$ClusterService$NotifyMemberLeaving
        
        /**
         * This internal Message is sent to all services when a Member
         * announces its impending departure from the cluster.
         * 
         * Attributes:
         *     NotifyMember
         */
        @SuppressWarnings({"deprecation", "rawtypes", "unused", "unchecked", "ConstantConditions", "DuplicatedCode", "ForLoopReplaceableByForEach", "IfCanBeSwitch", "RedundantArrayCreation", "RedundantSuppression", "SameParameterValue", "TryFinallyCanBeTryWithResources", "TryWithIdenticalCatches", "UnnecessaryBoxing", "UnnecessaryUnboxing", "UnusedAssignment"})
        public static class NotifyMemberLeaving
                extends    com.tangosol.coherence.component.util.daemon.queueProcessor.service.Grid.NotifyMemberLeaving
            {
            // ---- Fields declarations ----
            
            // Default constructor
            public NotifyMemberLeaving()
                {
                this(null, null, true);
                }
            
            // Initializing constructor
            public NotifyMemberLeaving(String sName, com.tangosol.coherence.Component compParent, boolean fInit)
                {
                super(sName, compParent, false);
                
                if (fInit)
                    {
                    __init();
                    }
                }
            
            // Main initializer
            public void __init()
                {
                // private initialization
                __initPrivate();
                
                // state initialization: public and protected properties
                try
                    {
                    setMessageType(-5);
                    }
                catch (java.lang.Exception e)
                    {
                    // re-throw as a runtime exception
                    throw new com.tangosol.util.WrapperException(e);
                    }
                
                // signal the end of the initialization
                set_Constructed(true);
                }
            
            // Private initializer
            protected void __initPrivate()
                {
                
                super.__initPrivate();
                }
            
            //++ getter for static property _Instance
            /**
             * Getter for property _Instance.<p>
            * Auto generated
             */
            public static com.tangosol.coherence.Component get_Instance()
                {
                return new com.tangosol.coherence.component.net.Cluster.ClusterService.NotifyMemberLeaving();
                }
            
            //++ getter for static property _CLASS
            /**
             * Getter for property _CLASS.<p>
            * Property with auto-generated accessor that returns the Class
            * object for a given component.
             */
            public static Class get_CLASS()
                {
                Class clz;
                try
                    {
                    clz = Class.forName("com.tangosol.coherence/component/net/Cluster$ClusterService$NotifyMemberLeaving".replace('/', '.'));
                    }
                catch (ClassNotFoundException e)
                    {
                    throw new NoClassDefFoundError(e.getMessage());
                    }
                return clz;
                }
            
            //++ getter for autogen property _Module
            /**
             * This is an auto-generated method that returns the global [design
            * time] parent component.
            * 
            * Note: the class generator will ignore any custom implementation
            * for this behavior.
             */
            private com.tangosol.coherence.Component get_Module()
                {
                return this.get_Parent().get_Parent();
                }
            }

        // ---- class: com.tangosol.coherence.component.net.Cluster$ClusterService$NotifyMemberLeft
        
        /**
         * This internal Message is sent to all services when a Member has
         * departed (normally or not) the cluster.
         * 
         * Attributes:
         *     NotifyMember
         */
        @SuppressWarnings({"deprecation", "rawtypes", "unused", "unchecked", "ConstantConditions", "DuplicatedCode", "ForLoopReplaceableByForEach", "IfCanBeSwitch", "RedundantArrayCreation", "RedundantSuppression", "SameParameterValue", "TryFinallyCanBeTryWithResources", "TryWithIdenticalCatches", "UnnecessaryBoxing", "UnnecessaryUnboxing", "UnusedAssignment"})
        public static class NotifyMemberLeft
                extends    com.tangosol.coherence.component.util.daemon.queueProcessor.service.grid.ClusterService.NotifyMemberLeft
            {
            // ---- Fields declarations ----
            
            // Default constructor
            public NotifyMemberLeft()
                {
                this(null, null, true);
                }
            
            // Initializing constructor
            public NotifyMemberLeft(String sName, com.tangosol.coherence.Component compParent, boolean fInit)
                {
                super(sName, compParent, false);
                
                if (fInit)
                    {
                    __init();
                    }
                }
            
            // Main initializer
            public void __init()
                {
                // private initialization
                __initPrivate();
                
                // state initialization: public and protected properties
                try
                    {
                    setMessageType(-6);
                    }
                catch (java.lang.Exception e)
                    {
                    // re-throw as a runtime exception
                    throw new com.tangosol.util.WrapperException(e);
                    }
                
                // signal the end of the initialization
                set_Constructed(true);
                }
            
            // Private initializer
            protected void __initPrivate()
                {
                
                super.__initPrivate();
                }
            
            //++ getter for static property _Instance
            /**
             * Getter for property _Instance.<p>
            * Auto generated
             */
            public static com.tangosol.coherence.Component get_Instance()
                {
                return new com.tangosol.coherence.component.net.Cluster.ClusterService.NotifyMemberLeft();
                }
            
            //++ getter for static property _CLASS
            /**
             * Getter for property _CLASS.<p>
            * Property with auto-generated accessor that returns the Class
            * object for a given component.
             */
            public static Class get_CLASS()
                {
                Class clz;
                try
                    {
                    clz = Class.forName("com.tangosol.coherence/component/net/Cluster$ClusterService$NotifyMemberLeft".replace('/', '.'));
                    }
                catch (ClassNotFoundException e)
                    {
                    throw new NoClassDefFoundError(e.getMessage());
                    }
                return clz;
                }
            
            //++ getter for autogen property _Module
            /**
             * This is an auto-generated method that returns the global [design
            * time] parent component.
            * 
            * Note: the class generator will ignore any custom implementation
            * for this behavior.
             */
            private com.tangosol.coherence.Component get_Module()
                {
                return this.get_Parent().get_Parent();
                }
            }

        // ---- class: com.tangosol.coherence.component.net.Cluster$ClusterService$NotifyMessageReceipt
        
        /**
         * This internal Message is sent to a service to inform it that a
         * Message with the return-receipt-requested option set was delivered
         * (or that the Message was at least partially undeliverable because
         * one or more Members to which it should have been delivered are
         * dead).  To receive this notification the message of interest must
         * have reached a state where it is free for processing by all living
         * recipients, i.e. they've also acknowledged all previous messages
         * addressed to them by this member, such that message ordering will
         * not keep the message from being processed.
         * 
         * Attributes:
         *     NotifyMessage
         */
        @SuppressWarnings({"deprecation", "rawtypes", "unused", "unchecked", "ConstantConditions", "DuplicatedCode", "ForLoopReplaceableByForEach", "IfCanBeSwitch", "RedundantArrayCreation", "RedundantSuppression", "SameParameterValue", "TryFinallyCanBeTryWithResources", "TryWithIdenticalCatches", "UnnecessaryBoxing", "UnnecessaryUnboxing", "UnusedAssignment"})
        public static class NotifyMessageReceipt
                extends    com.tangosol.coherence.component.util.daemon.queueProcessor.service.Grid.NotifyMessageReceipt
            {
            // ---- Fields declarations ----
            
            // Default constructor
            public NotifyMessageReceipt()
                {
                this(null, null, true);
                }
            
            // Initializing constructor
            public NotifyMessageReceipt(String sName, com.tangosol.coherence.Component compParent, boolean fInit)
                {
                super(sName, compParent, false);
                
                if (fInit)
                    {
                    __init();
                    }
                }
            
            // Main initializer
            public void __init()
                {
                // private initialization
                __initPrivate();
                
                // state initialization: public and protected properties
                try
                    {
                    setMessageType(-7);
                    }
                catch (java.lang.Exception e)
                    {
                    // re-throw as a runtime exception
                    throw new com.tangosol.util.WrapperException(e);
                    }
                
                // signal the end of the initialization
                set_Constructed(true);
                }
            
            // Private initializer
            protected void __initPrivate()
                {
                
                super.__initPrivate();
                }
            
            //++ getter for static property _Instance
            /**
             * Getter for property _Instance.<p>
            * Auto generated
             */
            public static com.tangosol.coherence.Component get_Instance()
                {
                return new com.tangosol.coherence.component.net.Cluster.ClusterService.NotifyMessageReceipt();
                }
            
            //++ getter for static property _CLASS
            /**
             * Getter for property _CLASS.<p>
            * Property with auto-generated accessor that returns the Class
            * object for a given component.
             */
            public static Class get_CLASS()
                {
                Class clz;
                try
                    {
                    clz = Class.forName("com.tangosol.coherence/component/net/Cluster$ClusterService$NotifyMessageReceipt".replace('/', '.'));
                    }
                catch (ClassNotFoundException e)
                    {
                    throw new NoClassDefFoundError(e.getMessage());
                    }
                return clz;
                }
            
            //++ getter for autogen property _Module
            /**
             * This is an auto-generated method that returns the global [design
            * time] parent component.
            * 
            * Note: the class generator will ignore any custom implementation
            * for this behavior.
             */
            private com.tangosol.coherence.Component get_Module()
                {
                return this.get_Parent().get_Parent();
                }
            }

        // ---- class: com.tangosol.coherence.component.net.Cluster$ClusterService$NotifyPollClosed
        
        /**
         * This internal Message is sent to a service to inform it that an
         * outstanding Poll for a departed member, or one which was sent
         * without any destination members.
         * 
         * Attributes:
         *     NotifyMember
         *     NotifyPoll
         */
        @SuppressWarnings({"deprecation", "rawtypes", "unused", "unchecked", "ConstantConditions", "DuplicatedCode", "ForLoopReplaceableByForEach", "IfCanBeSwitch", "RedundantArrayCreation", "RedundantSuppression", "SameParameterValue", "TryFinallyCanBeTryWithResources", "TryWithIdenticalCatches", "UnnecessaryBoxing", "UnnecessaryUnboxing", "UnusedAssignment"})
        public static class NotifyPollClosed
                extends    com.tangosol.coherence.component.util.daemon.queueProcessor.service.Grid.NotifyPollClosed
            {
            // ---- Fields declarations ----
            
            // Default constructor
            public NotifyPollClosed()
                {
                this(null, null, true);
                }
            
            // Initializing constructor
            public NotifyPollClosed(String sName, com.tangosol.coherence.Component compParent, boolean fInit)
                {
                super(sName, compParent, false);
                
                if (fInit)
                    {
                    __init();
                    }
                }
            
            // Main initializer
            public void __init()
                {
                // private initialization
                __initPrivate();
                
                // state initialization: public and protected properties
                try
                    {
                    setMessageType(-8);
                    }
                catch (java.lang.Exception e)
                    {
                    // re-throw as a runtime exception
                    throw new com.tangosol.util.WrapperException(e);
                    }
                
                // signal the end of the initialization
                set_Constructed(true);
                }
            
            // Private initializer
            protected void __initPrivate()
                {
                
                super.__initPrivate();
                }
            
            //++ getter for static property _Instance
            /**
             * Getter for property _Instance.<p>
            * Auto generated
             */
            public static com.tangosol.coherence.Component get_Instance()
                {
                return new com.tangosol.coherence.component.net.Cluster.ClusterService.NotifyPollClosed();
                }
            
            //++ getter for static property _CLASS
            /**
             * Getter for property _CLASS.<p>
            * Property with auto-generated accessor that returns the Class
            * object for a given component.
             */
            public static Class get_CLASS()
                {
                Class clz;
                try
                    {
                    clz = Class.forName("com.tangosol.coherence/component/net/Cluster$ClusterService$NotifyPollClosed".replace('/', '.'));
                    }
                catch (ClassNotFoundException e)
                    {
                    throw new NoClassDefFoundError(e.getMessage());
                    }
                return clz;
                }
            
            //++ getter for autogen property _Module
            /**
             * This is an auto-generated method that returns the global [design
            * time] parent component.
            * 
            * Note: the class generator will ignore any custom implementation
            * for this behavior.
             */
            private com.tangosol.coherence.Component get_Module()
                {
                return this.get_Parent().get_Parent();
                }
            }

        // ---- class: com.tangosol.coherence.component.net.Cluster$ClusterService$NotifyResponse
        
        /**
         * Some of the internal messages (e.g. NotifyServiceJoining) are used
         * as the inter-service request-response communications between the
         * ClusterService and other services. This message serves as a generic
         * response.
         * 
         * Unlike the Response, this message is an internal one and would never
         * be deferred.
         * 
         * Attributes:
         *     Result
         * 
         * @since Coherence 3.7.1
         */
        @SuppressWarnings({"deprecation", "rawtypes", "unused", "unchecked", "ConstantConditions", "DuplicatedCode", "ForLoopReplaceableByForEach", "IfCanBeSwitch", "RedundantArrayCreation", "RedundantSuppression", "SameParameterValue", "TryFinallyCanBeTryWithResources", "TryWithIdenticalCatches", "UnnecessaryBoxing", "UnnecessaryUnboxing", "UnusedAssignment"})
        public static class NotifyResponse
                extends    com.tangosol.coherence.component.util.daemon.queueProcessor.service.grid.ClusterService.NotifyResponse
            {
            // ---- Fields declarations ----
            
            // Default constructor
            public NotifyResponse()
                {
                this(null, null, true);
                }
            
            // Initializing constructor
            public NotifyResponse(String sName, com.tangosol.coherence.Component compParent, boolean fInit)
                {
                super(sName, compParent, false);
                
                if (fInit)
                    {
                    __init();
                    }
                }
            
            // Main initializer
            public void __init()
                {
                // private initialization
                __initPrivate();
                
                // state initialization: public and protected properties
                try
                    {
                    setMessageType(-20);
                    }
                catch (java.lang.Exception e)
                    {
                    // re-throw as a runtime exception
                    throw new com.tangosol.util.WrapperException(e);
                    }
                
                // signal the end of the initialization
                set_Constructed(true);
                }
            
            // Private initializer
            protected void __initPrivate()
                {
                
                super.__initPrivate();
                }
            
            //++ getter for static property _Instance
            /**
             * Getter for property _Instance.<p>
            * Auto generated
             */
            public static com.tangosol.coherence.Component get_Instance()
                {
                return new com.tangosol.coherence.component.net.Cluster.ClusterService.NotifyResponse();
                }
            
            //++ getter for static property _CLASS
            /**
             * Getter for property _CLASS.<p>
            * Property with auto-generated accessor that returns the Class
            * object for a given component.
             */
            public static Class get_CLASS()
                {
                Class clz;
                try
                    {
                    clz = Class.forName("com.tangosol.coherence/component/net/Cluster$ClusterService$NotifyResponse".replace('/', '.'));
                    }
                catch (ClassNotFoundException e)
                    {
                    throw new NoClassDefFoundError(e.getMessage());
                    }
                return clz;
                }
            
            //++ getter for autogen property _Module
            /**
             * This is an auto-generated method that returns the global [design
            * time] parent component.
            * 
            * Note: the class generator will ignore any custom implementation
            * for this behavior.
             */
            private com.tangosol.coherence.Component get_Module()
                {
                return this.get_Parent().get_Parent();
                }
            }

        // ---- class: com.tangosol.coherence.component.net.Cluster$ClusterService$NotifyServiceAnnounced
        
        /**
         * This internal Message is sent to all services when a Member
         * announces a Service that has not previously been available.
         * 
         * Attributes:
         *     NotifyServiceName
         */
        @SuppressWarnings({"deprecation", "rawtypes", "unused", "unchecked", "ConstantConditions", "DuplicatedCode", "ForLoopReplaceableByForEach", "IfCanBeSwitch", "RedundantArrayCreation", "RedundantSuppression", "SameParameterValue", "TryFinallyCanBeTryWithResources", "TryWithIdenticalCatches", "UnnecessaryBoxing", "UnnecessaryUnboxing", "UnusedAssignment"})
        public static class NotifyServiceAnnounced
                extends    com.tangosol.coherence.component.util.daemon.queueProcessor.service.Grid.NotifyServiceAnnounced
            {
            // ---- Fields declarations ----
            
            // Default constructor
            public NotifyServiceAnnounced()
                {
                this(null, null, true);
                }
            
            // Initializing constructor
            public NotifyServiceAnnounced(String sName, com.tangosol.coherence.Component compParent, boolean fInit)
                {
                super(sName, compParent, false);
                
                if (fInit)
                    {
                    __init();
                    }
                }
            
            // Main initializer
            public void __init()
                {
                // private initialization
                __initPrivate();
                
                // state initialization: public and protected properties
                try
                    {
                    setMessageType(-9);
                    }
                catch (java.lang.Exception e)
                    {
                    // re-throw as a runtime exception
                    throw new com.tangosol.util.WrapperException(e);
                    }
                
                // signal the end of the initialization
                set_Constructed(true);
                }
            
            // Private initializer
            protected void __initPrivate()
                {
                
                super.__initPrivate();
                }
            
            //++ getter for static property _Instance
            /**
             * Getter for property _Instance.<p>
            * Auto generated
             */
            public static com.tangosol.coherence.Component get_Instance()
                {
                return new com.tangosol.coherence.component.net.Cluster.ClusterService.NotifyServiceAnnounced();
                }
            
            //++ getter for static property _CLASS
            /**
             * Getter for property _CLASS.<p>
            * Property with auto-generated accessor that returns the Class
            * object for a given component.
             */
            public static Class get_CLASS()
                {
                Class clz;
                try
                    {
                    clz = Class.forName("com.tangosol.coherence/component/net/Cluster$ClusterService$NotifyServiceAnnounced".replace('/', '.'));
                    }
                catch (ClassNotFoundException e)
                    {
                    throw new NoClassDefFoundError(e.getMessage());
                    }
                return clz;
                }
            
            //++ getter for autogen property _Module
            /**
             * This is an auto-generated method that returns the global [design
            * time] parent component.
            * 
            * Note: the class generator will ignore any custom implementation
            * for this behavior.
             */
            private com.tangosol.coherence.Component get_Module()
                {
                return this.get_Parent().get_Parent();
                }
            }

        // ---- class: com.tangosol.coherence.component.net.Cluster$ClusterService$NotifyServiceJoining
        
        /**
         * This internal Message is sent to a service when a cluster Member
         * that previously did not expose the same service has started the same
         * service. In other words, if cluster Members are (A, B, C), and (A,
         * B) have a service #3, and C subsequently registers a service #3,
         * then the service #3 on (A, B) will be notified that C has started
         * service #3.
         * 
         * As of Coherence 3.7.1, this notification is a poll that is sent by
         * the ClustersService BEFORE the specified member is added to the
         * correspondning ServiceMemberSet. The service join protocol will be
         * blocked until this service closes the underlying poll.
         * 
         * Subsequent $NotifyServiceJoined notification will be sent when the
         * member has finished starting the service.
         * 
         * Attributes:
         *     NotifyMember
         *     NotifyMemberConfigMap
         *     NotifyServiceEndPointName (@since Coherence 3.7.1)
         *     NotifyServiceJoinTime
         *     NotifyServiceVersion
         *     ContinuationMessage (@since Coherence 3.7.1)
         */
        @SuppressWarnings({"deprecation", "rawtypes", "unused", "unchecked", "ConstantConditions", "DuplicatedCode", "ForLoopReplaceableByForEach", "IfCanBeSwitch", "RedundantArrayCreation", "RedundantSuppression", "SameParameterValue", "TryFinallyCanBeTryWithResources", "TryWithIdenticalCatches", "UnnecessaryBoxing", "UnnecessaryUnboxing", "UnusedAssignment"})
        public static class NotifyServiceJoining
                extends    com.tangosol.coherence.component.util.daemon.queueProcessor.service.Grid.NotifyServiceJoining
            {
            // ---- Fields declarations ----
            
            // Default constructor
            public NotifyServiceJoining()
                {
                this(null, null, true);
                }
            
            // Initializing constructor
            public NotifyServiceJoining(String sName, com.tangosol.coherence.Component compParent, boolean fInit)
                {
                super(sName, compParent, false);
                
                if (fInit)
                    {
                    __init();
                    }
                }
            
            // Main initializer
            public void __init()
                {
                // private initialization
                __initPrivate();
                
                // state initialization: public and protected properties
                try
                    {
                    setMessageType(-10);
                    }
                catch (java.lang.Exception e)
                    {
                    // re-throw as a runtime exception
                    throw new com.tangosol.util.WrapperException(e);
                    }
                
                // containment initialization: children
                _addChild(new com.tangosol.coherence.component.util.daemon.queueProcessor.service.Grid.NotifyServiceJoining.Poll("Poll", this, true), "Poll");
                
                // signal the end of the initialization
                set_Constructed(true);
                }
            
            // Private initializer
            protected void __initPrivate()
                {
                
                super.__initPrivate();
                }
            
            //++ getter for static property _Instance
            /**
             * Getter for property _Instance.<p>
            * Auto generated
             */
            public static com.tangosol.coherence.Component get_Instance()
                {
                return new com.tangosol.coherence.component.net.Cluster.ClusterService.NotifyServiceJoining();
                }
            
            //++ getter for static property _CLASS
            /**
             * Getter for property _CLASS.<p>
            * Property with auto-generated accessor that returns the Class
            * object for a given component.
             */
            public static Class get_CLASS()
                {
                Class clz;
                try
                    {
                    clz = Class.forName("com.tangosol.coherence/component/net/Cluster$ClusterService$NotifyServiceJoining".replace('/', '.'));
                    }
                catch (ClassNotFoundException e)
                    {
                    throw new NoClassDefFoundError(e.getMessage());
                    }
                return clz;
                }
            
            //++ getter for autogen property _Module
            /**
             * This is an auto-generated method that returns the global [design
            * time] parent component.
            * 
            * Note: the class generator will ignore any custom implementation
            * for this behavior.
             */
            private com.tangosol.coherence.Component get_Module()
                {
                return this.get_Parent().get_Parent();
                }
            }

        // ---- class: com.tangosol.coherence.component.net.Cluster$ClusterService$NotifyServiceLeaving
        
        /**
         * This internal Message is sent to a service when a cluster Member
         * that previously exposed the same service will no longer expose the
         * same service (potentially because the Member is leaving the
         * cluster). In other words, if cluster Members are (A, B, C) and each
         * has a service #3, and C subsequently announces that it is leaving
         * the cluster, then the service #3 on (A, B) will be notified that C
         * will no longer have a service #3.
         * 
         * Attributes:
         *     NotifyMember
         */
        @SuppressWarnings({"deprecation", "rawtypes", "unused", "unchecked", "ConstantConditions", "DuplicatedCode", "ForLoopReplaceableByForEach", "IfCanBeSwitch", "RedundantArrayCreation", "RedundantSuppression", "SameParameterValue", "TryFinallyCanBeTryWithResources", "TryWithIdenticalCatches", "UnnecessaryBoxing", "UnnecessaryUnboxing", "UnusedAssignment"})
        public static class NotifyServiceLeaving
                extends    com.tangosol.coherence.component.util.daemon.queueProcessor.service.Grid.NotifyServiceLeaving
            {
            // ---- Fields declarations ----
            
            // Default constructor
            public NotifyServiceLeaving()
                {
                this(null, null, true);
                }
            
            // Initializing constructor
            public NotifyServiceLeaving(String sName, com.tangosol.coherence.Component compParent, boolean fInit)
                {
                super(sName, compParent, false);
                
                if (fInit)
                    {
                    __init();
                    }
                }
            
            // Main initializer
            public void __init()
                {
                // private initialization
                __initPrivate();
                
                // state initialization: public and protected properties
                try
                    {
                    setMessageType(-11);
                    }
                catch (java.lang.Exception e)
                    {
                    // re-throw as a runtime exception
                    throw new com.tangosol.util.WrapperException(e);
                    }
                
                // signal the end of the initialization
                set_Constructed(true);
                }
            
            // Private initializer
            protected void __initPrivate()
                {
                
                super.__initPrivate();
                }
            
            //++ getter for static property _Instance
            /**
             * Getter for property _Instance.<p>
            * Auto generated
             */
            public static com.tangosol.coherence.Component get_Instance()
                {
                return new com.tangosol.coherence.component.net.Cluster.ClusterService.NotifyServiceLeaving();
                }
            
            //++ getter for static property _CLASS
            /**
             * Getter for property _CLASS.<p>
            * Property with auto-generated accessor that returns the Class
            * object for a given component.
             */
            public static Class get_CLASS()
                {
                Class clz;
                try
                    {
                    clz = Class.forName("com.tangosol.coherence/component/net/Cluster$ClusterService$NotifyServiceLeaving".replace('/', '.'));
                    }
                catch (ClassNotFoundException e)
                    {
                    throw new NoClassDefFoundError(e.getMessage());
                    }
                return clz;
                }
            
            //++ getter for autogen property _Module
            /**
             * This is an auto-generated method that returns the global [design
            * time] parent component.
            * 
            * Note: the class generator will ignore any custom implementation
            * for this behavior.
             */
            private com.tangosol.coherence.Component get_Module()
                {
                return this.get_Parent().get_Parent();
                }
            }

        // ---- class: com.tangosol.coherence.component.net.Cluster$ClusterService$NotifyServiceLeft
        
        /**
         * This internal Message is sent to a service when a cluster Member
         * that previously exposed the same service now does not expose the
         * same service (potentially because the Member left the cluster). In
         * other words, if cluster Members are (A, B, C) and each has a service
         * #3, and C subsequently leaves the cluster, then the service #3 on
         * (A, B) will be notified that C no longer has a service #3.
         * 
         * Attributes:
         *     NotifyMember
         *     NotifyMemberJoined
         */
        @SuppressWarnings({"deprecation", "rawtypes", "unused", "unchecked", "ConstantConditions", "DuplicatedCode", "ForLoopReplaceableByForEach", "IfCanBeSwitch", "RedundantArrayCreation", "RedundantSuppression", "SameParameterValue", "TryFinallyCanBeTryWithResources", "TryWithIdenticalCatches", "UnnecessaryBoxing", "UnnecessaryUnboxing", "UnusedAssignment"})
        public static class NotifyServiceLeft
                extends    com.tangosol.coherence.component.util.daemon.queueProcessor.service.Grid.NotifyServiceLeft
            {
            // ---- Fields declarations ----
            
            // Default constructor
            public NotifyServiceLeft()
                {
                this(null, null, true);
                }
            
            // Initializing constructor
            public NotifyServiceLeft(String sName, com.tangosol.coherence.Component compParent, boolean fInit)
                {
                super(sName, compParent, false);
                
                if (fInit)
                    {
                    __init();
                    }
                }
            
            // Main initializer
            public void __init()
                {
                // private initialization
                __initPrivate();
                
                // state initialization: public and protected properties
                try
                    {
                    setMessageType(-12);
                    }
                catch (java.lang.Exception e)
                    {
                    // re-throw as a runtime exception
                    throw new com.tangosol.util.WrapperException(e);
                    }
                
                // signal the end of the initialization
                set_Constructed(true);
                }
            
            // Private initializer
            protected void __initPrivate()
                {
                
                super.__initPrivate();
                }
            
            //++ getter for static property _Instance
            /**
             * Getter for property _Instance.<p>
            * Auto generated
             */
            public static com.tangosol.coherence.Component get_Instance()
                {
                return new com.tangosol.coherence.component.net.Cluster.ClusterService.NotifyServiceLeft();
                }
            
            //++ getter for static property _CLASS
            /**
             * Getter for property _CLASS.<p>
            * Property with auto-generated accessor that returns the Class
            * object for a given component.
             */
            public static Class get_CLASS()
                {
                Class clz;
                try
                    {
                    clz = Class.forName("com.tangosol.coherence/component/net/Cluster$ClusterService$NotifyServiceLeft".replace('/', '.'));
                    }
                catch (ClassNotFoundException e)
                    {
                    throw new NoClassDefFoundError(e.getMessage());
                    }
                return clz;
                }
            
            //++ getter for autogen property _Module
            /**
             * This is an auto-generated method that returns the global [design
            * time] parent component.
            * 
            * Note: the class generator will ignore any custom implementation
            * for this behavior.
             */
            private com.tangosol.coherence.Component get_Module()
                {
                return this.get_Parent().get_Parent();
                }
            }

        // ---- class: com.tangosol.coherence.component.net.Cluster$ClusterService$NotifyServiceQuiescence
        
        /**
         * This internal Message is sent to a service when a cluster Member has
         * requested this service to be suspended or resumed (cluster-wide).
         * 
         * This notification is a poll that is sent by the ClusterService.  The
         * service quiescence protocol will be blocked until this service
         * closes the underlying poll.
         * 
         * Attributes:
         *     ContinuationMessage
         */
        @SuppressWarnings({"deprecation", "rawtypes", "unused", "unchecked", "ConstantConditions", "DuplicatedCode", "ForLoopReplaceableByForEach", "IfCanBeSwitch", "RedundantArrayCreation", "RedundantSuppression", "SameParameterValue", "TryFinallyCanBeTryWithResources", "TryWithIdenticalCatches", "UnnecessaryBoxing", "UnnecessaryUnboxing", "UnusedAssignment"})
        public static class NotifyServiceQuiescence
                extends    com.tangosol.coherence.component.util.daemon.queueProcessor.service.Grid.NotifyServiceQuiescence
            {
            // ---- Fields declarations ----
            private static com.tangosol.util.ListMap __mapChildren;
            
            // Static initializer
            static
                {
                __initStatic();
                }
            
            // Default static initializer
            private static void __initStatic()
                {
                // register child classes
                __mapChildren = new com.tangosol.util.ListMap();
                __mapChildren.put("Poll", Cluster.ClusterService.NotifyServiceQuiescence.Poll.get_CLASS());
                }
            
            // Default constructor
            public NotifyServiceQuiescence()
                {
                this(null, null, true);
                }
            
            // Initializing constructor
            public NotifyServiceQuiescence(String sName, com.tangosol.coherence.Component compParent, boolean fInit)
                {
                super(sName, compParent, false);
                
                if (fInit)
                    {
                    __init();
                    }
                }
            
            // Main initializer
            public void __init()
                {
                // private initialization
                __initPrivate();
                
                // state initialization: public and protected properties
                try
                    {
                    setMessageType(-22);
                    }
                catch (java.lang.Exception e)
                    {
                    // re-throw as a runtime exception
                    throw new com.tangosol.util.WrapperException(e);
                    }
                
                // containment initialization: children
                
                // signal the end of the initialization
                set_Constructed(true);
                }
            
            // Private initializer
            protected void __initPrivate()
                {
                
                super.__initPrivate();
                }
            
            //++ getter for static property _Instance
            /**
             * Getter for property _Instance.<p>
            * Auto generated
             */
            public static com.tangosol.coherence.Component get_Instance()
                {
                return new com.tangosol.coherence.component.net.Cluster.ClusterService.NotifyServiceQuiescence();
                }
            
            //++ getter for static property _CLASS
            /**
             * Getter for property _CLASS.<p>
            * Property with auto-generated accessor that returns the Class
            * object for a given component.
             */
            public static Class get_CLASS()
                {
                Class clz;
                try
                    {
                    clz = Class.forName("com.tangosol.coherence/component/net/Cluster$ClusterService$NotifyServiceQuiescence".replace('/', '.'));
                    }
                catch (ClassNotFoundException e)
                    {
                    throw new NoClassDefFoundError(e.getMessage());
                    }
                return clz;
                }
            
            //++ getter for autogen property _Module
            /**
             * This is an auto-generated method that returns the global [design
            * time] parent component.
            * 
            * Note: the class generator will ignore any custom implementation
            * for this behavior.
             */
            private com.tangosol.coherence.Component get_Module()
                {
                return this.get_Parent().get_Parent();
                }
            
            //++ getter for autogen property _ChildClasses
            /**
             * This is an auto-generated method that returns the map of design
            * time [static] children.
            * 
            * Note: the class generator will ignore any custom implementation
            * for this behavior.
             */
            protected java.util.Map get_ChildClasses()
                {
                return __mapChildren;
                }

            // ---- class: com.tangosol.coherence.component.net.Cluster$ClusterService$NotifyServiceQuiescence$Poll
            
            /**
             * The Poll contains information regarding a request sent to one or
             * more Cluster Members that require responses. A Service may poll
             * other Members that are running the same Service, and the Poll is
             * used to wait for and assemble the responses from each of those
             * Members. A client thread may also use the Poll to block on a
             * response or set of responses, thus waiting for the completion of
             * the Poll. In its simplest form, which is a Poll that is sent to
             * one Member of the Cluster, the Poll actually represents the
             * request/response model.
             */
            @SuppressWarnings({"deprecation", "rawtypes", "unused", "unchecked", "ConstantConditions", "DuplicatedCode", "ForLoopReplaceableByForEach", "IfCanBeSwitch", "RedundantArrayCreation", "RedundantSuppression", "SameParameterValue", "TryFinallyCanBeTryWithResources", "TryWithIdenticalCatches", "UnnecessaryBoxing", "UnnecessaryUnboxing", "UnusedAssignment"})
            public static class Poll
                    extends    com.tangosol.coherence.component.util.daemon.queueProcessor.service.Grid.NotifyServiceQuiescence.Poll
                {
                // ---- Fields declarations ----
                
                // Default constructor
                public Poll()
                    {
                    this(null, null, true);
                    }
                
                // Initializing constructor
                public Poll(String sName, com.tangosol.coherence.Component compParent, boolean fInit)
                    {
                    super(sName, compParent, false);
                    
                    if (fInit)
                        {
                        __init();
                        }
                    }
                
                // Main initializer
                public void __init()
                    {
                    // private initialization
                    __initPrivate();
                    
                    
                    // signal the end of the initialization
                    set_Constructed(true);
                    }
                
                // Private initializer
                protected void __initPrivate()
                    {
                    
                    super.__initPrivate();
                    }
                
                //++ getter for static property _Instance
                /**
                 * Getter for property _Instance.<p>
                * Auto generated
                 */
                public static com.tangosol.coherence.Component get_Instance()
                    {
                    return new com.tangosol.coherence.component.net.Cluster.ClusterService.NotifyServiceQuiescence.Poll();
                    }
                
                //++ getter for static property _CLASS
                /**
                 * Getter for property _CLASS.<p>
                * Property with auto-generated accessor that returns the Class
                * object for a given component.
                 */
                public static Class get_CLASS()
                    {
                    Class clz;
                    try
                        {
                        clz = Class.forName("com.tangosol.coherence/component/net/Cluster$ClusterService$NotifyServiceQuiescence$Poll".replace('/', '.'));
                        }
                    catch (ClassNotFoundException e)
                        {
                        throw new NoClassDefFoundError(e.getMessage());
                        }
                    return clz;
                    }
                
                //++ getter for autogen property _Module
                /**
                 * This is an auto-generated method that returns the global
                * [design time] parent component.
                * 
                * Note: the class generator will ignore any custom
                * implementation for this behavior.
                 */
                private com.tangosol.coherence.Component get_Module()
                    {
                    return this.get_Parent().get_Parent().get_Parent();
                    }
                }
            }

        // ---- class: com.tangosol.coherence.component.net.Cluster$ClusterService$NotifyShutdown
        
        /**
         * This internal Message is sent to a Service it is supposed to shut
         * down. The Service must clean up and unregister itself. Note that the
         * only task of the shut-down is to begin the process of shutting down
         * the service; technically the Service does not have to be stopped by
         * the time the shutdown Message completes its processing, although the
         * default implementation does stop it immediately.
         * 
         * Attributes:
         *     n/a
         */
        @SuppressWarnings({"deprecation", "rawtypes", "unused", "unchecked", "ConstantConditions", "DuplicatedCode", "ForLoopReplaceableByForEach", "IfCanBeSwitch", "RedundantArrayCreation", "RedundantSuppression", "SameParameterValue", "TryFinallyCanBeTryWithResources", "TryWithIdenticalCatches", "UnnecessaryBoxing", "UnnecessaryUnboxing", "UnusedAssignment"})
        public static class NotifyShutdown
                extends    com.tangosol.coherence.component.util.daemon.queueProcessor.service.grid.ClusterService.NotifyShutdown
            {
            // ---- Fields declarations ----
            
            // Default constructor
            public NotifyShutdown()
                {
                this(null, null, true);
                }
            
            // Initializing constructor
            public NotifyShutdown(String sName, com.tangosol.coherence.Component compParent, boolean fInit)
                {
                super(sName, compParent, false);
                
                if (fInit)
                    {
                    __init();
                    }
                }
            
            // Main initializer
            public void __init()
                {
                // private initialization
                __initPrivate();
                
                // state initialization: public and protected properties
                try
                    {
                    setMessageType(-13);
                    }
                catch (java.lang.Exception e)
                    {
                    // re-throw as a runtime exception
                    throw new com.tangosol.util.WrapperException(e);
                    }
                
                // signal the end of the initialization
                set_Constructed(true);
                }
            
            // Private initializer
            protected void __initPrivate()
                {
                
                super.__initPrivate();
                }
            
            //++ getter for static property _Instance
            /**
             * Getter for property _Instance.<p>
            * Auto generated
             */
            public static com.tangosol.coherence.Component get_Instance()
                {
                return new com.tangosol.coherence.component.net.Cluster.ClusterService.NotifyShutdown();
                }
            
            //++ getter for static property _CLASS
            /**
             * Getter for property _CLASS.<p>
            * Property with auto-generated accessor that returns the Class
            * object for a given component.
             */
            public static Class get_CLASS()
                {
                Class clz;
                try
                    {
                    clz = Class.forName("com.tangosol.coherence/component/net/Cluster$ClusterService$NotifyShutdown".replace('/', '.'));
                    }
                catch (ClassNotFoundException e)
                    {
                    throw new NoClassDefFoundError(e.getMessage());
                    }
                return clz;
                }
            
            //++ getter for autogen property _Module
            /**
             * This is an auto-generated method that returns the global [design
            * time] parent component.
            * 
            * Note: the class generator will ignore any custom implementation
            * for this behavior.
             */
            private com.tangosol.coherence.Component get_Module()
                {
                return this.get_Parent().get_Parent();
                }
            }

        // ---- class: com.tangosol.coherence.component.net.Cluster$ClusterService$NotifyStartup
        
        /**
         * This internal Message is sent to a Service when it first has been
         * started.
         * 
         * Note that this Message is the Service's only opportunity to
         * configure this Member's service-specific config map
         * (getServiceMemberSet().ensureMemberConfigMap) before other Members
         * are aware that this Member is running this Service. Changes to the
         * map during this Message's processing will be sent as part of the
         * ClusterService's ServiceJoining message.
         * 
         * Attributes:
         *     n/a
         */
        @SuppressWarnings({"deprecation", "rawtypes", "unused", "unchecked", "ConstantConditions", "DuplicatedCode", "ForLoopReplaceableByForEach", "IfCanBeSwitch", "RedundantArrayCreation", "RedundantSuppression", "SameParameterValue", "TryFinallyCanBeTryWithResources", "TryWithIdenticalCatches", "UnnecessaryBoxing", "UnnecessaryUnboxing", "UnusedAssignment"})
        public static class NotifyStartup
                extends    com.tangosol.coherence.component.util.daemon.queueProcessor.service.Grid.NotifyStartup
            {
            // ---- Fields declarations ----
            
            // Default constructor
            public NotifyStartup()
                {
                this(null, null, true);
                }
            
            // Initializing constructor
            public NotifyStartup(String sName, com.tangosol.coherence.Component compParent, boolean fInit)
                {
                super(sName, compParent, false);
                
                if (fInit)
                    {
                    __init();
                    }
                }
            
            // Main initializer
            public void __init()
                {
                // private initialization
                __initPrivate();
                
                // state initialization: public and protected properties
                try
                    {
                    setMessageType(-14);
                    }
                catch (java.lang.Exception e)
                    {
                    // re-throw as a runtime exception
                    throw new com.tangosol.util.WrapperException(e);
                    }
                
                // signal the end of the initialization
                set_Constructed(true);
                }
            
            // Private initializer
            protected void __initPrivate()
                {
                
                super.__initPrivate();
                }
            
            //++ getter for static property _Instance
            /**
             * Getter for property _Instance.<p>
            * Auto generated
             */
            public static com.tangosol.coherence.Component get_Instance()
                {
                return new com.tangosol.coherence.component.net.Cluster.ClusterService.NotifyStartup();
                }
            
            //++ getter for static property _CLASS
            /**
             * Getter for property _CLASS.<p>
            * Property with auto-generated accessor that returns the Class
            * object for a given component.
             */
            public static Class get_CLASS()
                {
                Class clz;
                try
                    {
                    clz = Class.forName("com.tangosol.coherence/component/net/Cluster$ClusterService$NotifyStartup".replace('/', '.'));
                    }
                catch (ClassNotFoundException e)
                    {
                    throw new NoClassDefFoundError(e.getMessage());
                    }
                return clz;
                }
            
            //++ getter for autogen property _Module
            /**
             * This is an auto-generated method that returns the global [design
            * time] parent component.
            * 
            * Note: the class generator will ignore any custom implementation
            * for this behavior.
             */
            private com.tangosol.coherence.Component get_Module()
                {
                return this.get_Parent().get_Parent();
                }
            }

        // ---- class: com.tangosol.coherence.component.net.Cluster$ClusterService$NotifyTcmpTimeout
        
        /**
         * Message:
         *    NotifyTcmpTimeout
         * 
         * Purpose:
         *     Enable the TCMP daemons to inform the ClusterServices that a
         * member has exceeded the configured delivery timeout.
         * 
         * Description:
         *    The TCMP uses this message to notify the ClusterService that a
         * member has not responded to a packet within the configured timeout. 
         * The ClusterService thread may then determine what action if any
         * should be taken.
         * 
         * Attributes:
         *     n/a
         * 
         * Response to:
         *     n/a
         * 
         * Expected responses:
         *     n/a
         */
        @SuppressWarnings({"deprecation", "rawtypes", "unused", "unchecked", "ConstantConditions", "DuplicatedCode", "ForLoopReplaceableByForEach", "IfCanBeSwitch", "RedundantArrayCreation", "RedundantSuppression", "SameParameterValue", "TryFinallyCanBeTryWithResources", "TryWithIdenticalCatches", "UnnecessaryBoxing", "UnnecessaryUnboxing", "UnusedAssignment"})
        public static class NotifyTcmpTimeout
                extends    com.tangosol.coherence.component.util.daemon.queueProcessor.service.grid.ClusterService.NotifyTcmpTimeout
            {
            // ---- Fields declarations ----
            
            // Default constructor
            public NotifyTcmpTimeout()
                {
                this(null, null, true);
                }
            
            // Initializing constructor
            public NotifyTcmpTimeout(String sName, com.tangosol.coherence.Component compParent, boolean fInit)
                {
                super(sName, compParent, false);
                
                if (fInit)
                    {
                    __init();
                    }
                }
            
            // Main initializer
            public void __init()
                {
                // private initialization
                __initPrivate();
                
                // state initialization: public and protected properties
                try
                    {
                    setMessageType(54);
                    }
                catch (java.lang.Exception e)
                    {
                    // re-throw as a runtime exception
                    throw new com.tangosol.util.WrapperException(e);
                    }
                
                // signal the end of the initialization
                set_Constructed(true);
                }
            
            // Private initializer
            protected void __initPrivate()
                {
                
                super.__initPrivate();
                }
            
            //++ getter for static property _Instance
            /**
             * Getter for property _Instance.<p>
            * Auto generated
             */
            public static com.tangosol.coherence.Component get_Instance()
                {
                return new com.tangosol.coherence.component.net.Cluster.ClusterService.NotifyTcmpTimeout();
                }
            
            //++ getter for static property _CLASS
            /**
             * Getter for property _CLASS.<p>
            * Property with auto-generated accessor that returns the Class
            * object for a given component.
             */
            public static Class get_CLASS()
                {
                Class clz;
                try
                    {
                    clz = Class.forName("com.tangosol.coherence/component/net/Cluster$ClusterService$NotifyTcmpTimeout".replace('/', '.'));
                    }
                catch (ClassNotFoundException e)
                    {
                    throw new NoClassDefFoundError(e.getMessage());
                    }
                return clz;
                }
            
            //++ getter for autogen property _Module
            /**
             * This is an auto-generated method that returns the global [design
            * time] parent component.
            * 
            * Note: the class generator will ignore any custom implementation
            * for this behavior.
             */
            private com.tangosol.coherence.Component get_Module()
                {
                return this.get_Parent().get_Parent();
                }
            }

        // ---- class: com.tangosol.coherence.component.net.Cluster$ClusterService$PingRequest
        
        /**
         * This request is sent to "ping" a service member, illiciting a
         * response whose receipt guarantees that any in-flight messages
         * between the requestor and responder will have been flushed.
         */
        @SuppressWarnings({"deprecation", "rawtypes", "unused", "unchecked", "ConstantConditions", "DuplicatedCode", "ForLoopReplaceableByForEach", "IfCanBeSwitch", "RedundantArrayCreation", "RedundantSuppression", "SameParameterValue", "TryFinallyCanBeTryWithResources", "TryWithIdenticalCatches", "UnnecessaryBoxing", "UnnecessaryUnboxing", "UnusedAssignment"})
        public static class PingRequest
                extends    com.tangosol.coherence.component.util.daemon.queueProcessor.service.Grid.PingRequest
            {
            // ---- Fields declarations ----
            private static com.tangosol.util.ListMap __mapChildren;
            
            // Static initializer
            static
                {
                __initStatic();
                }
            
            // Default static initializer
            private static void __initStatic()
                {
                // register child classes
                __mapChildren = new com.tangosol.util.ListMap();
                __mapChildren.put("Poll", Cluster.ClusterService.PingRequest.Poll.get_CLASS());
                }
            
            // Default constructor
            public PingRequest()
                {
                this(null, null, true);
                }
            
            // Initializing constructor
            public PingRequest(String sName, com.tangosol.coherence.Component compParent, boolean fInit)
                {
                super(sName, compParent, false);
                
                if (fInit)
                    {
                    __init();
                    }
                }
            
            // Main initializer
            public void __init()
                {
                // private initialization
                __initPrivate();
                
                // state initialization: public and protected properties
                try
                    {
                    setMessageType(3);
                    }
                catch (java.lang.Exception e)
                    {
                    // re-throw as a runtime exception
                    throw new com.tangosol.util.WrapperException(e);
                    }
                
                // containment initialization: children
                
                // signal the end of the initialization
                set_Constructed(true);
                }
            
            // Private initializer
            protected void __initPrivate()
                {
                
                super.__initPrivate();
                }
            
            //++ getter for static property _Instance
            /**
             * Getter for property _Instance.<p>
            * Auto generated
             */
            public static com.tangosol.coherence.Component get_Instance()
                {
                return new com.tangosol.coherence.component.net.Cluster.ClusterService.PingRequest();
                }
            
            //++ getter for static property _CLASS
            /**
             * Getter for property _CLASS.<p>
            * Property with auto-generated accessor that returns the Class
            * object for a given component.
             */
            public static Class get_CLASS()
                {
                Class clz;
                try
                    {
                    clz = Class.forName("com.tangosol.coherence/component/net/Cluster$ClusterService$PingRequest".replace('/', '.'));
                    }
                catch (ClassNotFoundException e)
                    {
                    throw new NoClassDefFoundError(e.getMessage());
                    }
                return clz;
                }
            
            //++ getter for autogen property _Module
            /**
             * This is an auto-generated method that returns the global [design
            * time] parent component.
            * 
            * Note: the class generator will ignore any custom implementation
            * for this behavior.
             */
            private com.tangosol.coherence.Component get_Module()
                {
                return this.get_Parent().get_Parent();
                }
            
            //++ getter for autogen property _ChildClasses
            /**
             * This is an auto-generated method that returns the map of design
            * time [static] children.
            * 
            * Note: the class generator will ignore any custom implementation
            * for this behavior.
             */
            protected java.util.Map get_ChildClasses()
                {
                return __mapChildren;
                }

            // ---- class: com.tangosol.coherence.component.net.Cluster$ClusterService$PingRequest$Poll
            
            /**
             * The Poll contains information regarding a request sent to one or
             * more Cluster Members that require responses. A Service may poll
             * other Members that are running the same Service, and the Poll is
             * used to wait for and assemble the responses from each of those
             * Members. A client thread may also use the Poll to block on a
             * response or set of responses, thus waiting for the completion of
             * the Poll. In its simplest form, which is a Poll that is sent to
             * one Member of the Cluster, the Poll actually represents the
             * request/response model.
             */
            @SuppressWarnings({"deprecation", "rawtypes", "unused", "unchecked", "ConstantConditions", "DuplicatedCode", "ForLoopReplaceableByForEach", "IfCanBeSwitch", "RedundantArrayCreation", "RedundantSuppression", "SameParameterValue", "TryFinallyCanBeTryWithResources", "TryWithIdenticalCatches", "UnnecessaryBoxing", "UnnecessaryUnboxing", "UnusedAssignment"})
            public static class Poll
                    extends    com.tangosol.coherence.component.util.daemon.queueProcessor.service.Grid.PingRequest.Poll
                {
                // ---- Fields declarations ----
                
                // Default constructor
                public Poll()
                    {
                    this(null, null, true);
                    }
                
                // Initializing constructor
                public Poll(String sName, com.tangosol.coherence.Component compParent, boolean fInit)
                    {
                    super(sName, compParent, false);
                    
                    if (fInit)
                        {
                        __init();
                        }
                    }
                
                // Main initializer
                public void __init()
                    {
                    // private initialization
                    __initPrivate();
                    
                    
                    // signal the end of the initialization
                    set_Constructed(true);
                    }
                
                // Private initializer
                protected void __initPrivate()
                    {
                    
                    super.__initPrivate();
                    }
                
                //++ getter for static property _Instance
                /**
                 * Getter for property _Instance.<p>
                * Auto generated
                 */
                public static com.tangosol.coherence.Component get_Instance()
                    {
                    return new com.tangosol.coherence.component.net.Cluster.ClusterService.PingRequest.Poll();
                    }
                
                //++ getter for static property _CLASS
                /**
                 * Getter for property _CLASS.<p>
                * Property with auto-generated accessor that returns the Class
                * object for a given component.
                 */
                public static Class get_CLASS()
                    {
                    Class clz;
                    try
                        {
                        clz = Class.forName("com.tangosol.coherence/component/net/Cluster$ClusterService$PingRequest$Poll".replace('/', '.'));
                        }
                    catch (ClassNotFoundException e)
                        {
                        throw new NoClassDefFoundError(e.getMessage());
                        }
                    return clz;
                    }
                
                //++ getter for autogen property _Module
                /**
                 * This is an auto-generated method that returns the global
                * [design time] parent component.
                * 
                * Note: the class generator will ignore any custom
                * implementation for this behavior.
                 */
                private com.tangosol.coherence.Component get_Module()
                    {
                    return this.get_Parent().get_Parent().get_Parent();
                    }
                }
            }

        // ---- class: com.tangosol.coherence.component.net.Cluster$ClusterService$PollArray
        
        /**
         * A WindowedArray is an object that has attributes of a queue and a
         * dynamically resizing array.
         * 
         * The "window" is the active, or visible, portion of the virtual
         * array. Only elements within the window may be accessed or removed.
         * 
         * As elements are added, they are added to the "end" or "top" of the
         * array, dynamically resizing if necessary, and adjusting the window
         * so that it includes the new elements.
         * 
         * As items are removed, if they are removed from the "start" or
         * "bottom" of the array, the window adjusts such that those elements
         * are no longer visible.
         * 
         * The concurrent version of of the WindowedArray avoids contention for
         * threads accessing different virtual indices.
         * 
         * This is an abstract component, any concrete implementation must
         * provide assignIndexToValue and retrieveIndexFromValue methods.
         */
        @SuppressWarnings({"deprecation", "rawtypes", "unused", "unchecked", "ConstantConditions", "DuplicatedCode", "ForLoopReplaceableByForEach", "IfCanBeSwitch", "RedundantArrayCreation", "RedundantSuppression", "SameParameterValue", "TryFinallyCanBeTryWithResources", "TryWithIdenticalCatches", "UnnecessaryBoxing", "UnnecessaryUnboxing", "UnusedAssignment"})
        public static class PollArray
                extends    com.tangosol.coherence.component.util.daemon.queueProcessor.service.Grid.PollArray
            {
            // ---- Fields declarations ----
            private static com.tangosol.util.ListMap __mapChildren;
            
            // Static initializer
            static
                {
                __initStatic();
                }
            
            // Default static initializer
            private static void __initStatic()
                {
                // register child classes
                __mapChildren = new com.tangosol.util.ListMap();
                __mapChildren.put("PlaceHolder", Cluster.ClusterService.PollArray.PlaceHolder.get_CLASS());
                }
            
            // Default constructor
            public PollArray()
                {
                this(null, null, true);
                }
            
            // Initializing constructor
            public PollArray(String sName, com.tangosol.coherence.Component compParent, boolean fInit)
                {
                super(sName, compParent, false);
                
                if (fInit)
                    {
                    __init();
                    }
                }
            
            // Main initializer
            public void __init()
                {
                // private initialization
                __initPrivate();
                
                // state initialization: public and protected properties
                try
                    {
                    setExpiryMap(new NullableSortedMap());
                    }
                catch (java.lang.Exception e)
                    {
                    // re-throw as a runtime exception
                    throw new com.tangosol.util.WrapperException(e);
                    }
                
                // containment initialization: children
                
                // signal the end of the initialization
                set_Constructed(true);
                }
            
            // Private initializer
            protected void __initPrivate()
                {
                
                super.__initPrivate();
                }
            
            //++ getter for static property _Instance
            /**
             * Getter for property _Instance.<p>
            * Auto generated
             */
            public static com.tangosol.coherence.Component get_Instance()
                {
                return new com.tangosol.coherence.component.net.Cluster.ClusterService.PollArray();
                }
            
            //++ getter for static property _CLASS
            /**
             * Getter for property _CLASS.<p>
            * Property with auto-generated accessor that returns the Class
            * object for a given component.
             */
            public static Class get_CLASS()
                {
                Class clz;
                try
                    {
                    clz = Class.forName("com.tangosol.coherence/component/net/Cluster$ClusterService$PollArray".replace('/', '.'));
                    }
                catch (ClassNotFoundException e)
                    {
                    throw new NoClassDefFoundError(e.getMessage());
                    }
                return clz;
                }
            
            //++ getter for autogen property _Module
            /**
             * This is an auto-generated method that returns the global [design
            * time] parent component.
            * 
            * Note: the class generator will ignore any custom implementation
            * for this behavior.
             */
            private com.tangosol.coherence.Component get_Module()
                {
                return this.get_Parent().get_Parent();
                }
            
            //++ getter for autogen property _ChildClasses
            /**
             * This is an auto-generated method that returns the map of design
            * time [static] children.
            * 
            * Note: the class generator will ignore any custom implementation
            * for this behavior.
             */
            protected java.util.Map get_ChildClasses()
                {
                return __mapChildren;
                }

            // ---- class: com.tangosol.coherence.component.net.Cluster$ClusterService$PollArray$PlaceHolder
            
            /**
             * A PlaceHolder represents a value of null and is used to mark the
             * virtual index assigned to an actual index within the storage
             * array.
             */
            @SuppressWarnings({"deprecation", "rawtypes", "unused", "unchecked", "ConstantConditions", "DuplicatedCode", "ForLoopReplaceableByForEach", "IfCanBeSwitch", "RedundantArrayCreation", "RedundantSuppression", "SameParameterValue", "TryFinallyCanBeTryWithResources", "TryWithIdenticalCatches", "UnnecessaryBoxing", "UnnecessaryUnboxing", "UnusedAssignment"})
            public static class PlaceHolder
                    extends    com.tangosol.coherence.component.util.daemon.queueProcessor.service.Grid.PollArray.PlaceHolder
                {
                // ---- Fields declarations ----
                
                // Default constructor
                public PlaceHolder()
                    {
                    this(null, null, true);
                    }
                
                // Initializing constructor
                public PlaceHolder(String sName, com.tangosol.coherence.Component compParent, boolean fInit)
                    {
                    super(sName, compParent, false);
                    
                    if (fInit)
                        {
                        __init();
                        }
                    }
                
                // Main initializer
                public void __init()
                    {
                    // private initialization
                    __initPrivate();
                    
                    // state initialization: public and protected properties
                    try
                        {
                        setVirtualOffset(-1L);
                        }
                    catch (java.lang.Exception e)
                        {
                        // re-throw as a runtime exception
                        throw new com.tangosol.util.WrapperException(e);
                        }
                    
                    // signal the end of the initialization
                    set_Constructed(true);
                    }
                
                // Private initializer
                protected void __initPrivate()
                    {
                    
                    super.__initPrivate();
                    }
                
                //++ getter for static property _Instance
                /**
                 * Getter for property _Instance.<p>
                * Auto generated
                 */
                public static com.tangosol.coherence.Component get_Instance()
                    {
                    return new com.tangosol.coherence.component.net.Cluster.ClusterService.PollArray.PlaceHolder();
                    }
                
                //++ getter for static property _CLASS
                /**
                 * Getter for property _CLASS.<p>
                * Property with auto-generated accessor that returns the Class
                * object for a given component.
                 */
                public static Class get_CLASS()
                    {
                    Class clz;
                    try
                        {
                        clz = Class.forName("com.tangosol.coherence/component/net/Cluster$ClusterService$PollArray$PlaceHolder".replace('/', '.'));
                        }
                    catch (ClassNotFoundException e)
                        {
                        throw new NoClassDefFoundError(e.getMessage());
                        }
                    return clz;
                    }
                
                //++ getter for autogen property _Module
                /**
                 * This is an auto-generated method that returns the global
                * [design time] parent component.
                * 
                * Note: the class generator will ignore any custom
                * implementation for this behavior.
                 */
                private com.tangosol.coherence.Component get_Module()
                    {
                    return this.get_Parent().get_Parent().get_Parent();
                    }
                }
            }

        // ---- class: com.tangosol.coherence.component.net.Cluster$ClusterService$ProtocolContext
        
        /**
         * A description of the service's current protocol context.
         */
        @SuppressWarnings({"deprecation", "rawtypes", "unused", "unchecked", "ConstantConditions", "DuplicatedCode", "ForLoopReplaceableByForEach", "IfCanBeSwitch", "RedundantArrayCreation", "RedundantSuppression", "SameParameterValue", "TryFinallyCanBeTryWithResources", "TryWithIdenticalCatches", "UnnecessaryBoxing", "UnnecessaryUnboxing", "UnusedAssignment"})
        public static class ProtocolContext
                extends    com.tangosol.coherence.component.util.daemon.queueProcessor.service.Grid.ProtocolContext
            {
            // ---- Fields declarations ----
            
            // Default constructor
            public ProtocolContext()
                {
                this(null, null, true);
                }
            
            // Initializing constructor
            public ProtocolContext(String sName, com.tangosol.coherence.Component compParent, boolean fInit)
                {
                super(sName, compParent, false);
                
                if (fInit)
                    {
                    __init();
                    }
                }
            
            // Main initializer
            public void __init()
                {
                // private initialization
                __initPrivate();
                
                
                // signal the end of the initialization
                set_Constructed(true);
                }
            
            // Private initializer
            protected void __initPrivate()
                {
                
                super.__initPrivate();
                }
            
            //++ getter for static property _Instance
            /**
             * Getter for property _Instance.<p>
            * Auto generated
             */
            public static com.tangosol.coherence.Component get_Instance()
                {
                return new com.tangosol.coherence.component.net.Cluster.ClusterService.ProtocolContext();
                }
            
            //++ getter for static property _CLASS
            /**
             * Getter for property _CLASS.<p>
            * Property with auto-generated accessor that returns the Class
            * object for a given component.
             */
            public static Class get_CLASS()
                {
                Class clz;
                try
                    {
                    clz = Class.forName("com.tangosol.coherence/component/net/Cluster$ClusterService$ProtocolContext".replace('/', '.'));
                    }
                catch (ClassNotFoundException e)
                    {
                    throw new NoClassDefFoundError(e.getMessage());
                    }
                return clz;
                }
            
            //++ getter for autogen property _Module
            /**
             * This is an auto-generated method that returns the global [design
            * time] parent component.
            * 
            * Note: the class generator will ignore any custom implementation
            * for this behavior.
             */
            private com.tangosol.coherence.Component get_Module()
                {
                return this.get_Parent().get_Parent();
                }
            }

        // ---- class: com.tangosol.coherence.component.net.Cluster$ClusterService$QuorumControl
        
        /**
         * QuorumControl manages the state and decision logic relating to
         * quorum-based membership decisions.
         */
        @SuppressWarnings({"deprecation", "rawtypes", "unused", "unchecked", "ConstantConditions", "DuplicatedCode", "ForLoopReplaceableByForEach", "IfCanBeSwitch", "RedundantArrayCreation", "RedundantSuppression", "SameParameterValue", "TryFinallyCanBeTryWithResources", "TryWithIdenticalCatches", "UnnecessaryBoxing", "UnnecessaryUnboxing", "UnusedAssignment"})
        public static class QuorumControl
                extends    com.tangosol.coherence.component.util.daemon.queueProcessor.service.grid.ClusterService.QuorumControl
            {
            // ---- Fields declarations ----
            
            // Default constructor
            public QuorumControl()
                {
                this(null, null, true);
                }
            
            // Initializing constructor
            public QuorumControl(String sName, com.tangosol.coherence.Component compParent, boolean fInit)
                {
                super(sName, compParent, false);
                
                if (fInit)
                    {
                    __init();
                    }
                }
            
            // Main initializer
            public void __init()
                {
                // private initialization
                __initPrivate();
                
                
                // signal the end of the initialization
                set_Constructed(true);
                }
            
            // Private initializer
            protected void __initPrivate()
                {
                
                super.__initPrivate();
                }
            
            //++ getter for static property _Instance
            /**
             * Getter for property _Instance.<p>
            * Auto generated
             */
            public static com.tangosol.coherence.Component get_Instance()
                {
                return new com.tangosol.coherence.component.net.Cluster.ClusterService.QuorumControl();
                }
            
            //++ getter for static property _CLASS
            /**
             * Getter for property _CLASS.<p>
            * Property with auto-generated accessor that returns the Class
            * object for a given component.
             */
            public static Class get_CLASS()
                {
                Class clz;
                try
                    {
                    clz = Class.forName("com.tangosol.coherence/component/net/Cluster$ClusterService$QuorumControl".replace('/', '.'));
                    }
                catch (ClassNotFoundException e)
                    {
                    throw new NoClassDefFoundError(e.getMessage());
                    }
                return clz;
                }
            
            //++ getter for autogen property _Module
            /**
             * This is an auto-generated method that returns the global [design
            * time] parent component.
            * 
            * Note: the class generator will ignore any custom implementation
            * for this behavior.
             */
            private com.tangosol.coherence.Component get_Module()
                {
                return this.get_Parent().get_Parent();
                }
            
            // Declared at the super level
            /**
             * Setter for property MoratoriumTimeMillis.<p>
            * The time until which a moratorium on disconnecting any further
            * members is in effect.
             */
            public void setMoratoriumTimeMillis(long cMoratoriumMillis)
                {
                super.setMoratoriumTimeMillis(cMoratoriumMillis);
                }
            
            // Declared at the super level
            /**
             * Setter for property Suicide.<p>
            * True iff this member has decided to kill itself due to timeout.
             */
            public void setSuicide(boolean fSuicide)
                {
                super.setSuicide(fSuicide);
                }
            }

        // ---- class: com.tangosol.coherence.component.net.Cluster$ClusterService$QuorumRollCall
        
        /**
         * Message:
         *     QuorumRollCall
         * 
         * Purpose:
         *     Sent to members requesting a directed response
         * (Acknowledgement).
         * 
         * Description:
         *     This message is used to obtain positive verification (via poll
         * response) that members remain alive and responsive within a cluster.
         *  The roll-call may be called for in situations where one or more
         * unresponsive members are being considered for disconnection, pending
         * satisfication of the cluster quorum policy.
         * 
         * Attributes:
         * 
         * Response to:
         * 
         * Expected responses:
         *     Acknowledgement
         * 
         * @since Coherence 3.6
         */
        @SuppressWarnings({"deprecation", "rawtypes", "unused", "unchecked", "ConstantConditions", "DuplicatedCode", "ForLoopReplaceableByForEach", "IfCanBeSwitch", "RedundantArrayCreation", "RedundantSuppression", "SameParameterValue", "TryFinallyCanBeTryWithResources", "TryWithIdenticalCatches", "UnnecessaryBoxing", "UnnecessaryUnboxing", "UnusedAssignment"})
        public static class QuorumRollCall
                extends    com.tangosol.coherence.component.util.daemon.queueProcessor.service.grid.ClusterService.QuorumRollCall
            {
            // ---- Fields declarations ----
            private static com.tangosol.util.ListMap __mapChildren;
            
            // Static initializer
            static
                {
                __initStatic();
                }
            
            // Default static initializer
            private static void __initStatic()
                {
                // register child classes
                __mapChildren = new com.tangosol.util.ListMap();
                __mapChildren.put("Poll", Cluster.ClusterService.QuorumRollCall.Poll.get_CLASS());
                }
            
            // Default constructor
            public QuorumRollCall()
                {
                this(null, null, true);
                }
            
            // Initializing constructor
            public QuorumRollCall(String sName, com.tangosol.coherence.Component compParent, boolean fInit)
                {
                super(sName, compParent, false);
                
                if (fInit)
                    {
                    __init();
                    }
                }
            
            // Main initializer
            public void __init()
                {
                // private initialization
                __initPrivate();
                
                // state initialization: public and protected properties
                try
                    {
                    setMessageType(53);
                    }
                catch (java.lang.Exception e)
                    {
                    // re-throw as a runtime exception
                    throw new com.tangosol.util.WrapperException(e);
                    }
                
                // containment initialization: children
                
                // signal the end of the initialization
                set_Constructed(true);
                }
            
            // Private initializer
            protected void __initPrivate()
                {
                
                super.__initPrivate();
                }
            
            //++ getter for static property _Instance
            /**
             * Getter for property _Instance.<p>
            * Auto generated
             */
            public static com.tangosol.coherence.Component get_Instance()
                {
                return new com.tangosol.coherence.component.net.Cluster.ClusterService.QuorumRollCall();
                }
            
            //++ getter for static property _CLASS
            /**
             * Getter for property _CLASS.<p>
            * Property with auto-generated accessor that returns the Class
            * object for a given component.
             */
            public static Class get_CLASS()
                {
                Class clz;
                try
                    {
                    clz = Class.forName("com.tangosol.coherence/component/net/Cluster$ClusterService$QuorumRollCall".replace('/', '.'));
                    }
                catch (ClassNotFoundException e)
                    {
                    throw new NoClassDefFoundError(e.getMessage());
                    }
                return clz;
                }
            
            //++ getter for autogen property _Module
            /**
             * This is an auto-generated method that returns the global [design
            * time] parent component.
            * 
            * Note: the class generator will ignore any custom implementation
            * for this behavior.
             */
            private com.tangosol.coherence.Component get_Module()
                {
                return this.get_Parent().get_Parent();
                }
            
            //++ getter for autogen property _ChildClasses
            /**
             * This is an auto-generated method that returns the map of design
            * time [static] children.
            * 
            * Note: the class generator will ignore any custom implementation
            * for this behavior.
             */
            protected java.util.Map get_ChildClasses()
                {
                return __mapChildren;
                }

            // ---- class: com.tangosol.coherence.component.net.Cluster$ClusterService$QuorumRollCall$Poll
            
            /**
             * The Poll contains information regarding a request sent to one or
             * more Cluster Members that require responses. A Service may poll
             * other Members that are running the same Service, and the Poll is
             * used to wait for and assemble the responses from each of those
             * Members. A client thread may also use the Poll to block on a
             * response or set of responses, thus waiting for the completion of
             * the Poll. In its simplest form, which is a Poll that is sent to
             * one Member of the Cluster, the Poll actually represents the
             * request/response model.
             */
            @SuppressWarnings({"deprecation", "rawtypes", "unused", "unchecked", "ConstantConditions", "DuplicatedCode", "ForLoopReplaceableByForEach", "IfCanBeSwitch", "RedundantArrayCreation", "RedundantSuppression", "SameParameterValue", "TryFinallyCanBeTryWithResources", "TryWithIdenticalCatches", "UnnecessaryBoxing", "UnnecessaryUnboxing", "UnusedAssignment"})
            public static class Poll
                    extends    com.tangosol.coherence.component.util.daemon.queueProcessor.service.grid.ClusterService.QuorumRollCall.Poll
                {
                // ---- Fields declarations ----
                
                // Default constructor
                public Poll()
                    {
                    this(null, null, true);
                    }
                
                // Initializing constructor
                public Poll(String sName, com.tangosol.coherence.Component compParent, boolean fInit)
                    {
                    super(sName, compParent, false);
                    
                    if (fInit)
                        {
                        __init();
                        }
                    }
                
                // Main initializer
                public void __init()
                    {
                    // private initialization
                    __initPrivate();
                    
                    
                    // signal the end of the initialization
                    set_Constructed(true);
                    }
                
                // Private initializer
                protected void __initPrivate()
                    {
                    
                    super.__initPrivate();
                    }
                
                //++ getter for static property _Instance
                /**
                 * Getter for property _Instance.<p>
                * Auto generated
                 */
                public static com.tangosol.coherence.Component get_Instance()
                    {
                    return new com.tangosol.coherence.component.net.Cluster.ClusterService.QuorumRollCall.Poll();
                    }
                
                //++ getter for static property _CLASS
                /**
                 * Getter for property _CLASS.<p>
                * Property with auto-generated accessor that returns the Class
                * object for a given component.
                 */
                public static Class get_CLASS()
                    {
                    Class clz;
                    try
                        {
                        clz = Class.forName("com.tangosol.coherence/component/net/Cluster$ClusterService$QuorumRollCall$Poll".replace('/', '.'));
                        }
                    catch (ClassNotFoundException e)
                        {
                        throw new NoClassDefFoundError(e.getMessage());
                        }
                    return clz;
                    }
                
                //++ getter for autogen property _Module
                /**
                 * This is an auto-generated method that returns the global
                * [design time] parent component.
                * 
                * Note: the class generator will ignore any custom
                * implementation for this behavior.
                 */
                private com.tangosol.coherence.Component get_Module()
                    {
                    return this.get_Parent().get_Parent().get_Parent();
                    }
                }
            }

        // ---- class: com.tangosol.coherence.component.net.Cluster$ClusterService$Response
        
        /**
         * Response is a Message component used to respond to generic request
         * messages, carrying a value and return code.
         * 
         * Attributes:
         *     Result
         *     Value
         */
        @SuppressWarnings({"deprecation", "rawtypes", "unused", "unchecked", "ConstantConditions", "DuplicatedCode", "ForLoopReplaceableByForEach", "IfCanBeSwitch", "RedundantArrayCreation", "RedundantSuppression", "SameParameterValue", "TryFinallyCanBeTryWithResources", "TryWithIdenticalCatches", "UnnecessaryBoxing", "UnnecessaryUnboxing", "UnusedAssignment"})
        public static class Response
                extends    com.tangosol.coherence.component.util.daemon.queueProcessor.service.Grid.Response
            {
            // ---- Fields declarations ----
            
            // Default constructor
            public Response()
                {
                this(null, null, true);
                }
            
            // Initializing constructor
            public Response(String sName, com.tangosol.coherence.Component compParent, boolean fInit)
                {
                super(sName, compParent, false);
                
                if (fInit)
                    {
                    __init();
                    }
                }
            
            // Main initializer
            public void __init()
                {
                // private initialization
                __initPrivate();
                
                // state initialization: public and protected properties
                try
                    {
                    setMessageType(2);
                    }
                catch (java.lang.Exception e)
                    {
                    // re-throw as a runtime exception
                    throw new com.tangosol.util.WrapperException(e);
                    }
                
                // signal the end of the initialization
                set_Constructed(true);
                }
            
            // Private initializer
            protected void __initPrivate()
                {
                
                super.__initPrivate();
                }
            
            //++ getter for static property _Instance
            /**
             * Getter for property _Instance.<p>
            * Auto generated
             */
            public static com.tangosol.coherence.Component get_Instance()
                {
                return new com.tangosol.coherence.component.net.Cluster.ClusterService.Response();
                }
            
            //++ getter for static property _CLASS
            /**
             * Getter for property _CLASS.<p>
            * Property with auto-generated accessor that returns the Class
            * object for a given component.
             */
            public static Class get_CLASS()
                {
                Class clz;
                try
                    {
                    clz = Class.forName("com.tangosol.coherence/component/net/Cluster$ClusterService$Response".replace('/', '.'));
                    }
                catch (ClassNotFoundException e)
                    {
                    throw new NoClassDefFoundError(e.getMessage());
                    }
                return clz;
                }
            
            //++ getter for autogen property _Module
            /**
             * This is an auto-generated method that returns the global [design
            * time] parent component.
            * 
            * Note: the class generator will ignore any custom implementation
            * for this behavior.
             */
            private com.tangosol.coherence.Component get_Module()
                {
                return this.get_Parent().get_Parent();
                }
            }

        // ---- class: com.tangosol.coherence.component.net.Cluster$ClusterService$SeniorMemberHeartbeat
        
        /**
         * DiscoveryMessage (broadcast):
         *     SeniorMemberHeartbeat
         * 
         * Purpose:
         *     The senior Member (or any Member that thinks that it is the
         * senior Member) periodically informs all cluster Members that it
         * thinks that it is the senior Member.
         * 
         * Description:
         *     This Message is issued periodically (at least several times
         * within the period defined for cluster timeout). This Message is
         * broadcast by the senior Member. It includes information about the
         * senior Member (cluster mini-id and Uid) and the list of Member ids
         * that the cluster knows about and the last time that the senior
         * Member received a non-broadcast Packet.
         * 
         * Attributes:
         *     LastReceivedMillis
         *     MemberSet
         *     WkaEnabled (Since 3.1)
         * 
         * Response to:
         *     n/a
         * 
         * Expected responses:
         *     SeniorMemberPanic
         */
        @SuppressWarnings({"deprecation", "rawtypes", "unused", "unchecked", "ConstantConditions", "DuplicatedCode", "ForLoopReplaceableByForEach", "IfCanBeSwitch", "RedundantArrayCreation", "RedundantSuppression", "SameParameterValue", "TryFinallyCanBeTryWithResources", "TryWithIdenticalCatches", "UnnecessaryBoxing", "UnnecessaryUnboxing", "UnusedAssignment"})
        public static class SeniorMemberHeartbeat
                extends    com.tangosol.coherence.component.util.daemon.queueProcessor.service.grid.ClusterService.SeniorMemberHeartbeat
            {
            // ---- Fields declarations ----
            
            // Default constructor
            public SeniorMemberHeartbeat()
                {
                this(null, null, true);
                }
            
            // Initializing constructor
            public SeniorMemberHeartbeat(String sName, com.tangosol.coherence.Component compParent, boolean fInit)
                {
                super(sName, compParent, false);
                
                if (fInit)
                    {
                    __init();
                    }
                }
            
            // Main initializer
            public void __init()
                {
                // private initialization
                __initPrivate();
                
                // state initialization: public and protected properties
                try
                    {
                    setMessageType(17);
                    }
                catch (java.lang.Exception e)
                    {
                    // re-throw as a runtime exception
                    throw new com.tangosol.util.WrapperException(e);
                    }
                
                // signal the end of the initialization
                set_Constructed(true);
                }
            
            // Private initializer
            protected void __initPrivate()
                {
                
                super.__initPrivate();
                }
            
            //++ getter for static property _Instance
            /**
             * Getter for property _Instance.<p>
            * Auto generated
             */
            public static com.tangosol.coherence.Component get_Instance()
                {
                return new com.tangosol.coherence.component.net.Cluster.ClusterService.SeniorMemberHeartbeat();
                }
            
            //++ getter for static property _CLASS
            /**
             * Getter for property _CLASS.<p>
            * Property with auto-generated accessor that returns the Class
            * object for a given component.
             */
            public static Class get_CLASS()
                {
                Class clz;
                try
                    {
                    clz = Class.forName("com.tangosol.coherence/component/net/Cluster$ClusterService$SeniorMemberHeartbeat".replace('/', '.'));
                    }
                catch (ClassNotFoundException e)
                    {
                    throw new NoClassDefFoundError(e.getMessage());
                    }
                return clz;
                }
            
            //++ getter for autogen property _Module
            /**
             * This is an auto-generated method that returns the global [design
            * time] parent component.
            * 
            * Note: the class generator will ignore any custom implementation
            * for this behavior.
             */
            private com.tangosol.coherence.Component get_Module()
                {
                return this.get_Parent().get_Parent();
                }
            }

        // ---- class: com.tangosol.coherence.component.net.Cluster$ClusterService$SeniorMemberKill
        
        /**
         * DiscoveryMessage (broadcast from junior to senior; directed from
         * senior to junior):
         *     SeniorMemberKill
         * 
         * Purpose:
         *     This Message informs a Member that it must stop.
         * 
         * Description:
         *     Phantom cluster recognition (when a Member determines that two
         * clusters exist on the same multicast) must result in the stoppage of
         * one of the two clusters. Theoretically, the "bad" cluster is going
         * to most often be a cluster of one Member that somehow didn't realize
         * that a cluster was running, or somehow detached from a running
         * cluster (due to being temporary disconnected from the network, for
         * example). This Message is  sent by a junior Member upon request of
         * its senior to kill a detached (doomed) senior, then by the doomed
         * senior to kill all its juniors.  This ensures that the cluster whose
         * members send this kill Message is indeed operational and that at
         * least two of its Members (including the senior Member itself) agree
         * on which Member is the senior.
         * 
         * Attributes:
         * 
         * Response to:
         *     SeniorMemberPanic
         * 
         * Expected responses:
         *     n/a
         */
        @SuppressWarnings({"deprecation", "rawtypes", "unused", "unchecked", "ConstantConditions", "DuplicatedCode", "ForLoopReplaceableByForEach", "IfCanBeSwitch", "RedundantArrayCreation", "RedundantSuppression", "SameParameterValue", "TryFinallyCanBeTryWithResources", "TryWithIdenticalCatches", "UnnecessaryBoxing", "UnnecessaryUnboxing", "UnusedAssignment"})
        public static class SeniorMemberKill
                extends    com.tangosol.coherence.component.util.daemon.queueProcessor.service.grid.ClusterService.SeniorMemberKill
            {
            // ---- Fields declarations ----
            
            // Default constructor
            public SeniorMemberKill()
                {
                this(null, null, true);
                }
            
            // Initializing constructor
            public SeniorMemberKill(String sName, com.tangosol.coherence.Component compParent, boolean fInit)
                {
                super(sName, compParent, false);
                
                if (fInit)
                    {
                    __init();
                    }
                }
            
            // Main initializer
            public void __init()
                {
                // private initialization
                __initPrivate();
                
                // state initialization: public and protected properties
                try
                    {
                    setMessageType(40);
                    }
                catch (java.lang.Exception e)
                    {
                    // re-throw as a runtime exception
                    throw new com.tangosol.util.WrapperException(e);
                    }
                
                // signal the end of the initialization
                set_Constructed(true);
                }
            
            // Private initializer
            protected void __initPrivate()
                {
                
                super.__initPrivate();
                }
            
            //++ getter for static property _Instance
            /**
             * Getter for property _Instance.<p>
            * Auto generated
             */
            public static com.tangosol.coherence.Component get_Instance()
                {
                return new com.tangosol.coherence.component.net.Cluster.ClusterService.SeniorMemberKill();
                }
            
            //++ getter for static property _CLASS
            /**
             * Getter for property _CLASS.<p>
            * Property with auto-generated accessor that returns the Class
            * object for a given component.
             */
            public static Class get_CLASS()
                {
                Class clz;
                try
                    {
                    clz = Class.forName("com.tangosol.coherence/component/net/Cluster$ClusterService$SeniorMemberKill".replace('/', '.'));
                    }
                catch (ClassNotFoundException e)
                    {
                    throw new NoClassDefFoundError(e.getMessage());
                    }
                return clz;
                }
            
            //++ getter for autogen property _Module
            /**
             * This is an auto-generated method that returns the global [design
            * time] parent component.
            * 
            * Note: the class generator will ignore any custom implementation
            * for this behavior.
             */
            private com.tangosol.coherence.Component get_Module()
                {
                return this.get_Parent().get_Parent();
                }
            }

        // ---- class: com.tangosol.coherence.component.net.Cluster$ClusterService$SeniorMemberPanic
        
        /**
         * Message:
         *     SeniorMemberPanic
         * 
         * Purpose:
         *     This Message informs a cluster Member that there is confusion as
         * to who is the senior Member.
         * 
         * Description:
         *     In response to any broadcast Message from a purported senior
         * Member that is suspect, this Message is issued to register that
         * there is confusion (panic!) and to provide information on what
         * should be done. The Message is sent from a senior Member to the
         * entire cluster, and from a junior Member to the senior Member. By
         * doing so, the act of sending verifies that the senior Member is
         * alive and is communicating with its cluster, and provides permission
         * for the junior Members to kill the other purported senior Member.
         * 
         * Since Coherence 2.4 this message is also used by the senior Member
         * to inform junior members that the confusion is caused by a "zombie"
         * Member.
         * 
         * Attributes:
         *     CulpritMember
         *     Zombie
         * 
         * Response to:
         *     NewMemberAnnounceReply
         *     NewMemberRequestIdReject
         *     NewMemberRequestIdReply
         *     SeniorMemberHeartbeat
         * 
         * Expected responses:
         *     SeniorMemberKill
         *     MemberLeft
         */
        @SuppressWarnings({"deprecation", "rawtypes", "unused", "unchecked", "ConstantConditions", "DuplicatedCode", "ForLoopReplaceableByForEach", "IfCanBeSwitch", "RedundantArrayCreation", "RedundantSuppression", "SameParameterValue", "TryFinallyCanBeTryWithResources", "TryWithIdenticalCatches", "UnnecessaryBoxing", "UnnecessaryUnboxing", "UnusedAssignment"})
        public static class SeniorMemberPanic
                extends    com.tangosol.coherence.component.util.daemon.queueProcessor.service.grid.ClusterService.SeniorMemberPanic
            {
            // ---- Fields declarations ----
            
            // Default constructor
            public SeniorMemberPanic()
                {
                this(null, null, true);
                }
            
            // Initializing constructor
            public SeniorMemberPanic(String sName, com.tangosol.coherence.Component compParent, boolean fInit)
                {
                super(sName, compParent, false);
                
                if (fInit)
                    {
                    __init();
                    }
                }
            
            // Main initializer
            public void __init()
                {
                // private initialization
                __initPrivate();
                
                // state initialization: public and protected properties
                try
                    {
                    setMessageType(41);
                    }
                catch (java.lang.Exception e)
                    {
                    // re-throw as a runtime exception
                    throw new com.tangosol.util.WrapperException(e);
                    }
                
                // signal the end of the initialization
                set_Constructed(true);
                }
            
            // Private initializer
            protected void __initPrivate()
                {
                
                super.__initPrivate();
                }
            
            //++ getter for static property _Instance
            /**
             * Getter for property _Instance.<p>
            * Auto generated
             */
            public static com.tangosol.coherence.Component get_Instance()
                {
                return new com.tangosol.coherence.component.net.Cluster.ClusterService.SeniorMemberPanic();
                }
            
            //++ getter for static property _CLASS
            /**
             * Getter for property _CLASS.<p>
            * Property with auto-generated accessor that returns the Class
            * object for a given component.
             */
            public static Class get_CLASS()
                {
                Class clz;
                try
                    {
                    clz = Class.forName("com.tangosol.coherence/component/net/Cluster$ClusterService$SeniorMemberPanic".replace('/', '.'));
                    }
                catch (ClassNotFoundException e)
                    {
                    throw new NoClassDefFoundError(e.getMessage());
                    }
                return clz;
                }
            
            //++ getter for autogen property _Module
            /**
             * This is an auto-generated method that returns the global [design
            * time] parent component.
            * 
            * Note: the class generator will ignore any custom implementation
            * for this behavior.
             */
            private com.tangosol.coherence.Component get_Module()
                {
                return this.get_Parent().get_Parent();
                }
            }

        // ---- class: com.tangosol.coherence.component.net.Cluster$ClusterService$ServiceConfig
        
        /**
         * ServiceConfig provides a service-wide configuration map.  All
         * updates to a service config are published service-wide by the
         * configuration coordinator.
         * The Service-wide config map for service-related shared state.
         */
        @SuppressWarnings({"deprecation", "rawtypes", "unused", "unchecked", "ConstantConditions", "DuplicatedCode", "ForLoopReplaceableByForEach", "IfCanBeSwitch", "RedundantArrayCreation", "RedundantSuppression", "SameParameterValue", "TryFinallyCanBeTryWithResources", "TryWithIdenticalCatches", "UnnecessaryBoxing", "UnnecessaryUnboxing", "UnusedAssignment"})
        public static class ServiceConfig
                extends    com.tangosol.coherence.component.util.daemon.queueProcessor.service.Grid.ServiceConfig
            {
            // ---- Fields declarations ----
            
            // Default constructor
            public ServiceConfig()
                {
                this(null, null, true);
                }
            
            // Initializing constructor
            public ServiceConfig(String sName, com.tangosol.coherence.Component compParent, boolean fInit)
                {
                super(sName, compParent, false);
                
                if (fInit)
                    {
                    __init();
                    }
                }
            
            // Main initializer
            public void __init()
                {
                // private initialization
                __initPrivate();
                
                // state initialization: public and protected properties
                try
                    {
                    // identified pendingPolls required thread-safe data structure and
                    // verified that pendingConfigUpdates only accessed on single service thread, see details in COH-30132.
                    setPendingConfigUpdates(new java.util.LinkedList());
                    setPendingPolls(new ConcurrentHashMap<>());
                    }
                catch (java.lang.Exception e)
                    {
                    // re-throw as a runtime exception
                    throw new com.tangosol.util.WrapperException(e);
                    }
                
                // containment initialization: children
                _addChild(new com.tangosol.coherence.component.util.ServiceConfig.ConfigListener("ConfigListener", this, true), "ConfigListener");
                _addChild(new Cluster.ClusterService.ServiceConfig.Map("Map", this, true), "Map");
                
                // signal the end of the initialization
                set_Constructed(true);
                }
            
            // Private initializer
            protected void __initPrivate()
                {
                
                super.__initPrivate();
                }
            
            //++ getter for static property _Instance
            /**
             * Getter for property _Instance.<p>
            * Auto generated
             */
            public static com.tangosol.coherence.Component get_Instance()
                {
                return new com.tangosol.coherence.component.net.Cluster.ClusterService.ServiceConfig();
                }
            
            //++ getter for static property _CLASS
            /**
             * Getter for property _CLASS.<p>
            * Property with auto-generated accessor that returns the Class
            * object for a given component.
             */
            public static Class get_CLASS()
                {
                Class clz;
                try
                    {
                    clz = Class.forName("com.tangosol.coherence/component/net/Cluster$ClusterService$ServiceConfig".replace('/', '.'));
                    }
                catch (ClassNotFoundException e)
                    {
                    throw new NoClassDefFoundError(e.getMessage());
                    }
                return clz;
                }
            
            //++ getter for autogen property _Module
            /**
             * This is an auto-generated method that returns the global [design
            * time] parent component.
            * 
            * Note: the class generator will ignore any custom implementation
            * for this behavior.
             */
            private com.tangosol.coherence.Component get_Module()
                {
                return this.get_Parent().get_Parent();
                }

            // ---- class: com.tangosol.coherence.component.net.Cluster$ClusterService$ServiceConfig$Map
            
            /**
             * The "live" configuration map.  Mutations on this Map through the
             * java.util.Map interface will be published to all members sharing
             * the ServiceConfig.
             */
            @SuppressWarnings({"deprecation", "rawtypes", "unused", "unchecked", "ConstantConditions", "DuplicatedCode", "ForLoopReplaceableByForEach", "IfCanBeSwitch", "RedundantArrayCreation", "RedundantSuppression", "SameParameterValue", "TryFinallyCanBeTryWithResources", "TryWithIdenticalCatches", "UnnecessaryBoxing", "UnnecessaryUnboxing", "UnusedAssignment"})
            public static class Map
                    extends    com.tangosol.coherence.component.util.daemon.queueProcessor.service.Grid.ServiceConfig.Map
                {
                // ---- Fields declarations ----
                private static com.tangosol.util.ListMap __mapChildren;
                
                // Static initializer
                static
                    {
                    __initStatic();
                    }
                
                // Default static initializer
                private static void __initStatic()
                    {
                    // register child classes
                    __mapChildren = new com.tangosol.util.ListMap();
                    __mapChildren.put("EntrySet", Cluster.ClusterService.ServiceConfig.Map.EntrySet.get_CLASS());
                    __mapChildren.put("KeySet", Cluster.ClusterService.ServiceConfig.Map.KeySet.get_CLASS());
                    __mapChildren.put("Values", Cluster.ClusterService.ServiceConfig.Map.Values.get_CLASS());
                    }
                
                // Default constructor
                public Map()
                    {
                    this(null, null, true);
                    }
                
                // Initializing constructor
                public Map(String sName, com.tangosol.coherence.Component compParent, boolean fInit)
                    {
                    super(sName, compParent, false);
                    
                    if (fInit)
                        {
                        __init();
                        }
                    }
                
                // Main initializer
                public void __init()
                    {
                    // private initialization
                    __initPrivate();
                    
                    
                    // containment initialization: children
                    
                    // signal the end of the initialization
                    set_Constructed(true);
                    }
                
                // Private initializer
                protected void __initPrivate()
                    {
                    
                    super.__initPrivate();
                    }
                
                //++ getter for static property _Instance
                /**
                 * Getter for property _Instance.<p>
                * Auto generated
                 */
                public static com.tangosol.coherence.Component get_Instance()
                    {
                    return new com.tangosol.coherence.component.net.Cluster.ClusterService.ServiceConfig.Map();
                    }
                
                //++ getter for static property _CLASS
                /**
                 * Getter for property _CLASS.<p>
                * Property with auto-generated accessor that returns the Class
                * object for a given component.
                 */
                public static Class get_CLASS()
                    {
                    Class clz;
                    try
                        {
                        clz = Class.forName("com.tangosol.coherence/component/net/Cluster$ClusterService$ServiceConfig$Map".replace('/', '.'));
                        }
                    catch (ClassNotFoundException e)
                        {
                        throw new NoClassDefFoundError(e.getMessage());
                        }
                    return clz;
                    }
                
                //++ getter for autogen property _Module
                /**
                 * This is an auto-generated method that returns the global
                * [design time] parent component.
                * 
                * Note: the class generator will ignore any custom
                * implementation for this behavior.
                 */
                private com.tangosol.coherence.Component get_Module()
                    {
                    return this.get_Parent().get_Parent().get_Parent();
                    }
                
                //++ getter for autogen property _ChildClasses
                /**
                 * This is an auto-generated method that returns the map of
                * design time [static] children.
                * 
                * Note: the class generator will ignore any custom
                * implementation for this behavior.
                 */
                protected java.util.Map get_ChildClasses()
                    {
                    return __mapChildren;
                    }

                // ---- class: com.tangosol.coherence.component.net.Cluster$ClusterService$ServiceConfig$Map$EntrySet
                
                @SuppressWarnings({"deprecation", "rawtypes", "unused", "unchecked", "ConstantConditions", "DuplicatedCode", "ForLoopReplaceableByForEach", "IfCanBeSwitch", "RedundantArrayCreation", "RedundantSuppression", "SameParameterValue", "TryFinallyCanBeTryWithResources", "TryWithIdenticalCatches", "UnnecessaryBoxing", "UnnecessaryUnboxing", "UnusedAssignment"})
                public static class EntrySet
                        extends    com.tangosol.coherence.component.util.daemon.queueProcessor.service.Grid.ServiceConfig.Map.EntrySet
                    {
                    // ---- Fields declarations ----
                    private static com.tangosol.util.ListMap __mapChildren;
                    
                    // Static initializer
                    static
                        {
                        __initStatic();
                        }
                    
                    // Default static initializer
                    private static void __initStatic()
                        {
                        // register child classes
                        __mapChildren = new com.tangosol.util.ListMap();
                        __mapChildren.put("Entry", Cluster.ClusterService.ServiceConfig.Map.EntrySet.Entry.get_CLASS());
                        __mapChildren.put("Iterator", Cluster.ClusterService.ServiceConfig.Map.EntrySet.Iterator.get_CLASS());
                        }
                    
                    // Default constructor
                    public EntrySet()
                        {
                        this(null, null, true);
                        }
                    
                    // Initializing constructor
                    public EntrySet(String sName, com.tangosol.coherence.Component compParent, boolean fInit)
                        {
                        super(sName, compParent, false);
                        
                        if (fInit)
                            {
                            __init();
                            }
                        }
                    
                    // Main initializer
                    public void __init()
                        {
                        // private initialization
                        __initPrivate();
                        
                        
                        // containment initialization: children
                        
                        // signal the end of the initialization
                        set_Constructed(true);
                        }
                    
                    // Private initializer
                    protected void __initPrivate()
                        {
                        
                        super.__initPrivate();
                        }
                    
                    //++ getter for static property _Instance
                    /**
                     * Getter for property _Instance.<p>
                    * Auto generated
                     */
                    public static com.tangosol.coherence.Component get_Instance()
                        {
                        return new com.tangosol.coherence.component.net.Cluster.ClusterService.ServiceConfig.Map.EntrySet();
                        }
                    
                    //++ getter for static property _CLASS
                    /**
                     * Getter for property _CLASS.<p>
                    * Property with auto-generated accessor that returns the
                    * Class object for a given component.
                     */
                    public static Class get_CLASS()
                        {
                        Class clz;
                        try
                            {
                            clz = Class.forName("com.tangosol.coherence/component/net/Cluster$ClusterService$ServiceConfig$Map$EntrySet".replace('/', '.'));
                            }
                        catch (ClassNotFoundException e)
                            {
                            throw new NoClassDefFoundError(e.getMessage());
                            }
                        return clz;
                        }
                    
                    //++ getter for autogen property _Module
                    /**
                     * This is an auto-generated method that returns the global
                    * [design time] parent component.
                    * 
                    * Note: the class generator will ignore any custom
                    * implementation for this behavior.
                     */
                    private com.tangosol.coherence.Component get_Module()
                        {
                        return this.get_Parent().get_Parent().get_Parent().get_Parent();
                        }
                    
                    //++ getter for autogen property _ChildClasses
                    /**
                     * This is an auto-generated method that returns the map of
                    * design time [static] children.
                    * 
                    * Note: the class generator will ignore any custom
                    * implementation for this behavior.
                     */
                    protected java.util.Map get_ChildClasses()
                        {
                        return __mapChildren;
                        }

                    // ---- class: com.tangosol.coherence.component.net.Cluster$ClusterService$ServiceConfig$Map$EntrySet$Entry
                    
                    @SuppressWarnings({"deprecation", "rawtypes", "unused", "unchecked", "ConstantConditions", "DuplicatedCode", "ForLoopReplaceableByForEach", "IfCanBeSwitch", "RedundantArrayCreation", "RedundantSuppression", "SameParameterValue", "TryFinallyCanBeTryWithResources", "TryWithIdenticalCatches", "UnnecessaryBoxing", "UnnecessaryUnboxing", "UnusedAssignment"})
                    public static class Entry
                            extends    com.tangosol.coherence.component.util.daemon.queueProcessor.service.Grid.ServiceConfig.Map.EntrySet.Entry
                        {
                        // ---- Fields declarations ----
                        
                        // Default constructor
                        public Entry()
                            {
                            this(null, null, true);
                            }
                        
                        // Initializing constructor
                        public Entry(String sName, com.tangosol.coherence.Component compParent, boolean fInit)
                            {
                            super(sName, compParent, false);
                            
                            if (fInit)
                                {
                                __init();
                                }
                            }
                        
                        // Main initializer
                        public void __init()
                            {
                            // private initialization
                            __initPrivate();
                            
                            
                            // signal the end of the initialization
                            set_Constructed(true);
                            }
                        
                        // Private initializer
                        protected void __initPrivate()
                            {
                            
                            super.__initPrivate();
                            }
                        
                        //++ getter for static property _Instance
                        /**
                         * Getter for property _Instance.<p>
                        * Auto generated
                         */
                        public static com.tangosol.coherence.Component get_Instance()
                            {
                            return new com.tangosol.coherence.component.net.Cluster.ClusterService.ServiceConfig.Map.EntrySet.Entry();
                            }
                        
                        //++ getter for static property _CLASS
                        /**
                         * Getter for property _CLASS.<p>
                        * Property with auto-generated accessor that returns
                        * the Class object for a given component.
                         */
                        public static Class get_CLASS()
                            {
                            Class clz;
                            try
                                {
                                clz = Class.forName("com.tangosol.coherence/component/net/Cluster$ClusterService$ServiceConfig$Map$EntrySet$Entry".replace('/', '.'));
                                }
                            catch (ClassNotFoundException e)
                                {
                                throw new NoClassDefFoundError(e.getMessage());
                                }
                            return clz;
                            }
                        
                        //++ getter for autogen property _Module
                        /**
                         * This is an auto-generated method that returns the
                        * global [design time] parent component.
                        * 
                        * Note: the class generator will ignore any custom
                        * implementation for this behavior.
                         */
                        private com.tangosol.coherence.Component get_Module()
                            {
                            return this.get_Parent().get_Parent().get_Parent().get_Parent().get_Parent();
                            }
                        }

                    // ---- class: com.tangosol.coherence.component.net.Cluster$ClusterService$ServiceConfig$Map$EntrySet$Iterator
                    
                    @SuppressWarnings({"deprecation", "rawtypes", "unused", "unchecked", "ConstantConditions", "DuplicatedCode", "ForLoopReplaceableByForEach", "IfCanBeSwitch", "RedundantArrayCreation", "RedundantSuppression", "SameParameterValue", "TryFinallyCanBeTryWithResources", "TryWithIdenticalCatches", "UnnecessaryBoxing", "UnnecessaryUnboxing", "UnusedAssignment"})
                    public static class Iterator
                            extends    com.tangosol.coherence.component.util.daemon.queueProcessor.service.Grid.ServiceConfig.Map.EntrySet.Iterator
                        {
                        // ---- Fields declarations ----
                        
                        // Default constructor
                        public Iterator()
                            {
                            this(null, null, true);
                            }
                        
                        // Initializing constructor
                        public Iterator(String sName, com.tangosol.coherence.Component compParent, boolean fInit)
                            {
                            super(sName, compParent, false);
                            
                            if (fInit)
                                {
                                __init();
                                }
                            }
                        
                        // Main initializer
                        public void __init()
                            {
                            // private initialization
                            __initPrivate();
                            
                            
                            // signal the end of the initialization
                            set_Constructed(true);
                            }
                        
                        // Private initializer
                        protected void __initPrivate()
                            {
                            
                            super.__initPrivate();
                            }
                        
                        //++ getter for static property _Instance
                        /**
                         * Getter for property _Instance.<p>
                        * Auto generated
                         */
                        public static com.tangosol.coherence.Component get_Instance()
                            {
                            return new com.tangosol.coherence.component.net.Cluster.ClusterService.ServiceConfig.Map.EntrySet.Iterator();
                            }
                        
                        //++ getter for static property _CLASS
                        /**
                         * Getter for property _CLASS.<p>
                        * Property with auto-generated accessor that returns
                        * the Class object for a given component.
                         */
                        public static Class get_CLASS()
                            {
                            Class clz;
                            try
                                {
                                clz = Class.forName("com.tangosol.coherence/component/net/Cluster$ClusterService$ServiceConfig$Map$EntrySet$Iterator".replace('/', '.'));
                                }
                            catch (ClassNotFoundException e)
                                {
                                throw new NoClassDefFoundError(e.getMessage());
                                }
                            return clz;
                            }
                        
                        //++ getter for autogen property _Module
                        /**
                         * This is an auto-generated method that returns the
                        * global [design time] parent component.
                        * 
                        * Note: the class generator will ignore any custom
                        * implementation for this behavior.
                         */
                        private com.tangosol.coherence.Component get_Module()
                            {
                            return this.get_Parent().get_Parent().get_Parent().get_Parent().get_Parent();
                            }
                        }
                    }

                // ---- class: com.tangosol.coherence.component.net.Cluster$ClusterService$ServiceConfig$Map$KeySet
                
                @SuppressWarnings({"deprecation", "rawtypes", "unused", "unchecked", "ConstantConditions", "DuplicatedCode", "ForLoopReplaceableByForEach", "IfCanBeSwitch", "RedundantArrayCreation", "RedundantSuppression", "SameParameterValue", "TryFinallyCanBeTryWithResources", "TryWithIdenticalCatches", "UnnecessaryBoxing", "UnnecessaryUnboxing", "UnusedAssignment"})
                public static class KeySet
                        extends    com.tangosol.coherence.component.util.daemon.queueProcessor.service.Grid.ServiceConfig.Map.KeySet
                    {
                    // ---- Fields declarations ----
                    private static com.tangosol.util.ListMap __mapChildren;
                    
                    // Static initializer
                    static
                        {
                        __initStatic();
                        }
                    
                    // Default static initializer
                    private static void __initStatic()
                        {
                        // register child classes
                        __mapChildren = new com.tangosol.util.ListMap();
                        __mapChildren.put("Iterator", Cluster.ClusterService.ServiceConfig.Map.KeySet.Iterator.get_CLASS());
                        }
                    
                    // Default constructor
                    public KeySet()
                        {
                        this(null, null, true);
                        }
                    
                    // Initializing constructor
                    public KeySet(String sName, com.tangosol.coherence.Component compParent, boolean fInit)
                        {
                        super(sName, compParent, false);
                        
                        if (fInit)
                            {
                            __init();
                            }
                        }
                    
                    // Main initializer
                    public void __init()
                        {
                        // private initialization
                        __initPrivate();
                        
                        
                        // containment initialization: children
                        
                        // signal the end of the initialization
                        set_Constructed(true);
                        }
                    
                    // Private initializer
                    protected void __initPrivate()
                        {
                        
                        super.__initPrivate();
                        }
                    
                    //++ getter for static property _Instance
                    /**
                     * Getter for property _Instance.<p>
                    * Auto generated
                     */
                    public static com.tangosol.coherence.Component get_Instance()
                        {
                        return new com.tangosol.coherence.component.net.Cluster.ClusterService.ServiceConfig.Map.KeySet();
                        }
                    
                    //++ getter for static property _CLASS
                    /**
                     * Getter for property _CLASS.<p>
                    * Property with auto-generated accessor that returns the
                    * Class object for a given component.
                     */
                    public static Class get_CLASS()
                        {
                        Class clz;
                        try
                            {
                            clz = Class.forName("com.tangosol.coherence/component/net/Cluster$ClusterService$ServiceConfig$Map$KeySet".replace('/', '.'));
                            }
                        catch (ClassNotFoundException e)
                            {
                            throw new NoClassDefFoundError(e.getMessage());
                            }
                        return clz;
                        }
                    
                    //++ getter for autogen property _Module
                    /**
                     * This is an auto-generated method that returns the global
                    * [design time] parent component.
                    * 
                    * Note: the class generator will ignore any custom
                    * implementation for this behavior.
                     */
                    private com.tangosol.coherence.Component get_Module()
                        {
                        return this.get_Parent().get_Parent().get_Parent().get_Parent();
                        }
                    
                    //++ getter for autogen property _ChildClasses
                    /**
                     * This is an auto-generated method that returns the map of
                    * design time [static] children.
                    * 
                    * Note: the class generator will ignore any custom
                    * implementation for this behavior.
                     */
                    protected java.util.Map get_ChildClasses()
                        {
                        return __mapChildren;
                        }

                    // ---- class: com.tangosol.coherence.component.net.Cluster$ClusterService$ServiceConfig$Map$KeySet$Iterator
                    
                    @SuppressWarnings({"deprecation", "rawtypes", "unused", "unchecked", "ConstantConditions", "DuplicatedCode", "ForLoopReplaceableByForEach", "IfCanBeSwitch", "RedundantArrayCreation", "RedundantSuppression", "SameParameterValue", "TryFinallyCanBeTryWithResources", "TryWithIdenticalCatches", "UnnecessaryBoxing", "UnnecessaryUnboxing", "UnusedAssignment"})
                    public static class Iterator
                            extends    com.tangosol.coherence.component.util.daemon.queueProcessor.service.Grid.ServiceConfig.Map.KeySet.Iterator
                        {
                        // ---- Fields declarations ----
                        
                        // Default constructor
                        public Iterator()
                            {
                            this(null, null, true);
                            }
                        
                        // Initializing constructor
                        public Iterator(String sName, com.tangosol.coherence.Component compParent, boolean fInit)
                            {
                            super(sName, compParent, false);
                            
                            if (fInit)
                                {
                                __init();
                                }
                            }
                        
                        // Main initializer
                        public void __init()
                            {
                            // private initialization
                            __initPrivate();
                            
                            
                            // signal the end of the initialization
                            set_Constructed(true);
                            }
                        
                        // Private initializer
                        protected void __initPrivate()
                            {
                            
                            super.__initPrivate();
                            }
                        
                        //++ getter for static property _Instance
                        /**
                         * Getter for property _Instance.<p>
                        * Auto generated
                         */
                        public static com.tangosol.coherence.Component get_Instance()
                            {
                            return new com.tangosol.coherence.component.net.Cluster.ClusterService.ServiceConfig.Map.KeySet.Iterator();
                            }
                        
                        //++ getter for static property _CLASS
                        /**
                         * Getter for property _CLASS.<p>
                        * Property with auto-generated accessor that returns
                        * the Class object for a given component.
                         */
                        public static Class get_CLASS()
                            {
                            Class clz;
                            try
                                {
                                clz = Class.forName("com.tangosol.coherence/component/net/Cluster$ClusterService$ServiceConfig$Map$KeySet$Iterator".replace('/', '.'));
                                }
                            catch (ClassNotFoundException e)
                                {
                                throw new NoClassDefFoundError(e.getMessage());
                                }
                            return clz;
                            }
                        
                        //++ getter for autogen property _Module
                        /**
                         * This is an auto-generated method that returns the
                        * global [design time] parent component.
                        * 
                        * Note: the class generator will ignore any custom
                        * implementation for this behavior.
                         */
                        private com.tangosol.coherence.Component get_Module()
                            {
                            return this.get_Parent().get_Parent().get_Parent().get_Parent().get_Parent();
                            }
                        }
                    }

                // ---- class: com.tangosol.coherence.component.net.Cluster$ClusterService$ServiceConfig$Map$Values
                
                @SuppressWarnings({"deprecation", "rawtypes", "unused", "unchecked", "ConstantConditions", "DuplicatedCode", "ForLoopReplaceableByForEach", "IfCanBeSwitch", "RedundantArrayCreation", "RedundantSuppression", "SameParameterValue", "TryFinallyCanBeTryWithResources", "TryWithIdenticalCatches", "UnnecessaryBoxing", "UnnecessaryUnboxing", "UnusedAssignment"})
                public static class Values
                        extends    com.tangosol.coherence.component.util.daemon.queueProcessor.service.Grid.ServiceConfig.Map.Values
                    {
                    // ---- Fields declarations ----
                    private static com.tangosol.util.ListMap __mapChildren;
                    
                    // Static initializer
                    static
                        {
                        __initStatic();
                        }
                    
                    // Default static initializer
                    private static void __initStatic()
                        {
                        // register child classes
                        __mapChildren = new com.tangosol.util.ListMap();
                        __mapChildren.put("Iterator", Cluster.ClusterService.ServiceConfig.Map.Values.Iterator.get_CLASS());
                        }
                    
                    // Default constructor
                    public Values()
                        {
                        this(null, null, true);
                        }
                    
                    // Initializing constructor
                    public Values(String sName, com.tangosol.coherence.Component compParent, boolean fInit)
                        {
                        super(sName, compParent, false);
                        
                        if (fInit)
                            {
                            __init();
                            }
                        }
                    
                    // Main initializer
                    public void __init()
                        {
                        // private initialization
                        __initPrivate();
                        
                        
                        // containment initialization: children
                        
                        // signal the end of the initialization
                        set_Constructed(true);
                        }
                    
                    // Private initializer
                    protected void __initPrivate()
                        {
                        
                        super.__initPrivate();
                        }
                    
                    //++ getter for static property _Instance
                    /**
                     * Getter for property _Instance.<p>
                    * Auto generated
                     */
                    public static com.tangosol.coherence.Component get_Instance()
                        {
                        return new com.tangosol.coherence.component.net.Cluster.ClusterService.ServiceConfig.Map.Values();
                        }
                    
                    //++ getter for static property _CLASS
                    /**
                     * Getter for property _CLASS.<p>
                    * Property with auto-generated accessor that returns the
                    * Class object for a given component.
                     */
                    public static Class get_CLASS()
                        {
                        Class clz;
                        try
                            {
                            clz = Class.forName("com.tangosol.coherence/component/net/Cluster$ClusterService$ServiceConfig$Map$Values".replace('/', '.'));
                            }
                        catch (ClassNotFoundException e)
                            {
                            throw new NoClassDefFoundError(e.getMessage());
                            }
                        return clz;
                        }
                    
                    //++ getter for autogen property _Module
                    /**
                     * This is an auto-generated method that returns the global
                    * [design time] parent component.
                    * 
                    * Note: the class generator will ignore any custom
                    * implementation for this behavior.
                     */
                    private com.tangosol.coherence.Component get_Module()
                        {
                        return this.get_Parent().get_Parent().get_Parent().get_Parent();
                        }
                    
                    //++ getter for autogen property _ChildClasses
                    /**
                     * This is an auto-generated method that returns the map of
                    * design time [static] children.
                    * 
                    * Note: the class generator will ignore any custom
                    * implementation for this behavior.
                     */
                    protected java.util.Map get_ChildClasses()
                        {
                        return __mapChildren;
                        }

                    // ---- class: com.tangosol.coherence.component.net.Cluster$ClusterService$ServiceConfig$Map$Values$Iterator
                    
                    @SuppressWarnings({"deprecation", "rawtypes", "unused", "unchecked", "ConstantConditions", "DuplicatedCode", "ForLoopReplaceableByForEach", "IfCanBeSwitch", "RedundantArrayCreation", "RedundantSuppression", "SameParameterValue", "TryFinallyCanBeTryWithResources", "TryWithIdenticalCatches", "UnnecessaryBoxing", "UnnecessaryUnboxing", "UnusedAssignment"})
                    public static class Iterator
                            extends    com.tangosol.coherence.component.util.daemon.queueProcessor.service.Grid.ServiceConfig.Map.Values.Iterator
                        {
                        // ---- Fields declarations ----
                        
                        // Default constructor
                        public Iterator()
                            {
                            this(null, null, true);
                            }
                        
                        // Initializing constructor
                        public Iterator(String sName, com.tangosol.coherence.Component compParent, boolean fInit)
                            {
                            super(sName, compParent, false);
                            
                            if (fInit)
                                {
                                __init();
                                }
                            }
                        
                        // Main initializer
                        public void __init()
                            {
                            // private initialization
                            __initPrivate();
                            
                            
                            // signal the end of the initialization
                            set_Constructed(true);
                            }
                        
                        // Private initializer
                        protected void __initPrivate()
                            {
                            
                            super.__initPrivate();
                            }
                        
                        //++ getter for static property _Instance
                        /**
                         * Getter for property _Instance.<p>
                        * Auto generated
                         */
                        public static com.tangosol.coherence.Component get_Instance()
                            {
                            return new com.tangosol.coherence.component.net.Cluster.ClusterService.ServiceConfig.Map.Values.Iterator();
                            }
                        
                        //++ getter for static property _CLASS
                        /**
                         * Getter for property _CLASS.<p>
                        * Property with auto-generated accessor that returns
                        * the Class object for a given component.
                         */
                        public static Class get_CLASS()
                            {
                            Class clz;
                            try
                                {
                                clz = Class.forName("com.tangosol.coherence/component/net/Cluster$ClusterService$ServiceConfig$Map$Values$Iterator".replace('/', '.'));
                                }
                            catch (ClassNotFoundException e)
                                {
                                throw new NoClassDefFoundError(e.getMessage());
                                }
                            return clz;
                            }
                        
                        //++ getter for autogen property _Module
                        /**
                         * This is an auto-generated method that returns the
                        * global [design time] parent component.
                        * 
                        * Note: the class generator will ignore any custom
                        * implementation for this behavior.
                         */
                        private com.tangosol.coherence.Component get_Module()
                            {
                            return this.get_Parent().get_Parent().get_Parent().get_Parent().get_Parent();
                            }
                        }
                    }
                }
            }

        // ---- class: com.tangosol.coherence.component.net.Cluster$ClusterService$ServiceJoined
        
        /**
         * Message:
         *     ServiceJoined
         * 
         * Purpose:
         *     Informs all Members of the cluster that a Member has started a
         * Service.
         * 
         * Description:
         *     When a cluster has a Service registered, and a Member has
         * finished starting that Service locally, this Message is sent to tell
         * the cluster Members that the Service is now available on that
         * Member.
         * 
         * Attributes:
         *     ServiceId
         * 
         * Response to:
         *     n/a
         * 
         * Expected responses:
         *     n/a
         */
        @SuppressWarnings({"deprecation", "rawtypes", "unused", "unchecked", "ConstantConditions", "DuplicatedCode", "ForLoopReplaceableByForEach", "IfCanBeSwitch", "RedundantArrayCreation", "RedundantSuppression", "SameParameterValue", "TryFinallyCanBeTryWithResources", "TryWithIdenticalCatches", "UnnecessaryBoxing", "UnnecessaryUnboxing", "UnusedAssignment"})
        public static class ServiceJoined
                extends    com.tangosol.coherence.component.util.daemon.queueProcessor.service.grid.ClusterService.ServiceJoined
            {
            // ---- Fields declarations ----
            
            // Default constructor
            public ServiceJoined()
                {
                this(null, null, true);
                }
            
            // Initializing constructor
            public ServiceJoined(String sName, com.tangosol.coherence.Component compParent, boolean fInit)
                {
                super(sName, compParent, false);
                
                if (fInit)
                    {
                    __init();
                    }
                }
            
            // Main initializer
            public void __init()
                {
                // private initialization
                __initPrivate();
                
                // state initialization: public and protected properties
                try
                    {
                    setMessageType(49);
                    }
                catch (java.lang.Exception e)
                    {
                    // re-throw as a runtime exception
                    throw new com.tangosol.util.WrapperException(e);
                    }
                
                // signal the end of the initialization
                set_Constructed(true);
                }
            
            // Private initializer
            protected void __initPrivate()
                {
                
                super.__initPrivate();
                }
            
            //++ getter for static property _Instance
            /**
             * Getter for property _Instance.<p>
            * Auto generated
             */
            public static com.tangosol.coherence.Component get_Instance()
                {
                return new com.tangosol.coherence.component.net.Cluster.ClusterService.ServiceJoined();
                }
            
            //++ getter for static property _CLASS
            /**
             * Getter for property _CLASS.<p>
            * Property with auto-generated accessor that returns the Class
            * object for a given component.
             */
            public static Class get_CLASS()
                {
                Class clz;
                try
                    {
                    clz = Class.forName("com.tangosol.coherence/component/net/Cluster$ClusterService$ServiceJoined".replace('/', '.'));
                    }
                catch (ClassNotFoundException e)
                    {
                    throw new NoClassDefFoundError(e.getMessage());
                    }
                return clz;
                }
            
            //++ getter for autogen property _Module
            /**
             * This is an auto-generated method that returns the global [design
            * time] parent component.
            * 
            * Note: the class generator will ignore any custom implementation
            * for this behavior.
             */
            private com.tangosol.coherence.Component get_Module()
                {
                return this.get_Parent().get_Parent();
                }
            }

        // ---- class: com.tangosol.coherence.component.net.Cluster$ClusterService$ServiceJoining
        
        /**
         * RequestMessage:
         *     ServiceJoining
         * 
         * Purpose:
         *     Informs all Members of the cluster that a Member is joining a
         * Service (i.e. the Member has started running that Service).
         * 
         * Description:
         *     When a cluster has a Service registered, and a Member starts
         * that Service locally, this Message is sent by the cluster senior
         * member to tell cluster Members that the Member has just started the
         * Service.  This message carries the ServiceJoinTime (assigned by the
         * cluster senior) and will be followed by a ServiceJoined message once
         * the Member has finished starting the service.
         * 
         * Attributes:
         *     ServiceId
         *     ServiceName
         *     ServiceType
         *     ServiceVersion
         *     ServiceJoinTime
         *     MemberConfigMap
         *     PermissionInfo [as of 12.1.2]
         * 
         * Response to:
         *     ServiceJoinRequest
         * 
         * Expected responses:
         *     ServiceUpdateResponse
         */
        @SuppressWarnings({"deprecation", "rawtypes", "unused", "unchecked", "ConstantConditions", "DuplicatedCode", "ForLoopReplaceableByForEach", "IfCanBeSwitch", "RedundantArrayCreation", "RedundantSuppression", "SameParameterValue", "TryFinallyCanBeTryWithResources", "TryWithIdenticalCatches", "UnnecessaryBoxing", "UnnecessaryUnboxing", "UnusedAssignment"})
        public static class ServiceJoining
                extends    com.tangosol.coherence.component.util.daemon.queueProcessor.service.grid.ClusterService.ServiceJoining
            {
            // ---- Fields declarations ----
            private static com.tangosol.util.ListMap __mapChildren;
            
            // Static initializer
            static
                {
                __initStatic();
                }
            
            // Default static initializer
            private static void __initStatic()
                {
                // register child classes
                __mapChildren = new com.tangosol.util.ListMap();
                __mapChildren.put("Poll", Cluster.ClusterService.ServiceJoining.Poll.get_CLASS());
                }
            
            // Default constructor
            public ServiceJoining()
                {
                this(null, null, true);
                }
            
            // Initializing constructor
            public ServiceJoining(String sName, com.tangosol.coherence.Component compParent, boolean fInit)
                {
                super(sName, compParent, false);
                
                if (fInit)
                    {
                    __init();
                    }
                }
            
            // Main initializer
            public void __init()
                {
                // private initialization
                __initPrivate();
                
                // state initialization: public and protected properties
                try
                    {
                    setMessageType(43);
                    }
                catch (java.lang.Exception e)
                    {
                    // re-throw as a runtime exception
                    throw new com.tangosol.util.WrapperException(e);
                    }
                
                // containment initialization: children
                
                // signal the end of the initialization
                set_Constructed(true);
                }
            
            // Private initializer
            protected void __initPrivate()
                {
                
                super.__initPrivate();
                }
            
            //++ getter for static property _Instance
            /**
             * Getter for property _Instance.<p>
            * Auto generated
             */
            public static com.tangosol.coherence.Component get_Instance()
                {
                return new com.tangosol.coherence.component.net.Cluster.ClusterService.ServiceJoining();
                }
            
            //++ getter for static property _CLASS
            /**
             * Getter for property _CLASS.<p>
            * Property with auto-generated accessor that returns the Class
            * object for a given component.
             */
            public static Class get_CLASS()
                {
                Class clz;
                try
                    {
                    clz = Class.forName("com.tangosol.coherence/component/net/Cluster$ClusterService$ServiceJoining".replace('/', '.'));
                    }
                catch (ClassNotFoundException e)
                    {
                    throw new NoClassDefFoundError(e.getMessage());
                    }
                return clz;
                }
            
            //++ getter for autogen property _Module
            /**
             * This is an auto-generated method that returns the global [design
            * time] parent component.
            * 
            * Note: the class generator will ignore any custom implementation
            * for this behavior.
             */
            private com.tangosol.coherence.Component get_Module()
                {
                return this.get_Parent().get_Parent();
                }
            
            //++ getter for autogen property _ChildClasses
            /**
             * This is an auto-generated method that returns the map of design
            * time [static] children.
            * 
            * Note: the class generator will ignore any custom implementation
            * for this behavior.
             */
            protected java.util.Map get_ChildClasses()
                {
                return __mapChildren;
                }

            // ---- class: com.tangosol.coherence.component.net.Cluster$ClusterService$ServiceJoining$Poll
            
            /**
             * The Poll contains information regarding a request sent to one or
             * more Cluster Members that require responses. A Service may poll
             * other Members that are running the same Service, and the Poll is
             * used to wait for and assemble the responses from each of those
             * Members. A client thread may also use the Poll to block on a
             * response or set of responses, thus waiting for the completion of
             * the Poll. In its simplest form, which is a Poll that is sent to
             * one Member of the Cluster, the Poll actually represents the
             * request/response model.
             */
            @SuppressWarnings({"deprecation", "rawtypes", "unused", "unchecked", "ConstantConditions", "DuplicatedCode", "ForLoopReplaceableByForEach", "IfCanBeSwitch", "RedundantArrayCreation", "RedundantSuppression", "SameParameterValue", "TryFinallyCanBeTryWithResources", "TryWithIdenticalCatches", "UnnecessaryBoxing", "UnnecessaryUnboxing", "UnusedAssignment"})
            public static class Poll
                    extends    com.tangosol.coherence.component.util.daemon.queueProcessor.service.grid.ClusterService.ServiceJoining.Poll
                {
                // ---- Fields declarations ----
                
                // Default constructor
                public Poll()
                    {
                    this(null, null, true);
                    }
                
                // Initializing constructor
                public Poll(String sName, com.tangosol.coherence.Component compParent, boolean fInit)
                    {
                    super(sName, compParent, false);
                    
                    if (fInit)
                        {
                        __init();
                        }
                    }
                
                // Main initializer
                public void __init()
                    {
                    // private initialization
                    __initPrivate();
                    
                    
                    // signal the end of the initialization
                    set_Constructed(true);
                    }
                
                // Private initializer
                protected void __initPrivate()
                    {
                    
                    super.__initPrivate();
                    }
                
                //++ getter for static property _Instance
                /**
                 * Getter for property _Instance.<p>
                * Auto generated
                 */
                public static com.tangosol.coherence.Component get_Instance()
                    {
                    return new com.tangosol.coherence.component.net.Cluster.ClusterService.ServiceJoining.Poll();
                    }
                
                //++ getter for static property _CLASS
                /**
                 * Getter for property _CLASS.<p>
                * Property with auto-generated accessor that returns the Class
                * object for a given component.
                 */
                public static Class get_CLASS()
                    {
                    Class clz;
                    try
                        {
                        clz = Class.forName("com.tangosol.coherence/component/net/Cluster$ClusterService$ServiceJoining$Poll".replace('/', '.'));
                        }
                    catch (ClassNotFoundException e)
                        {
                        throw new NoClassDefFoundError(e.getMessage());
                        }
                    return clz;
                    }
                
                //++ getter for autogen property _Module
                /**
                 * This is an auto-generated method that returns the global
                * [design time] parent component.
                * 
                * Note: the class generator will ignore any custom
                * implementation for this behavior.
                 */
                private com.tangosol.coherence.Component get_Module()
                    {
                    return this.get_Parent().get_Parent().get_Parent();
                    }
                }
            }

        // ---- class: com.tangosol.coherence.component.net.Cluster$ClusterService$ServiceJoinRequest
        
        /**
         * RequestMessage:
         *     ServiceJoinRequest (poll)
         * 
         * Purpose:
         *   Request sent to the senior Member to join a Service.
         * 
         * Description:
         *     When a Member wishes to start a Service which has already been
         * registered, it requests the senior Member to assign the
         * ServiceJoined timestamp for this Service on this Member. The senior
         * Member assigns a unique timestamp, notifies all Members using the
         * ServiceJoined poll and upon receiving the delivery confirmation
         * responds to the requesting Member.
         * 
         * Attributes:
         *     ServiceId
         *     ServiceVersion
         *     ServiceEndPoint (as of 3.7)
         *     MemberConfigMap
         *     PermissionInfo [as of 12.1.2]
         * 
         * Response to:
         *     n/a
         * 
         * Expected responses:
         *     ServiceJoining
         *     ServiceUpdateResponse
         */
        @SuppressWarnings({"deprecation", "rawtypes", "unused", "unchecked", "ConstantConditions", "DuplicatedCode", "ForLoopReplaceableByForEach", "IfCanBeSwitch", "RedundantArrayCreation", "RedundantSuppression", "SameParameterValue", "TryFinallyCanBeTryWithResources", "TryWithIdenticalCatches", "UnnecessaryBoxing", "UnnecessaryUnboxing", "UnusedAssignment"})
        public static class ServiceJoinRequest
                extends    com.tangosol.coherence.component.util.daemon.queueProcessor.service.grid.ClusterService.ServiceJoinRequest
            {
            // ---- Fields declarations ----
            private static com.tangosol.util.ListMap __mapChildren;
            
            // Static initializer
            static
                {
                __initStatic();
                }
            
            // Default static initializer
            private static void __initStatic()
                {
                // register child classes
                __mapChildren = new com.tangosol.util.ListMap();
                __mapChildren.put("Poll", Cluster.ClusterService.ServiceJoinRequest.Poll.get_CLASS());
                }
            
            // Default constructor
            public ServiceJoinRequest()
                {
                this(null, null, true);
                }
            
            // Initializing constructor
            public ServiceJoinRequest(String sName, com.tangosol.coherence.Component compParent, boolean fInit)
                {
                super(sName, compParent, false);
                
                if (fInit)
                    {
                    __init();
                    }
                }
            
            // Main initializer
            public void __init()
                {
                // private initialization
                __initPrivate();
                
                // state initialization: public and protected properties
                try
                    {
                    setMessageType(42);
                    }
                catch (java.lang.Exception e)
                    {
                    // re-throw as a runtime exception
                    throw new com.tangosol.util.WrapperException(e);
                    }
                
                // containment initialization: children
                
                // signal the end of the initialization
                set_Constructed(true);
                }
            
            // Private initializer
            protected void __initPrivate()
                {
                
                super.__initPrivate();
                }
            
            //++ getter for static property _Instance
            /**
             * Getter for property _Instance.<p>
            * Auto generated
             */
            public static com.tangosol.coherence.Component get_Instance()
                {
                return new com.tangosol.coherence.component.net.Cluster.ClusterService.ServiceJoinRequest();
                }
            
            //++ getter for static property _CLASS
            /**
             * Getter for property _CLASS.<p>
            * Property with auto-generated accessor that returns the Class
            * object for a given component.
             */
            public static Class get_CLASS()
                {
                Class clz;
                try
                    {
                    clz = Class.forName("com.tangosol.coherence/component/net/Cluster$ClusterService$ServiceJoinRequest".replace('/', '.'));
                    }
                catch (ClassNotFoundException e)
                    {
                    throw new NoClassDefFoundError(e.getMessage());
                    }
                return clz;
                }
            
            //++ getter for autogen property _Module
            /**
             * This is an auto-generated method that returns the global [design
            * time] parent component.
            * 
            * Note: the class generator will ignore any custom implementation
            * for this behavior.
             */
            private com.tangosol.coherence.Component get_Module()
                {
                return this.get_Parent().get_Parent();
                }
            
            //++ getter for autogen property _ChildClasses
            /**
             * This is an auto-generated method that returns the map of design
            * time [static] children.
            * 
            * Note: the class generator will ignore any custom implementation
            * for this behavior.
             */
            protected java.util.Map get_ChildClasses()
                {
                return __mapChildren;
                }

            // ---- class: com.tangosol.coherence.component.net.Cluster$ClusterService$ServiceJoinRequest$Poll
            
            /**
             * The Poll contains information regarding a request sent to one or
             * more Cluster Members that require responses. A Service may poll
             * other Members that are running the same Service, and the Poll is
             * used to wait for and assemble the responses from each of those
             * Members. A client thread may also use the Poll to block on a
             * response or set of responses, thus waiting for the completion of
             * the Poll. In its simplest form, which is a Poll that is sent to
             * one Member of the Cluster, the Poll actually represents the
             * request/response model.
             */
            @SuppressWarnings({"deprecation", "rawtypes", "unused", "unchecked", "ConstantConditions", "DuplicatedCode", "ForLoopReplaceableByForEach", "IfCanBeSwitch", "RedundantArrayCreation", "RedundantSuppression", "SameParameterValue", "TryFinallyCanBeTryWithResources", "TryWithIdenticalCatches", "UnnecessaryBoxing", "UnnecessaryUnboxing", "UnusedAssignment"})
            public static class Poll
                    extends    com.tangosol.coherence.component.util.daemon.queueProcessor.service.grid.ClusterService.ServiceJoinRequest.Poll
                {
                // ---- Fields declarations ----
                
                // Default constructor
                public Poll()
                    {
                    this(null, null, true);
                    }
                
                // Initializing constructor
                public Poll(String sName, com.tangosol.coherence.Component compParent, boolean fInit)
                    {
                    super(sName, compParent, false);
                    
                    if (fInit)
                        {
                        __init();
                        }
                    }
                
                // Main initializer
                public void __init()
                    {
                    // private initialization
                    __initPrivate();
                    
                    
                    // signal the end of the initialization
                    set_Constructed(true);
                    }
                
                // Private initializer
                protected void __initPrivate()
                    {
                    
                    super.__initPrivate();
                    }
                
                //++ getter for static property _Instance
                /**
                 * Getter for property _Instance.<p>
                * Auto generated
                 */
                public static com.tangosol.coherence.Component get_Instance()
                    {
                    return new com.tangosol.coherence.component.net.Cluster.ClusterService.ServiceJoinRequest.Poll();
                    }
                
                //++ getter for static property _CLASS
                /**
                 * Getter for property _CLASS.<p>
                * Property with auto-generated accessor that returns the Class
                * object for a given component.
                 */
                public static Class get_CLASS()
                    {
                    Class clz;
                    try
                        {
                        clz = Class.forName("com.tangosol.coherence/component/net/Cluster$ClusterService$ServiceJoinRequest$Poll".replace('/', '.'));
                        }
                    catch (ClassNotFoundException e)
                        {
                        throw new NoClassDefFoundError(e.getMessage());
                        }
                    return clz;
                    }
                
                //++ getter for autogen property _Module
                /**
                 * This is an auto-generated method that returns the global
                * [design time] parent component.
                * 
                * Note: the class generator will ignore any custom
                * implementation for this behavior.
                 */
                private com.tangosol.coherence.Component get_Module()
                    {
                    return this.get_Parent().get_Parent().get_Parent();
                    }
                }
            }

        // ---- class: com.tangosol.coherence.component.net.Cluster$ClusterService$ServiceLeaving
        
        /**
         * Message:
         *     ServiceLeaving
         * 
         * Purpose:
         *     Informs all Members of the cluster that a Member is starting the
         * process of leaving (stopping) a Service.
         * 
         * Description:
         *     When a cluster has a Service registered, and a Member is running
         * that Service, and that Member subsequently decides to stop the
         * Service, this Message is sent to tell the cluster Members that the
         * Service is going to be stopped on that Member.
         * 
         * Attributes:
         *     ServiceId
         *     ServiceJoined
         * 
         * Response to:
         *     n/a
         * 
         * Expected responses:
         *     n/a
         */
        @SuppressWarnings({"deprecation", "rawtypes", "unused", "unchecked", "ConstantConditions", "DuplicatedCode", "ForLoopReplaceableByForEach", "IfCanBeSwitch", "RedundantArrayCreation", "RedundantSuppression", "SameParameterValue", "TryFinallyCanBeTryWithResources", "TryWithIdenticalCatches", "UnnecessaryBoxing", "UnnecessaryUnboxing", "UnusedAssignment"})
        public static class ServiceLeaving
                extends    com.tangosol.coherence.component.util.daemon.queueProcessor.service.grid.ClusterService.ServiceLeaving
            {
            // ---- Fields declarations ----
            
            // Default constructor
            public ServiceLeaving()
                {
                this(null, null, true);
                }
            
            // Initializing constructor
            public ServiceLeaving(String sName, com.tangosol.coherence.Component compParent, boolean fInit)
                {
                super(sName, compParent, false);
                
                if (fInit)
                    {
                    __init();
                    }
                }
            
            // Main initializer
            public void __init()
                {
                // private initialization
                __initPrivate();
                
                // state initialization: public and protected properties
                try
                    {
                    setMessageType(44);
                    }
                catch (java.lang.Exception e)
                    {
                    // re-throw as a runtime exception
                    throw new com.tangosol.util.WrapperException(e);
                    }
                
                // signal the end of the initialization
                set_Constructed(true);
                }
            
            // Private initializer
            protected void __initPrivate()
                {
                
                super.__initPrivate();
                }
            
            //++ getter for static property _Instance
            /**
             * Getter for property _Instance.<p>
            * Auto generated
             */
            public static com.tangosol.coherence.Component get_Instance()
                {
                return new com.tangosol.coherence.component.net.Cluster.ClusterService.ServiceLeaving();
                }
            
            //++ getter for static property _CLASS
            /**
             * Getter for property _CLASS.<p>
            * Property with auto-generated accessor that returns the Class
            * object for a given component.
             */
            public static Class get_CLASS()
                {
                Class clz;
                try
                    {
                    clz = Class.forName("com.tangosol.coherence/component/net/Cluster$ClusterService$ServiceLeaving".replace('/', '.'));
                    }
                catch (ClassNotFoundException e)
                    {
                    throw new NoClassDefFoundError(e.getMessage());
                    }
                return clz;
                }
            
            //++ getter for autogen property _Module
            /**
             * This is an auto-generated method that returns the global [design
            * time] parent component.
            * 
            * Note: the class generator will ignore any custom implementation
            * for this behavior.
             */
            private com.tangosol.coherence.Component get_Module()
                {
                return this.get_Parent().get_Parent();
                }
            }

        // ---- class: com.tangosol.coherence.component.net.Cluster$ClusterService$ServiceLeft
        
        /**
         * Message:
         *     ServiceLeft
         * 
         * Purpose:
         *     Informs all Members of the cluster that a Member has stopped a
         * Service.
         * 
         * Description:
         *     When a cluster has a Service registered, and a Member is running
         * that Service, and that Member subsequently stops the Service, this
         * Message is sent to tell the cluster Members that the Service has
         * stopped on that Member.
         * 
         * Attributes:
         *     ServiceId
         *     ServiceJoined
         * 
         * Response to:
         *     n/a
         * 
         * Expected responses:
         *     n/a
         */
        @SuppressWarnings({"deprecation", "rawtypes", "unused", "unchecked", "ConstantConditions", "DuplicatedCode", "ForLoopReplaceableByForEach", "IfCanBeSwitch", "RedundantArrayCreation", "RedundantSuppression", "SameParameterValue", "TryFinallyCanBeTryWithResources", "TryWithIdenticalCatches", "UnnecessaryBoxing", "UnnecessaryUnboxing", "UnusedAssignment"})
        public static class ServiceLeft
                extends    com.tangosol.coherence.component.util.daemon.queueProcessor.service.grid.ClusterService.ServiceLeft
            {
            // ---- Fields declarations ----
            
            // Default constructor
            public ServiceLeft()
                {
                this(null, null, true);
                }
            
            // Initializing constructor
            public ServiceLeft(String sName, com.tangosol.coherence.Component compParent, boolean fInit)
                {
                super(sName, compParent, false);
                
                if (fInit)
                    {
                    __init();
                    }
                }
            
            // Main initializer
            public void __init()
                {
                // private initialization
                __initPrivate();
                
                // state initialization: public and protected properties
                try
                    {
                    setMessageType(45);
                    }
                catch (java.lang.Exception e)
                    {
                    // re-throw as a runtime exception
                    throw new com.tangosol.util.WrapperException(e);
                    }
                
                // signal the end of the initialization
                set_Constructed(true);
                }
            
            // Private initializer
            protected void __initPrivate()
                {
                
                super.__initPrivate();
                }
            
            //++ getter for static property _Instance
            /**
             * Getter for property _Instance.<p>
            * Auto generated
             */
            public static com.tangosol.coherence.Component get_Instance()
                {
                return new com.tangosol.coherence.component.net.Cluster.ClusterService.ServiceLeft();
                }
            
            //++ getter for static property _CLASS
            /**
             * Getter for property _CLASS.<p>
            * Property with auto-generated accessor that returns the Class
            * object for a given component.
             */
            public static Class get_CLASS()
                {
                Class clz;
                try
                    {
                    clz = Class.forName("com.tangosol.coherence/component/net/Cluster$ClusterService$ServiceLeft".replace('/', '.'));
                    }
                catch (ClassNotFoundException e)
                    {
                    throw new NoClassDefFoundError(e.getMessage());
                    }
                return clz;
                }
            
            //++ getter for autogen property _Module
            /**
             * This is an auto-generated method that returns the global [design
            * time] parent component.
            * 
            * Note: the class generator will ignore any custom implementation
            * for this behavior.
             */
            private com.tangosol.coherence.Component get_Module()
                {
                return this.get_Parent().get_Parent();
                }
            }

        // ---- class: com.tangosol.coherence.component.net.Cluster$ClusterService$ServiceQuiescenceRequest
        
        /**
         * ServiceQuiescenceRequest is sent (as a chained request) to all
         * Cluster members to indicate that a given service (or all Clustered
         * services) are to be suspended or resumed.
         */
        @SuppressWarnings({"deprecation", "rawtypes", "unused", "unchecked", "ConstantConditions", "DuplicatedCode", "ForLoopReplaceableByForEach", "IfCanBeSwitch", "RedundantArrayCreation", "RedundantSuppression", "SameParameterValue", "TryFinallyCanBeTryWithResources", "TryWithIdenticalCatches", "UnnecessaryBoxing", "UnnecessaryUnboxing", "UnusedAssignment"})
        public static class ServiceQuiescenceRequest
                extends    com.tangosol.coherence.component.util.daemon.queueProcessor.service.grid.ClusterService.ServiceQuiescenceRequest
            {
            // ---- Fields declarations ----
            private static com.tangosol.util.ListMap __mapChildren;
            
            // Static initializer
            static
                {
                __initStatic();
                }
            
            // Default static initializer
            private static void __initStatic()
                {
                // register child classes
                __mapChildren = new com.tangosol.util.ListMap();
                __mapChildren.put("Poll", Cluster.ClusterService.ServiceQuiescenceRequest.Poll.get_CLASS());
                }
            
            // Default constructor
            public ServiceQuiescenceRequest()
                {
                this(null, null, true);
                }
            
            // Initializing constructor
            public ServiceQuiescenceRequest(String sName, com.tangosol.coherence.Component compParent, boolean fInit)
                {
                super(sName, compParent, false);
                
                if (fInit)
                    {
                    __init();
                    }
                }
            
            // Main initializer
            public void __init()
                {
                // private initialization
                __initPrivate();
                
                // state initialization: public and protected properties
                try
                    {
                    setMessageType(57);
                    }
                catch (java.lang.Exception e)
                    {
                    // re-throw as a runtime exception
                    throw new com.tangosol.util.WrapperException(e);
                    }
                
                // containment initialization: children
                
                // signal the end of the initialization
                set_Constructed(true);
                }
            
            // Private initializer
            protected void __initPrivate()
                {
                
                super.__initPrivate();
                }
            
            //++ getter for static property _Instance
            /**
             * Getter for property _Instance.<p>
            * Auto generated
             */
            public static com.tangosol.coherence.Component get_Instance()
                {
                return new com.tangosol.coherence.component.net.Cluster.ClusterService.ServiceQuiescenceRequest();
                }
            
            //++ getter for static property _CLASS
            /**
             * Getter for property _CLASS.<p>
            * Property with auto-generated accessor that returns the Class
            * object for a given component.
             */
            public static Class get_CLASS()
                {
                Class clz;
                try
                    {
                    clz = Class.forName("com.tangosol.coherence/component/net/Cluster$ClusterService$ServiceQuiescenceRequest".replace('/', '.'));
                    }
                catch (ClassNotFoundException e)
                    {
                    throw new NoClassDefFoundError(e.getMessage());
                    }
                return clz;
                }
            
            //++ getter for autogen property _Module
            /**
             * This is an auto-generated method that returns the global [design
            * time] parent component.
            * 
            * Note: the class generator will ignore any custom implementation
            * for this behavior.
             */
            private com.tangosol.coherence.Component get_Module()
                {
                return this.get_Parent().get_Parent();
                }
            
            //++ getter for autogen property _ChildClasses
            /**
             * This is an auto-generated method that returns the map of design
            * time [static] children.
            * 
            * Note: the class generator will ignore any custom implementation
            * for this behavior.
             */
            protected java.util.Map get_ChildClasses()
                {
                return __mapChildren;
                }

            // ---- class: com.tangosol.coherence.component.net.Cluster$ClusterService$ServiceQuiescenceRequest$Poll
            
            /**
             * The Poll contains information regarding a request sent to one or
             * more Cluster Members that require responses. A Service may poll
             * other Members that are running the same Service, and the Poll is
             * used to wait for and assemble the responses from each of those
             * Members. A client thread may also use the Poll to block on a
             * response or set of responses, thus waiting for the completion of
             * the Poll. In its simplest form, which is a Poll that is sent to
             * one Member of the Cluster, the Poll actually represents the
             * request/response model.
             */
            @SuppressWarnings({"deprecation", "rawtypes", "unused", "unchecked", "ConstantConditions", "DuplicatedCode", "ForLoopReplaceableByForEach", "IfCanBeSwitch", "RedundantArrayCreation", "RedundantSuppression", "SameParameterValue", "TryFinallyCanBeTryWithResources", "TryWithIdenticalCatches", "UnnecessaryBoxing", "UnnecessaryUnboxing", "UnusedAssignment"})
            public static class Poll
                    extends    com.tangosol.coherence.component.util.daemon.queueProcessor.service.grid.ClusterService.ServiceQuiescenceRequest.Poll
                {
                // ---- Fields declarations ----
                
                // Default constructor
                public Poll()
                    {
                    this(null, null, true);
                    }
                
                // Initializing constructor
                public Poll(String sName, com.tangosol.coherence.Component compParent, boolean fInit)
                    {
                    super(sName, compParent, false);
                    
                    if (fInit)
                        {
                        __init();
                        }
                    }
                
                // Main initializer
                public void __init()
                    {
                    // private initialization
                    __initPrivate();
                    
                    
                    // signal the end of the initialization
                    set_Constructed(true);
                    }
                
                // Private initializer
                protected void __initPrivate()
                    {
                    
                    super.__initPrivate();
                    }
                
                //++ getter for static property _Instance
                /**
                 * Getter for property _Instance.<p>
                * Auto generated
                 */
                public static com.tangosol.coherence.Component get_Instance()
                    {
                    return new com.tangosol.coherence.component.net.Cluster.ClusterService.ServiceQuiescenceRequest.Poll();
                    }
                
                //++ getter for static property _CLASS
                /**
                 * Getter for property _CLASS.<p>
                * Property with auto-generated accessor that returns the Class
                * object for a given component.
                 */
                public static Class get_CLASS()
                    {
                    Class clz;
                    try
                        {
                        clz = Class.forName("com.tangosol.coherence/component/net/Cluster$ClusterService$ServiceQuiescenceRequest$Poll".replace('/', '.'));
                        }
                    catch (ClassNotFoundException e)
                        {
                        throw new NoClassDefFoundError(e.getMessage());
                        }
                    return clz;
                    }
                
                //++ getter for autogen property _Module
                /**
                 * This is an auto-generated method that returns the global
                * [design time] parent component.
                * 
                * Note: the class generator will ignore any custom
                * implementation for this behavior.
                 */
                private com.tangosol.coherence.Component get_Module()
                    {
                    return this.get_Parent().get_Parent().get_Parent();
                    }
                }
            }

        // ---- class: com.tangosol.coherence.component.net.Cluster$ClusterService$ServiceRegister
        
        /**
         * RequestMessage:
         *     ServiceRegister
         * 
         * Purpose:
         *     Inform all Members about a new Service.
         * 
         * Description:
         *     When a Member wishes to start a Service that has not previously
         * been registered, it must request a Service id for that Service, and
         * the senior Member is responsible for assigning the Service id. When
         * the id is assigned, the senior Member first notifies (using this
         * message) the rest of the cluster about this new Service and only
         * then responds to the requesting member thus preventing service info
         * desynchronization in case the senior dies before delivering a
         * response to the requestor.
         * 
         * Attributes:
         *     ServiceId
         *     ServiceName
         * 
         * Response to:
         *     ServiceRegisterRequest
         * 
         * Expected responses:
         *     n/a
         */
        @SuppressWarnings({"deprecation", "rawtypes", "unused", "unchecked", "ConstantConditions", "DuplicatedCode", "ForLoopReplaceableByForEach", "IfCanBeSwitch", "RedundantArrayCreation", "RedundantSuppression", "SameParameterValue", "TryFinallyCanBeTryWithResources", "TryWithIdenticalCatches", "UnnecessaryBoxing", "UnnecessaryUnboxing", "UnusedAssignment"})
        public static class ServiceRegister
                extends    com.tangosol.coherence.component.util.daemon.queueProcessor.service.grid.ClusterService.ServiceRegister
            {
            // ---- Fields declarations ----
            private static com.tangosol.util.ListMap __mapChildren;
            
            // Static initializer
            static
                {
                __initStatic();
                }
            
            // Default static initializer
            private static void __initStatic()
                {
                // register child classes
                __mapChildren = new com.tangosol.util.ListMap();
                __mapChildren.put("Poll", Cluster.ClusterService.ServiceRegister.Poll.get_CLASS());
                }
            
            // Default constructor
            public ServiceRegister()
                {
                this(null, null, true);
                }
            
            // Initializing constructor
            public ServiceRegister(String sName, com.tangosol.coherence.Component compParent, boolean fInit)
                {
                super(sName, compParent, false);
                
                if (fInit)
                    {
                    __init();
                    }
                }
            
            // Main initializer
            public void __init()
                {
                // private initialization
                __initPrivate();
                
                // state initialization: public and protected properties
                try
                    {
                    setMessageType(46);
                    }
                catch (java.lang.Exception e)
                    {
                    // re-throw as a runtime exception
                    throw new com.tangosol.util.WrapperException(e);
                    }
                
                // containment initialization: children
                
                // signal the end of the initialization
                set_Constructed(true);
                }
            
            // Private initializer
            protected void __initPrivate()
                {
                
                super.__initPrivate();
                }
            
            //++ getter for static property _Instance
            /**
             * Getter for property _Instance.<p>
            * Auto generated
             */
            public static com.tangosol.coherence.Component get_Instance()
                {
                return new com.tangosol.coherence.component.net.Cluster.ClusterService.ServiceRegister();
                }
            
            //++ getter for static property _CLASS
            /**
             * Getter for property _CLASS.<p>
            * Property with auto-generated accessor that returns the Class
            * object for a given component.
             */
            public static Class get_CLASS()
                {
                Class clz;
                try
                    {
                    clz = Class.forName("com.tangosol.coherence/component/net/Cluster$ClusterService$ServiceRegister".replace('/', '.'));
                    }
                catch (ClassNotFoundException e)
                    {
                    throw new NoClassDefFoundError(e.getMessage());
                    }
                return clz;
                }
            
            //++ getter for autogen property _Module
            /**
             * This is an auto-generated method that returns the global [design
            * time] parent component.
            * 
            * Note: the class generator will ignore any custom implementation
            * for this behavior.
             */
            private com.tangosol.coherence.Component get_Module()
                {
                return this.get_Parent().get_Parent();
                }
            
            //++ getter for autogen property _ChildClasses
            /**
             * This is an auto-generated method that returns the map of design
            * time [static] children.
            * 
            * Note: the class generator will ignore any custom implementation
            * for this behavior.
             */
            protected java.util.Map get_ChildClasses()
                {
                return __mapChildren;
                }

            // ---- class: com.tangosol.coherence.component.net.Cluster$ClusterService$ServiceRegister$Poll
            
            /**
             * The Poll contains information regarding a request sent to one or
             * more Cluster Members that require responses. A Service may poll
             * other Members that are running the same Service, and the Poll is
             * used to wait for and assemble the responses from each of those
             * Members. A client thread may also use the Poll to block on a
             * response or set of responses, thus waiting for the completion of
             * the Poll. In its simplest form, which is a Poll that is sent to
             * one Member of the Cluster, the Poll actually represents the
             * request/response model.
             */
            @SuppressWarnings({"deprecation", "rawtypes", "unused", "unchecked", "ConstantConditions", "DuplicatedCode", "ForLoopReplaceableByForEach", "IfCanBeSwitch", "RedundantArrayCreation", "RedundantSuppression", "SameParameterValue", "TryFinallyCanBeTryWithResources", "TryWithIdenticalCatches", "UnnecessaryBoxing", "UnnecessaryUnboxing", "UnusedAssignment"})
            public static class Poll
                    extends    com.tangosol.coherence.component.util.daemon.queueProcessor.service.grid.ClusterService.ServiceRegister.Poll
                {
                // ---- Fields declarations ----
                
                // Default constructor
                public Poll()
                    {
                    this(null, null, true);
                    }
                
                // Initializing constructor
                public Poll(String sName, com.tangosol.coherence.Component compParent, boolean fInit)
                    {
                    super(sName, compParent, false);
                    
                    if (fInit)
                        {
                        __init();
                        }
                    }
                
                // Main initializer
                public void __init()
                    {
                    // private initialization
                    __initPrivate();
                    
                    
                    // signal the end of the initialization
                    set_Constructed(true);
                    }
                
                // Private initializer
                protected void __initPrivate()
                    {
                    
                    super.__initPrivate();
                    }
                
                //++ getter for static property _Instance
                /**
                 * Getter for property _Instance.<p>
                * Auto generated
                 */
                public static com.tangosol.coherence.Component get_Instance()
                    {
                    return new com.tangosol.coherence.component.net.Cluster.ClusterService.ServiceRegister.Poll();
                    }
                
                //++ getter for static property _CLASS
                /**
                 * Getter for property _CLASS.<p>
                * Property with auto-generated accessor that returns the Class
                * object for a given component.
                 */
                public static Class get_CLASS()
                    {
                    Class clz;
                    try
                        {
                        clz = Class.forName("com.tangosol.coherence/component/net/Cluster$ClusterService$ServiceRegister$Poll".replace('/', '.'));
                        }
                    catch (ClassNotFoundException e)
                        {
                        throw new NoClassDefFoundError(e.getMessage());
                        }
                    return clz;
                    }
                
                //++ getter for autogen property _Module
                /**
                 * This is an auto-generated method that returns the global
                * [design time] parent component.
                * 
                * Note: the class generator will ignore any custom
                * implementation for this behavior.
                 */
                private com.tangosol.coherence.Component get_Module()
                    {
                    return this.get_Parent().get_Parent().get_Parent();
                    }
                }
            }

        // ---- class: com.tangosol.coherence.component.net.Cluster$ClusterService$ServiceRegisterRequest
        
        /**
         * RequestMessage:
         *     ServiceRegisterRequest
         * 
         * Purpose:
         *     Request sent to the senior Member to assign a Service id.
         * 
         * Description:
         *     When a Member wishes to start a Service that has not previously
         * been registered, it must request a Service id for that Service, and
         * the senior Member is responsible for assigning the Service id.
         * 
         * Attributes:
         *     ServiceName
         *     ServiceType
         * 
         * Response to:
         *     n/a
         * 
         * Expected responses:
         *     ServiceRegister
         */
        @SuppressWarnings({"deprecation", "rawtypes", "unused", "unchecked", "ConstantConditions", "DuplicatedCode", "ForLoopReplaceableByForEach", "IfCanBeSwitch", "RedundantArrayCreation", "RedundantSuppression", "SameParameterValue", "TryFinallyCanBeTryWithResources", "TryWithIdenticalCatches", "UnnecessaryBoxing", "UnnecessaryUnboxing", "UnusedAssignment"})
        public static class ServiceRegisterRequest
                extends    com.tangosol.coherence.component.util.daemon.queueProcessor.service.grid.ClusterService.ServiceRegisterRequest
            {
            // ---- Fields declarations ----
            private static com.tangosol.util.ListMap __mapChildren;
            
            // Static initializer
            static
                {
                __initStatic();
                }
            
            // Default static initializer
            private static void __initStatic()
                {
                // register child classes
                __mapChildren = new com.tangosol.util.ListMap();
                __mapChildren.put("Poll", Cluster.ClusterService.ServiceRegisterRequest.Poll.get_CLASS());
                }
            
            // Default constructor
            public ServiceRegisterRequest()
                {
                this(null, null, true);
                }
            
            // Initializing constructor
            public ServiceRegisterRequest(String sName, com.tangosol.coherence.Component compParent, boolean fInit)
                {
                super(sName, compParent, false);
                
                if (fInit)
                    {
                    __init();
                    }
                }
            
            // Main initializer
            public void __init()
                {
                // private initialization
                __initPrivate();
                
                // state initialization: public and protected properties
                try
                    {
                    setMessageType(47);
                    }
                catch (java.lang.Exception e)
                    {
                    // re-throw as a runtime exception
                    throw new com.tangosol.util.WrapperException(e);
                    }
                
                // containment initialization: children
                
                // signal the end of the initialization
                set_Constructed(true);
                }
            
            // Private initializer
            protected void __initPrivate()
                {
                
                super.__initPrivate();
                }
            
            //++ getter for static property _Instance
            /**
             * Getter for property _Instance.<p>
            * Auto generated
             */
            public static com.tangosol.coherence.Component get_Instance()
                {
                return new com.tangosol.coherence.component.net.Cluster.ClusterService.ServiceRegisterRequest();
                }
            
            //++ getter for static property _CLASS
            /**
             * Getter for property _CLASS.<p>
            * Property with auto-generated accessor that returns the Class
            * object for a given component.
             */
            public static Class get_CLASS()
                {
                Class clz;
                try
                    {
                    clz = Class.forName("com.tangosol.coherence/component/net/Cluster$ClusterService$ServiceRegisterRequest".replace('/', '.'));
                    }
                catch (ClassNotFoundException e)
                    {
                    throw new NoClassDefFoundError(e.getMessage());
                    }
                return clz;
                }
            
            //++ getter for autogen property _Module
            /**
             * This is an auto-generated method that returns the global [design
            * time] parent component.
            * 
            * Note: the class generator will ignore any custom implementation
            * for this behavior.
             */
            private com.tangosol.coherence.Component get_Module()
                {
                return this.get_Parent().get_Parent();
                }
            
            //++ getter for autogen property _ChildClasses
            /**
             * This is an auto-generated method that returns the map of design
            * time [static] children.
            * 
            * Note: the class generator will ignore any custom implementation
            * for this behavior.
             */
            protected java.util.Map get_ChildClasses()
                {
                return __mapChildren;
                }

            // ---- class: com.tangosol.coherence.component.net.Cluster$ClusterService$ServiceRegisterRequest$Poll
            
            /**
             * The Poll contains information regarding a request sent to one or
             * more Cluster Members that require responses. A Service may poll
             * other Members that are running the same Service, and the Poll is
             * used to wait for and assemble the responses from each of those
             * Members. A client thread may also use the Poll to block on a
             * response or set of responses, thus waiting for the completion of
             * the Poll. In its simplest form, which is a Poll that is sent to
             * one Member of the Cluster, the Poll actually represents the
             * request/response model.
             */
            @SuppressWarnings({"deprecation", "rawtypes", "unused", "unchecked", "ConstantConditions", "DuplicatedCode", "ForLoopReplaceableByForEach", "IfCanBeSwitch", "RedundantArrayCreation", "RedundantSuppression", "SameParameterValue", "TryFinallyCanBeTryWithResources", "TryWithIdenticalCatches", "UnnecessaryBoxing", "UnnecessaryUnboxing", "UnusedAssignment"})
            public static class Poll
                    extends    com.tangosol.coherence.component.util.daemon.queueProcessor.service.grid.ClusterService.ServiceRegisterRequest.Poll
                {
                // ---- Fields declarations ----
                
                // Default constructor
                public Poll()
                    {
                    this(null, null, true);
                    }
                
                // Initializing constructor
                public Poll(String sName, com.tangosol.coherence.Component compParent, boolean fInit)
                    {
                    super(sName, compParent, false);
                    
                    if (fInit)
                        {
                        __init();
                        }
                    }
                
                // Main initializer
                public void __init()
                    {
                    // private initialization
                    __initPrivate();
                    
                    
                    // signal the end of the initialization
                    set_Constructed(true);
                    }
                
                // Private initializer
                protected void __initPrivate()
                    {
                    
                    super.__initPrivate();
                    }
                
                //++ getter for static property _Instance
                /**
                 * Getter for property _Instance.<p>
                * Auto generated
                 */
                public static com.tangosol.coherence.Component get_Instance()
                    {
                    return new com.tangosol.coherence.component.net.Cluster.ClusterService.ServiceRegisterRequest.Poll();
                    }
                
                //++ getter for static property _CLASS
                /**
                 * Getter for property _CLASS.<p>
                * Property with auto-generated accessor that returns the Class
                * object for a given component.
                 */
                public static Class get_CLASS()
                    {
                    Class clz;
                    try
                        {
                        clz = Class.forName("com.tangosol.coherence/component/net/Cluster$ClusterService$ServiceRegisterRequest$Poll".replace('/', '.'));
                        }
                    catch (ClassNotFoundException e)
                        {
                        throw new NoClassDefFoundError(e.getMessage());
                        }
                    return clz;
                    }
                
                //++ getter for autogen property _Module
                /**
                 * This is an auto-generated method that returns the global
                * [design time] parent component.
                * 
                * Note: the class generator will ignore any custom
                * implementation for this behavior.
                 */
                private com.tangosol.coherence.Component get_Module()
                    {
                    return this.get_Parent().get_Parent().get_Parent();
                    }
                }
            }

        // ---- class: com.tangosol.coherence.component.net.Cluster$ClusterService$ServiceUpdateResponse
        
        /**
         * Message:
         *     ServiceUpdateResponse
         * 
         * Purpose:
         *     Ensures that the other members received a service update request
         * message before continuing processing.
         * 
         * Description
         *     This message serves as a response to polls issued during the
         * service registration and joining process.
         * 
         * Attributes:
         *     Result
         * 
         * Response to:
         *     ServiceRegister
         *     ServiceJoined
         * 
         * Expected responses:
         *     n/a
         */
        @SuppressWarnings({"deprecation", "rawtypes", "unused", "unchecked", "ConstantConditions", "DuplicatedCode", "ForLoopReplaceableByForEach", "IfCanBeSwitch", "RedundantArrayCreation", "RedundantSuppression", "SameParameterValue", "TryFinallyCanBeTryWithResources", "TryWithIdenticalCatches", "UnnecessaryBoxing", "UnnecessaryUnboxing", "UnusedAssignment"})
        public static class ServiceUpdateResponse
                extends    com.tangosol.coherence.component.util.daemon.queueProcessor.service.grid.ClusterService.ServiceUpdateResponse
            {
            // ---- Fields declarations ----
            
            // Default constructor
            public ServiceUpdateResponse()
                {
                this(null, null, true);
                }
            
            // Initializing constructor
            public ServiceUpdateResponse(String sName, com.tangosol.coherence.Component compParent, boolean fInit)
                {
                super(sName, compParent, false);
                
                if (fInit)
                    {
                    __init();
                    }
                }
            
            // Main initializer
            public void __init()
                {
                // private initialization
                __initPrivate();
                
                // state initialization: public and protected properties
                try
                    {
                    setMessageType(48);
                    }
                catch (java.lang.Exception e)
                    {
                    // re-throw as a runtime exception
                    throw new com.tangosol.util.WrapperException(e);
                    }
                
                // signal the end of the initialization
                set_Constructed(true);
                }
            
            // Private initializer
            protected void __initPrivate()
                {
                
                super.__initPrivate();
                }
            
            //++ getter for static property _Instance
            /**
             * Getter for property _Instance.<p>
            * Auto generated
             */
            public static com.tangosol.coherence.Component get_Instance()
                {
                return new com.tangosol.coherence.component.net.Cluster.ClusterService.ServiceUpdateResponse();
                }
            
            //++ getter for static property _CLASS
            /**
             * Getter for property _CLASS.<p>
            * Property with auto-generated accessor that returns the Class
            * object for a given component.
             */
            public static Class get_CLASS()
                {
                Class clz;
                try
                    {
                    clz = Class.forName("com.tangosol.coherence/component/net/Cluster$ClusterService$ServiceUpdateResponse".replace('/', '.'));
                    }
                catch (ClassNotFoundException e)
                    {
                    throw new NoClassDefFoundError(e.getMessage());
                    }
                return clz;
                }
            
            //++ getter for autogen property _Module
            /**
             * This is an auto-generated method that returns the global [design
            * time] parent component.
            * 
            * Note: the class generator will ignore any custom implementation
            * for this behavior.
             */
            private com.tangosol.coherence.Component get_Module()
                {
                return this.get_Parent().get_Parent();
                }
            }

        // ---- class: com.tangosol.coherence.component.net.Cluster$ClusterService$TcpRing
        
        /**
         * This component maintains TcpRing connections with other Cluster
         * members to quickly detect member departure.
         */
        @SuppressWarnings({"deprecation", "rawtypes", "unused", "unchecked", "ConstantConditions", "DuplicatedCode", "ForLoopReplaceableByForEach", "IfCanBeSwitch", "RedundantArrayCreation", "RedundantSuppression", "SameParameterValue", "TryFinallyCanBeTryWithResources", "TryWithIdenticalCatches", "UnnecessaryBoxing", "UnnecessaryUnboxing", "UnusedAssignment"})
        public static class TcpRing
                extends    com.tangosol.coherence.component.util.daemon.queueProcessor.service.grid.ClusterService.TcpRing
            {
            // ---- Fields declarations ----
            
            // Default constructor
            public TcpRing()
                {
                this(null, null, true);
                }
            
            // Initializing constructor
            public TcpRing(String sName, com.tangosol.coherence.Component compParent, boolean fInit)
                {
                super(sName, compParent, false);
                
                if (fInit)
                    {
                    __init();
                    }
                }
            
            // Main initializer
            public void __init()
                {
                // private initialization
                __initPrivate();
                
                // state initialization: public and protected properties
                try
                    {
                    setBuddies(new java.util.HashMap());
                    setEnabled(true);
                    setSocketOptions(new com.tangosol.net.SocketOptions());
                    }
                catch (java.lang.Exception e)
                    {
                    // re-throw as a runtime exception
                    throw new com.tangosol.util.WrapperException(e);
                    }
                
                // containment initialization: children
                _addChild(new TcpRing.MemberMonitor("MemberMonitor", this, true), "MemberMonitor");
                
                // signal the end of the initialization
                set_Constructed(true);
                }
            
            // Private initializer
            protected void __initPrivate()
                {
                
                super.__initPrivate();
                }
            
            //++ getter for static property _Instance
            /**
             * Getter for property _Instance.<p>
            * Auto generated
             */
            public static com.tangosol.coherence.Component get_Instance()
                {
                return new com.tangosol.coherence.component.net.Cluster.ClusterService.TcpRing();
                }
            
            //++ getter for static property _CLASS
            /**
             * Getter for property _CLASS.<p>
            * Property with auto-generated accessor that returns the Class
            * object for a given component.
             */
            public static Class get_CLASS()
                {
                Class clz;
                try
                    {
                    clz = Class.forName("com.tangosol.coherence/component/net/Cluster$ClusterService$TcpRing".replace('/', '.'));
                    }
                catch (ClassNotFoundException e)
                    {
                    throw new NoClassDefFoundError(e.getMessage());
                    }
                return clz;
                }
            
            //++ getter for autogen property _Module
            /**
             * This is an auto-generated method that returns the global [design
            * time] parent component.
            * 
            * Note: the class generator will ignore any custom implementation
            * for this behavior.
             */
            private com.tangosol.coherence.Component get_Module()
                {
                return this.get_Parent().get_Parent();
                }
            
            // Declared at the super level
            /**
             * Called to signal an exception raised during processing
             */
            protected void onException(Exception e)
                {
                ((Cluster) get_Module()).onException(e);
                }
            }

        // ---- class: com.tangosol.coherence.component.net.Cluster$ClusterService$WitnessRequest
        
        /**
         * Message:
         *     WitnessRequest
         * 
         * Purpose:
         *     Request confirmation of a suspected dead member.
         * 
         * Description:
         *     Sent when a node suspects that another node has left the
         * cluster, but this departure was due to a timeout.
         * 
         *  Attributes:
         *     MemberUUID
         * 
         * Response to:
         *     n/a
         * 
         * Expected responses:
         *     Response CONFIRM/REJECT
         */
        @SuppressWarnings({"deprecation", "rawtypes", "unused", "unchecked", "ConstantConditions", "DuplicatedCode", "ForLoopReplaceableByForEach", "IfCanBeSwitch", "RedundantArrayCreation", "RedundantSuppression", "SameParameterValue", "TryFinallyCanBeTryWithResources", "TryWithIdenticalCatches", "UnnecessaryBoxing", "UnnecessaryUnboxing", "UnusedAssignment"})
        public static class WitnessRequest
                extends    com.tangosol.coherence.component.util.daemon.queueProcessor.service.grid.ClusterService.WitnessRequest
            {
            // ---- Fields declarations ----
            private static com.tangosol.util.ListMap __mapChildren;
            
            // Static initializer
            static
                {
                __initStatic();
                }
            
            // Default static initializer
            private static void __initStatic()
                {
                // register child classes
                __mapChildren = new com.tangosol.util.ListMap();
                __mapChildren.put("Poll", Cluster.ClusterService.WitnessRequest.Poll.get_CLASS());
                }
            
            // Default constructor
            public WitnessRequest()
                {
                this(null, null, true);
                }
            
            // Initializing constructor
            public WitnessRequest(String sName, com.tangosol.coherence.Component compParent, boolean fInit)
                {
                super(sName, compParent, false);
                
                if (fInit)
                    {
                    __init();
                    }
                }
            
            // Main initializer
            public void __init()
                {
                // private initialization
                __initPrivate();
                
                // state initialization: public and protected properties
                try
                    {
                    setMessageType(56);
                    }
                catch (java.lang.Exception e)
                    {
                    // re-throw as a runtime exception
                    throw new com.tangosol.util.WrapperException(e);
                    }
                
                // containment initialization: children
                
                // signal the end of the initialization
                set_Constructed(true);
                }
            
            // Private initializer
            protected void __initPrivate()
                {
                
                super.__initPrivate();
                }
            
            //++ getter for static property _Instance
            /**
             * Getter for property _Instance.<p>
            * Auto generated
             */
            public static com.tangosol.coherence.Component get_Instance()
                {
                return new com.tangosol.coherence.component.net.Cluster.ClusterService.WitnessRequest();
                }
            
            //++ getter for static property _CLASS
            /**
             * Getter for property _CLASS.<p>
            * Property with auto-generated accessor that returns the Class
            * object for a given component.
             */
            public static Class get_CLASS()
                {
                Class clz;
                try
                    {
                    clz = Class.forName("com.tangosol.coherence/component/net/Cluster$ClusterService$WitnessRequest".replace('/', '.'));
                    }
                catch (ClassNotFoundException e)
                    {
                    throw new NoClassDefFoundError(e.getMessage());
                    }
                return clz;
                }
            
            //++ getter for autogen property _Module
            /**
             * This is an auto-generated method that returns the global [design
            * time] parent component.
            * 
            * Note: the class generator will ignore any custom implementation
            * for this behavior.
             */
            private com.tangosol.coherence.Component get_Module()
                {
                return this.get_Parent().get_Parent();
                }
            
            //++ getter for autogen property _ChildClasses
            /**
             * This is an auto-generated method that returns the map of design
            * time [static] children.
            * 
            * Note: the class generator will ignore any custom implementation
            * for this behavior.
             */
            protected java.util.Map get_ChildClasses()
                {
                return __mapChildren;
                }

            // ---- class: com.tangosol.coherence.component.net.Cluster$ClusterService$WitnessRequest$Poll
            
            /**
             * The Poll contains information regarding a request sent to one or
             * more Cluster Members that require responses. A Service may poll
             * other Members that are running the same Service, and the Poll is
             * used to wait for and assemble the responses from each of those
             * Members. A client thread may also use the Poll to block on a
             * response or set of responses, thus waiting for the completion of
             * the Poll. In its simplest form, which is a Poll that is sent to
             * one Member of the Cluster, the Poll actually represents the
             * request/response model.
             */
            @SuppressWarnings({"deprecation", "rawtypes", "unused", "unchecked", "ConstantConditions", "DuplicatedCode", "ForLoopReplaceableByForEach", "IfCanBeSwitch", "RedundantArrayCreation", "RedundantSuppression", "SameParameterValue", "TryFinallyCanBeTryWithResources", "TryWithIdenticalCatches", "UnnecessaryBoxing", "UnnecessaryUnboxing", "UnusedAssignment"})
            public static class Poll
                    extends    com.tangosol.coherence.component.util.daemon.queueProcessor.service.grid.ClusterService.WitnessRequest.Poll
                {
                // ---- Fields declarations ----
                
                // Default constructor
                public Poll()
                    {
                    this(null, null, true);
                    }
                
                // Initializing constructor
                public Poll(String sName, com.tangosol.coherence.Component compParent, boolean fInit)
                    {
                    super(sName, compParent, false);
                    
                    if (fInit)
                        {
                        __init();
                        }
                    }
                
                // Main initializer
                public void __init()
                    {
                    // private initialization
                    __initPrivate();
                    
                    
                    // signal the end of the initialization
                    set_Constructed(true);
                    }
                
                // Private initializer
                protected void __initPrivate()
                    {
                    
                    super.__initPrivate();
                    }
                
                //++ getter for static property _Instance
                /**
                 * Getter for property _Instance.<p>
                * Auto generated
                 */
                public static com.tangosol.coherence.Component get_Instance()
                    {
                    return new com.tangosol.coherence.component.net.Cluster.ClusterService.WitnessRequest.Poll();
                    }
                
                //++ getter for static property _CLASS
                /**
                 * Getter for property _CLASS.<p>
                * Property with auto-generated accessor that returns the Class
                * object for a given component.
                 */
                public static Class get_CLASS()
                    {
                    Class clz;
                    try
                        {
                        clz = Class.forName("com.tangosol.coherence/component/net/Cluster$ClusterService$WitnessRequest$Poll".replace('/', '.'));
                        }
                    catch (ClassNotFoundException e)
                        {
                        throw new NoClassDefFoundError(e.getMessage());
                        }
                    return clz;
                    }
                
                //++ getter for autogen property _Module
                /**
                 * This is an auto-generated method that returns the global
                * [design time] parent component.
                * 
                * Note: the class generator will ignore any custom
                * implementation for this behavior.
                 */
                private com.tangosol.coherence.Component get_Module()
                    {
                    return this.get_Parent().get_Parent().get_Parent();
                    }
                }
            }

        // ---- class: com.tangosol.coherence.component.net.Cluster$ClusterService$WrapperGuardable
        
        /**
         * WrapperGuardable is used to encapsulate a Guardable object and
         * associate it with this Service.
         * 
         * WrapperGuardables are used to allow the ServiceFailurePolicy to
         * specify service-specific recovery, termination, or
         * service-termination failure logic.
         */
        @SuppressWarnings({"deprecation", "rawtypes", "unused", "unchecked", "ConstantConditions", "DuplicatedCode", "ForLoopReplaceableByForEach", "IfCanBeSwitch", "RedundantArrayCreation", "RedundantSuppression", "SameParameterValue", "TryFinallyCanBeTryWithResources", "TryWithIdenticalCatches", "UnnecessaryBoxing", "UnnecessaryUnboxing", "UnusedAssignment"})
        public static class WrapperGuardable
                extends    com.tangosol.coherence.component.util.daemon.queueProcessor.service.Grid.WrapperGuardable
            {
            // ---- Fields declarations ----
            
            // Default constructor
            public WrapperGuardable()
                {
                this(null, null, true);
                }
            
            // Initializing constructor
            public WrapperGuardable(String sName, com.tangosol.coherence.Component compParent, boolean fInit)
                {
                super(sName, compParent, false);
                
                if (fInit)
                    {
                    __init();
                    }
                }
            
            // Main initializer
            public void __init()
                {
                // private initialization
                __initPrivate();
                
                
                // signal the end of the initialization
                set_Constructed(true);
                }
            
            // Private initializer
            protected void __initPrivate()
                {
                
                super.__initPrivate();
                }
            
            //++ getter for static property _Instance
            /**
             * Getter for property _Instance.<p>
            * Auto generated
             */
            public static com.tangosol.coherence.Component get_Instance()
                {
                return new com.tangosol.coherence.component.net.Cluster.ClusterService.WrapperGuardable();
                }
            
            //++ getter for static property _CLASS
            /**
             * Getter for property _CLASS.<p>
            * Property with auto-generated accessor that returns the Class
            * object for a given component.
             */
            public static Class get_CLASS()
                {
                Class clz;
                try
                    {
                    clz = Class.forName("com.tangosol.coherence/component/net/Cluster$ClusterService$WrapperGuardable".replace('/', '.'));
                    }
                catch (ClassNotFoundException e)
                    {
                    throw new NoClassDefFoundError(e.getMessage());
                    }
                return clz;
                }
            
            //++ getter for autogen property _Module
            /**
             * This is an auto-generated method that returns the global [design
            * time] parent component.
            * 
            * Note: the class generator will ignore any custom implementation
            * for this behavior.
             */
            private com.tangosol.coherence.Component get_Module()
                {
                return this.get_Parent().get_Parent();
                }
            }
        }

    // ---- class: com.tangosol.coherence.component.net.Cluster$IpMonitor
    
    /**
     * The IpMonitor service monitors machine addresses of other Cluster
     * members to quickly detect loss of connectivity.
     */
    @SuppressWarnings({"deprecation", "rawtypes", "unused", "unchecked", "ConstantConditions", "DuplicatedCode", "ForLoopReplaceableByForEach", "IfCanBeSwitch", "RedundantArrayCreation", "RedundantSuppression", "SameParameterValue", "TryFinallyCanBeTryWithResources", "TryWithIdenticalCatches", "UnnecessaryBoxing", "UnnecessaryUnboxing", "UnusedAssignment"})
    public static class IpMonitor
            extends    com.tangosol.coherence.component.util.daemon.IpMonitor
        {
        // ---- Fields declarations ----
        
        // Default constructor
        public IpMonitor()
            {
            this(null, null, true);
            }
        
        // Initializing constructor
        public IpMonitor(String sName, com.tangosol.coherence.Component compParent, boolean fInit)
            {
            super(sName, compParent, false);
            
            if (fInit)
                {
                __init();
                }
            }
        
        // Main initializer
        public void __init()
            {
            // private initialization
            __initPrivate();
            
            // state initialization: public and protected properties
            try
                {
                setDaemonState(0);
                setDefaultGuardRecovery(0.9F);
                setDefaultGuardTimeout(60000L);
                setNotifier(new com.oracle.coherence.common.base.SingleWaiterMultiNotifier());
                }
            catch (java.lang.Exception e)
                {
                // re-throw as a runtime exception
                throw new com.tangosol.util.WrapperException(e);
                }
            
            // containment initialization: children
            _addChild(new Cluster.IpMonitor.Guard("Guard", this, true), "Guard");
            
            // signal the end of the initialization
            set_Constructed(true);
            }
        
        // Private initializer
        protected void __initPrivate()
            {
            
            super.__initPrivate();
            }
        
        //++ getter for static property _Instance
        /**
         * Getter for property _Instance.<p>
        * Auto generated
         */
        public static com.tangosol.coherence.Component get_Instance()
            {
            return new com.tangosol.coherence.component.net.Cluster.IpMonitor();
            }
        
        //++ getter for static property _CLASS
        /**
         * Getter for property _CLASS.<p>
        * Property with auto-generated accessor that returns the Class object
        * for a given component.
         */
        public static Class get_CLASS()
            {
            Class clz;
            try
                {
                clz = Class.forName("com.tangosol.coherence/component/net/Cluster$IpMonitor".replace('/', '.'));
                }
            catch (ClassNotFoundException e)
                {
                throw new NoClassDefFoundError(e.getMessage());
                }
            return clz;
            }
        
        //++ getter for autogen property _Module
        /**
         * This is an auto-generated method that returns the global [design
        * time] parent component.
        * 
        * Note: the class generator will ignore any custom implementation for
        * this behavior.
         */
        private com.tangosol.coherence.Component get_Module()
            {
            return this.get_Parent();
            }
        
        // Declared at the super level
        /**
         * This event occurs when an exception is thrown from onEnter, onWait,
        * onNotify and onExit.
        * 
        * If the exception should terminate the daemon, call stop(). The
        * default implementation prints debugging information and terminates
        * the daemon.
        * 
        * @param e  the Throwable object (a RuntimeException or an Error)
        * 
        * @throws RuntimeException may be thrown; will terminate the daemon
        * @throws Error may be thrown; will terminate the daemon
         */
        protected void onException(Throwable e)
            {
            Cluster cluster = (Cluster) get_Module();
            try
                {
                if (cluster.getState() < Cluster.STATE_RUNNING)
                    {
                    super.onException(e);
                    }
                }
            finally
                {
                cluster.onException(e);
                }
            }

        // ---- class: com.tangosol.coherence.component.net.Cluster$IpMonitor$Guard
        
        /**
         * Guard provides the Guardable interface implementation for the Daemon.
         */
        @SuppressWarnings({"deprecation", "rawtypes", "unused", "unchecked", "ConstantConditions", "DuplicatedCode", "ForLoopReplaceableByForEach", "IfCanBeSwitch", "RedundantArrayCreation", "RedundantSuppression", "SameParameterValue", "TryFinallyCanBeTryWithResources", "TryWithIdenticalCatches", "UnnecessaryBoxing", "UnnecessaryUnboxing", "UnusedAssignment"})
        public static class Guard
                extends    com.tangosol.coherence.component.util.daemon.IpMonitor.Guard
            {
            // ---- Fields declarations ----
            
            // Default constructor
            public Guard()
                {
                this(null, null, true);
                }
            
            // Initializing constructor
            public Guard(String sName, com.tangosol.coherence.Component compParent, boolean fInit)
                {
                super(sName, compParent, false);
                
                if (fInit)
                    {
                    __init();
                    }
                }
            
            // Main initializer
            public void __init()
                {
                // private initialization
                __initPrivate();
                
                
                // containment initialization: children
                _addChild(new Cluster.IpMonitor.Guard.StopIpMonitor("StopIpMonitor", this, true), "StopIpMonitor");
                
                // signal the end of the initialization
                set_Constructed(true);
                }
            
            // Private initializer
            protected void __initPrivate()
                {
                
                super.__initPrivate();
                }
            
            //++ getter for static property _Instance
            /**
             * Getter for property _Instance.<p>
            * Auto generated
             */
            public static com.tangosol.coherence.Component get_Instance()
                {
                return new com.tangosol.coherence.component.net.Cluster.IpMonitor.Guard();
                }
            
            //++ getter for static property _CLASS
            /**
             * Getter for property _CLASS.<p>
            * Property with auto-generated accessor that returns the Class
            * object for a given component.
             */
            public static Class get_CLASS()
                {
                Class clz;
                try
                    {
                    clz = Class.forName("com.tangosol.coherence/component/net/Cluster$IpMonitor$Guard".replace('/', '.'));
                    }
                catch (ClassNotFoundException e)
                    {
                    throw new NoClassDefFoundError(e.getMessage());
                    }
                return clz;
                }
            
            //++ getter for autogen property _Module
            /**
             * This is an auto-generated method that returns the global [design
            * time] parent component.
            * 
            * Note: the class generator will ignore any custom implementation
            * for this behavior.
             */
            private com.tangosol.coherence.Component get_Module()
                {
                return this.get_Parent().get_Parent();
                }
            
            // Declared at the super level
            public void terminate()
                {
                // import Component.Util.Daemon;
                
                // attempt to stop the IpMonitor.  Allow 3 seconds for it to terminate
                // gracefully (the thread may be legitimately blocked in isReachable(),
                // which is not interruptible).
                super.terminate();
                
                Daemon.sleep(3000L);
                
                Cluster.IpMonitor daemon = (Cluster.IpMonitor) get_Parent();
                if (daemon.getDaemonState() != Daemon.DAEMON_EXITED)
                    {
                    _trace("Failed to terminate IpMonitor. IpMonitor state: " + daemon.getDaemonState(), 1);
                    daemon.getService().getServiceFailurePolicy().
                        onServiceFailed((Cluster) get_Module());
                    }
                }

            // ---- class: com.tangosol.coherence.component.net.Cluster$IpMonitor$Guard$StopIpMonitor
            
            @SuppressWarnings({"deprecation", "rawtypes", "unused", "unchecked", "ConstantConditions", "DuplicatedCode", "ForLoopReplaceableByForEach", "IfCanBeSwitch", "RedundantArrayCreation", "RedundantSuppression", "SameParameterValue", "TryFinallyCanBeTryWithResources", "TryWithIdenticalCatches", "UnnecessaryBoxing", "UnnecessaryUnboxing", "UnusedAssignment"})
            public static class StopIpMonitor
                    extends    com.tangosol.coherence.component.util.daemon.IpMonitor.Guard.StopIpMonitor
                {
                // ---- Fields declarations ----
                
                // Default constructor
                public StopIpMonitor()
                    {
                    this(null, null, true);
                    }
                
                // Initializing constructor
                public StopIpMonitor(String sName, com.tangosol.coherence.Component compParent, boolean fInit)
                    {
                    super(sName, compParent, false);
                    
                    if (fInit)
                        {
                        __init();
                        }
                    }
                
                // Main initializer
                public void __init()
                    {
                    // private initialization
                    __initPrivate();
                    
                    
                    // signal the end of the initialization
                    set_Constructed(true);
                    }
                
                // Private initializer
                protected void __initPrivate()
                    {
                    
                    super.__initPrivate();
                    }
                
                //++ getter for static property _Instance
                /**
                 * Getter for property _Instance.<p>
                * Auto generated
                 */
                public static com.tangosol.coherence.Component get_Instance()
                    {
                    return new com.tangosol.coherence.component.net.Cluster.IpMonitor.Guard.StopIpMonitor();
                    }
                
                //++ getter for static property _CLASS
                /**
                 * Getter for property _CLASS.<p>
                * Property with auto-generated accessor that returns the Class
                * object for a given component.
                 */
                public static Class get_CLASS()
                    {
                    Class clz;
                    try
                        {
                        clz = Class.forName("com.tangosol.coherence/component/net/Cluster$IpMonitor$Guard$StopIpMonitor".replace('/', '.'));
                        }
                    catch (ClassNotFoundException e)
                        {
                        throw new NoClassDefFoundError(e.getMessage());
                        }
                    return clz;
                    }
                
                //++ getter for autogen property _Module
                /**
                 * This is an auto-generated method that returns the global
                * [design time] parent component.
                * 
                * Note: the class generator will ignore any custom
                * implementation for this behavior.
                 */
                private com.tangosol.coherence.Component get_Module()
                    {
                    return this.get_Parent().get_Parent().get_Parent();
                    }
                }
            }
        }

    // ---- class: com.tangosol.coherence.component.net.Cluster$NameService
    
    /**
     * The NameService is a Service that provides a registration and lookup
     * mechanism similar to JNDI for resources available in the Cluster.
     * 
     * For example, a ProxyService will register itself with the NameService
     * when it is started via bind(), and Coherence*Extend clients can obtain
     * the ConnectionAcceptor listening address for that ProxyService via
     * lookup(ProxyServiceName).
     * 
     * The NameService uses a ConnectionAcceptor to accept and process incoming
     * requests from non-clustered clients. The ConnectionAcceptor is started
     * immediately after the NameService successfully starts and is shutdown
     * upon service termination.
     * 
     * During ConnectionAcceptor configuration, the NameService registers the
     * following Protocols:
     * 
     * (1) NameService Protocol
     * 
     * Additionally, a NameServiceProxy is registered as a Receiver for the
     * NameService Protocol.
     */
    @SuppressWarnings({"deprecation", "rawtypes", "unused", "unchecked", "ConstantConditions", "DuplicatedCode", "ForLoopReplaceableByForEach", "IfCanBeSwitch", "RedundantArrayCreation", "RedundantSuppression", "SameParameterValue", "TryFinallyCanBeTryWithResources", "TryWithIdenticalCatches", "UnnecessaryBoxing", "UnnecessaryUnboxing", "UnusedAssignment"})
    public static class NameService
            extends    com.tangosol.coherence.component.util.NameService
            implements com.tangosol.net.messaging.ConnectionFilter
        {
        // ---- Fields declarations ----
        
        /**
         * Property ClusterSocket
         *
         * The ServerSocket listening on the cluser port, may be null.
         */
        private java.net.ServerSocket __m_ClusterSocket;
        private static com.tangosol.util.ListMap __mapChildren;
        
        // Static initializer
        static
            {
            __initStatic();
            }
        
        // Default static initializer
        private static void __initStatic()
            {
            // register child classes
            __mapChildren = new com.tangosol.util.ListMap();
            __mapChildren.put("RequestContext", Cluster.NameService.RequestContext.get_CLASS());
            }
        
        // Default constructor
        public NameService()
            {
            this(null, null, true);
            }
        
        // Initializing constructor
        public NameService(String sName, com.tangosol.coherence.Component compParent, boolean fInit)
            {
            super(sName, compParent, false);
            
            if (fInit)
                {
                __init();
                }
            }
        
        // Main initializer
        public void __init()
            {
            // private initialization
            __initPrivate();
            
            // state initialization: public and protected properties
            try
                {
                setBinderMap(new java.util.concurrent.ConcurrentHashMap());
                setDirectory(new java.util.concurrent.ConcurrentHashMap());
                setLookupCallbacks(new com.tangosol.util.SafeLinkedList());
                }
            catch (java.lang.Exception e)
                {
                // re-throw as a runtime exception
                throw new com.tangosol.util.WrapperException(e);
                }
            
            // containment initialization: children
            _addChild(new Cluster.NameService.TcpAcceptor("TcpAcceptor", this, true), "TcpAcceptor");
            
            // signal the end of the initialization
            set_Constructed(true);
            }
        
        // Private initializer
        protected void __initPrivate()
            {
            
            super.__initPrivate();
            }
        
        //++ getter for static property _Instance
        /**
         * Getter for property _Instance.<p>
        * Auto generated
         */
        public static com.tangosol.coherence.Component get_Instance()
            {
            return new com.tangosol.coherence.component.net.Cluster.NameService();
            }
        
        //++ getter for static property _CLASS
        /**
         * Getter for property _CLASS.<p>
        * Property with auto-generated accessor that returns the Class object
        * for a given component.
         */
        public static Class get_CLASS()
            {
            Class clz;
            try
                {
                clz = Class.forName("com.tangosol.coherence/component/net/Cluster$NameService".replace('/', '.'));
                }
            catch (ClassNotFoundException e)
                {
                throw new NoClassDefFoundError(e.getMessage());
                }
            return clz;
            }
        
        //++ getter for autogen property _Module
        /**
         * This is an auto-generated method that returns the global [design
        * time] parent component.
        * 
        * Note: the class generator will ignore any custom implementation for
        * this behavior.
         */
        private com.tangosol.coherence.Component get_Module()
            {
            return this.get_Parent();
            }
        
        //++ getter for autogen property _ChildClasses
        /**
         * This is an auto-generated method that returns the map of design time
        * [static] children.
        * 
        * Note: the class generator will ignore any custom implementation for
        * this behavior.
         */
        protected java.util.Map get_ChildClasses()
            {
            return __mapChildren;
            }
        
        // From interface: com.tangosol.net.messaging.ConnectionFilter
        public void checkConnection(com.tangosol.net.messaging.Connection connection)
                throws com.tangosol.net.messaging.ConnectionException
            {
            // import Component.Util.Daemon.QueueProcessor.Service.Peer.Acceptor.TcpAcceptor$TcpConnection as com.tangosol.coherence.component.util.daemon.queueProcessor.service.peer.acceptor.TcpAcceptor.TcpConnection;
            // import com.tangosol.net.messaging.ConnectionException;
            // import com.oracle.coherence.common.internal.net.MultiplexedSocketProvider$WellKnownSubPorts as com.oracle.coherence.common.internal.net.MultiplexedSocketProvider.WellKnownSubPorts;
            // import java.util.Collections;
            // import javax.naming.NamingException;
            
            if (connection instanceof com.tangosol.coherence.component.util.daemon.queueProcessor.service.peer.acceptor.TcpAcceptor.TcpConnection)
                {
                // ensure that the client has landed where they intended, a mismatch could happen
                // if they'd been routed by a redirect to a processes just as it shutdown and this
                // process just started and ended up on the same port.  In such a case we refuse
                // to accept the connection and force the client to retry.
                
                com.tangosol.coherence.component.util.daemon.queueProcessor.service.peer.acceptor.TcpAcceptor.TcpConnection connectionImpl = (com.tangosol.coherence.component.util.daemon.queueProcessor.service.peer.acceptor.TcpAcceptor.TcpConnection) connection;
            
                String sService = connectionImpl.getServiceName();
                if (sService != null && !sService.equals(getServiceName()))
                    {
                    throw new ConnectionException("connection rejected, service mismatch");
                    }
            
                String sCluster = connectionImpl.getClusterName();
                if (sCluster != null && !sCluster.equals(getCluster().getClusterName()))
                    {
                    try
                        {
                        Integer nPort = (Integer) lookup("Cluster/foreign/" + sCluster + "/NameService/localPort");
                        if (nPort != null)
                            {
                            Object[] addrRedirect = new Object[]{
                                connectionImpl.getSocket().getLocalAddress().getHostAddress(),
                                Integer.valueOf(com.oracle.coherence.common.internal.net.MultiplexedSocketProvider.WellKnownSubPorts.COHERENCE_NAME_SERVICE.getPort(nPort.intValue()))};
                            connectionImpl.setRedirect(true);
                            connectionImpl.setRedirectList(Collections.singletonList(addrRedirect));
            
                            // fall through and throw; which will now trigger a redirect
                            }
                        }
                    catch (NamingException e) {}
                    
                    throw new ConnectionException("connection rejected, cluster mismatch");
                    }
                }
            }
        
        // Accessor for the property "ClusterSocket"
        /**
         * Getter for property ClusterSocket.<p>
        * The ServerSocket listening on the cluser port, may be null.
         */
        public java.net.ServerSocket getClusterSocket()
            {
            return __m_ClusterSocket;
            }
        
        public void halt()
            {
            // import Component.Net.Extend.Util.TcpUtil;
            
            try
                {
                TcpUtil.close(getClusterSocket());
                TcpUtil.close(getAcceptor().getProcessor().getServerSocket());
                }
            catch (Throwable t)
                {
                }
            
            // ClusterService.onExit will do the stop, see note in onExit
            }
        
        public boolean isStarted()
            {
            return getAcceptor().isStarted();
            }
        
        /**
         * Handle a datagram based NS request.
         */
        public void onDatagramLookup(java.net.DatagramSocket socketIn, java.net.SocketAddress addrSrc, java.nio.ByteBuffer buffer)
            {
            // import com.tangosol.io.nio.ByteBufferInputStream;
            // import com.tangosol.net.Member;
            // import com.tangosol.util.Binary;
            // import com.tangosol.util.ExternalizableHelper;
            // import com.oracle.coherence.common.io.Buffers;
            // import java.io.IOException;
            // import java.io.ByteArrayOutputStream;
            // import java.io.DataInputStream;
            // import java.io.DataOutputStream;
            // import java.net.DatagramPacket;
            // import java.net.InetAddress;
            // import java.net.InetSocketAddress;
            // import java.nio.ByteBuffer;
            
            Cluster cluster = (Cluster) get_Module();
            try
                {
                Cluster.ClusterService   service        = cluster.getClusterService();    
                ByteBuffer        bufClusterName = cluster.getClusterNameBuffer();
                int               nPos           = buffer.position();
                int               nLim           = buffer.limit();
                int               cbRequest      = buffer.remaining();   
                DataInputStream   in             = new DataInputStream(new ByteBufferInputStream(buffer));
            
                in.readInt();                       // packet type
                String sClusterName = in.readUTF(); // cluster name
            
                if ((sClusterName.isEmpty() || // wildcard request
                    sClusterName.equals(cluster.getClusterName())))
                    {    
                    int cAttempt = in.readUnsignedByte();
                    int cLimit   = in.readUnsignedByte();
                    int cbAddr   = in.readUnsignedByte();
            
                    if ((cbAddr == 0 || cbAddr == 4 || cbAddr == 16) &&
                        service.isAcceptingClients() &&
                        cAttempt != 0 && // 0 indicates this is a response
                        (service.getClusterOldestMember() == service.getThisMember() || cAttempt >= Math.min(3, cLimit / 3)))
                        {            
                        InetAddress addr;
                        int         nPort;
            
                        if (cbAddr == 0)
                            {
                            in.readInt(); // skip port
                            InetSocketAddress addrSrcInet = (InetSocketAddress) addrSrc;
                            addr  = addrSrcInet.getAddress();
                            nPort = addrSrcInet.getPort();
                            }
                        else
                            {
                            byte[] abAddr = new byte[cbAddr];
                            in.readFully(abAddr);
                            addr  = InetAddress.getByAddress(abAddr);
                            nPort = in.readInt();
                            }
                        
                        String            sKey         = in.readUTF();
                        Binary            binMember    = new Binary(in);
                        Member            memberClient = binMember.length() == 0 ? null : (Member) ExternalizableHelper.fromBinary(binMember, getSerializer());
                        InetSocketAddress addrThis     = service.getThisMember().getSocketAddress();
            
                        Cluster.NameService.RequestContext context = new Cluster.NameService.RequestContext();            
                        context.setMember(memberClient);
                        context.setAcceptAddress(addrThis.getAddress());
                        context.setSourceAddress(addr);
            
                        Object                oResult    = lookup(sKey, context);
                        Binary                binResult  = oResult == null ? null : ExternalizableHelper.toBinary(oResult, getSerializer());
                        byte[]                abAddrThis = addrThis.getAddress().getAddress();
                        ByteArrayOutputStream outBytes   = new ByteArrayOutputStream(cbRequest + (binResult == null ? 0 : binResult.length()));
                        DataOutputStream      out        = new DataOutputStream(outBytes);
            
                        out.writeInt(Packet.TYPE_NAME_SERVICE);
                        out.write(bufClusterName.array());
                        out.write(0); // attempt count
                        out.write(0); // attempt limit
                        out.write(abAddrThis.length);
                        out.write(abAddrThis);
                        out.writeInt(addrThis.getPort());
                        out.writeUTF(sKey);
                        if (binResult == null)
                            {
                            out.writeInt(0);
                            }
                        else if (binResult.length() > 1024)
                            {
                            // avoid risk of packet getting dropped; respond to
                            // client with -1 indicating result is large and they
                            // need to come back over TCP
                            out.writeInt(-1);
                            }
                        else
                            {
                            binResult.writeExternal(out);
                            }
            
                        out.flush();
                        byte[] abReply = outBytes.toByteArray();
            
                        // send response
                        socketIn.send(new DatagramPacket(abReply, abReply.length, addr, nPort));
                        }
                    }
                else
                    {
                    buffer.position(nPos).limit(nLim);
                    cluster.onForeignPacket(socketIn, addrSrc, buffer);
                    buffer = null;
                    }
                }
            catch (Exception e)
                {
                _trace("Failure while parsing NS datagram lookup request, dropping request " + e, 3);
                _trace(e);
                }
            finally
                {
                if (buffer != null)
                    {
                    cluster.getReceiver().getBufferManager().release(buffer);
                    }
                }
            }
        
        // Declared at the super level
        /**
         * The "component has been initialized" method-notification called out
        * of setConstructed() for the topmost component and that in turn
        * notifies all the children.
        * 
        * This notification gets called before the control returns back to this
        * component instantiator (using <code>new Component.X()</code> or
        * <code>_newInstance(sName)</code>) and on the same thread. In
        * addition, visual components have a "posted" notification
        * <code>onInitUI</code> that is called after (or at the same time as)
        * the control returns back to the instantiator and possibly on a
        * different thread.
         */
        public void onInit()
            {
            // import Component.Net.Management.Connector$LookupCallback as com.tangosol.coherence.component.net.management.Connector.LookupCallback;
            // import Component.Util.Daemon.QueueProcessor.Service.Grid.ProxyService$LookupCallback as com.tangosol.coherence.component.util.daemon.queueProcessor.service.grid.ProxyService.LookupCallback;
            
            super.onInit();
            
            addLookupCallback((Cluster) get_Module());
            addLookupCallback(new com.tangosol.coherence.component.util.daemon.queueProcessor.service.grid.ProxyService.LookupCallback());
            addLookupCallback(new com.tangosol.coherence.component.net.management.Connector.LookupCallback());
            
            ((Cluster.NameService.TcpAcceptor) _findChild("TcpAcceptor")).setConnectionFilter(this);
            }
        
        // Accessor for the property "ClusterSocket"
        /**
         * Setter for property ClusterSocket.<p>
        * The ServerSocket listening on the cluser port, may be null.
         */
        public void setClusterSocket(java.net.ServerSocket socketCluster)
            {
            __m_ClusterSocket = socketCluster;
            }
        
        public boolean tryClusterBind()
            {
            // import Component.Net.Extend.Util.TcpUtil;
            // import com.tangosol.util.Base;
            // import com.oracle.coherence.common.internal.net.MultiplexedSocketProvider;
            // import com.oracle.coherence.common.internal.net.MultiplexedSocketProvider$WellKnownSubPorts as com.oracle.coherence.common.internal.net.MultiplexedSocketProvider.WellKnownSubPorts;
            // import com.oracle.coherence.common.net.InetSocketAddress32;
            // import com.oracle.coherence.common.net.SocketProvider;
            // import java.io.IOException;
            // import java.net.ServerSocket;
            // import java.nio.channels.SelectionKey;
            // import java.nio.channels.ServerSocketChannel;
            
            ServerSocketChannel channel = null;
            try
                {
                Cluster.NameService.TcpAcceptor   acceptor = (Cluster.NameService.TcpAcceptor) getAcceptor();
                SocketProvider provider = acceptor.getSocketProvider();
                
                channel = provider.openServerSocketChannel();
                channel.configureBlocking(false);
                
                ServerSocket socket = channel.socket();
            
                acceptor.getSocketOptions().apply(socket);
            
                socket.bind(new InetSocketAddress32(getLocalAddress(),
                    com.oracle.coherence.common.internal.net.MultiplexedSocketProvider.WellKnownSubPorts.COHERENCE_NAME_SERVICE.getPort(((Cluster) get_Module()).getDependencies().getGroupPort())));
            
                channel.register(acceptor.getProcessor().getSelector(), SelectionKey.OP_ACCEPT);
            
                _trace("NameService now listening for connections on " + provider.getAddressString(socket), 3);
            
                setClusterSocket(socket);
                
                return true;
                }
            catch (IOException e)
                {
                TcpUtil.close(channel);
                }
            
            return false;
            }

        // ---- class: com.tangosol.coherence.component.net.Cluster$NameService$RequestContext
        
        /**
         * Stores information about a NameService request.
         */
        @SuppressWarnings({"deprecation", "rawtypes", "unused", "unchecked", "ConstantConditions", "DuplicatedCode", "ForLoopReplaceableByForEach", "IfCanBeSwitch", "RedundantArrayCreation", "RedundantSuppression", "SameParameterValue", "TryFinallyCanBeTryWithResources", "TryWithIdenticalCatches", "UnnecessaryBoxing", "UnnecessaryUnboxing", "UnusedAssignment"})
        public static class RequestContext
                extends    com.tangosol.coherence.component.util.NameService.RequestContext
            {
            // ---- Fields declarations ----
            
            // Default constructor
            public RequestContext()
                {
                this(null, null, true);
                }
            
            // Initializing constructor
            public RequestContext(String sName, com.tangosol.coherence.Component compParent, boolean fInit)
                {
                super(sName, compParent, false);
                
                if (fInit)
                    {
                    __init();
                    }
                }
            
            // Main initializer
            public void __init()
                {
                // private initialization
                __initPrivate();
                
                
                // signal the end of the initialization
                set_Constructed(true);
                }
            
            // Private initializer
            protected void __initPrivate()
                {
                
                super.__initPrivate();
                }
            
            //++ getter for static property _Instance
            /**
             * Getter for property _Instance.<p>
            * Auto generated
             */
            public static com.tangosol.coherence.Component get_Instance()
                {
                return new com.tangosol.coherence.component.net.Cluster.NameService.RequestContext();
                }
            
            //++ getter for static property _CLASS
            /**
             * Getter for property _CLASS.<p>
            * Property with auto-generated accessor that returns the Class
            * object for a given component.
             */
            public static Class get_CLASS()
                {
                Class clz;
                try
                    {
                    clz = Class.forName("com.tangosol.coherence/component/net/Cluster$NameService$RequestContext".replace('/', '.'));
                    }
                catch (ClassNotFoundException e)
                    {
                    throw new NoClassDefFoundError(e.getMessage());
                    }
                return clz;
                }
            
            //++ getter for autogen property _Module
            /**
             * This is an auto-generated method that returns the global [design
            * time] parent component.
            * 
            * Note: the class generator will ignore any custom implementation
            * for this behavior.
             */
            private com.tangosol.coherence.Component get_Module()
                {
                return this.get_Parent().get_Parent();
                }
            }

        // ---- class: com.tangosol.coherence.component.net.Cluster$NameService$TcpAcceptor
        
        /**
         * A ConnectionAcceptor implementation that accepts Connections over
         * TCP/IP.
         */
        @SuppressWarnings({"deprecation", "rawtypes", "unused", "unchecked", "ConstantConditions", "DuplicatedCode", "ForLoopReplaceableByForEach", "IfCanBeSwitch", "RedundantArrayCreation", "RedundantSuppression", "SameParameterValue", "TryFinallyCanBeTryWithResources", "TryWithIdenticalCatches", "UnnecessaryBoxing", "UnnecessaryUnboxing", "UnusedAssignment"})
        public static class TcpAcceptor
                extends    com.tangosol.coherence.component.util.NameService.TcpAcceptor
            {
            // ---- Fields declarations ----
            private static com.tangosol.util.ListMap __mapChildren;
            
            // Static initializer
            static
                {
                __initStatic();
                }
            
            // Default static initializer
            private static void __initStatic()
                {
                // register child classes
                __mapChildren = new com.tangosol.util.ListMap();
                __mapChildren.put("BufferPool", Cluster.NameService.TcpAcceptor.BufferPool.get_CLASS());
                __mapChildren.put("DispatchEvent", Cluster.NameService.TcpAcceptor.DispatchEvent.get_CLASS());
                __mapChildren.put("MessageBuffer", Cluster.NameService.TcpAcceptor.MessageBuffer.get_CLASS());
                __mapChildren.put("MessageFactory", Cluster.NameService.TcpAcceptor.MessageFactory.get_CLASS());
                __mapChildren.put("Queue", Cluster.NameService.TcpAcceptor.Queue.get_CLASS());
                __mapChildren.put("TcpConnection", Cluster.NameService.TcpAcceptor.TcpConnection.get_CLASS());
                }
            
            // Default constructor
            public TcpAcceptor()
                {
                this(null, null, true);
                }
            
            // Initializing constructor
            public TcpAcceptor(String sName, com.tangosol.coherence.Component compParent, boolean fInit)
                {
                super(sName, compParent, false);
                
                if (fInit)
                    {
                    __init();
                    }
                }
            
            // Main initializer
            public void __init()
                {
                // private initialization
                __initPrivate();
                
                // state initialization: public and protected properties
                try
                    {
                    setConnectionPendingSet(new com.tangosol.util.SafeHashSet());
                    setConnectionSet(new com.tangosol.util.SafeHashSet());
                    setDaemonState(0);
                    setDefaultGuardRecovery(0.9F);
                    setDefaultGuardTimeout(60000L);
                    setDefaultLimitBytes(100000000L);
                    setDefaultLimitLength(60000);
                    setDefaultNominalBytes(2000000L);
                    setDefaultNominalLength(2000);
                    setDefaultSuspectBytes(10000000L);
                    setDefaultSuspectLength(10000);
                    setNotifier(new com.oracle.coherence.common.base.SingleWaiterMultiNotifier());
                    setProtocolMap(new java.util.HashMap());
                    setReceiverMap(new java.util.HashMap());
                    setRequestTimeout(30000L);
                    setSerializerMap(new java.util.WeakHashMap());
                    setSocketOptions(new com.tangosol.net.SocketOptions());
                    setSuspectProtocolEnabled(true);
                    }
                catch (java.lang.Exception e)
                    {
                    // re-throw as a runtime exception
                    throw new com.tangosol.util.WrapperException(e);
                    }
                
                // containment initialization: children
                _addChild(new Cluster.NameService.TcpAcceptor.DaemonPool("DaemonPool", this, true), "DaemonPool");
                _addChild(new Cluster.NameService.TcpAcceptor.EventDispatcher("EventDispatcher", this, true), "EventDispatcher");
                _addChild(new Cluster.NameService.TcpAcceptor.Guard("Guard", this, true), "Guard");
                _addChild(new Cluster.NameService.TcpAcceptor.Protocol("Protocol", this, true), "Protocol");
                _addChild(new Cluster.NameService.TcpAcceptor.TcpProcessor("TcpProcessor", this, true), "TcpProcessor");
                
                // signal the end of the initialization
                set_Constructed(true);
                }
            
            // Private initializer
            protected void __initPrivate()
                {
                
                super.__initPrivate();
                }
            
            //++ getter for static property _Instance
            /**
             * Getter for property _Instance.<p>
            * Auto generated
             */
            public static com.tangosol.coherence.Component get_Instance()
                {
                return new com.tangosol.coherence.component.net.Cluster.NameService.TcpAcceptor();
                }
            
            //++ getter for static property _CLASS
            /**
             * Getter for property _CLASS.<p>
            * Property with auto-generated accessor that returns the Class
            * object for a given component.
             */
            public static Class get_CLASS()
                {
                Class clz;
                try
                    {
                    clz = Class.forName("com.tangosol.coherence/component/net/Cluster$NameService$TcpAcceptor".replace('/', '.'));
                    }
                catch (ClassNotFoundException e)
                    {
                    throw new NoClassDefFoundError(e.getMessage());
                    }
                return clz;
                }
            
            //++ getter for autogen property _Module
            /**
             * This is an auto-generated method that returns the global [design
            * time] parent component.
            * 
            * Note: the class generator will ignore any custom implementation
            * for this behavior.
             */
            private com.tangosol.coherence.Component get_Module()
                {
                return this.get_Parent().get_Parent();
                }
            
            //++ getter for autogen property _ChildClasses
            /**
             * This is an auto-generated method that returns the map of design
            * time [static] children.
            * 
            * Note: the class generator will ignore any custom implementation
            * for this behavior.
             */
            protected java.util.Map get_ChildClasses()
                {
                return __mapChildren;
                }
            
            // Declared at the super level
            protected void bind(java.net.ServerSocket socket, java.net.SocketAddress addr, int nBacklog)
                    throws java.io.IOException
                {
                // import com.oracle.coherence.common.internal.net.MultiplexedSocketProvider;
                // import com.oracle.coherence.common.net.InetSocketAddress32;
                
                InetSocketAddress32 addr32 = (InetSocketAddress32) addr;
                int nPort = addr32.getPort();
                if (MultiplexedSocketProvider.getBasePort(nPort) == 0)
                    {
                    // if a specific port isn't configured use the member's TCP port
                    addr = new InetSocketAddress32(addr32.getAddress(),
                        MultiplexedSocketProvider.getPort(
                        ((Cluster) get_Module()).getSocketManager().getAcceptorChannel().getPort(),
                        MultiplexedSocketProvider.getSubPort(nPort)));
                    }
                
                super.bind(socket, addr, nBacklog);
                }

            // ---- class: com.tangosol.coherence.component.net.Cluster$NameService$TcpAcceptor$BufferPool
            
            /**
             * A GrowablePool of ByteBufferWriteBuffer objects. The size and
             * type of pooled objects are controlled by the following
             * properties:
             * 
             *   BufferSize
             *   BufferType
             * 
             * This component also implements the
             * com.tangosol.io.MultiBufferWriteBuffer$WriteBufferPool interface
             * to provide ByteBufferWriteBuffer objects to a
             * MultiBufferWriteBuffer on demand.
             */
            @SuppressWarnings({"deprecation", "rawtypes", "unused", "unchecked", "ConstantConditions", "DuplicatedCode", "ForLoopReplaceableByForEach", "IfCanBeSwitch", "RedundantArrayCreation", "RedundantSuppression", "SameParameterValue", "TryFinallyCanBeTryWithResources", "TryWithIdenticalCatches", "UnnecessaryBoxing", "UnnecessaryUnboxing", "UnusedAssignment"})
            public static class BufferPool
                    extends    com.tangosol.coherence.component.util.NameService.TcpAcceptor.BufferPool
                {
                // ---- Fields declarations ----
                
                // Default constructor
                public BufferPool()
                    {
                    this(null, null, true);
                    }
                
                // Initializing constructor
                public BufferPool(String sName, com.tangosol.coherence.Component compParent, boolean fInit)
                    {
                    super(sName, compParent, false);
                    
                    if (fInit)
                        {
                        __init();
                        }
                    }
                
                // Main initializer
                public void __init()
                    {
                    // private initialization
                    __initPrivate();
                    
                    // state initialization: public and protected properties
                    try
                        {
                        setBufferSize(2048);
                        setBufferType(0);
                        }
                    catch (java.lang.Exception e)
                        {
                        // re-throw as a runtime exception
                        throw new com.tangosol.util.WrapperException(e);
                        }
                    
                    // signal the end of the initialization
                    set_Constructed(true);
                    }
                
                // Private initializer
                protected void __initPrivate()
                    {
                    
                    super.__initPrivate();
                    }
                
                //++ getter for static property _Instance
                /**
                 * Getter for property _Instance.<p>
                * Auto generated
                 */
                public static com.tangosol.coherence.Component get_Instance()
                    {
                    return new com.tangosol.coherence.component.net.Cluster.NameService.TcpAcceptor.BufferPool();
                    }
                
                //++ getter for static property _CLASS
                /**
                 * Getter for property _CLASS.<p>
                * Property with auto-generated accessor that returns the Class
                * object for a given component.
                 */
                public static Class get_CLASS()
                    {
                    Class clz;
                    try
                        {
                        clz = Class.forName("com.tangosol.coherence/component/net/Cluster$NameService$TcpAcceptor$BufferPool".replace('/', '.'));
                        }
                    catch (ClassNotFoundException e)
                        {
                        throw new NoClassDefFoundError(e.getMessage());
                        }
                    return clz;
                    }
                
                //++ getter for autogen property _Module
                /**
                 * This is an auto-generated method that returns the global
                * [design time] parent component.
                * 
                * Note: the class generator will ignore any custom
                * implementation for this behavior.
                 */
                private com.tangosol.coherence.Component get_Module()
                    {
                    return this.get_Parent().get_Parent().get_Parent();
                    }
                }

            // ---- class: com.tangosol.coherence.component.net.Cluster$NameService$TcpAcceptor$DaemonPool
            
            /**
             * DaemonPool is a class thread pool implementation for processing
             * queued operations on one or more daemon threads.
             * 
             * The designable properties are:
             *     AutoStart
             *     DaemonCount
             * 
             * The simple API for the DaemonPool is:
             *     public void start()
             *     public boolean isStarted()
             *     public void add(Runnable task)
             *     public void stop()
             * 
             * The advanced API for the DaemonPool is:
             *     DaemonCount property
             *     Daemons property
             *     Queues property
             *     ThreadGroup property
             * 
             * The DaemonPool is composed of two key components:
             * 
             * 1) An array of WorkSlot components that may or may not share
             * Queues with other WorkSlots. 
             * 
             * 2) An array of Daemon components feeding off the Queues. This
             * collection is accessed by the DaemonCount and Daemons
             * properties, and is managed by the DaemonCount mutator.
             */
            @SuppressWarnings({"deprecation", "rawtypes", "unused", "unchecked", "ConstantConditions", "DuplicatedCode", "ForLoopReplaceableByForEach", "IfCanBeSwitch", "RedundantArrayCreation", "RedundantSuppression", "SameParameterValue", "TryFinallyCanBeTryWithResources", "TryWithIdenticalCatches", "UnnecessaryBoxing", "UnnecessaryUnboxing", "UnusedAssignment"})
            public static class DaemonPool
                    extends    com.tangosol.coherence.component.util.NameService.TcpAcceptor.DaemonPool
                {
                // ---- Fields declarations ----
                private static com.tangosol.util.ListMap __mapChildren;
                
                // Static initializer
                static
                    {
                    __initStatic();
                    }
                
                // Default static initializer
                private static void __initStatic()
                    {
                    // register child classes
                    __mapChildren = new com.tangosol.util.ListMap();
                    __mapChildren.put("Daemon", Cluster.NameService.TcpAcceptor.DaemonPool.Daemon.get_CLASS());
                    __mapChildren.put("ResizeTask", Cluster.NameService.TcpAcceptor.DaemonPool.ResizeTask.get_CLASS());
                    __mapChildren.put("ScheduleTask", Cluster.NameService.TcpAcceptor.DaemonPool.ScheduleTask.get_CLASS());
                    __mapChildren.put("StartTask", Cluster.NameService.TcpAcceptor.DaemonPool.StartTask.get_CLASS());
                    __mapChildren.put("StopTask", Cluster.NameService.TcpAcceptor.DaemonPool.StopTask.get_CLASS());
                    __mapChildren.put("WorkSlot", Cluster.NameService.TcpAcceptor.DaemonPool.WorkSlot.get_CLASS());
                    __mapChildren.put("WrapperTask", Cluster.NameService.TcpAcceptor.DaemonPool.WrapperTask.get_CLASS());
                    }
                
                // Default constructor
                public DaemonPool()
                    {
                    this(null, null, true);
                    }
                
                // Initializing constructor
                public DaemonPool(String sName, com.tangosol.coherence.Component compParent, boolean fInit)
                    {
                    super(sName, compParent, false);
                    
                    if (fInit)
                        {
                        __init();
                        }
                    }
                
                // Main initializer
                public void __init()
                    {
                    // private initialization
                    __initPrivate();
                    
                    // state initialization: public and protected properties
                    try
                        {
                        setAbandonThreshold(8);
                        setDaemonCountMax(2147483647);
                        setDaemonCountMin(1);
                        setScheduledTasks(new java.util.HashSet());
                        setStatsTaskAddCount(new java.util.concurrent.atomic.AtomicLong());
                        }
                    catch (java.lang.Exception e)
                        {
                        // re-throw as a runtime exception
                        throw new com.tangosol.util.WrapperException(e);
                        }
                    
                    // containment initialization: children
                    
                    // signal the end of the initialization
                    set_Constructed(true);
                    }
                
                // Private initializer
                protected void __initPrivate()
                    {
                    
                    super.__initPrivate();
                    }
                
                //++ getter for static property _Instance
                /**
                 * Getter for property _Instance.<p>
                * Auto generated
                 */
                public static com.tangosol.coherence.Component get_Instance()
                    {
                    return new com.tangosol.coherence.component.net.Cluster.NameService.TcpAcceptor.DaemonPool();
                    }
                
                //++ getter for static property _CLASS
                /**
                 * Getter for property _CLASS.<p>
                * Property with auto-generated accessor that returns the Class
                * object for a given component.
                 */
                public static Class get_CLASS()
                    {
                    Class clz;
                    try
                        {
                        clz = Class.forName("com.tangosol.coherence/component/net/Cluster$NameService$TcpAcceptor$DaemonPool".replace('/', '.'));
                        }
                    catch (ClassNotFoundException e)
                        {
                        throw new NoClassDefFoundError(e.getMessage());
                        }
                    return clz;
                    }
                
                //++ getter for autogen property _Module
                /**
                 * This is an auto-generated method that returns the global
                * [design time] parent component.
                * 
                * Note: the class generator will ignore any custom
                * implementation for this behavior.
                 */
                private com.tangosol.coherence.Component get_Module()
                    {
                    return this.get_Parent().get_Parent().get_Parent();
                    }
                
                //++ getter for autogen property _ChildClasses
                /**
                 * This is an auto-generated method that returns the map of
                * design time [static] children.
                * 
                * Note: the class generator will ignore any custom
                * implementation for this behavior.
                 */
                protected java.util.Map get_ChildClasses()
                    {
                    return __mapChildren;
                    }

                // ---- class: com.tangosol.coherence.component.net.Cluster$NameService$TcpAcceptor$DaemonPool$Daemon
                
                /**
                 * The prototypical Daemon thread component that will belong to
                 * the DaemonPool. An instance of this component is created for
                 * each thread in the pool.
                 */
                @SuppressWarnings({"deprecation", "rawtypes", "unused", "unchecked", "ConstantConditions", "DuplicatedCode", "ForLoopReplaceableByForEach", "IfCanBeSwitch", "RedundantArrayCreation", "RedundantSuppression", "SameParameterValue", "TryFinallyCanBeTryWithResources", "TryWithIdenticalCatches", "UnnecessaryBoxing", "UnnecessaryUnboxing", "UnusedAssignment"})
                public static class Daemon
                        extends    com.tangosol.coherence.component.util.NameService.TcpAcceptor.DaemonPool.Daemon
                    {
                    // ---- Fields declarations ----
                    
                    // Default constructor
                    public Daemon()
                        {
                        this(null, null, true);
                        }
                    
                    // Initializing constructor
                    public Daemon(String sName, com.tangosol.coherence.Component compParent, boolean fInit)
                        {
                        super(sName, compParent, false);
                        
                        if (fInit)
                            {
                            __init();
                            }
                        }
                    
                    // Main initializer
                    public void __init()
                        {
                        // private initialization
                        __initPrivate();
                        
                        // state initialization: public and protected properties
                        try
                            {
                            setDaemonState(0);
                            setDefaultGuardRecovery(0.9F);
                            setDefaultGuardTimeout(60000L);
                            setNotifier(new com.oracle.coherence.common.base.SingleWaiterMultiNotifier());
                            setThreadName("Worker");
                            }
                        catch (java.lang.Exception e)
                            {
                            // re-throw as a runtime exception
                            throw new com.tangosol.util.WrapperException(e);
                            }
                        
                        // containment initialization: children
                        _addChild(new Cluster.NameService.TcpAcceptor.DaemonPool.Daemon.Guard("Guard", this, true), "Guard");
                        
                        // signal the end of the initialization
                        set_Constructed(true);
                        }
                    
                    // Private initializer
                    protected void __initPrivate()
                        {
                        
                        super.__initPrivate();
                        }
                    
                    //++ getter for static property _Instance
                    /**
                     * Getter for property _Instance.<p>
                    * Auto generated
                     */
                    public static com.tangosol.coherence.Component get_Instance()
                        {
                        return new com.tangosol.coherence.component.net.Cluster.NameService.TcpAcceptor.DaemonPool.Daemon();
                        }
                    
                    //++ getter for static property _CLASS
                    /**
                     * Getter for property _CLASS.<p>
                    * Property with auto-generated accessor that returns the
                    * Class object for a given component.
                     */
                    public static Class get_CLASS()
                        {
                        Class clz;
                        try
                            {
                            clz = Class.forName("com.tangosol.coherence/component/net/Cluster$NameService$TcpAcceptor$DaemonPool$Daemon".replace('/', '.'));
                            }
                        catch (ClassNotFoundException e)
                            {
                            throw new NoClassDefFoundError(e.getMessage());
                            }
                        return clz;
                        }
                    
                    //++ getter for autogen property _Module
                    /**
                     * This is an auto-generated method that returns the global
                    * [design time] parent component.
                    * 
                    * Note: the class generator will ignore any custom
                    * implementation for this behavior.
                     */
                    private com.tangosol.coherence.Component get_Module()
                        {
                        return this.get_Parent().get_Parent().get_Parent().get_Parent();
                        }

                    // ---- class: com.tangosol.coherence.component.net.Cluster$NameService$TcpAcceptor$DaemonPool$Daemon$Guard
                    
                    /**
                     * Guard provides the Guardable interface implementation
                     * for the Daemon.
                     */
                    @SuppressWarnings({"deprecation", "rawtypes", "unused", "unchecked", "ConstantConditions", "DuplicatedCode", "ForLoopReplaceableByForEach", "IfCanBeSwitch", "RedundantArrayCreation", "RedundantSuppression", "SameParameterValue", "TryFinallyCanBeTryWithResources", "TryWithIdenticalCatches", "UnnecessaryBoxing", "UnnecessaryUnboxing", "UnusedAssignment"})
                    public static class Guard
                            extends    com.tangosol.coherence.component.util.NameService.TcpAcceptor.DaemonPool.Daemon.Guard
                        {
                        // ---- Fields declarations ----
                        private static com.tangosol.util.ListMap __mapChildren;
                        
                        // Static initializer
                        static
                            {
                            __initStatic();
                            }
                        
                        // Default static initializer
                        private static void __initStatic()
                            {
                            // register child classes
                            __mapChildren = new com.tangosol.util.ListMap();
                            __mapChildren.put("Abandon", Cluster.NameService.TcpAcceptor.DaemonPool.Daemon.Guard.Abandon.get_CLASS());
                            }
                        
                        // Default constructor
                        public Guard()
                            {
                            this(null, null, true);
                            }
                        
                        // Initializing constructor
                        public Guard(String sName, com.tangosol.coherence.Component compParent, boolean fInit)
                            {
                            super(sName, compParent, false);
                            
                            if (fInit)
                                {
                                __init();
                                }
                            }
                        
                        // Main initializer
                        public void __init()
                            {
                            // private initialization
                            __initPrivate();
                            
                            
                            // containment initialization: children
                            
                            // signal the end of the initialization
                            set_Constructed(true);
                            }
                        
                        // Private initializer
                        protected void __initPrivate()
                            {
                            
                            super.__initPrivate();
                            }
                        
                        //++ getter for static property _Instance
                        /**
                         * Getter for property _Instance.<p>
                        * Auto generated
                         */
                        public static com.tangosol.coherence.Component get_Instance()
                            {
                            return new com.tangosol.coherence.component.net.Cluster.NameService.TcpAcceptor.DaemonPool.Daemon.Guard();
                            }
                        
                        //++ getter for static property _CLASS
                        /**
                         * Getter for property _CLASS.<p>
                        * Property with auto-generated accessor that returns
                        * the Class object for a given component.
                         */
                        public static Class get_CLASS()
                            {
                            Class clz;
                            try
                                {
                                clz = Class.forName("com.tangosol.coherence/component/net/Cluster$NameService$TcpAcceptor$DaemonPool$Daemon$Guard".replace('/', '.'));
                                }
                            catch (ClassNotFoundException e)
                                {
                                throw new NoClassDefFoundError(e.getMessage());
                                }
                            return clz;
                            }
                        
                        //++ getter for autogen property _Module
                        /**
                         * This is an auto-generated method that returns the
                        * global [design time] parent component.
                        * 
                        * Note: the class generator will ignore any custom
                        * implementation for this behavior.
                         */
                        private com.tangosol.coherence.Component get_Module()
                            {
                            return this.get_Parent().get_Parent().get_Parent().get_Parent().get_Parent();
                            }
                        
                        //++ getter for autogen property _ChildClasses
                        /**
                         * This is an auto-generated method that returns the map
                        * of design time [static] children.
                        * 
                        * Note: the class generator will ignore any custom
                        * implementation for this behavior.
                         */
                        protected java.util.Map get_ChildClasses()
                            {
                            return __mapChildren;
                            }

                        // ---- class: com.tangosol.coherence.component.net.Cluster$NameService$TcpAcceptor$DaemonPool$Daemon$Guard$Abandon
                        
                        @SuppressWarnings({"deprecation", "rawtypes", "unused", "unchecked", "ConstantConditions", "DuplicatedCode", "ForLoopReplaceableByForEach", "IfCanBeSwitch", "RedundantArrayCreation", "RedundantSuppression", "SameParameterValue", "TryFinallyCanBeTryWithResources", "TryWithIdenticalCatches", "UnnecessaryBoxing", "UnnecessaryUnboxing", "UnusedAssignment"})
                        public static class Abandon
                                extends    com.tangosol.coherence.component.util.NameService.TcpAcceptor.DaemonPool.Daemon.Guard.Abandon
                            {
                            // ---- Fields declarations ----
                            
                            // Default constructor
                            public Abandon()
                                {
                                this(null, null, true);
                                }
                            
                            // Initializing constructor
                            public Abandon(String sName, com.tangosol.coherence.Component compParent, boolean fInit)
                                {
                                super(sName, compParent, false);
                                
                                if (fInit)
                                    {
                                    __init();
                                    }
                                }
                            
                            // Main initializer
                            public void __init()
                                {
                                // private initialization
                                __initPrivate();
                                
                                
                                // signal the end of the initialization
                                set_Constructed(true);
                                }
                            
                            // Private initializer
                            protected void __initPrivate()
                                {
                                
                                super.__initPrivate();
                                }
                            
                            //++ getter for static property _Instance
                            /**
                             * Getter for property _Instance.<p>
                            * Auto generated
                             */
                            public static com.tangosol.coherence.Component get_Instance()
                                {
                                return new com.tangosol.coherence.component.net.Cluster.NameService.TcpAcceptor.DaemonPool.Daemon.Guard.Abandon();
                                }
                            
                            //++ getter for static property _CLASS
                            /**
                             * Getter for property _CLASS.<p>
                            * Property with auto-generated accessor that
                            * returns the Class object for a given component.
                             */
                            public static Class get_CLASS()
                                {
                                Class clz;
                                try
                                    {
                                    clz = Class.forName("com.tangosol.coherence/component/net/Cluster$NameService$TcpAcceptor$DaemonPool$Daemon$Guard$Abandon".replace('/', '.'));
                                    }
                                catch (ClassNotFoundException e)
                                    {
                                    throw new NoClassDefFoundError(e.getMessage());
                                    }
                                return clz;
                                }
                            
                            //++ getter for autogen property _Module
                            /**
                             * This is an auto-generated method that returns the
                            * global [design time] parent component.
                            * 
                            * Note: the class generator will ignore any custom
                            * implementation for this behavior.
                             */
                            private com.tangosol.coherence.Component get_Module()
                                {
                                return this.get_Parent().get_Parent().get_Parent().get_Parent().get_Parent().get_Parent();
                                }
                            }
                        }
                    }

                // ---- class: com.tangosol.coherence.component.net.Cluster$NameService$TcpAcceptor$DaemonPool$ResizeTask
                
                /**
                 * Runnable periodic task used to implement the dynamic
                 * resizing algorithm.
                 */
                @SuppressWarnings({"deprecation", "rawtypes", "unused", "unchecked", "ConstantConditions", "DuplicatedCode", "ForLoopReplaceableByForEach", "IfCanBeSwitch", "RedundantArrayCreation", "RedundantSuppression", "SameParameterValue", "TryFinallyCanBeTryWithResources", "TryWithIdenticalCatches", "UnnecessaryBoxing", "UnnecessaryUnboxing", "UnusedAssignment"})
                public static class ResizeTask
                        extends    com.tangosol.coherence.component.util.NameService.TcpAcceptor.DaemonPool.ResizeTask
                    {
                    // ---- Fields declarations ----
                    
                    // Default constructor
                    public ResizeTask()
                        {
                        this(null, null, true);
                        }
                    
                    // Initializing constructor
                    public ResizeTask(String sName, com.tangosol.coherence.Component compParent, boolean fInit)
                        {
                        super(sName, compParent, false);
                        
                        if (fInit)
                            {
                            __init();
                            }
                        }
                    
                    // Main initializer
                    public void __init()
                        {
                        // private initialization
                        __initPrivate();
                        
                        
                        // signal the end of the initialization
                        set_Constructed(true);
                        }
                    
                    // Private initializer
                    protected void __initPrivate()
                        {
                        
                        super.__initPrivate();
                        }
                    
                    //++ getter for static property _Instance
                    /**
                     * Getter for property _Instance.<p>
                    * Auto generated
                     */
                    public static com.tangosol.coherence.Component get_Instance()
                        {
                        return new com.tangosol.coherence.component.net.Cluster.NameService.TcpAcceptor.DaemonPool.ResizeTask();
                        }
                    
                    //++ getter for static property _CLASS
                    /**
                     * Getter for property _CLASS.<p>
                    * Property with auto-generated accessor that returns the
                    * Class object for a given component.
                     */
                    public static Class get_CLASS()
                        {
                        Class clz;
                        try
                            {
                            clz = Class.forName("com.tangosol.coherence/component/net/Cluster$NameService$TcpAcceptor$DaemonPool$ResizeTask".replace('/', '.'));
                            }
                        catch (ClassNotFoundException e)
                            {
                            throw new NoClassDefFoundError(e.getMessage());
                            }
                        return clz;
                        }
                    
                    //++ getter for autogen property _Module
                    /**
                     * This is an auto-generated method that returns the global
                    * [design time] parent component.
                    * 
                    * Note: the class generator will ignore any custom
                    * implementation for this behavior.
                     */
                    private com.tangosol.coherence.Component get_Module()
                        {
                        return this.get_Parent().get_Parent().get_Parent().get_Parent();
                        }
                    }

                // ---- class: com.tangosol.coherence.component.net.Cluster$NameService$TcpAcceptor$DaemonPool$ScheduleTask
                
                /**
                 * Runnable task that is used to schedule a task to be added to
                 * the DaemonPool.
                 */
                @SuppressWarnings({"deprecation", "rawtypes", "unused", "unchecked", "ConstantConditions", "DuplicatedCode", "ForLoopReplaceableByForEach", "IfCanBeSwitch", "RedundantArrayCreation", "RedundantSuppression", "SameParameterValue", "TryFinallyCanBeTryWithResources", "TryWithIdenticalCatches", "UnnecessaryBoxing", "UnnecessaryUnboxing", "UnusedAssignment"})
                public static class ScheduleTask
                        extends    com.tangosol.coherence.component.util.NameService.TcpAcceptor.DaemonPool.ScheduleTask
                    {
                    // ---- Fields declarations ----
                    
                    // Default constructor
                    public ScheduleTask()
                        {
                        this(null, null, true);
                        }
                    
                    // Initializing constructor
                    public ScheduleTask(String sName, com.tangosol.coherence.Component compParent, boolean fInit)
                        {
                        super(sName, compParent, false);
                        
                        if (fInit)
                            {
                            __init();
                            }
                        }
                    
                    // Main initializer
                    public void __init()
                        {
                        // private initialization
                        __initPrivate();
                        
                        
                        // signal the end of the initialization
                        set_Constructed(true);
                        }
                    
                    // Private initializer
                    protected void __initPrivate()
                        {
                        
                        super.__initPrivate();
                        }
                    
                    //++ getter for static property _Instance
                    /**
                     * Getter for property _Instance.<p>
                    * Auto generated
                     */
                    public static com.tangosol.coherence.Component get_Instance()
                        {
                        return new com.tangosol.coherence.component.net.Cluster.NameService.TcpAcceptor.DaemonPool.ScheduleTask();
                        }
                    
                    //++ getter for static property _CLASS
                    /**
                     * Getter for property _CLASS.<p>
                    * Property with auto-generated accessor that returns the
                    * Class object for a given component.
                     */
                    public static Class get_CLASS()
                        {
                        Class clz;
                        try
                            {
                            clz = Class.forName("com.tangosol.coherence/component/net/Cluster$NameService$TcpAcceptor$DaemonPool$ScheduleTask".replace('/', '.'));
                            }
                        catch (ClassNotFoundException e)
                            {
                            throw new NoClassDefFoundError(e.getMessage());
                            }
                        return clz;
                        }
                    
                    //++ getter for autogen property _Module
                    /**
                     * This is an auto-generated method that returns the global
                    * [design time] parent component.
                    * 
                    * Note: the class generator will ignore any custom
                    * implementation for this behavior.
                     */
                    private com.tangosol.coherence.Component get_Module()
                        {
                        return this.get_Parent().get_Parent().get_Parent().get_Parent();
                        }
                    }

                // ---- class: com.tangosol.coherence.component.net.Cluster$NameService$TcpAcceptor$DaemonPool$StartTask
                
                /**
                 * Runnable pseudo-task that is used to start one and only one
                 * daemon thread.
                 */
                @SuppressWarnings({"deprecation", "rawtypes", "unused", "unchecked", "ConstantConditions", "DuplicatedCode", "ForLoopReplaceableByForEach", "IfCanBeSwitch", "RedundantArrayCreation", "RedundantSuppression", "SameParameterValue", "TryFinallyCanBeTryWithResources", "TryWithIdenticalCatches", "UnnecessaryBoxing", "UnnecessaryUnboxing", "UnusedAssignment"})
                public static class StartTask
                        extends    com.tangosol.coherence.component.util.NameService.TcpAcceptor.DaemonPool.StartTask
                    {
                    // ---- Fields declarations ----
                    
                    // Default constructor
                    public StartTask()
                        {
                        this(null, null, true);
                        }
                    
                    // Initializing constructor
                    public StartTask(String sName, com.tangosol.coherence.Component compParent, boolean fInit)
                        {
                        super(sName, compParent, false);
                        
                        if (fInit)
                            {
                            __init();
                            }
                        }
                    
                    // Main initializer
                    public void __init()
                        {
                        // private initialization
                        __initPrivate();
                        
                        
                        // signal the end of the initialization
                        set_Constructed(true);
                        }
                    
                    // Private initializer
                    protected void __initPrivate()
                        {
                        
                        super.__initPrivate();
                        }
                    
                    //++ getter for static property _Instance
                    /**
                     * Getter for property _Instance.<p>
                    * Auto generated
                     */
                    public static com.tangosol.coherence.Component get_Instance()
                        {
                        return new com.tangosol.coherence.component.net.Cluster.NameService.TcpAcceptor.DaemonPool.StartTask();
                        }
                    
                    //++ getter for static property _CLASS
                    /**
                     * Getter for property _CLASS.<p>
                    * Property with auto-generated accessor that returns the
                    * Class object for a given component.
                     */
                    public static Class get_CLASS()
                        {
                        Class clz;
                        try
                            {
                            clz = Class.forName("com.tangosol.coherence/component/net/Cluster$NameService$TcpAcceptor$DaemonPool$StartTask".replace('/', '.'));
                            }
                        catch (ClassNotFoundException e)
                            {
                            throw new NoClassDefFoundError(e.getMessage());
                            }
                        return clz;
                        }
                    
                    //++ getter for autogen property _Module
                    /**
                     * This is an auto-generated method that returns the global
                    * [design time] parent component.
                    * 
                    * Note: the class generator will ignore any custom
                    * implementation for this behavior.
                     */
                    private com.tangosol.coherence.Component get_Module()
                        {
                        return this.get_Parent().get_Parent().get_Parent().get_Parent();
                        }
                    }

                // ---- class: com.tangosol.coherence.component.net.Cluster$NameService$TcpAcceptor$DaemonPool$StopTask
                
                /**
                 * Runnable pseudo-task that is used to terminate one and only
                 * one daemon thread.
                 */
                @SuppressWarnings({"deprecation", "rawtypes", "unused", "unchecked", "ConstantConditions", "DuplicatedCode", "ForLoopReplaceableByForEach", "IfCanBeSwitch", "RedundantArrayCreation", "RedundantSuppression", "SameParameterValue", "TryFinallyCanBeTryWithResources", "TryWithIdenticalCatches", "UnnecessaryBoxing", "UnnecessaryUnboxing", "UnusedAssignment"})
                public static class StopTask
                        extends    com.tangosol.coherence.component.util.NameService.TcpAcceptor.DaemonPool.StopTask
                    {
                    // ---- Fields declarations ----
                    
                    // Default constructor
                    public StopTask()
                        {
                        this(null, null, true);
                        }
                    
                    // Initializing constructor
                    public StopTask(String sName, com.tangosol.coherence.Component compParent, boolean fInit)
                        {
                        super(sName, compParent, false);
                        
                        if (fInit)
                            {
                            __init();
                            }
                        }
                    
                    // Main initializer
                    public void __init()
                        {
                        // private initialization
                        __initPrivate();
                        
                        
                        // signal the end of the initialization
                        set_Constructed(true);
                        }
                    
                    // Private initializer
                    protected void __initPrivate()
                        {
                        
                        super.__initPrivate();
                        }
                    
                    //++ getter for static property _Instance
                    /**
                     * Getter for property _Instance.<p>
                    * Auto generated
                     */
                    public static com.tangosol.coherence.Component get_Instance()
                        {
                        return new com.tangosol.coherence.component.net.Cluster.NameService.TcpAcceptor.DaemonPool.StopTask();
                        }
                    
                    //++ getter for static property _CLASS
                    /**
                     * Getter for property _CLASS.<p>
                    * Property with auto-generated accessor that returns the
                    * Class object for a given component.
                     */
                    public static Class get_CLASS()
                        {
                        Class clz;
                        try
                            {
                            clz = Class.forName("com.tangosol.coherence/component/net/Cluster$NameService$TcpAcceptor$DaemonPool$StopTask".replace('/', '.'));
                            }
                        catch (ClassNotFoundException e)
                            {
                            throw new NoClassDefFoundError(e.getMessage());
                            }
                        return clz;
                        }
                    
                    //++ getter for autogen property _Module
                    /**
                     * This is an auto-generated method that returns the global
                    * [design time] parent component.
                    * 
                    * Note: the class generator will ignore any custom
                    * implementation for this behavior.
                     */
                    private com.tangosol.coherence.Component get_Module()
                        {
                        return this.get_Parent().get_Parent().get_Parent().get_Parent();
                        }
                    }

                // ---- class: com.tangosol.coherence.component.net.Cluster$NameService$TcpAcceptor$DaemonPool$WorkSlot
                
                /**
                 * To reduce the contention across the worker threads, all
                 * tasks added to the DaemonPool are directed to one of the
                 * WorkSlots in a way that respects the association between
                 * tasks. The total number of slots is fixed and calculated
                 * based on the number of processors. Depending on the number
                 * of daemon threads, different slots may share the queues.
                 */
                @SuppressWarnings({"deprecation", "rawtypes", "unused", "unchecked", "ConstantConditions", "DuplicatedCode", "ForLoopReplaceableByForEach", "IfCanBeSwitch", "RedundantArrayCreation", "RedundantSuppression", "SameParameterValue", "TryFinallyCanBeTryWithResources", "TryWithIdenticalCatches", "UnnecessaryBoxing", "UnnecessaryUnboxing", "UnusedAssignment"})
                public static class WorkSlot
                        extends    com.tangosol.coherence.component.util.NameService.TcpAcceptor.DaemonPool.WorkSlot
                    {
                    // ---- Fields declarations ----
                    
                    // Default constructor
                    public WorkSlot()
                        {
                        this(null, null, true);
                        }
                    
                    // Initializing constructor
                    public WorkSlot(String sName, com.tangosol.coherence.Component compParent, boolean fInit)
                        {
                        super(sName, compParent, false);
                        
                        if (fInit)
                            {
                            __init();
                            }
                        }
                    
                    // Main initializer
                    public void __init()
                        {
                        // private initialization
                        __initPrivate();
                        
                        // state initialization: public and protected properties
                        try
                            {
                            setIndex(-1);
                            }
                        catch (java.lang.Exception e)
                            {
                            // re-throw as a runtime exception
                            throw new com.tangosol.util.WrapperException(e);
                            }
                        
                        // signal the end of the initialization
                        set_Constructed(true);
                        }
                    
                    // Private initializer
                    protected void __initPrivate()
                        {
                        
                        super.__initPrivate();
                        }
                    
                    //++ getter for static property _Instance
                    /**
                     * Getter for property _Instance.<p>
                    * Auto generated
                     */
                    public static com.tangosol.coherence.Component get_Instance()
                        {
                        return new com.tangosol.coherence.component.net.Cluster.NameService.TcpAcceptor.DaemonPool.WorkSlot();
                        }
                    
                    //++ getter for static property _CLASS
                    /**
                     * Getter for property _CLASS.<p>
                    * Property with auto-generated accessor that returns the
                    * Class object for a given component.
                     */
                    public static Class get_CLASS()
                        {
                        Class clz;
                        try
                            {
                            clz = Class.forName("com.tangosol.coherence/component/net/Cluster$NameService$TcpAcceptor$DaemonPool$WorkSlot".replace('/', '.'));
                            }
                        catch (ClassNotFoundException e)
                            {
                            throw new NoClassDefFoundError(e.getMessage());
                            }
                        return clz;
                        }
                    
                    //++ getter for autogen property _Module
                    /**
                     * This is an auto-generated method that returns the global
                    * [design time] parent component.
                    * 
                    * Note: the class generator will ignore any custom
                    * implementation for this behavior.
                     */
                    private com.tangosol.coherence.Component get_Module()
                        {
                        return this.get_Parent().get_Parent().get_Parent().get_Parent();
                        }
                    }

                // ---- class: com.tangosol.coherence.component.net.Cluster$NameService$TcpAcceptor$DaemonPool$WrapperTask
                
                /**
                 * A task that is used to wrap the actual tasks.
                 */
                @SuppressWarnings({"deprecation", "rawtypes", "unused", "unchecked", "ConstantConditions", "DuplicatedCode", "ForLoopReplaceableByForEach", "IfCanBeSwitch", "RedundantArrayCreation", "RedundantSuppression", "SameParameterValue", "TryFinallyCanBeTryWithResources", "TryWithIdenticalCatches", "UnnecessaryBoxing", "UnnecessaryUnboxing", "UnusedAssignment"})
                public static class WrapperTask
                        extends    com.tangosol.coherence.component.util.NameService.TcpAcceptor.DaemonPool.WrapperTask
                    {
                    // ---- Fields declarations ----
                    
                    // Default constructor
                    public WrapperTask()
                        {
                        this(null, null, true);
                        }
                    
                    // Initializing constructor
                    public WrapperTask(String sName, com.tangosol.coherence.Component compParent, boolean fInit)
                        {
                        super(sName, compParent, false);
                        
                        if (fInit)
                            {
                            __init();
                            }
                        }
                    
                    // Main initializer
                    public void __init()
                        {
                        // private initialization
                        __initPrivate();
                        
                        
                        // signal the end of the initialization
                        set_Constructed(true);
                        }
                    
                    // Private initializer
                    protected void __initPrivate()
                        {
                        
                        super.__initPrivate();
                        }
                    
                    //++ getter for static property _Instance
                    /**
                     * Getter for property _Instance.<p>
                    * Auto generated
                     */
                    public static com.tangosol.coherence.Component get_Instance()
                        {
                        return new com.tangosol.coherence.component.net.Cluster.NameService.TcpAcceptor.DaemonPool.WrapperTask();
                        }
                    
                    //++ getter for static property _CLASS
                    /**
                     * Getter for property _CLASS.<p>
                    * Property with auto-generated accessor that returns the
                    * Class object for a given component.
                     */
                    public static Class get_CLASS()
                        {
                        Class clz;
                        try
                            {
                            clz = Class.forName("com.tangosol.coherence/component/net/Cluster$NameService$TcpAcceptor$DaemonPool$WrapperTask".replace('/', '.'));
                            }
                        catch (ClassNotFoundException e)
                            {
                            throw new NoClassDefFoundError(e.getMessage());
                            }
                        return clz;
                        }
                    
                    //++ getter for autogen property _Module
                    /**
                     * This is an auto-generated method that returns the global
                    * [design time] parent component.
                    * 
                    * Note: the class generator will ignore any custom
                    * implementation for this behavior.
                     */
                    private com.tangosol.coherence.Component get_Module()
                        {
                        return this.get_Parent().get_Parent().get_Parent().get_Parent();
                        }
                    }
                }

            // ---- class: com.tangosol.coherence.component.net.Cluster$NameService$TcpAcceptor$DispatchEvent
            
            /**
             * Runnable event.
             */
            @SuppressWarnings({"deprecation", "rawtypes", "unused", "unchecked", "ConstantConditions", "DuplicatedCode", "ForLoopReplaceableByForEach", "IfCanBeSwitch", "RedundantArrayCreation", "RedundantSuppression", "SameParameterValue", "TryFinallyCanBeTryWithResources", "TryWithIdenticalCatches", "UnnecessaryBoxing", "UnnecessaryUnboxing", "UnusedAssignment"})
            public static class DispatchEvent
                    extends    com.tangosol.coherence.component.util.NameService.TcpAcceptor.DispatchEvent
                {
                // ---- Fields declarations ----
                
                // Default constructor
                public DispatchEvent()
                    {
                    this(null, null, true);
                    }
                
                // Initializing constructor
                public DispatchEvent(String sName, com.tangosol.coherence.Component compParent, boolean fInit)
                    {
                    super(sName, compParent, false);
                    
                    if (fInit)
                        {
                        __init();
                        }
                    }
                
                // Main initializer
                public void __init()
                    {
                    // private initialization
                    __initPrivate();
                    
                    
                    // signal the end of the initialization
                    set_Constructed(true);
                    }
                
                // Private initializer
                protected void __initPrivate()
                    {
                    
                    super.__initPrivate();
                    }
                
                //++ getter for static property _Instance
                /**
                 * Getter for property _Instance.<p>
                * Auto generated
                 */
                public static com.tangosol.coherence.Component get_Instance()
                    {
                    return new com.tangosol.coherence.component.net.Cluster.NameService.TcpAcceptor.DispatchEvent();
                    }
                
                //++ getter for static property _CLASS
                /**
                 * Getter for property _CLASS.<p>
                * Property with auto-generated accessor that returns the Class
                * object for a given component.
                 */
                public static Class get_CLASS()
                    {
                    Class clz;
                    try
                        {
                        clz = Class.forName("com.tangosol.coherence/component/net/Cluster$NameService$TcpAcceptor$DispatchEvent".replace('/', '.'));
                        }
                    catch (ClassNotFoundException e)
                        {
                        throw new NoClassDefFoundError(e.getMessage());
                        }
                    return clz;
                    }
                
                //++ getter for autogen property _Module
                /**
                 * This is an auto-generated method that returns the global
                * [design time] parent component.
                * 
                * Note: the class generator will ignore any custom
                * implementation for this behavior.
                 */
                private com.tangosol.coherence.Component get_Module()
                    {
                    return this.get_Parent().get_Parent().get_Parent();
                    }
                }

            // ---- class: com.tangosol.coherence.component.net.Cluster$NameService$TcpAcceptor$EventDispatcher
            
            /**
             * This is a Daemon component that waits for items to process from
             * a Queue. Whenever the Queue contains an item, the onNotify event
             * occurs. It is expected that sub-classes will process onNotify as
             * follows:
             * <pre><code>
             * Object o;
             * while ((o = getQueue().removeNoWait()) != null)
             *     {
             *     // process the item
             *     // ...
             *     }
             * </code></pre>
             * <p>
             * The Queue is used as the synchronization point for the daemon.
             */
            @SuppressWarnings({"deprecation", "rawtypes", "unused", "unchecked", "ConstantConditions", "DuplicatedCode", "ForLoopReplaceableByForEach", "IfCanBeSwitch", "RedundantArrayCreation", "RedundantSuppression", "SameParameterValue", "TryFinallyCanBeTryWithResources", "TryWithIdenticalCatches", "UnnecessaryBoxing", "UnnecessaryUnboxing", "UnusedAssignment"})
            public static class EventDispatcher
                    extends    com.tangosol.coherence.component.util.NameService.TcpAcceptor.EventDispatcher
                {
                // ---- Fields declarations ----
                private static com.tangosol.util.ListMap __mapChildren;
                
                // Static initializer
                static
                    {
                    __initStatic();
                    }
                
                // Default static initializer
                private static void __initStatic()
                    {
                    // register child classes
                    __mapChildren = new com.tangosol.util.ListMap();
                    __mapChildren.put("Queue", Cluster.NameService.TcpAcceptor.EventDispatcher.Queue.get_CLASS());
                    }
                
                // Default constructor
                public EventDispatcher()
                    {
                    this(null, null, true);
                    }
                
                // Initializing constructor
                public EventDispatcher(String sName, com.tangosol.coherence.Component compParent, boolean fInit)
                    {
                    super(sName, compParent, false);
                    
                    if (fInit)
                        {
                        __init();
                        }
                    }
                
                // Main initializer
                public void __init()
                    {
                    // private initialization
                    __initPrivate();
                    
                    // state initialization: public and protected properties
                    try
                        {
                        setCloggedCount(1024);
                        setCloggedDelay(32);
                        setDaemonState(0);
                        setDefaultGuardRecovery(0.9F);
                        setDefaultGuardTimeout(60000L);
                        setNotifier(new com.oracle.coherence.common.base.SingleWaiterMultiNotifier());
                        }
                    catch (java.lang.Exception e)
                        {
                        // re-throw as a runtime exception
                        throw new com.tangosol.util.WrapperException(e);
                        }
                    
                    // containment initialization: children
                    _addChild(new Cluster.NameService.TcpAcceptor.EventDispatcher.Guard("Guard", this, true), "Guard");
                    
                    // signal the end of the initialization
                    set_Constructed(true);
                    }
                
                // Private initializer
                protected void __initPrivate()
                    {
                    
                    super.__initPrivate();
                    }
                
                //++ getter for static property _Instance
                /**
                 * Getter for property _Instance.<p>
                * Auto generated
                 */
                public static com.tangosol.coherence.Component get_Instance()
                    {
                    return new com.tangosol.coherence.component.net.Cluster.NameService.TcpAcceptor.EventDispatcher();
                    }
                
                //++ getter for static property _CLASS
                /**
                 * Getter for property _CLASS.<p>
                * Property with auto-generated accessor that returns the Class
                * object for a given component.
                 */
                public static Class get_CLASS()
                    {
                    Class clz;
                    try
                        {
                        clz = Class.forName("com.tangosol.coherence/component/net/Cluster$NameService$TcpAcceptor$EventDispatcher".replace('/', '.'));
                        }
                    catch (ClassNotFoundException e)
                        {
                        throw new NoClassDefFoundError(e.getMessage());
                        }
                    return clz;
                    }
                
                //++ getter for autogen property _Module
                /**
                 * This is an auto-generated method that returns the global
                * [design time] parent component.
                * 
                * Note: the class generator will ignore any custom
                * implementation for this behavior.
                 */
                private com.tangosol.coherence.Component get_Module()
                    {
                    return this.get_Parent().get_Parent().get_Parent();
                    }
                
                //++ getter for autogen property _ChildClasses
                /**
                 * This is an auto-generated method that returns the map of
                * design time [static] children.
                * 
                * Note: the class generator will ignore any custom
                * implementation for this behavior.
                 */
                protected java.util.Map get_ChildClasses()
                    {
                    return __mapChildren;
                    }

                // ---- class: com.tangosol.coherence.component.net.Cluster$NameService$TcpAcceptor$EventDispatcher$Guard
                
                /**
                 * Guard provides the Guardable interface implementation for
                 * the Daemon.
                 */
                @SuppressWarnings({"deprecation", "rawtypes", "unused", "unchecked", "ConstantConditions", "DuplicatedCode", "ForLoopReplaceableByForEach", "IfCanBeSwitch", "RedundantArrayCreation", "RedundantSuppression", "SameParameterValue", "TryFinallyCanBeTryWithResources", "TryWithIdenticalCatches", "UnnecessaryBoxing", "UnnecessaryUnboxing", "UnusedAssignment"})
                public static class Guard
                        extends    com.tangosol.coherence.component.util.daemon.queueProcessor.Service.EventDispatcher.Guard
                    {
                    // ---- Fields declarations ----
                    
                    // Default constructor
                    public Guard()
                        {
                        this(null, null, true);
                        }
                    
                    // Initializing constructor
                    public Guard(String sName, com.tangosol.coherence.Component compParent, boolean fInit)
                        {
                        super(sName, compParent, false);
                        
                        if (fInit)
                            {
                            __init();
                            }
                        }
                    
                    // Main initializer
                    public void __init()
                        {
                        // private initialization
                        __initPrivate();
                        
                        
                        // signal the end of the initialization
                        set_Constructed(true);
                        }
                    
                    // Private initializer
                    protected void __initPrivate()
                        {
                        
                        super.__initPrivate();
                        }
                    
                    //++ getter for static property _Instance
                    /**
                     * Getter for property _Instance.<p>
                    * Auto generated
                     */
                    public static com.tangosol.coherence.Component get_Instance()
                        {
                        return new com.tangosol.coherence.component.net.Cluster.NameService.TcpAcceptor.EventDispatcher.Guard();
                        }
                    
                    //++ getter for static property _CLASS
                    /**
                     * Getter for property _CLASS.<p>
                    * Property with auto-generated accessor that returns the
                    * Class object for a given component.
                     */
                    public static Class get_CLASS()
                        {
                        Class clz;
                        try
                            {
                            clz = Class.forName("com.tangosol.coherence/component/net/Cluster$NameService$TcpAcceptor$EventDispatcher$Guard".replace('/', '.'));
                            }
                        catch (ClassNotFoundException e)
                            {
                            throw new NoClassDefFoundError(e.getMessage());
                            }
                        return clz;
                        }
                    
                    //++ getter for autogen property _Module
                    /**
                     * This is an auto-generated method that returns the global
                    * [design time] parent component.
                    * 
                    * Note: the class generator will ignore any custom
                    * implementation for this behavior.
                     */
                    private com.tangosol.coherence.Component get_Module()
                        {
                        return this.get_Parent().get_Parent().get_Parent().get_Parent();
                        }
                    }

                // ---- class: com.tangosol.coherence.component.net.Cluster$NameService$TcpAcceptor$EventDispatcher$Queue
                
                /**
                 * This is the Queue to which items that need to be processed
                 * are added, and from which the daemon pulls items to process.
                 */
                @SuppressWarnings({"deprecation", "rawtypes", "unused", "unchecked", "ConstantConditions", "DuplicatedCode", "ForLoopReplaceableByForEach", "IfCanBeSwitch", "RedundantArrayCreation", "RedundantSuppression", "SameParameterValue", "TryFinallyCanBeTryWithResources", "TryWithIdenticalCatches", "UnnecessaryBoxing", "UnnecessaryUnboxing", "UnusedAssignment"})
                public static class Queue
                        extends    com.tangosol.coherence.component.util.NameService.TcpAcceptor.EventDispatcher.Queue
                    {
                    // ---- Fields declarations ----
                    private static com.tangosol.util.ListMap __mapChildren;
                    
                    // Static initializer
                    static
                        {
                        __initStatic();
                        }
                    
                    // Default static initializer
                    private static void __initStatic()
                        {
                        // register child classes
                        __mapChildren = new com.tangosol.util.ListMap();
                        __mapChildren.put("Iterator", Cluster.NameService.TcpAcceptor.EventDispatcher.Queue.Iterator.get_CLASS());
                        }
                    
                    // Default constructor
                    public Queue()
                        {
                        this(null, null, true);
                        }
                    
                    // Initializing constructor
                    public Queue(String sName, com.tangosol.coherence.Component compParent, boolean fInit)
                        {
                        super(sName, compParent, false);
                        
                        if (fInit)
                            {
                            __init();
                            }
                        }
                    
                    // Main initializer
                    public void __init()
                        {
                        // private initialization
                        __initPrivate();
                        
                        // state initialization: public and protected properties
                        try
                            {
                            setElementList(new com.tangosol.util.RecyclingLinkedList());
                            }
                        catch (java.lang.Exception e)
                            {
                            // re-throw as a runtime exception
                            throw new com.tangosol.util.WrapperException(e);
                            }
                        
                        // containment initialization: children
                        
                        // signal the end of the initialization
                        set_Constructed(true);
                        }
                    
                    // Private initializer
                    protected void __initPrivate()
                        {
                        
                        super.__initPrivate();
                        }
                    
                    //++ getter for static property _Instance
                    /**
                     * Getter for property _Instance.<p>
                    * Auto generated
                     */
                    public static com.tangosol.coherence.Component get_Instance()
                        {
                        return new com.tangosol.coherence.component.net.Cluster.NameService.TcpAcceptor.EventDispatcher.Queue();
                        }
                    
                    //++ getter for static property _CLASS
                    /**
                     * Getter for property _CLASS.<p>
                    * Property with auto-generated accessor that returns the
                    * Class object for a given component.
                     */
                    public static Class get_CLASS()
                        {
                        Class clz;
                        try
                            {
                            clz = Class.forName("com.tangosol.coherence/component/net/Cluster$NameService$TcpAcceptor$EventDispatcher$Queue".replace('/', '.'));
                            }
                        catch (ClassNotFoundException e)
                            {
                            throw new NoClassDefFoundError(e.getMessage());
                            }
                        return clz;
                        }
                    
                    //++ getter for autogen property _Module
                    /**
                     * This is an auto-generated method that returns the global
                    * [design time] parent component.
                    * 
                    * Note: the class generator will ignore any custom
                    * implementation for this behavior.
                     */
                    private com.tangosol.coherence.Component get_Module()
                        {
                        return this.get_Parent().get_Parent().get_Parent().get_Parent();
                        }
                    
                    //++ getter for autogen property _ChildClasses
                    /**
                     * This is an auto-generated method that returns the map of
                    * design time [static] children.
                    * 
                    * Note: the class generator will ignore any custom
                    * implementation for this behavior.
                     */
                    protected java.util.Map get_ChildClasses()
                        {
                        return __mapChildren;
                        }

                    // ---- class: com.tangosol.coherence.component.net.Cluster$NameService$TcpAcceptor$EventDispatcher$Queue$Iterator
                    
                    /**
                     * Iterator of a snapshot of the List object that backs the
                     * Queue. Supports remove(). Uses the Queue as the monitor
                     * if any synchronization is required.
                     */
                    @SuppressWarnings({"deprecation", "rawtypes", "unused", "unchecked", "ConstantConditions", "DuplicatedCode", "ForLoopReplaceableByForEach", "IfCanBeSwitch", "RedundantArrayCreation", "RedundantSuppression", "SameParameterValue", "TryFinallyCanBeTryWithResources", "TryWithIdenticalCatches", "UnnecessaryBoxing", "UnnecessaryUnboxing", "UnusedAssignment"})
                    public static class Iterator
                            extends    com.tangosol.coherence.component.util.NameService.TcpAcceptor.EventDispatcher.Queue.Iterator
                        {
                        // ---- Fields declarations ----
                        
                        // Default constructor
                        public Iterator()
                            {
                            this(null, null, true);
                            }
                        
                        // Initializing constructor
                        public Iterator(String sName, com.tangosol.coherence.Component compParent, boolean fInit)
                            {
                            super(sName, compParent, false);
                            
                            if (fInit)
                                {
                                __init();
                                }
                            }
                        
                        // Main initializer
                        public void __init()
                            {
                            // private initialization
                            __initPrivate();
                            
                            
                            // signal the end of the initialization
                            set_Constructed(true);
                            }
                        
                        // Private initializer
                        protected void __initPrivate()
                            {
                            
                            super.__initPrivate();
                            }
                        
                        //++ getter for static property _Instance
                        /**
                         * Getter for property _Instance.<p>
                        * Auto generated
                         */
                        public static com.tangosol.coherence.Component get_Instance()
                            {
                            return new com.tangosol.coherence.component.net.Cluster.NameService.TcpAcceptor.EventDispatcher.Queue.Iterator();
                            }
                        
                        //++ getter for static property _CLASS
                        /**
                         * Getter for property _CLASS.<p>
                        * Property with auto-generated accessor that returns
                        * the Class object for a given component.
                         */
                        public static Class get_CLASS()
                            {
                            Class clz;
                            try
                                {
                                clz = Class.forName("com.tangosol.coherence/component/net/Cluster$NameService$TcpAcceptor$EventDispatcher$Queue$Iterator".replace('/', '.'));
                                }
                            catch (ClassNotFoundException e)
                                {
                                throw new NoClassDefFoundError(e.getMessage());
                                }
                            return clz;
                            }
                        
                        //++ getter for autogen property _Module
                        /**
                         * This is an auto-generated method that returns the
                        * global [design time] parent component.
                        * 
                        * Note: the class generator will ignore any custom
                        * implementation for this behavior.
                         */
                        private com.tangosol.coherence.Component get_Module()
                            {
                            return this.get_Parent().get_Parent().get_Parent().get_Parent().get_Parent();
                            }
                        }
                    }
                }

            // ---- class: com.tangosol.coherence.component.net.Cluster$NameService$TcpAcceptor$Guard
            
            /**
             * Guard provides the Guardable interface implementation for the
             * Daemon.
             */
            @SuppressWarnings({"deprecation", "rawtypes", "unused", "unchecked", "ConstantConditions", "DuplicatedCode", "ForLoopReplaceableByForEach", "IfCanBeSwitch", "RedundantArrayCreation", "RedundantSuppression", "SameParameterValue", "TryFinallyCanBeTryWithResources", "TryWithIdenticalCatches", "UnnecessaryBoxing", "UnnecessaryUnboxing", "UnusedAssignment"})
            public static class Guard
                    extends    com.tangosol.coherence.component.util.Daemon.Guard
                {
                // ---- Fields declarations ----
                
                // Default constructor
                public Guard()
                    {
                    this(null, null, true);
                    }
                
                // Initializing constructor
                public Guard(String sName, com.tangosol.coherence.Component compParent, boolean fInit)
                    {
                    super(sName, compParent, false);
                    
                    if (fInit)
                        {
                        __init();
                        }
                    }
                
                // Main initializer
                public void __init()
                    {
                    // private initialization
                    __initPrivate();
                    
                    
                    // signal the end of the initialization
                    set_Constructed(true);
                    }
                
                // Private initializer
                protected void __initPrivate()
                    {
                    
                    super.__initPrivate();
                    }
                
                //++ getter for static property _Instance
                /**
                 * Getter for property _Instance.<p>
                * Auto generated
                 */
                public static com.tangosol.coherence.Component get_Instance()
                    {
                    return new com.tangosol.coherence.component.net.Cluster.NameService.TcpAcceptor.Guard();
                    }
                
                //++ getter for static property _CLASS
                /**
                 * Getter for property _CLASS.<p>
                * Property with auto-generated accessor that returns the Class
                * object for a given component.
                 */
                public static Class get_CLASS()
                    {
                    Class clz;
                    try
                        {
                        clz = Class.forName("com.tangosol.coherence/component/net/Cluster$NameService$TcpAcceptor$Guard".replace('/', '.'));
                        }
                    catch (ClassNotFoundException e)
                        {
                        throw new NoClassDefFoundError(e.getMessage());
                        }
                    return clz;
                    }
                
                //++ getter for autogen property _Module
                /**
                 * This is an auto-generated method that returns the global
                * [design time] parent component.
                * 
                * Note: the class generator will ignore any custom
                * implementation for this behavior.
                 */
                private com.tangosol.coherence.Component get_Module()
                    {
                    return this.get_Parent().get_Parent().get_Parent();
                    }
                }

            // ---- class: com.tangosol.coherence.component.net.Cluster$NameService$TcpAcceptor$MessageBuffer
            
            /**
             * ReadBuffer implementation that holds an encoded Message. This
             * component delegates all ReadBuffer operations to a wrapped
             * ReadBuffer and holds a reference to a BufferPool and an array of
             * WriteBuffer objects that the wrapped ReadBuffer is based upon so
             * that they can be released.
             */
            @SuppressWarnings({"deprecation", "rawtypes", "unused", "unchecked", "ConstantConditions", "DuplicatedCode", "ForLoopReplaceableByForEach", "IfCanBeSwitch", "RedundantArrayCreation", "RedundantSuppression", "SameParameterValue", "TryFinallyCanBeTryWithResources", "TryWithIdenticalCatches", "UnnecessaryBoxing", "UnnecessaryUnboxing", "UnusedAssignment"})
            public static class MessageBuffer
                    extends    com.tangosol.coherence.component.util.NameService.TcpAcceptor.MessageBuffer
                {
                // ---- Fields declarations ----
                
                // Default constructor
                public MessageBuffer()
                    {
                    this(null, null, true);
                    }
                
                // Initializing constructor
                public MessageBuffer(String sName, com.tangosol.coherence.Component compParent, boolean fInit)
                    {
                    super(sName, compParent, false);
                    
                    if (fInit)
                        {
                        __init();
                        }
                    }
                
                // Main initializer
                public void __init()
                    {
                    // private initialization
                    __initPrivate();
                    
                    
                    // signal the end of the initialization
                    set_Constructed(true);
                    }
                
                // Private initializer
                protected void __initPrivate()
                    {
                    
                    super.__initPrivate();
                    }
                
                //++ getter for static property _Instance
                /**
                 * Getter for property _Instance.<p>
                * Auto generated
                 */
                public static com.tangosol.coherence.Component get_Instance()
                    {
                    return new com.tangosol.coherence.component.net.Cluster.NameService.TcpAcceptor.MessageBuffer();
                    }
                
                //++ getter for static property _CLASS
                /**
                 * Getter for property _CLASS.<p>
                * Property with auto-generated accessor that returns the Class
                * object for a given component.
                 */
                public static Class get_CLASS()
                    {
                    Class clz;
                    try
                        {
                        clz = Class.forName("com.tangosol.coherence/component/net/Cluster$NameService$TcpAcceptor$MessageBuffer".replace('/', '.'));
                        }
                    catch (ClassNotFoundException e)
                        {
                        throw new NoClassDefFoundError(e.getMessage());
                        }
                    return clz;
                    }
                
                //++ getter for autogen property _Module
                /**
                 * This is an auto-generated method that returns the global
                * [design time] parent component.
                * 
                * Note: the class generator will ignore any custom
                * implementation for this behavior.
                 */
                private com.tangosol.coherence.Component get_Module()
                    {
                    return this.get_Parent().get_Parent().get_Parent();
                    }
                }

            // ---- class: com.tangosol.coherence.component.net.Cluster$NameService$TcpAcceptor$MessageFactory
            
            /**
             * MessageFactory implementation for version 2 of the
             * MessagingProtocol. This MessageFactory contains Message classes
             * necessary to manage the lifecycle of Connections and Channels.
             *  
             * The type identifiers of the Message classes instantiated by this
             * MessageFactory are organized as follows:
             * 
             * Internal (<0):
             * 
             * (-1)  AcceptChannel
             * (-2)  CloseChannel
             * (-3)  CloseConnection
             * (-4)  CreateChannel
             * (-5)  NotifyShutdown
             * (-6)  NotifyStartup
             * (-7)  OpenChannel
             * (-8)  OpenConnection
             * (-9)  Response
             * (-10) EncodedMessage
             * 
             * Connection Lifecycle (0 - 10):
             * 
             * (0)  OpenConnectionResponse (*)
             * (1)  OpenConnectionRequest
             * (3)  PingRequest
             * (4)  PingResponse
             * (10) NotifyConnectionClosed
             * 
             * * The OpenConnectionResponse has type identifier 0 for
             * historical reasons. Prior to version 2 of the Messaging
             * Protocol, all Request messages used a common Response type with
             * type identifier 0. Since the first Response that a client
             * expects to receive is an OpenConnectionResponse, this allows
             * version 2 and newer servers to rejects connection attempts from
             * version 1 clients.
             * 
             * Channel Lifecycle (11-20):
             * 
             * (11) OpenChannelRequest
             * (12) OpenChannelResponse
             * (13) AcceptChannelRequest
             * (14) AcceptChannelResponse
             * (20) NotifyChannelClosed
             */
            @SuppressWarnings({"deprecation", "rawtypes", "unused", "unchecked", "ConstantConditions", "DuplicatedCode", "ForLoopReplaceableByForEach", "IfCanBeSwitch", "RedundantArrayCreation", "RedundantSuppression", "SameParameterValue", "TryFinallyCanBeTryWithResources", "TryWithIdenticalCatches", "UnnecessaryBoxing", "UnnecessaryUnboxing", "UnusedAssignment"})
            public static class MessageFactory
                    extends    com.tangosol.coherence.component.util.NameService.TcpAcceptor.MessageFactory
                {
                // ---- Fields declarations ----
                private static com.tangosol.util.ListMap __mapChildren;
                
                // Static initializer
                static
                    {
                    __initStatic();
                    }
                
                // Default static initializer
                private static void __initStatic()
                    {
                    // register child classes
                    __mapChildren = new com.tangosol.util.ListMap();
                    __mapChildren.put("AcceptChannel", Cluster.NameService.TcpAcceptor.MessageFactory.AcceptChannel.get_CLASS());
                    __mapChildren.put("AcceptChannelRequest", Cluster.NameService.TcpAcceptor.MessageFactory.AcceptChannelRequest.get_CLASS());
                    __mapChildren.put("AcceptChannelResponse", Cluster.NameService.TcpAcceptor.MessageFactory.AcceptChannelResponse.get_CLASS());
                    __mapChildren.put("CloseChannel", Cluster.NameService.TcpAcceptor.MessageFactory.CloseChannel.get_CLASS());
                    __mapChildren.put("CloseConnection", Cluster.NameService.TcpAcceptor.MessageFactory.CloseConnection.get_CLASS());
                    __mapChildren.put("CreateChannel", Cluster.NameService.TcpAcceptor.MessageFactory.CreateChannel.get_CLASS());
                    __mapChildren.put("EncodedMessage", Cluster.NameService.TcpAcceptor.MessageFactory.EncodedMessage.get_CLASS());
                    __mapChildren.put("NotifyChannelClosed", Cluster.NameService.TcpAcceptor.MessageFactory.NotifyChannelClosed.get_CLASS());
                    __mapChildren.put("NotifyConnectionClosed", Cluster.NameService.TcpAcceptor.MessageFactory.NotifyConnectionClosed.get_CLASS());
                    __mapChildren.put("NotifyShutdown", Cluster.NameService.TcpAcceptor.MessageFactory.NotifyShutdown.get_CLASS());
                    __mapChildren.put("NotifyStartup", Cluster.NameService.TcpAcceptor.MessageFactory.NotifyStartup.get_CLASS());
                    __mapChildren.put("OpenChannel", Cluster.NameService.TcpAcceptor.MessageFactory.OpenChannel.get_CLASS());
                    __mapChildren.put("OpenChannelRequest", Cluster.NameService.TcpAcceptor.MessageFactory.OpenChannelRequest.get_CLASS());
                    __mapChildren.put("OpenChannelResponse", Cluster.NameService.TcpAcceptor.MessageFactory.OpenChannelResponse.get_CLASS());
                    __mapChildren.put("OpenConnection", Cluster.NameService.TcpAcceptor.MessageFactory.OpenConnection.get_CLASS());
                    __mapChildren.put("OpenConnectionRequest", Cluster.NameService.TcpAcceptor.MessageFactory.OpenConnectionRequest.get_CLASS());
                    __mapChildren.put("OpenConnectionResponse", Cluster.NameService.TcpAcceptor.MessageFactory.OpenConnectionResponse.get_CLASS());
                    __mapChildren.put("PingRequest", Cluster.NameService.TcpAcceptor.MessageFactory.PingRequest.get_CLASS());
                    __mapChildren.put("PingResponse", Cluster.NameService.TcpAcceptor.MessageFactory.PingResponse.get_CLASS());
                    __mapChildren.put("Response", Cluster.NameService.TcpAcceptor.MessageFactory.Response.get_CLASS());
                    }
                
                // Default constructor
                public MessageFactory()
                    {
                    this(null, null, true);
                    }
                
                // Initializing constructor
                public MessageFactory(String sName, com.tangosol.coherence.Component compParent, boolean fInit)
                    {
                    super(sName, compParent, false);
                    
                    if (fInit)
                        {
                        __init();
                        }
                    }
                
                // Main initializer
                public void __init()
                    {
                    // private initialization
                    __initPrivate();
                    
                    
                    // containment initialization: children
                    
                    // signal the end of the initialization
                    set_Constructed(true);
                    }
                
                // Private initializer
                protected void __initPrivate()
                    {
                    
                    super.__initPrivate();
                    }
                
                //++ getter for static property _Instance
                /**
                 * Getter for property _Instance.<p>
                * Auto generated
                 */
                public static com.tangosol.coherence.Component get_Instance()
                    {
                    return new com.tangosol.coherence.component.net.Cluster.NameService.TcpAcceptor.MessageFactory();
                    }
                
                //++ getter for static property _CLASS
                /**
                 * Getter for property _CLASS.<p>
                * Property with auto-generated accessor that returns the Class
                * object for a given component.
                 */
                public static Class get_CLASS()
                    {
                    Class clz;
                    try
                        {
                        clz = Class.forName("com.tangosol.coherence/component/net/Cluster$NameService$TcpAcceptor$MessageFactory".replace('/', '.'));
                        }
                    catch (ClassNotFoundException e)
                        {
                        throw new NoClassDefFoundError(e.getMessage());
                        }
                    return clz;
                    }
                
                //++ getter for autogen property _Module
                /**
                 * This is an auto-generated method that returns the global
                * [design time] parent component.
                * 
                * Note: the class generator will ignore any custom
                * implementation for this behavior.
                 */
                private com.tangosol.coherence.Component get_Module()
                    {
                    return this.get_Parent().get_Parent().get_Parent();
                    }
                
                //++ getter for autogen property _ChildClasses
                /**
                 * This is an auto-generated method that returns the map of
                * design time [static] children.
                * 
                * Note: the class generator will ignore any custom
                * implementation for this behavior.
                 */
                protected java.util.Map get_ChildClasses()
                    {
                    return __mapChildren;
                    }

                // ---- class: com.tangosol.coherence.component.net.Cluster$NameService$TcpAcceptor$MessageFactory$AcceptChannel
                
                /**
                 * Internal Request used to accept a Channel.
                 */
                @SuppressWarnings({"deprecation", "rawtypes", "unused", "unchecked", "ConstantConditions", "DuplicatedCode", "ForLoopReplaceableByForEach", "IfCanBeSwitch", "RedundantArrayCreation", "RedundantSuppression", "SameParameterValue", "TryFinallyCanBeTryWithResources", "TryWithIdenticalCatches", "UnnecessaryBoxing", "UnnecessaryUnboxing", "UnusedAssignment"})
                public static class AcceptChannel
                        extends    com.tangosol.coherence.component.util.NameService.TcpAcceptor.MessageFactory.AcceptChannel
                    {
                    // ---- Fields declarations ----
                    private static com.tangosol.util.ListMap __mapChildren;
                    
                    // Static initializer
                    static
                        {
                        __initStatic();
                        }
                    
                    // Default static initializer
                    private static void __initStatic()
                        {
                        // register child classes
                        __mapChildren = new com.tangosol.util.ListMap();
                        __mapChildren.put("Status", Cluster.NameService.TcpAcceptor.MessageFactory.AcceptChannel.Status.get_CLASS());
                        }
                    
                    // Default constructor
                    public AcceptChannel()
                        {
                        this(null, null, true);
                        }
                    
                    // Initializing constructor
                    public AcceptChannel(String sName, com.tangosol.coherence.Component compParent, boolean fInit)
                        {
                        super(sName, compParent, false);
                        
                        if (fInit)
                            {
                            __init();
                            }
                        }
                    
                    // Main initializer
                    public void __init()
                        {
                        // private initialization
                        __initPrivate();
                        
                        
                        // containment initialization: children
                        
                        // signal the end of the initialization
                        set_Constructed(true);
                        }
                    
                    // Private initializer
                    protected void __initPrivate()
                        {
                        
                        super.__initPrivate();
                        }
                    
                    //++ getter for static property _Instance
                    /**
                     * Getter for property _Instance.<p>
                    * Auto generated
                     */
                    public static com.tangosol.coherence.Component get_Instance()
                        {
                        return new com.tangosol.coherence.component.net.Cluster.NameService.TcpAcceptor.MessageFactory.AcceptChannel();
                        }
                    
                    //++ getter for static property _CLASS
                    /**
                     * Getter for property _CLASS.<p>
                    * Property with auto-generated accessor that returns the
                    * Class object for a given component.
                     */
                    public static Class get_CLASS()
                        {
                        Class clz;
                        try
                            {
                            clz = Class.forName("com.tangosol.coherence/component/net/Cluster$NameService$TcpAcceptor$MessageFactory$AcceptChannel".replace('/', '.'));
                            }
                        catch (ClassNotFoundException e)
                            {
                            throw new NoClassDefFoundError(e.getMessage());
                            }
                        return clz;
                        }
                    
                    //++ getter for autogen property _Module
                    /**
                     * This is an auto-generated method that returns the global
                    * [design time] parent component.
                    * 
                    * Note: the class generator will ignore any custom
                    * implementation for this behavior.
                     */
                    private com.tangosol.coherence.Component get_Module()
                        {
                        return this.get_Parent().get_Parent().get_Parent().get_Parent();
                        }
                    
                    //++ getter for autogen property _ChildClasses
                    /**
                     * This is an auto-generated method that returns the map of
                    * design time [static] children.
                    * 
                    * Note: the class generator will ignore any custom
                    * implementation for this behavior.
                     */
                    protected java.util.Map get_ChildClasses()
                        {
                        return __mapChildren;
                        }

                    // ---- class: com.tangosol.coherence.component.net.Cluster$NameService$TcpAcceptor$MessageFactory$AcceptChannel$Status
                    
                    /**
                     * Implementation of the Request$Status interface.
                     */
                    @SuppressWarnings({"deprecation", "rawtypes", "unused", "unchecked", "ConstantConditions", "DuplicatedCode", "ForLoopReplaceableByForEach", "IfCanBeSwitch", "RedundantArrayCreation", "RedundantSuppression", "SameParameterValue", "TryFinallyCanBeTryWithResources", "TryWithIdenticalCatches", "UnnecessaryBoxing", "UnnecessaryUnboxing", "UnusedAssignment"})
                    public static class Status
                            extends    com.tangosol.coherence.component.util.NameService.TcpAcceptor.MessageFactory.AcceptChannel.Status
                        {
                        // ---- Fields declarations ----
                        
                        // Default constructor
                        public Status()
                            {
                            this(null, null, true);
                            }
                        
                        // Initializing constructor
                        public Status(String sName, com.tangosol.coherence.Component compParent, boolean fInit)
                            {
                            super(sName, compParent, false);
                            
                            if (fInit)
                                {
                                __init();
                                }
                            }
                        
                        // Main initializer
                        public void __init()
                            {
                            // private initialization
                            __initPrivate();
                            
                            
                            // signal the end of the initialization
                            set_Constructed(true);
                            }
                        
                        // Private initializer
                        protected void __initPrivate()
                            {
                            
                            super.__initPrivate();
                            }
                        
                        //++ getter for static property _Instance
                        /**
                         * Getter for property _Instance.<p>
                        * Auto generated
                         */
                        public static com.tangosol.coherence.Component get_Instance()
                            {
                            return new com.tangosol.coherence.component.net.Cluster.NameService.TcpAcceptor.MessageFactory.AcceptChannel.Status();
                            }
                        
                        //++ getter for static property _CLASS
                        /**
                         * Getter for property _CLASS.<p>
                        * Property with auto-generated accessor that returns
                        * the Class object for a given component.
                         */
                        public static Class get_CLASS()
                            {
                            Class clz;
                            try
                                {
                                clz = Class.forName("com.tangosol.coherence/component/net/Cluster$NameService$TcpAcceptor$MessageFactory$AcceptChannel$Status".replace('/', '.'));
                                }
                            catch (ClassNotFoundException e)
                                {
                                throw new NoClassDefFoundError(e.getMessage());
                                }
                            return clz;
                            }
                        
                        //++ getter for autogen property _Module
                        /**
                         * This is an auto-generated method that returns the
                        * global [design time] parent component.
                        * 
                        * Note: the class generator will ignore any custom
                        * implementation for this behavior.
                         */
                        private com.tangosol.coherence.Component get_Module()
                            {
                            return this.get_Parent().get_Parent().get_Parent().get_Parent().get_Parent();
                            }
                        }
                    }

                // ---- class: com.tangosol.coherence.component.net.Cluster$NameService$TcpAcceptor$MessageFactory$AcceptChannelRequest
                
                /**
                 * This Request is used to accept a Channel that was spawned by
                 * a peer.
                 */
                @SuppressWarnings({"deprecation", "rawtypes", "unused", "unchecked", "ConstantConditions", "DuplicatedCode", "ForLoopReplaceableByForEach", "IfCanBeSwitch", "RedundantArrayCreation", "RedundantSuppression", "SameParameterValue", "TryFinallyCanBeTryWithResources", "TryWithIdenticalCatches", "UnnecessaryBoxing", "UnnecessaryUnboxing", "UnusedAssignment"})
                public static class AcceptChannelRequest
                        extends    com.tangosol.coherence.component.util.NameService.TcpAcceptor.MessageFactory.AcceptChannelRequest
                    {
                    // ---- Fields declarations ----
                    private static com.tangosol.util.ListMap __mapChildren;
                    
                    // Static initializer
                    static
                        {
                        __initStatic();
                        }
                    
                    // Default static initializer
                    private static void __initStatic()
                        {
                        // register child classes
                        __mapChildren = new com.tangosol.util.ListMap();
                        __mapChildren.put("Status", Cluster.NameService.TcpAcceptor.MessageFactory.AcceptChannelRequest.Status.get_CLASS());
                        }
                    
                    // Default constructor
                    public AcceptChannelRequest()
                        {
                        this(null, null, true);
                        }
                    
                    // Initializing constructor
                    public AcceptChannelRequest(String sName, com.tangosol.coherence.Component compParent, boolean fInit)
                        {
                        super(sName, compParent, false);
                        
                        if (fInit)
                            {
                            __init();
                            }
                        }
                    
                    // Main initializer
                    public void __init()
                        {
                        // private initialization
                        __initPrivate();
                        
                        
                        // containment initialization: children
                        
                        // signal the end of the initialization
                        set_Constructed(true);
                        }
                    
                    // Private initializer
                    protected void __initPrivate()
                        {
                        
                        super.__initPrivate();
                        }
                    
                    //++ getter for static property _Instance
                    /**
                     * Getter for property _Instance.<p>
                    * Auto generated
                     */
                    public static com.tangosol.coherence.Component get_Instance()
                        {
                        return new com.tangosol.coherence.component.net.Cluster.NameService.TcpAcceptor.MessageFactory.AcceptChannelRequest();
                        }
                    
                    //++ getter for static property _CLASS
                    /**
                     * Getter for property _CLASS.<p>
                    * Property with auto-generated accessor that returns the
                    * Class object for a given component.
                     */
                    public static Class get_CLASS()
                        {
                        Class clz;
                        try
                            {
                            clz = Class.forName("com.tangosol.coherence/component/net/Cluster$NameService$TcpAcceptor$MessageFactory$AcceptChannelRequest".replace('/', '.'));
                            }
                        catch (ClassNotFoundException e)
                            {
                            throw new NoClassDefFoundError(e.getMessage());
                            }
                        return clz;
                        }
                    
                    //++ getter for autogen property _Module
                    /**
                     * This is an auto-generated method that returns the global
                    * [design time] parent component.
                    * 
                    * Note: the class generator will ignore any custom
                    * implementation for this behavior.
                     */
                    private com.tangosol.coherence.Component get_Module()
                        {
                        return this.get_Parent().get_Parent().get_Parent().get_Parent();
                        }
                    
                    //++ getter for autogen property _ChildClasses
                    /**
                     * This is an auto-generated method that returns the map of
                    * design time [static] children.
                    * 
                    * Note: the class generator will ignore any custom
                    * implementation for this behavior.
                     */
                    protected java.util.Map get_ChildClasses()
                        {
                        return __mapChildren;
                        }

                    // ---- class: com.tangosol.coherence.component.net.Cluster$NameService$TcpAcceptor$MessageFactory$AcceptChannelRequest$Status
                    
                    /**
                     * Implementation of the Request$Status interface.
                     */
                    @SuppressWarnings({"deprecation", "rawtypes", "unused", "unchecked", "ConstantConditions", "DuplicatedCode", "ForLoopReplaceableByForEach", "IfCanBeSwitch", "RedundantArrayCreation", "RedundantSuppression", "SameParameterValue", "TryFinallyCanBeTryWithResources", "TryWithIdenticalCatches", "UnnecessaryBoxing", "UnnecessaryUnboxing", "UnusedAssignment"})
                    public static class Status
                            extends    com.tangosol.coherence.component.util.NameService.TcpAcceptor.MessageFactory.AcceptChannelRequest.Status
                        {
                        // ---- Fields declarations ----
                        
                        // Default constructor
                        public Status()
                            {
                            this(null, null, true);
                            }
                        
                        // Initializing constructor
                        public Status(String sName, com.tangosol.coherence.Component compParent, boolean fInit)
                            {
                            super(sName, compParent, false);
                            
                            if (fInit)
                                {
                                __init();
                                }
                            }
                        
                        // Main initializer
                        public void __init()
                            {
                            // private initialization
                            __initPrivate();
                            
                            
                            // signal the end of the initialization
                            set_Constructed(true);
                            }
                        
                        // Private initializer
                        protected void __initPrivate()
                            {
                            
                            super.__initPrivate();
                            }
                        
                        //++ getter for static property _Instance
                        /**
                         * Getter for property _Instance.<p>
                        * Auto generated
                         */
                        public static com.tangosol.coherence.Component get_Instance()
                            {
                            return new com.tangosol.coherence.component.net.Cluster.NameService.TcpAcceptor.MessageFactory.AcceptChannelRequest.Status();
                            }
                        
                        //++ getter for static property _CLASS
                        /**
                         * Getter for property _CLASS.<p>
                        * Property with auto-generated accessor that returns
                        * the Class object for a given component.
                         */
                        public static Class get_CLASS()
                            {
                            Class clz;
                            try
                                {
                                clz = Class.forName("com.tangosol.coherence/component/net/Cluster$NameService$TcpAcceptor$MessageFactory$AcceptChannelRequest$Status".replace('/', '.'));
                                }
                            catch (ClassNotFoundException e)
                                {
                                throw new NoClassDefFoundError(e.getMessage());
                                }
                            return clz;
                            }
                        
                        //++ getter for autogen property _Module
                        /**
                         * This is an auto-generated method that returns the
                        * global [design time] parent component.
                        * 
                        * Note: the class generator will ignore any custom
                        * implementation for this behavior.
                         */
                        private com.tangosol.coherence.Component get_Module()
                            {
                            return this.get_Parent().get_Parent().get_Parent().get_Parent().get_Parent();
                            }
                        }
                    }

                // ---- class: com.tangosol.coherence.component.net.Cluster$NameService$TcpAcceptor$MessageFactory$AcceptChannelResponse
                
                /**
                 * Response to an AcceptChannelRequest.
                 */
                @SuppressWarnings({"deprecation", "rawtypes", "unused", "unchecked", "ConstantConditions", "DuplicatedCode", "ForLoopReplaceableByForEach", "IfCanBeSwitch", "RedundantArrayCreation", "RedundantSuppression", "SameParameterValue", "TryFinallyCanBeTryWithResources", "TryWithIdenticalCatches", "UnnecessaryBoxing", "UnnecessaryUnboxing", "UnusedAssignment"})
                public static class AcceptChannelResponse
                        extends    com.tangosol.coherence.component.util.NameService.TcpAcceptor.MessageFactory.AcceptChannelResponse
                    {
                    // ---- Fields declarations ----
                    
                    // Default constructor
                    public AcceptChannelResponse()
                        {
                        this(null, null, true);
                        }
                    
                    // Initializing constructor
                    public AcceptChannelResponse(String sName, com.tangosol.coherence.Component compParent, boolean fInit)
                        {
                        super(sName, compParent, false);
                        
                        if (fInit)
                            {
                            __init();
                            }
                        }
                    
                    // Main initializer
                    public void __init()
                        {
                        // private initialization
                        __initPrivate();
                        
                        
                        // signal the end of the initialization
                        set_Constructed(true);
                        }
                    
                    // Private initializer
                    protected void __initPrivate()
                        {
                        
                        super.__initPrivate();
                        }
                    
                    //++ getter for static property _Instance
                    /**
                     * Getter for property _Instance.<p>
                    * Auto generated
                     */
                    public static com.tangosol.coherence.Component get_Instance()
                        {
                        return new com.tangosol.coherence.component.net.Cluster.NameService.TcpAcceptor.MessageFactory.AcceptChannelResponse();
                        }
                    
                    //++ getter for static property _CLASS
                    /**
                     * Getter for property _CLASS.<p>
                    * Property with auto-generated accessor that returns the
                    * Class object for a given component.
                     */
                    public static Class get_CLASS()
                        {
                        Class clz;
                        try
                            {
                            clz = Class.forName("com.tangosol.coherence/component/net/Cluster$NameService$TcpAcceptor$MessageFactory$AcceptChannelResponse".replace('/', '.'));
                            }
                        catch (ClassNotFoundException e)
                            {
                            throw new NoClassDefFoundError(e.getMessage());
                            }
                        return clz;
                        }
                    
                    //++ getter for autogen property _Module
                    /**
                     * This is an auto-generated method that returns the global
                    * [design time] parent component.
                    * 
                    * Note: the class generator will ignore any custom
                    * implementation for this behavior.
                     */
                    private com.tangosol.coherence.Component get_Module()
                        {
                        return this.get_Parent().get_Parent().get_Parent().get_Parent();
                        }
                    }

                // ---- class: com.tangosol.coherence.component.net.Cluster$NameService$TcpAcceptor$MessageFactory$CloseChannel
                
                /**
                 * Internal Request used to close a Channel.
                 */
                @SuppressWarnings({"deprecation", "rawtypes", "unused", "unchecked", "ConstantConditions", "DuplicatedCode", "ForLoopReplaceableByForEach", "IfCanBeSwitch", "RedundantArrayCreation", "RedundantSuppression", "SameParameterValue", "TryFinallyCanBeTryWithResources", "TryWithIdenticalCatches", "UnnecessaryBoxing", "UnnecessaryUnboxing", "UnusedAssignment"})
                public static class CloseChannel
                        extends    com.tangosol.coherence.component.util.NameService.TcpAcceptor.MessageFactory.CloseChannel
                    {
                    // ---- Fields declarations ----
                    private static com.tangosol.util.ListMap __mapChildren;
                    
                    // Static initializer
                    static
                        {
                        __initStatic();
                        }
                    
                    // Default static initializer
                    private static void __initStatic()
                        {
                        // register child classes
                        __mapChildren = new com.tangosol.util.ListMap();
                        __mapChildren.put("Status", Cluster.NameService.TcpAcceptor.MessageFactory.CloseChannel.Status.get_CLASS());
                        }
                    
                    // Default constructor
                    public CloseChannel()
                        {
                        this(null, null, true);
                        }
                    
                    // Initializing constructor
                    public CloseChannel(String sName, com.tangosol.coherence.Component compParent, boolean fInit)
                        {
                        super(sName, compParent, false);
                        
                        if (fInit)
                            {
                            __init();
                            }
                        }
                    
                    // Main initializer
                    public void __init()
                        {
                        // private initialization
                        __initPrivate();
                        
                        
                        // containment initialization: children
                        
                        // signal the end of the initialization
                        set_Constructed(true);
                        }
                    
                    // Private initializer
                    protected void __initPrivate()
                        {
                        
                        super.__initPrivate();
                        }
                    
                    //++ getter for static property _Instance
                    /**
                     * Getter for property _Instance.<p>
                    * Auto generated
                     */
                    public static com.tangosol.coherence.Component get_Instance()
                        {
                        return new com.tangosol.coherence.component.net.Cluster.NameService.TcpAcceptor.MessageFactory.CloseChannel();
                        }
                    
                    //++ getter for static property _CLASS
                    /**
                     * Getter for property _CLASS.<p>
                    * Property with auto-generated accessor that returns the
                    * Class object for a given component.
                     */
                    public static Class get_CLASS()
                        {
                        Class clz;
                        try
                            {
                            clz = Class.forName("com.tangosol.coherence/component/net/Cluster$NameService$TcpAcceptor$MessageFactory$CloseChannel".replace('/', '.'));
                            }
                        catch (ClassNotFoundException e)
                            {
                            throw new NoClassDefFoundError(e.getMessage());
                            }
                        return clz;
                        }
                    
                    //++ getter for autogen property _Module
                    /**
                     * This is an auto-generated method that returns the global
                    * [design time] parent component.
                    * 
                    * Note: the class generator will ignore any custom
                    * implementation for this behavior.
                     */
                    private com.tangosol.coherence.Component get_Module()
                        {
                        return this.get_Parent().get_Parent().get_Parent().get_Parent();
                        }
                    
                    //++ getter for autogen property _ChildClasses
                    /**
                     * This is an auto-generated method that returns the map of
                    * design time [static] children.
                    * 
                    * Note: the class generator will ignore any custom
                    * implementation for this behavior.
                     */
                    protected java.util.Map get_ChildClasses()
                        {
                        return __mapChildren;
                        }

                    // ---- class: com.tangosol.coherence.component.net.Cluster$NameService$TcpAcceptor$MessageFactory$CloseChannel$Status
                    
                    /**
                     * Implementation of the Request$Status interface.
                     */
                    @SuppressWarnings({"deprecation", "rawtypes", "unused", "unchecked", "ConstantConditions", "DuplicatedCode", "ForLoopReplaceableByForEach", "IfCanBeSwitch", "RedundantArrayCreation", "RedundantSuppression", "SameParameterValue", "TryFinallyCanBeTryWithResources", "TryWithIdenticalCatches", "UnnecessaryBoxing", "UnnecessaryUnboxing", "UnusedAssignment"})
                    public static class Status
                            extends    com.tangosol.coherence.component.util.NameService.TcpAcceptor.MessageFactory.CloseChannel.Status
                        {
                        // ---- Fields declarations ----
                        
                        // Default constructor
                        public Status()
                            {
                            this(null, null, true);
                            }
                        
                        // Initializing constructor
                        public Status(String sName, com.tangosol.coherence.Component compParent, boolean fInit)
                            {
                            super(sName, compParent, false);
                            
                            if (fInit)
                                {
                                __init();
                                }
                            }
                        
                        // Main initializer
                        public void __init()
                            {
                            // private initialization
                            __initPrivate();
                            
                            
                            // signal the end of the initialization
                            set_Constructed(true);
                            }
                        
                        // Private initializer
                        protected void __initPrivate()
                            {
                            
                            super.__initPrivate();
                            }
                        
                        //++ getter for static property _Instance
                        /**
                         * Getter for property _Instance.<p>
                        * Auto generated
                         */
                        public static com.tangosol.coherence.Component get_Instance()
                            {
                            return new com.tangosol.coherence.component.net.Cluster.NameService.TcpAcceptor.MessageFactory.CloseChannel.Status();
                            }
                        
                        //++ getter for static property _CLASS
                        /**
                         * Getter for property _CLASS.<p>
                        * Property with auto-generated accessor that returns
                        * the Class object for a given component.
                         */
                        public static Class get_CLASS()
                            {
                            Class clz;
                            try
                                {
                                clz = Class.forName("com.tangosol.coherence/component/net/Cluster$NameService$TcpAcceptor$MessageFactory$CloseChannel$Status".replace('/', '.'));
                                }
                            catch (ClassNotFoundException e)
                                {
                                throw new NoClassDefFoundError(e.getMessage());
                                }
                            return clz;
                            }
                        
                        //++ getter for autogen property _Module
                        /**
                         * This is an auto-generated method that returns the
                        * global [design time] parent component.
                        * 
                        * Note: the class generator will ignore any custom
                        * implementation for this behavior.
                         */
                        private com.tangosol.coherence.Component get_Module()
                            {
                            return this.get_Parent().get_Parent().get_Parent().get_Parent().get_Parent();
                            }
                        }
                    }

                // ---- class: com.tangosol.coherence.component.net.Cluster$NameService$TcpAcceptor$MessageFactory$CloseConnection
                
                /**
                 * Internal Message used to close a Connection.
                 */
                @SuppressWarnings({"deprecation", "rawtypes", "unused", "unchecked", "ConstantConditions", "DuplicatedCode", "ForLoopReplaceableByForEach", "IfCanBeSwitch", "RedundantArrayCreation", "RedundantSuppression", "SameParameterValue", "TryFinallyCanBeTryWithResources", "TryWithIdenticalCatches", "UnnecessaryBoxing", "UnnecessaryUnboxing", "UnusedAssignment"})
                public static class CloseConnection
                        extends    com.tangosol.coherence.component.util.NameService.TcpAcceptor.MessageFactory.CloseConnection
                    {
                    // ---- Fields declarations ----
                    private static com.tangosol.util.ListMap __mapChildren;
                    
                    // Static initializer
                    static
                        {
                        __initStatic();
                        }
                    
                    // Default static initializer
                    private static void __initStatic()
                        {
                        // register child classes
                        __mapChildren = new com.tangosol.util.ListMap();
                        __mapChildren.put("Status", Cluster.NameService.TcpAcceptor.MessageFactory.CloseConnection.Status.get_CLASS());
                        }
                    
                    // Default constructor
                    public CloseConnection()
                        {
                        this(null, null, true);
                        }
                    
                    // Initializing constructor
                    public CloseConnection(String sName, com.tangosol.coherence.Component compParent, boolean fInit)
                        {
                        super(sName, compParent, false);
                        
                        if (fInit)
                            {
                            __init();
                            }
                        }
                    
                    // Main initializer
                    public void __init()
                        {
                        // private initialization
                        __initPrivate();
                        
                        
                        // containment initialization: children
                        
                        // signal the end of the initialization
                        set_Constructed(true);
                        }
                    
                    // Private initializer
                    protected void __initPrivate()
                        {
                        
                        super.__initPrivate();
                        }
                    
                    //++ getter for static property _Instance
                    /**
                     * Getter for property _Instance.<p>
                    * Auto generated
                     */
                    public static com.tangosol.coherence.Component get_Instance()
                        {
                        return new com.tangosol.coherence.component.net.Cluster.NameService.TcpAcceptor.MessageFactory.CloseConnection();
                        }
                    
                    //++ getter for static property _CLASS
                    /**
                     * Getter for property _CLASS.<p>
                    * Property with auto-generated accessor that returns the
                    * Class object for a given component.
                     */
                    public static Class get_CLASS()
                        {
                        Class clz;
                        try
                            {
                            clz = Class.forName("com.tangosol.coherence/component/net/Cluster$NameService$TcpAcceptor$MessageFactory$CloseConnection".replace('/', '.'));
                            }
                        catch (ClassNotFoundException e)
                            {
                            throw new NoClassDefFoundError(e.getMessage());
                            }
                        return clz;
                        }
                    
                    //++ getter for autogen property _Module
                    /**
                     * This is an auto-generated method that returns the global
                    * [design time] parent component.
                    * 
                    * Note: the class generator will ignore any custom
                    * implementation for this behavior.
                     */
                    private com.tangosol.coherence.Component get_Module()
                        {
                        return this.get_Parent().get_Parent().get_Parent().get_Parent();
                        }
                    
                    //++ getter for autogen property _ChildClasses
                    /**
                     * This is an auto-generated method that returns the map of
                    * design time [static] children.
                    * 
                    * Note: the class generator will ignore any custom
                    * implementation for this behavior.
                     */
                    protected java.util.Map get_ChildClasses()
                        {
                        return __mapChildren;
                        }

                    // ---- class: com.tangosol.coherence.component.net.Cluster$NameService$TcpAcceptor$MessageFactory$CloseConnection$Status
                    
                    /**
                     * Implementation of the Request$Status interface.
                     */
                    @SuppressWarnings({"deprecation", "rawtypes", "unused", "unchecked", "ConstantConditions", "DuplicatedCode", "ForLoopReplaceableByForEach", "IfCanBeSwitch", "RedundantArrayCreation", "RedundantSuppression", "SameParameterValue", "TryFinallyCanBeTryWithResources", "TryWithIdenticalCatches", "UnnecessaryBoxing", "UnnecessaryUnboxing", "UnusedAssignment"})
                    public static class Status
                            extends    com.tangosol.coherence.component.util.NameService.TcpAcceptor.MessageFactory.CloseConnection.Status
                        {
                        // ---- Fields declarations ----
                        
                        // Default constructor
                        public Status()
                            {
                            this(null, null, true);
                            }
                        
                        // Initializing constructor
                        public Status(String sName, com.tangosol.coherence.Component compParent, boolean fInit)
                            {
                            super(sName, compParent, false);
                            
                            if (fInit)
                                {
                                __init();
                                }
                            }
                        
                        // Main initializer
                        public void __init()
                            {
                            // private initialization
                            __initPrivate();
                            
                            
                            // signal the end of the initialization
                            set_Constructed(true);
                            }
                        
                        // Private initializer
                        protected void __initPrivate()
                            {
                            
                            super.__initPrivate();
                            }
                        
                        //++ getter for static property _Instance
                        /**
                         * Getter for property _Instance.<p>
                        * Auto generated
                         */
                        public static com.tangosol.coherence.Component get_Instance()
                            {
                            return new com.tangosol.coherence.component.net.Cluster.NameService.TcpAcceptor.MessageFactory.CloseConnection.Status();
                            }
                        
                        //++ getter for static property _CLASS
                        /**
                         * Getter for property _CLASS.<p>
                        * Property with auto-generated accessor that returns
                        * the Class object for a given component.
                         */
                        public static Class get_CLASS()
                            {
                            Class clz;
                            try
                                {
                                clz = Class.forName("com.tangosol.coherence/component/net/Cluster$NameService$TcpAcceptor$MessageFactory$CloseConnection$Status".replace('/', '.'));
                                }
                            catch (ClassNotFoundException e)
                                {
                                throw new NoClassDefFoundError(e.getMessage());
                                }
                            return clz;
                            }
                        
                        //++ getter for autogen property _Module
                        /**
                         * This is an auto-generated method that returns the
                        * global [design time] parent component.
                        * 
                        * Note: the class generator will ignore any custom
                        * implementation for this behavior.
                         */
                        private com.tangosol.coherence.Component get_Module()
                            {
                            return this.get_Parent().get_Parent().get_Parent().get_Parent().get_Parent();
                            }
                        }
                    }

                // ---- class: com.tangosol.coherence.component.net.Cluster$NameService$TcpAcceptor$MessageFactory$CreateChannel
                
                /**
                 * Internal Request used to create a Channel.
                 */
                @SuppressWarnings({"deprecation", "rawtypes", "unused", "unchecked", "ConstantConditions", "DuplicatedCode", "ForLoopReplaceableByForEach", "IfCanBeSwitch", "RedundantArrayCreation", "RedundantSuppression", "SameParameterValue", "TryFinallyCanBeTryWithResources", "TryWithIdenticalCatches", "UnnecessaryBoxing", "UnnecessaryUnboxing", "UnusedAssignment"})
                public static class CreateChannel
                        extends    com.tangosol.coherence.component.util.NameService.TcpAcceptor.MessageFactory.CreateChannel
                    {
                    // ---- Fields declarations ----
                    private static com.tangosol.util.ListMap __mapChildren;
                    
                    // Static initializer
                    static
                        {
                        __initStatic();
                        }
                    
                    // Default static initializer
                    private static void __initStatic()
                        {
                        // register child classes
                        __mapChildren = new com.tangosol.util.ListMap();
                        __mapChildren.put("Status", Cluster.NameService.TcpAcceptor.MessageFactory.CreateChannel.Status.get_CLASS());
                        }
                    
                    // Default constructor
                    public CreateChannel()
                        {
                        this(null, null, true);
                        }
                    
                    // Initializing constructor
                    public CreateChannel(String sName, com.tangosol.coherence.Component compParent, boolean fInit)
                        {
                        super(sName, compParent, false);
                        
                        if (fInit)
                            {
                            __init();
                            }
                        }
                    
                    // Main initializer
                    public void __init()
                        {
                        // private initialization
                        __initPrivate();
                        
                        
                        // containment initialization: children
                        
                        // signal the end of the initialization
                        set_Constructed(true);
                        }
                    
                    // Private initializer
                    protected void __initPrivate()
                        {
                        
                        super.__initPrivate();
                        }
                    
                    //++ getter for static property _Instance
                    /**
                     * Getter for property _Instance.<p>
                    * Auto generated
                     */
                    public static com.tangosol.coherence.Component get_Instance()
                        {
                        return new com.tangosol.coherence.component.net.Cluster.NameService.TcpAcceptor.MessageFactory.CreateChannel();
                        }
                    
                    //++ getter for static property _CLASS
                    /**
                     * Getter for property _CLASS.<p>
                    * Property with auto-generated accessor that returns the
                    * Class object for a given component.
                     */
                    public static Class get_CLASS()
                        {
                        Class clz;
                        try
                            {
                            clz = Class.forName("com.tangosol.coherence/component/net/Cluster$NameService$TcpAcceptor$MessageFactory$CreateChannel".replace('/', '.'));
                            }
                        catch (ClassNotFoundException e)
                            {
                            throw new NoClassDefFoundError(e.getMessage());
                            }
                        return clz;
                        }
                    
                    //++ getter for autogen property _Module
                    /**
                     * This is an auto-generated method that returns the global
                    * [design time] parent component.
                    * 
                    * Note: the class generator will ignore any custom
                    * implementation for this behavior.
                     */
                    private com.tangosol.coherence.Component get_Module()
                        {
                        return this.get_Parent().get_Parent().get_Parent().get_Parent();
                        }
                    
                    //++ getter for autogen property _ChildClasses
                    /**
                     * This is an auto-generated method that returns the map of
                    * design time [static] children.
                    * 
                    * Note: the class generator will ignore any custom
                    * implementation for this behavior.
                     */
                    protected java.util.Map get_ChildClasses()
                        {
                        return __mapChildren;
                        }

                    // ---- class: com.tangosol.coherence.component.net.Cluster$NameService$TcpAcceptor$MessageFactory$CreateChannel$Status
                    
                    /**
                     * Implementation of the Request$Status interface.
                     */
                    @SuppressWarnings({"deprecation", "rawtypes", "unused", "unchecked", "ConstantConditions", "DuplicatedCode", "ForLoopReplaceableByForEach", "IfCanBeSwitch", "RedundantArrayCreation", "RedundantSuppression", "SameParameterValue", "TryFinallyCanBeTryWithResources", "TryWithIdenticalCatches", "UnnecessaryBoxing", "UnnecessaryUnboxing", "UnusedAssignment"})
                    public static class Status
                            extends    com.tangosol.coherence.component.util.NameService.TcpAcceptor.MessageFactory.CreateChannel.Status
                        {
                        // ---- Fields declarations ----
                        
                        // Default constructor
                        public Status()
                            {
                            this(null, null, true);
                            }
                        
                        // Initializing constructor
                        public Status(String sName, com.tangosol.coherence.Component compParent, boolean fInit)
                            {
                            super(sName, compParent, false);
                            
                            if (fInit)
                                {
                                __init();
                                }
                            }
                        
                        // Main initializer
                        public void __init()
                            {
                            // private initialization
                            __initPrivate();
                            
                            
                            // signal the end of the initialization
                            set_Constructed(true);
                            }
                        
                        // Private initializer
                        protected void __initPrivate()
                            {
                            
                            super.__initPrivate();
                            }
                        
                        //++ getter for static property _Instance
                        /**
                         * Getter for property _Instance.<p>
                        * Auto generated
                         */
                        public static com.tangosol.coherence.Component get_Instance()
                            {
                            return new com.tangosol.coherence.component.net.Cluster.NameService.TcpAcceptor.MessageFactory.CreateChannel.Status();
                            }
                        
                        //++ getter for static property _CLASS
                        /**
                         * Getter for property _CLASS.<p>
                        * Property with auto-generated accessor that returns
                        * the Class object for a given component.
                         */
                        public static Class get_CLASS()
                            {
                            Class clz;
                            try
                                {
                                clz = Class.forName("com.tangosol.coherence/component/net/Cluster$NameService$TcpAcceptor$MessageFactory$CreateChannel$Status".replace('/', '.'));
                                }
                            catch (ClassNotFoundException e)
                                {
                                throw new NoClassDefFoundError(e.getMessage());
                                }
                            return clz;
                            }
                        
                        //++ getter for autogen property _Module
                        /**
                         * This is an auto-generated method that returns the
                        * global [design time] parent component.
                        * 
                        * Note: the class generator will ignore any custom
                        * implementation for this behavior.
                         */
                        private com.tangosol.coherence.Component get_Module()
                            {
                            return this.get_Parent().get_Parent().get_Parent().get_Parent().get_Parent();
                            }
                        }
                    }

                // ---- class: com.tangosol.coherence.component.net.Cluster$NameService$TcpAcceptor$MessageFactory$EncodedMessage
                
                /**
                 * A Message with a ReadBuffer that contains an encoded
                 * Message. The service thread will decode the Message using
                 * the configured Codec before dispatching it for execution.
                 */
                @SuppressWarnings({"deprecation", "rawtypes", "unused", "unchecked", "ConstantConditions", "DuplicatedCode", "ForLoopReplaceableByForEach", "IfCanBeSwitch", "RedundantArrayCreation", "RedundantSuppression", "SameParameterValue", "TryFinallyCanBeTryWithResources", "TryWithIdenticalCatches", "UnnecessaryBoxing", "UnnecessaryUnboxing", "UnusedAssignment"})
                public static class EncodedMessage
                        extends    com.tangosol.coherence.component.util.NameService.TcpAcceptor.MessageFactory.EncodedMessage
                    {
                    // ---- Fields declarations ----
                    
                    // Default constructor
                    public EncodedMessage()
                        {
                        this(null, null, true);
                        }
                    
                    // Initializing constructor
                    public EncodedMessage(String sName, com.tangosol.coherence.Component compParent, boolean fInit)
                        {
                        super(sName, compParent, false);
                        
                        if (fInit)
                            {
                            __init();
                            }
                        }
                    
                    // Main initializer
                    public void __init()
                        {
                        // private initialization
                        __initPrivate();
                        
                        
                        // signal the end of the initialization
                        set_Constructed(true);
                        }
                    
                    // Private initializer
                    protected void __initPrivate()
                        {
                        
                        super.__initPrivate();
                        }
                    
                    //++ getter for static property _Instance
                    /**
                     * Getter for property _Instance.<p>
                    * Auto generated
                     */
                    public static com.tangosol.coherence.Component get_Instance()
                        {
                        return new com.tangosol.coherence.component.net.Cluster.NameService.TcpAcceptor.MessageFactory.EncodedMessage();
                        }
                    
                    //++ getter for static property _CLASS
                    /**
                     * Getter for property _CLASS.<p>
                    * Property with auto-generated accessor that returns the
                    * Class object for a given component.
                     */
                    public static Class get_CLASS()
                        {
                        Class clz;
                        try
                            {
                            clz = Class.forName("com.tangosol.coherence/component/net/Cluster$NameService$TcpAcceptor$MessageFactory$EncodedMessage".replace('/', '.'));
                            }
                        catch (ClassNotFoundException e)
                            {
                            throw new NoClassDefFoundError(e.getMessage());
                            }
                        return clz;
                        }
                    
                    //++ getter for autogen property _Module
                    /**
                     * This is an auto-generated method that returns the global
                    * [design time] parent component.
                    * 
                    * Note: the class generator will ignore any custom
                    * implementation for this behavior.
                     */
                    private com.tangosol.coherence.Component get_Module()
                        {
                        return this.get_Parent().get_Parent().get_Parent().get_Parent();
                        }
                    }

                // ---- class: com.tangosol.coherence.component.net.Cluster$NameService$TcpAcceptor$MessageFactory$NotifyChannelClosed
                
                /**
                 * This Message is sent to the peer when a Channel has been
                 * closed. This allows the peer to collect any resources held
                 * by the Channel.
                 */
                @SuppressWarnings({"deprecation", "rawtypes", "unused", "unchecked", "ConstantConditions", "DuplicatedCode", "ForLoopReplaceableByForEach", "IfCanBeSwitch", "RedundantArrayCreation", "RedundantSuppression", "SameParameterValue", "TryFinallyCanBeTryWithResources", "TryWithIdenticalCatches", "UnnecessaryBoxing", "UnnecessaryUnboxing", "UnusedAssignment"})
                public static class NotifyChannelClosed
                        extends    com.tangosol.coherence.component.util.NameService.TcpAcceptor.MessageFactory.NotifyChannelClosed
                    {
                    // ---- Fields declarations ----
                    
                    // Default constructor
                    public NotifyChannelClosed()
                        {
                        this(null, null, true);
                        }
                    
                    // Initializing constructor
                    public NotifyChannelClosed(String sName, com.tangosol.coherence.Component compParent, boolean fInit)
                        {
                        super(sName, compParent, false);
                        
                        if (fInit)
                            {
                            __init();
                            }
                        }
                    
                    // Main initializer
                    public void __init()
                        {
                        // private initialization
                        __initPrivate();
                        
                        
                        // signal the end of the initialization
                        set_Constructed(true);
                        }
                    
                    // Private initializer
                    protected void __initPrivate()
                        {
                        
                        super.__initPrivate();
                        }
                    
                    //++ getter for static property _Instance
                    /**
                     * Getter for property _Instance.<p>
                    * Auto generated
                     */
                    public static com.tangosol.coherence.Component get_Instance()
                        {
                        return new com.tangosol.coherence.component.net.Cluster.NameService.TcpAcceptor.MessageFactory.NotifyChannelClosed();
                        }
                    
                    //++ getter for static property _CLASS
                    /**
                     * Getter for property _CLASS.<p>
                    * Property with auto-generated accessor that returns the
                    * Class object for a given component.
                     */
                    public static Class get_CLASS()
                        {
                        Class clz;
                        try
                            {
                            clz = Class.forName("com.tangosol.coherence/component/net/Cluster$NameService$TcpAcceptor$MessageFactory$NotifyChannelClosed".replace('/', '.'));
                            }
                        catch (ClassNotFoundException e)
                            {
                            throw new NoClassDefFoundError(e.getMessage());
                            }
                        return clz;
                        }
                    
                    //++ getter for autogen property _Module
                    /**
                     * This is an auto-generated method that returns the global
                    * [design time] parent component.
                    * 
                    * Note: the class generator will ignore any custom
                    * implementation for this behavior.
                     */
                    private com.tangosol.coherence.Component get_Module()
                        {
                        return this.get_Parent().get_Parent().get_Parent().get_Parent();
                        }
                    }

                // ---- class: com.tangosol.coherence.component.net.Cluster$NameService$TcpAcceptor$MessageFactory$NotifyConnectionClosed
                
                /**
                 * This Message is sent to the peer when a Connection has been
                 * closed. This allows the peer to collect any resources held
                 * by the Connection.
                 */
                @SuppressWarnings({"deprecation", "rawtypes", "unused", "unchecked", "ConstantConditions", "DuplicatedCode", "ForLoopReplaceableByForEach", "IfCanBeSwitch", "RedundantArrayCreation", "RedundantSuppression", "SameParameterValue", "TryFinallyCanBeTryWithResources", "TryWithIdenticalCatches", "UnnecessaryBoxing", "UnnecessaryUnboxing", "UnusedAssignment"})
                public static class NotifyConnectionClosed
                        extends    com.tangosol.coherence.component.util.NameService.TcpAcceptor.MessageFactory.NotifyConnectionClosed
                    {
                    // ---- Fields declarations ----
                    
                    // Default constructor
                    public NotifyConnectionClosed()
                        {
                        this(null, null, true);
                        }
                    
                    // Initializing constructor
                    public NotifyConnectionClosed(String sName, com.tangosol.coherence.Component compParent, boolean fInit)
                        {
                        super(sName, compParent, false);
                        
                        if (fInit)
                            {
                            __init();
                            }
                        }
                    
                    // Main initializer
                    public void __init()
                        {
                        // private initialization
                        __initPrivate();
                        
                        
                        // signal the end of the initialization
                        set_Constructed(true);
                        }
                    
                    // Private initializer
                    protected void __initPrivate()
                        {
                        
                        super.__initPrivate();
                        }
                    
                    //++ getter for static property _Instance
                    /**
                     * Getter for property _Instance.<p>
                    * Auto generated
                     */
                    public static com.tangosol.coherence.Component get_Instance()
                        {
                        return new com.tangosol.coherence.component.net.Cluster.NameService.TcpAcceptor.MessageFactory.NotifyConnectionClosed();
                        }
                    
                    //++ getter for static property _CLASS
                    /**
                     * Getter for property _CLASS.<p>
                    * Property with auto-generated accessor that returns the
                    * Class object for a given component.
                     */
                    public static Class get_CLASS()
                        {
                        Class clz;
                        try
                            {
                            clz = Class.forName("com.tangosol.coherence/component/net/Cluster$NameService$TcpAcceptor$MessageFactory$NotifyConnectionClosed".replace('/', '.'));
                            }
                        catch (ClassNotFoundException e)
                            {
                            throw new NoClassDefFoundError(e.getMessage());
                            }
                        return clz;
                        }
                    
                    //++ getter for autogen property _Module
                    /**
                     * This is an auto-generated method that returns the global
                    * [design time] parent component.
                    * 
                    * Note: the class generator will ignore any custom
                    * implementation for this behavior.
                     */
                    private com.tangosol.coherence.Component get_Module()
                        {
                        return this.get_Parent().get_Parent().get_Parent().get_Parent();
                        }
                    }

                // ---- class: com.tangosol.coherence.component.net.Cluster$NameService$TcpAcceptor$MessageFactory$NotifyShutdown
                
                /**
                 * This internal Message is sent to a ConnectionManager it is
                 * supposed to shut down. The ConnectionManager must clean up
                 * and unregister itself. Note that the only task of the
                 * shut-down is to begin the process of shutting down the
                 * service; technically the ConnectionManager does not have to
                 * be stopped by the time the shutdown Message completes its
                 * processing, although the default implementation does stop it
                 * immediately.
                 */
                @SuppressWarnings({"deprecation", "rawtypes", "unused", "unchecked", "ConstantConditions", "DuplicatedCode", "ForLoopReplaceableByForEach", "IfCanBeSwitch", "RedundantArrayCreation", "RedundantSuppression", "SameParameterValue", "TryFinallyCanBeTryWithResources", "TryWithIdenticalCatches", "UnnecessaryBoxing", "UnnecessaryUnboxing", "UnusedAssignment"})
                public static class NotifyShutdown
                        extends    com.tangosol.coherence.component.util.NameService.TcpAcceptor.MessageFactory.NotifyShutdown
                    {
                    // ---- Fields declarations ----
                    
                    // Default constructor
                    public NotifyShutdown()
                        {
                        this(null, null, true);
                        }
                    
                    // Initializing constructor
                    public NotifyShutdown(String sName, com.tangosol.coherence.Component compParent, boolean fInit)
                        {
                        super(sName, compParent, false);
                        
                        if (fInit)
                            {
                            __init();
                            }
                        }
                    
                    // Main initializer
                    public void __init()
                        {
                        // private initialization
                        __initPrivate();
                        
                        
                        // signal the end of the initialization
                        set_Constructed(true);
                        }
                    
                    // Private initializer
                    protected void __initPrivate()
                        {
                        
                        super.__initPrivate();
                        }
                    
                    //++ getter for static property _Instance
                    /**
                     * Getter for property _Instance.<p>
                    * Auto generated
                     */
                    public static com.tangosol.coherence.Component get_Instance()
                        {
                        return new com.tangosol.coherence.component.net.Cluster.NameService.TcpAcceptor.MessageFactory.NotifyShutdown();
                        }
                    
                    //++ getter for static property _CLASS
                    /**
                     * Getter for property _CLASS.<p>
                    * Property with auto-generated accessor that returns the
                    * Class object for a given component.
                     */
                    public static Class get_CLASS()
                        {
                        Class clz;
                        try
                            {
                            clz = Class.forName("com.tangosol.coherence/component/net/Cluster$NameService$TcpAcceptor$MessageFactory$NotifyShutdown".replace('/', '.'));
                            }
                        catch (ClassNotFoundException e)
                            {
                            throw new NoClassDefFoundError(e.getMessage());
                            }
                        return clz;
                        }
                    
                    //++ getter for autogen property _Module
                    /**
                     * This is an auto-generated method that returns the global
                    * [design time] parent component.
                    * 
                    * Note: the class generator will ignore any custom
                    * implementation for this behavior.
                     */
                    private com.tangosol.coherence.Component get_Module()
                        {
                        return this.get_Parent().get_Parent().get_Parent().get_Parent();
                        }
                    }

                // ---- class: com.tangosol.coherence.component.net.Cluster$NameService$TcpAcceptor$MessageFactory$NotifyStartup
                
                /**
                 * This internal Message is sent to a ConnectionManager when it
                 * first has been started.
                 */
                @SuppressWarnings({"deprecation", "rawtypes", "unused", "unchecked", "ConstantConditions", "DuplicatedCode", "ForLoopReplaceableByForEach", "IfCanBeSwitch", "RedundantArrayCreation", "RedundantSuppression", "SameParameterValue", "TryFinallyCanBeTryWithResources", "TryWithIdenticalCatches", "UnnecessaryBoxing", "UnnecessaryUnboxing", "UnusedAssignment"})
                public static class NotifyStartup
                        extends    com.tangosol.coherence.component.util.NameService.TcpAcceptor.MessageFactory.NotifyStartup
                    {
                    // ---- Fields declarations ----
                    
                    // Default constructor
                    public NotifyStartup()
                        {
                        this(null, null, true);
                        }
                    
                    // Initializing constructor
                    public NotifyStartup(String sName, com.tangosol.coherence.Component compParent, boolean fInit)
                        {
                        super(sName, compParent, false);
                        
                        if (fInit)
                            {
                            __init();
                            }
                        }
                    
                    // Main initializer
                    public void __init()
                        {
                        // private initialization
                        __initPrivate();
                        
                        
                        // signal the end of the initialization
                        set_Constructed(true);
                        }
                    
                    // Private initializer
                    protected void __initPrivate()
                        {
                        
                        super.__initPrivate();
                        }
                    
                    //++ getter for static property _Instance
                    /**
                     * Getter for property _Instance.<p>
                    * Auto generated
                     */
                    public static com.tangosol.coherence.Component get_Instance()
                        {
                        return new com.tangosol.coherence.component.net.Cluster.NameService.TcpAcceptor.MessageFactory.NotifyStartup();
                        }
                    
                    //++ getter for static property _CLASS
                    /**
                     * Getter for property _CLASS.<p>
                    * Property with auto-generated accessor that returns the
                    * Class object for a given component.
                     */
                    public static Class get_CLASS()
                        {
                        Class clz;
                        try
                            {
                            clz = Class.forName("com.tangosol.coherence/component/net/Cluster$NameService$TcpAcceptor$MessageFactory$NotifyStartup".replace('/', '.'));
                            }
                        catch (ClassNotFoundException e)
                            {
                            throw new NoClassDefFoundError(e.getMessage());
                            }
                        return clz;
                        }
                    
                    //++ getter for autogen property _Module
                    /**
                     * This is an auto-generated method that returns the global
                    * [design time] parent component.
                    * 
                    * Note: the class generator will ignore any custom
                    * implementation for this behavior.
                     */
                    private com.tangosol.coherence.Component get_Module()
                        {
                        return this.get_Parent().get_Parent().get_Parent().get_Parent();
                        }
                    }

                // ---- class: com.tangosol.coherence.component.net.Cluster$NameService$TcpAcceptor$MessageFactory$OpenChannel
                
                /**
                 * Internal Request used to open a Channel.
                 */
                @SuppressWarnings({"deprecation", "rawtypes", "unused", "unchecked", "ConstantConditions", "DuplicatedCode", "ForLoopReplaceableByForEach", "IfCanBeSwitch", "RedundantArrayCreation", "RedundantSuppression", "SameParameterValue", "TryFinallyCanBeTryWithResources", "TryWithIdenticalCatches", "UnnecessaryBoxing", "UnnecessaryUnboxing", "UnusedAssignment"})
                public static class OpenChannel
                        extends    com.tangosol.coherence.component.util.NameService.TcpAcceptor.MessageFactory.OpenChannel
                    {
                    // ---- Fields declarations ----
                    private static com.tangosol.util.ListMap __mapChildren;
                    
                    // Static initializer
                    static
                        {
                        __initStatic();
                        }
                    
                    // Default static initializer
                    private static void __initStatic()
                        {
                        // register child classes
                        __mapChildren = new com.tangosol.util.ListMap();
                        __mapChildren.put("Status", Cluster.NameService.TcpAcceptor.MessageFactory.OpenChannel.Status.get_CLASS());
                        }
                    
                    // Default constructor
                    public OpenChannel()
                        {
                        this(null, null, true);
                        }
                    
                    // Initializing constructor
                    public OpenChannel(String sName, com.tangosol.coherence.Component compParent, boolean fInit)
                        {
                        super(sName, compParent, false);
                        
                        if (fInit)
                            {
                            __init();
                            }
                        }
                    
                    // Main initializer
                    public void __init()
                        {
                        // private initialization
                        __initPrivate();
                        
                        
                        // containment initialization: children
                        
                        // signal the end of the initialization
                        set_Constructed(true);
                        }
                    
                    // Private initializer
                    protected void __initPrivate()
                        {
                        
                        super.__initPrivate();
                        }
                    
                    //++ getter for static property _Instance
                    /**
                     * Getter for property _Instance.<p>
                    * Auto generated
                     */
                    public static com.tangosol.coherence.Component get_Instance()
                        {
                        return new com.tangosol.coherence.component.net.Cluster.NameService.TcpAcceptor.MessageFactory.OpenChannel();
                        }
                    
                    //++ getter for static property _CLASS
                    /**
                     * Getter for property _CLASS.<p>
                    * Property with auto-generated accessor that returns the
                    * Class object for a given component.
                     */
                    public static Class get_CLASS()
                        {
                        Class clz;
                        try
                            {
                            clz = Class.forName("com.tangosol.coherence/component/net/Cluster$NameService$TcpAcceptor$MessageFactory$OpenChannel".replace('/', '.'));
                            }
                        catch (ClassNotFoundException e)
                            {
                            throw new NoClassDefFoundError(e.getMessage());
                            }
                        return clz;
                        }
                    
                    //++ getter for autogen property _Module
                    /**
                     * This is an auto-generated method that returns the global
                    * [design time] parent component.
                    * 
                    * Note: the class generator will ignore any custom
                    * implementation for this behavior.
                     */
                    private com.tangosol.coherence.Component get_Module()
                        {
                        return this.get_Parent().get_Parent().get_Parent().get_Parent();
                        }
                    
                    //++ getter for autogen property _ChildClasses
                    /**
                     * This is an auto-generated method that returns the map of
                    * design time [static] children.
                    * 
                    * Note: the class generator will ignore any custom
                    * implementation for this behavior.
                     */
                    protected java.util.Map get_ChildClasses()
                        {
                        return __mapChildren;
                        }

                    // ---- class: com.tangosol.coherence.component.net.Cluster$NameService$TcpAcceptor$MessageFactory$OpenChannel$Status
                    
                    /**
                     * Implementation of the Request$Status interface.
                     */
                    @SuppressWarnings({"deprecation", "rawtypes", "unused", "unchecked", "ConstantConditions", "DuplicatedCode", "ForLoopReplaceableByForEach", "IfCanBeSwitch", "RedundantArrayCreation", "RedundantSuppression", "SameParameterValue", "TryFinallyCanBeTryWithResources", "TryWithIdenticalCatches", "UnnecessaryBoxing", "UnnecessaryUnboxing", "UnusedAssignment"})
                    public static class Status
                            extends    com.tangosol.coherence.component.util.NameService.TcpAcceptor.MessageFactory.OpenChannel.Status
                        {
                        // ---- Fields declarations ----
                        
                        // Default constructor
                        public Status()
                            {
                            this(null, null, true);
                            }
                        
                        // Initializing constructor
                        public Status(String sName, com.tangosol.coherence.Component compParent, boolean fInit)
                            {
                            super(sName, compParent, false);
                            
                            if (fInit)
                                {
                                __init();
                                }
                            }
                        
                        // Main initializer
                        public void __init()
                            {
                            // private initialization
                            __initPrivate();
                            
                            
                            // signal the end of the initialization
                            set_Constructed(true);
                            }
                        
                        // Private initializer
                        protected void __initPrivate()
                            {
                            
                            super.__initPrivate();
                            }
                        
                        //++ getter for static property _Instance
                        /**
                         * Getter for property _Instance.<p>
                        * Auto generated
                         */
                        public static com.tangosol.coherence.Component get_Instance()
                            {
                            return new com.tangosol.coherence.component.net.Cluster.NameService.TcpAcceptor.MessageFactory.OpenChannel.Status();
                            }
                        
                        //++ getter for static property _CLASS
                        /**
                         * Getter for property _CLASS.<p>
                        * Property with auto-generated accessor that returns
                        * the Class object for a given component.
                         */
                        public static Class get_CLASS()
                            {
                            Class clz;
                            try
                                {
                                clz = Class.forName("com.tangosol.coherence/component/net/Cluster$NameService$TcpAcceptor$MessageFactory$OpenChannel$Status".replace('/', '.'));
                                }
                            catch (ClassNotFoundException e)
                                {
                                throw new NoClassDefFoundError(e.getMessage());
                                }
                            return clz;
                            }
                        
                        //++ getter for autogen property _Module
                        /**
                         * This is an auto-generated method that returns the
                        * global [design time] parent component.
                        * 
                        * Note: the class generator will ignore any custom
                        * implementation for this behavior.
                         */
                        private com.tangosol.coherence.Component get_Module()
                            {
                            return this.get_Parent().get_Parent().get_Parent().get_Parent().get_Parent();
                            }
                        }
                    }

                // ---- class: com.tangosol.coherence.component.net.Cluster$NameService$TcpAcceptor$MessageFactory$OpenChannelRequest
                
                /**
                 * This Request is used to open a new Channel.
                 */
                @SuppressWarnings({"deprecation", "rawtypes", "unused", "unchecked", "ConstantConditions", "DuplicatedCode", "ForLoopReplaceableByForEach", "IfCanBeSwitch", "RedundantArrayCreation", "RedundantSuppression", "SameParameterValue", "TryFinallyCanBeTryWithResources", "TryWithIdenticalCatches", "UnnecessaryBoxing", "UnnecessaryUnboxing", "UnusedAssignment"})
                public static class OpenChannelRequest
                        extends    com.tangosol.coherence.component.util.NameService.TcpAcceptor.MessageFactory.OpenChannelRequest
                    {
                    // ---- Fields declarations ----
                    private static com.tangosol.util.ListMap __mapChildren;
                    
                    // Static initializer
                    static
                        {
                        __initStatic();
                        }
                    
                    // Default static initializer
                    private static void __initStatic()
                        {
                        // register child classes
                        __mapChildren = new com.tangosol.util.ListMap();
                        __mapChildren.put("Status", Cluster.NameService.TcpAcceptor.MessageFactory.OpenChannelRequest.Status.get_CLASS());
                        }
                    
                    // Default constructor
                    public OpenChannelRequest()
                        {
                        this(null, null, true);
                        }
                    
                    // Initializing constructor
                    public OpenChannelRequest(String sName, com.tangosol.coherence.Component compParent, boolean fInit)
                        {
                        super(sName, compParent, false);
                        
                        if (fInit)
                            {
                            __init();
                            }
                        }
                    
                    // Main initializer
                    public void __init()
                        {
                        // private initialization
                        __initPrivate();
                        
                        
                        // containment initialization: children
                        
                        // signal the end of the initialization
                        set_Constructed(true);
                        }
                    
                    // Private initializer
                    protected void __initPrivate()
                        {
                        
                        super.__initPrivate();
                        }
                    
                    //++ getter for static property _Instance
                    /**
                     * Getter for property _Instance.<p>
                    * Auto generated
                     */
                    public static com.tangosol.coherence.Component get_Instance()
                        {
                        return new com.tangosol.coherence.component.net.Cluster.NameService.TcpAcceptor.MessageFactory.OpenChannelRequest();
                        }
                    
                    //++ getter for static property _CLASS
                    /**
                     * Getter for property _CLASS.<p>
                    * Property with auto-generated accessor that returns the
                    * Class object for a given component.
                     */
                    public static Class get_CLASS()
                        {
                        Class clz;
                        try
                            {
                            clz = Class.forName("com.tangosol.coherence/component/net/Cluster$NameService$TcpAcceptor$MessageFactory$OpenChannelRequest".replace('/', '.'));
                            }
                        catch (ClassNotFoundException e)
                            {
                            throw new NoClassDefFoundError(e.getMessage());
                            }
                        return clz;
                        }
                    
                    //++ getter for autogen property _Module
                    /**
                     * This is an auto-generated method that returns the global
                    * [design time] parent component.
                    * 
                    * Note: the class generator will ignore any custom
                    * implementation for this behavior.
                     */
                    private com.tangosol.coherence.Component get_Module()
                        {
                        return this.get_Parent().get_Parent().get_Parent().get_Parent();
                        }
                    
                    //++ getter for autogen property _ChildClasses
                    /**
                     * This is an auto-generated method that returns the map of
                    * design time [static] children.
                    * 
                    * Note: the class generator will ignore any custom
                    * implementation for this behavior.
                     */
                    protected java.util.Map get_ChildClasses()
                        {
                        return __mapChildren;
                        }

                    // ---- class: com.tangosol.coherence.component.net.Cluster$NameService$TcpAcceptor$MessageFactory$OpenChannelRequest$Status
                    
                    /**
                     * Implementation of the Request$Status interface.
                     */
                    @SuppressWarnings({"deprecation", "rawtypes", "unused", "unchecked", "ConstantConditions", "DuplicatedCode", "ForLoopReplaceableByForEach", "IfCanBeSwitch", "RedundantArrayCreation", "RedundantSuppression", "SameParameterValue", "TryFinallyCanBeTryWithResources", "TryWithIdenticalCatches", "UnnecessaryBoxing", "UnnecessaryUnboxing", "UnusedAssignment"})
                    public static class Status
                            extends    com.tangosol.coherence.component.util.NameService.TcpAcceptor.MessageFactory.OpenChannelRequest.Status
                        {
                        // ---- Fields declarations ----
                        
                        // Default constructor
                        public Status()
                            {
                            this(null, null, true);
                            }
                        
                        // Initializing constructor
                        public Status(String sName, com.tangosol.coherence.Component compParent, boolean fInit)
                            {
                            super(sName, compParent, false);
                            
                            if (fInit)
                                {
                                __init();
                                }
                            }
                        
                        // Main initializer
                        public void __init()
                            {
                            // private initialization
                            __initPrivate();
                            
                            
                            // signal the end of the initialization
                            set_Constructed(true);
                            }
                        
                        // Private initializer
                        protected void __initPrivate()
                            {
                            
                            super.__initPrivate();
                            }
                        
                        //++ getter for static property _Instance
                        /**
                         * Getter for property _Instance.<p>
                        * Auto generated
                         */
                        public static com.tangosol.coherence.Component get_Instance()
                            {
                            return new com.tangosol.coherence.component.net.Cluster.NameService.TcpAcceptor.MessageFactory.OpenChannelRequest.Status();
                            }
                        
                        //++ getter for static property _CLASS
                        /**
                         * Getter for property _CLASS.<p>
                        * Property with auto-generated accessor that returns
                        * the Class object for a given component.
                         */
                        public static Class get_CLASS()
                            {
                            Class clz;
                            try
                                {
                                clz = Class.forName("com.tangosol.coherence/component/net/Cluster$NameService$TcpAcceptor$MessageFactory$OpenChannelRequest$Status".replace('/', '.'));
                                }
                            catch (ClassNotFoundException e)
                                {
                                throw new NoClassDefFoundError(e.getMessage());
                                }
                            return clz;
                            }
                        
                        //++ getter for autogen property _Module
                        /**
                         * This is an auto-generated method that returns the
                        * global [design time] parent component.
                        * 
                        * Note: the class generator will ignore any custom
                        * implementation for this behavior.
                         */
                        private com.tangosol.coherence.Component get_Module()
                            {
                            return this.get_Parent().get_Parent().get_Parent().get_Parent().get_Parent();
                            }
                        }
                    }

                // ---- class: com.tangosol.coherence.component.net.Cluster$NameService$TcpAcceptor$MessageFactory$OpenChannelResponse
                
                /**
                 * Response to an OpenChannelRequest.
                 */
                @SuppressWarnings({"deprecation", "rawtypes", "unused", "unchecked", "ConstantConditions", "DuplicatedCode", "ForLoopReplaceableByForEach", "IfCanBeSwitch", "RedundantArrayCreation", "RedundantSuppression", "SameParameterValue", "TryFinallyCanBeTryWithResources", "TryWithIdenticalCatches", "UnnecessaryBoxing", "UnnecessaryUnboxing", "UnusedAssignment"})
                public static class OpenChannelResponse
                        extends    com.tangosol.coherence.component.util.NameService.TcpAcceptor.MessageFactory.OpenChannelResponse
                    {
                    // ---- Fields declarations ----
                    
                    // Default constructor
                    public OpenChannelResponse()
                        {
                        this(null, null, true);
                        }
                    
                    // Initializing constructor
                    public OpenChannelResponse(String sName, com.tangosol.coherence.Component compParent, boolean fInit)
                        {
                        super(sName, compParent, false);
                        
                        if (fInit)
                            {
                            __init();
                            }
                        }
                    
                    // Main initializer
                    public void __init()
                        {
                        // private initialization
                        __initPrivate();
                        
                        
                        // signal the end of the initialization
                        set_Constructed(true);
                        }
                    
                    // Private initializer
                    protected void __initPrivate()
                        {
                        
                        super.__initPrivate();
                        }
                    
                    //++ getter for static property _Instance
                    /**
                     * Getter for property _Instance.<p>
                    * Auto generated
                     */
                    public static com.tangosol.coherence.Component get_Instance()
                        {
                        return new com.tangosol.coherence.component.net.Cluster.NameService.TcpAcceptor.MessageFactory.OpenChannelResponse();
                        }
                    
                    //++ getter for static property _CLASS
                    /**
                     * Getter for property _CLASS.<p>
                    * Property with auto-generated accessor that returns the
                    * Class object for a given component.
                     */
                    public static Class get_CLASS()
                        {
                        Class clz;
                        try
                            {
                            clz = Class.forName("com.tangosol.coherence/component/net/Cluster$NameService$TcpAcceptor$MessageFactory$OpenChannelResponse".replace('/', '.'));
                            }
                        catch (ClassNotFoundException e)
                            {
                            throw new NoClassDefFoundError(e.getMessage());
                            }
                        return clz;
                        }
                    
                    //++ getter for autogen property _Module
                    /**
                     * This is an auto-generated method that returns the global
                    * [design time] parent component.
                    * 
                    * Note: the class generator will ignore any custom
                    * implementation for this behavior.
                     */
                    private com.tangosol.coherence.Component get_Module()
                        {
                        return this.get_Parent().get_Parent().get_Parent().get_Parent();
                        }
                    }

                // ---- class: com.tangosol.coherence.component.net.Cluster$NameService$TcpAcceptor$MessageFactory$OpenConnection
                
                /**
                 * Internal Request used to open a Connection.
                 */
                @SuppressWarnings({"deprecation", "rawtypes", "unused", "unchecked", "ConstantConditions", "DuplicatedCode", "ForLoopReplaceableByForEach", "IfCanBeSwitch", "RedundantArrayCreation", "RedundantSuppression", "SameParameterValue", "TryFinallyCanBeTryWithResources", "TryWithIdenticalCatches", "UnnecessaryBoxing", "UnnecessaryUnboxing", "UnusedAssignment"})
                public static class OpenConnection
                        extends    com.tangosol.coherence.component.util.NameService.TcpAcceptor.MessageFactory.OpenConnection
                    {
                    // ---- Fields declarations ----
                    private static com.tangosol.util.ListMap __mapChildren;
                    
                    // Static initializer
                    static
                        {
                        __initStatic();
                        }
                    
                    // Default static initializer
                    private static void __initStatic()
                        {
                        // register child classes
                        __mapChildren = new com.tangosol.util.ListMap();
                        __mapChildren.put("Status", Cluster.NameService.TcpAcceptor.MessageFactory.OpenConnection.Status.get_CLASS());
                        }
                    
                    // Default constructor
                    public OpenConnection()
                        {
                        this(null, null, true);
                        }
                    
                    // Initializing constructor
                    public OpenConnection(String sName, com.tangosol.coherence.Component compParent, boolean fInit)
                        {
                        super(sName, compParent, false);
                        
                        if (fInit)
                            {
                            __init();
                            }
                        }
                    
                    // Main initializer
                    public void __init()
                        {
                        // private initialization
                        __initPrivate();
                        
                        
                        // containment initialization: children
                        
                        // signal the end of the initialization
                        set_Constructed(true);
                        }
                    
                    // Private initializer
                    protected void __initPrivate()
                        {
                        
                        super.__initPrivate();
                        }
                    
                    //++ getter for static property _Instance
                    /**
                     * Getter for property _Instance.<p>
                    * Auto generated
                     */
                    public static com.tangosol.coherence.Component get_Instance()
                        {
                        return new com.tangosol.coherence.component.net.Cluster.NameService.TcpAcceptor.MessageFactory.OpenConnection();
                        }
                    
                    //++ getter for static property _CLASS
                    /**
                     * Getter for property _CLASS.<p>
                    * Property with auto-generated accessor that returns the
                    * Class object for a given component.
                     */
                    public static Class get_CLASS()
                        {
                        Class clz;
                        try
                            {
                            clz = Class.forName("com.tangosol.coherence/component/net/Cluster$NameService$TcpAcceptor$MessageFactory$OpenConnection".replace('/', '.'));
                            }
                        catch (ClassNotFoundException e)
                            {
                            throw new NoClassDefFoundError(e.getMessage());
                            }
                        return clz;
                        }
                    
                    //++ getter for autogen property _Module
                    /**
                     * This is an auto-generated method that returns the global
                    * [design time] parent component.
                    * 
                    * Note: the class generator will ignore any custom
                    * implementation for this behavior.
                     */
                    private com.tangosol.coherence.Component get_Module()
                        {
                        return this.get_Parent().get_Parent().get_Parent().get_Parent();
                        }
                    
                    //++ getter for autogen property _ChildClasses
                    /**
                     * This is an auto-generated method that returns the map of
                    * design time [static] children.
                    * 
                    * Note: the class generator will ignore any custom
                    * implementation for this behavior.
                     */
                    protected java.util.Map get_ChildClasses()
                        {
                        return __mapChildren;
                        }

                    // ---- class: com.tangosol.coherence.component.net.Cluster$NameService$TcpAcceptor$MessageFactory$OpenConnection$Status
                    
                    /**
                     * Implementation of the Request$Status interface.
                     */
                    @SuppressWarnings({"deprecation", "rawtypes", "unused", "unchecked", "ConstantConditions", "DuplicatedCode", "ForLoopReplaceableByForEach", "IfCanBeSwitch", "RedundantArrayCreation", "RedundantSuppression", "SameParameterValue", "TryFinallyCanBeTryWithResources", "TryWithIdenticalCatches", "UnnecessaryBoxing", "UnnecessaryUnboxing", "UnusedAssignment"})
                    public static class Status
                            extends    com.tangosol.coherence.component.util.NameService.TcpAcceptor.MessageFactory.OpenConnection.Status
                        {
                        // ---- Fields declarations ----
                        
                        // Default constructor
                        public Status()
                            {
                            this(null, null, true);
                            }
                        
                        // Initializing constructor
                        public Status(String sName, com.tangosol.coherence.Component compParent, boolean fInit)
                            {
                            super(sName, compParent, false);
                            
                            if (fInit)
                                {
                                __init();
                                }
                            }
                        
                        // Main initializer
                        public void __init()
                            {
                            // private initialization
                            __initPrivate();
                            
                            
                            // signal the end of the initialization
                            set_Constructed(true);
                            }
                        
                        // Private initializer
                        protected void __initPrivate()
                            {
                            
                            super.__initPrivate();
                            }
                        
                        //++ getter for static property _Instance
                        /**
                         * Getter for property _Instance.<p>
                        * Auto generated
                         */
                        public static com.tangosol.coherence.Component get_Instance()
                            {
                            return new com.tangosol.coherence.component.net.Cluster.NameService.TcpAcceptor.MessageFactory.OpenConnection.Status();
                            }
                        
                        //++ getter for static property _CLASS
                        /**
                         * Getter for property _CLASS.<p>
                        * Property with auto-generated accessor that returns
                        * the Class object for a given component.
                         */
                        public static Class get_CLASS()
                            {
                            Class clz;
                            try
                                {
                                clz = Class.forName("com.tangosol.coherence/component/net/Cluster$NameService$TcpAcceptor$MessageFactory$OpenConnection$Status".replace('/', '.'));
                                }
                            catch (ClassNotFoundException e)
                                {
                                throw new NoClassDefFoundError(e.getMessage());
                                }
                            return clz;
                            }
                        
                        //++ getter for autogen property _Module
                        /**
                         * This is an auto-generated method that returns the
                        * global [design time] parent component.
                        * 
                        * Note: the class generator will ignore any custom
                        * implementation for this behavior.
                         */
                        private com.tangosol.coherence.Component get_Module()
                            {
                            return this.get_Parent().get_Parent().get_Parent().get_Parent().get_Parent();
                            }
                        }
                    }

                // ---- class: com.tangosol.coherence.component.net.Cluster$NameService$TcpAcceptor$MessageFactory$OpenConnectionRequest
                
                /**
                 * This Request is used to open a new Channel.
                 */
                @SuppressWarnings({"deprecation", "rawtypes", "unused", "unchecked", "ConstantConditions", "DuplicatedCode", "ForLoopReplaceableByForEach", "IfCanBeSwitch", "RedundantArrayCreation", "RedundantSuppression", "SameParameterValue", "TryFinallyCanBeTryWithResources", "TryWithIdenticalCatches", "UnnecessaryBoxing", "UnnecessaryUnboxing", "UnusedAssignment"})
                public static class OpenConnectionRequest
                        extends    com.tangosol.coherence.component.util.NameService.TcpAcceptor.MessageFactory.OpenConnectionRequest
                    {
                    // ---- Fields declarations ----
                    private static com.tangosol.util.ListMap __mapChildren;
                    
                    // Static initializer
                    static
                        {
                        __initStatic();
                        }
                    
                    // Default static initializer
                    private static void __initStatic()
                        {
                        // register child classes
                        __mapChildren = new com.tangosol.util.ListMap();
                        __mapChildren.put("Status", Cluster.NameService.TcpAcceptor.MessageFactory.OpenConnectionRequest.Status.get_CLASS());
                        }
                    
                    // Default constructor
                    public OpenConnectionRequest()
                        {
                        this(null, null, true);
                        }
                    
                    // Initializing constructor
                    public OpenConnectionRequest(String sName, com.tangosol.coherence.Component compParent, boolean fInit)
                        {
                        super(sName, compParent, false);
                        
                        if (fInit)
                            {
                            __init();
                            }
                        }
                    
                    // Main initializer
                    public void __init()
                        {
                        // private initialization
                        __initPrivate();
                        
                        
                        // containment initialization: children
                        
                        // signal the end of the initialization
                        set_Constructed(true);
                        }
                    
                    // Private initializer
                    protected void __initPrivate()
                        {
                        
                        super.__initPrivate();
                        }
                    
                    //++ getter for static property _Instance
                    /**
                     * Getter for property _Instance.<p>
                    * Auto generated
                     */
                    public static com.tangosol.coherence.Component get_Instance()
                        {
                        return new com.tangosol.coherence.component.net.Cluster.NameService.TcpAcceptor.MessageFactory.OpenConnectionRequest();
                        }
                    
                    //++ getter for static property _CLASS
                    /**
                     * Getter for property _CLASS.<p>
                    * Property with auto-generated accessor that returns the
                    * Class object for a given component.
                     */
                    public static Class get_CLASS()
                        {
                        Class clz;
                        try
                            {
                            clz = Class.forName("com.tangosol.coherence/component/net/Cluster$NameService$TcpAcceptor$MessageFactory$OpenConnectionRequest".replace('/', '.'));
                            }
                        catch (ClassNotFoundException e)
                            {
                            throw new NoClassDefFoundError(e.getMessage());
                            }
                        return clz;
                        }
                    
                    //++ getter for autogen property _Module
                    /**
                     * This is an auto-generated method that returns the global
                    * [design time] parent component.
                    * 
                    * Note: the class generator will ignore any custom
                    * implementation for this behavior.
                     */
                    private com.tangosol.coherence.Component get_Module()
                        {
                        return this.get_Parent().get_Parent().get_Parent().get_Parent();
                        }
                    
                    //++ getter for autogen property _ChildClasses
                    /**
                     * This is an auto-generated method that returns the map of
                    * design time [static] children.
                    * 
                    * Note: the class generator will ignore any custom
                    * implementation for this behavior.
                     */
                    protected java.util.Map get_ChildClasses()
                        {
                        return __mapChildren;
                        }

                    // ---- class: com.tangosol.coherence.component.net.Cluster$NameService$TcpAcceptor$MessageFactory$OpenConnectionRequest$Status
                    
                    /**
                     * Implementation of the Request$Status interface.
                     */
                    @SuppressWarnings({"deprecation", "rawtypes", "unused", "unchecked", "ConstantConditions", "DuplicatedCode", "ForLoopReplaceableByForEach", "IfCanBeSwitch", "RedundantArrayCreation", "RedundantSuppression", "SameParameterValue", "TryFinallyCanBeTryWithResources", "TryWithIdenticalCatches", "UnnecessaryBoxing", "UnnecessaryUnboxing", "UnusedAssignment"})
                    public static class Status
                            extends    com.tangosol.coherence.component.util.NameService.TcpAcceptor.MessageFactory.OpenConnectionRequest.Status
                        {
                        // ---- Fields declarations ----
                        
                        // Default constructor
                        public Status()
                            {
                            this(null, null, true);
                            }
                        
                        // Initializing constructor
                        public Status(String sName, com.tangosol.coherence.Component compParent, boolean fInit)
                            {
                            super(sName, compParent, false);
                            
                            if (fInit)
                                {
                                __init();
                                }
                            }
                        
                        // Main initializer
                        public void __init()
                            {
                            // private initialization
                            __initPrivate();
                            
                            
                            // signal the end of the initialization
                            set_Constructed(true);
                            }
                        
                        // Private initializer
                        protected void __initPrivate()
                            {
                            
                            super.__initPrivate();
                            }
                        
                        //++ getter for static property _Instance
                        /**
                         * Getter for property _Instance.<p>
                        * Auto generated
                         */
                        public static com.tangosol.coherence.Component get_Instance()
                            {
                            return new com.tangosol.coherence.component.net.Cluster.NameService.TcpAcceptor.MessageFactory.OpenConnectionRequest.Status();
                            }
                        
                        //++ getter for static property _CLASS
                        /**
                         * Getter for property _CLASS.<p>
                        * Property with auto-generated accessor that returns
                        * the Class object for a given component.
                         */
                        public static Class get_CLASS()
                            {
                            Class clz;
                            try
                                {
                                clz = Class.forName("com.tangosol.coherence/component/net/Cluster$NameService$TcpAcceptor$MessageFactory$OpenConnectionRequest$Status".replace('/', '.'));
                                }
                            catch (ClassNotFoundException e)
                                {
                                throw new NoClassDefFoundError(e.getMessage());
                                }
                            return clz;
                            }
                        
                        //++ getter for autogen property _Module
                        /**
                         * This is an auto-generated method that returns the
                        * global [design time] parent component.
                        * 
                        * Note: the class generator will ignore any custom
                        * implementation for this behavior.
                         */
                        private com.tangosol.coherence.Component get_Module()
                            {
                            return this.get_Parent().get_Parent().get_Parent().get_Parent().get_Parent();
                            }
                        }
                    }

                // ---- class: com.tangosol.coherence.component.net.Cluster$NameService$TcpAcceptor$MessageFactory$OpenConnectionResponse
                
                /**
                 * Response to an OpenChannelRequest.
                 */
                @SuppressWarnings({"deprecation", "rawtypes", "unused", "unchecked", "ConstantConditions", "DuplicatedCode", "ForLoopReplaceableByForEach", "IfCanBeSwitch", "RedundantArrayCreation", "RedundantSuppression", "SameParameterValue", "TryFinallyCanBeTryWithResources", "TryWithIdenticalCatches", "UnnecessaryBoxing", "UnnecessaryUnboxing", "UnusedAssignment"})
                public static class OpenConnectionResponse
                        extends    com.tangosol.coherence.component.util.NameService.TcpAcceptor.MessageFactory.OpenConnectionResponse
                    {
                    // ---- Fields declarations ----
                    
                    // Default constructor
                    public OpenConnectionResponse()
                        {
                        this(null, null, true);
                        }
                    
                    // Initializing constructor
                    public OpenConnectionResponse(String sName, com.tangosol.coherence.Component compParent, boolean fInit)
                        {
                        super(sName, compParent, false);
                        
                        if (fInit)
                            {
                            __init();
                            }
                        }
                    
                    // Main initializer
                    public void __init()
                        {
                        // private initialization
                        __initPrivate();
                        
                        
                        // signal the end of the initialization
                        set_Constructed(true);
                        }
                    
                    // Private initializer
                    protected void __initPrivate()
                        {
                        
                        super.__initPrivate();
                        }
                    
                    //++ getter for static property _Instance
                    /**
                     * Getter for property _Instance.<p>
                    * Auto generated
                     */
                    public static com.tangosol.coherence.Component get_Instance()
                        {
                        return new com.tangosol.coherence.component.net.Cluster.NameService.TcpAcceptor.MessageFactory.OpenConnectionResponse();
                        }
                    
                    //++ getter for static property _CLASS
                    /**
                     * Getter for property _CLASS.<p>
                    * Property with auto-generated accessor that returns the
                    * Class object for a given component.
                     */
                    public static Class get_CLASS()
                        {
                        Class clz;
                        try
                            {
                            clz = Class.forName("com.tangosol.coherence/component/net/Cluster$NameService$TcpAcceptor$MessageFactory$OpenConnectionResponse".replace('/', '.'));
                            }
                        catch (ClassNotFoundException e)
                            {
                            throw new NoClassDefFoundError(e.getMessage());
                            }
                        return clz;
                        }
                    
                    //++ getter for autogen property _Module
                    /**
                     * This is an auto-generated method that returns the global
                    * [design time] parent component.
                    * 
                    * Note: the class generator will ignore any custom
                    * implementation for this behavior.
                     */
                    private com.tangosol.coherence.Component get_Module()
                        {
                        return this.get_Parent().get_Parent().get_Parent().get_Parent();
                        }
                    }

                // ---- class: com.tangosol.coherence.component.net.Cluster$NameService$TcpAcceptor$MessageFactory$PingRequest
                
                /**
                 * This Request is used to test the integrity of a Connection.
                 */
                @SuppressWarnings({"deprecation", "rawtypes", "unused", "unchecked", "ConstantConditions", "DuplicatedCode", "ForLoopReplaceableByForEach", "IfCanBeSwitch", "RedundantArrayCreation", "RedundantSuppression", "SameParameterValue", "TryFinallyCanBeTryWithResources", "TryWithIdenticalCatches", "UnnecessaryBoxing", "UnnecessaryUnboxing", "UnusedAssignment"})
                public static class PingRequest
                        extends    com.tangosol.coherence.component.util.NameService.TcpAcceptor.MessageFactory.PingRequest
                    {
                    // ---- Fields declarations ----
                    private static com.tangosol.util.ListMap __mapChildren;
                    
                    // Static initializer
                    static
                        {
                        __initStatic();
                        }
                    
                    // Default static initializer
                    private static void __initStatic()
                        {
                        // register child classes
                        __mapChildren = new com.tangosol.util.ListMap();
                        __mapChildren.put("Status", Cluster.NameService.TcpAcceptor.MessageFactory.PingRequest.Status.get_CLASS());
                        }
                    
                    // Default constructor
                    public PingRequest()
                        {
                        this(null, null, true);
                        }
                    
                    // Initializing constructor
                    public PingRequest(String sName, com.tangosol.coherence.Component compParent, boolean fInit)
                        {
                        super(sName, compParent, false);
                        
                        if (fInit)
                            {
                            __init();
                            }
                        }
                    
                    // Main initializer
                    public void __init()
                        {
                        // private initialization
                        __initPrivate();
                        
                        
                        // containment initialization: children
                        
                        // signal the end of the initialization
                        set_Constructed(true);
                        }
                    
                    // Private initializer
                    protected void __initPrivate()
                        {
                        
                        super.__initPrivate();
                        }
                    
                    //++ getter for static property _Instance
                    /**
                     * Getter for property _Instance.<p>
                    * Auto generated
                     */
                    public static com.tangosol.coherence.Component get_Instance()
                        {
                        return new com.tangosol.coherence.component.net.Cluster.NameService.TcpAcceptor.MessageFactory.PingRequest();
                        }
                    
                    //++ getter for static property _CLASS
                    /**
                     * Getter for property _CLASS.<p>
                    * Property with auto-generated accessor that returns the
                    * Class object for a given component.
                     */
                    public static Class get_CLASS()
                        {
                        Class clz;
                        try
                            {
                            clz = Class.forName("com.tangosol.coherence/component/net/Cluster$NameService$TcpAcceptor$MessageFactory$PingRequest".replace('/', '.'));
                            }
                        catch (ClassNotFoundException e)
                            {
                            throw new NoClassDefFoundError(e.getMessage());
                            }
                        return clz;
                        }
                    
                    //++ getter for autogen property _Module
                    /**
                     * This is an auto-generated method that returns the global
                    * [design time] parent component.
                    * 
                    * Note: the class generator will ignore any custom
                    * implementation for this behavior.
                     */
                    private com.tangosol.coherence.Component get_Module()
                        {
                        return this.get_Parent().get_Parent().get_Parent().get_Parent();
                        }
                    
                    //++ getter for autogen property _ChildClasses
                    /**
                     * This is an auto-generated method that returns the map of
                    * design time [static] children.
                    * 
                    * Note: the class generator will ignore any custom
                    * implementation for this behavior.
                     */
                    protected java.util.Map get_ChildClasses()
                        {
                        return __mapChildren;
                        }

                    // ---- class: com.tangosol.coherence.component.net.Cluster$NameService$TcpAcceptor$MessageFactory$PingRequest$Status
                    
                    /**
                     * Implementation of the Request$Status interface.
                     */
                    @SuppressWarnings({"deprecation", "rawtypes", "unused", "unchecked", "ConstantConditions", "DuplicatedCode", "ForLoopReplaceableByForEach", "IfCanBeSwitch", "RedundantArrayCreation", "RedundantSuppression", "SameParameterValue", "TryFinallyCanBeTryWithResources", "TryWithIdenticalCatches", "UnnecessaryBoxing", "UnnecessaryUnboxing", "UnusedAssignment"})
                    public static class Status
                            extends    com.tangosol.coherence.component.util.NameService.TcpAcceptor.MessageFactory.PingRequest.Status
                        {
                        // ---- Fields declarations ----
                        
                        // Default constructor
                        public Status()
                            {
                            this(null, null, true);
                            }
                        
                        // Initializing constructor
                        public Status(String sName, com.tangosol.coherence.Component compParent, boolean fInit)
                            {
                            super(sName, compParent, false);
                            
                            if (fInit)
                                {
                                __init();
                                }
                            }
                        
                        // Main initializer
                        public void __init()
                            {
                            // private initialization
                            __initPrivate();
                            
                            
                            // signal the end of the initialization
                            set_Constructed(true);
                            }
                        
                        // Private initializer
                        protected void __initPrivate()
                            {
                            
                            super.__initPrivate();
                            }
                        
                        //++ getter for static property _Instance
                        /**
                         * Getter for property _Instance.<p>
                        * Auto generated
                         */
                        public static com.tangosol.coherence.Component get_Instance()
                            {
                            return new com.tangosol.coherence.component.net.Cluster.NameService.TcpAcceptor.MessageFactory.PingRequest.Status();
                            }
                        
                        //++ getter for static property _CLASS
                        /**
                         * Getter for property _CLASS.<p>
                        * Property with auto-generated accessor that returns
                        * the Class object for a given component.
                         */
                        public static Class get_CLASS()
                            {
                            Class clz;
                            try
                                {
                                clz = Class.forName("com.tangosol.coherence/component/net/Cluster$NameService$TcpAcceptor$MessageFactory$PingRequest$Status".replace('/', '.'));
                                }
                            catch (ClassNotFoundException e)
                                {
                                throw new NoClassDefFoundError(e.getMessage());
                                }
                            return clz;
                            }
                        
                        //++ getter for autogen property _Module
                        /**
                         * This is an auto-generated method that returns the
                        * global [design time] parent component.
                        * 
                        * Note: the class generator will ignore any custom
                        * implementation for this behavior.
                         */
                        private com.tangosol.coherence.Component get_Module()
                            {
                            return this.get_Parent().get_Parent().get_Parent().get_Parent().get_Parent();
                            }
                        }
                    }

                // ---- class: com.tangosol.coherence.component.net.Cluster$NameService$TcpAcceptor$MessageFactory$PingResponse
                
                /**
                 * Response to a PingRequest
                 */
                @SuppressWarnings({"deprecation", "rawtypes", "unused", "unchecked", "ConstantConditions", "DuplicatedCode", "ForLoopReplaceableByForEach", "IfCanBeSwitch", "RedundantArrayCreation", "RedundantSuppression", "SameParameterValue", "TryFinallyCanBeTryWithResources", "TryWithIdenticalCatches", "UnnecessaryBoxing", "UnnecessaryUnboxing", "UnusedAssignment"})
                public static class PingResponse
                        extends    com.tangosol.coherence.component.util.NameService.TcpAcceptor.MessageFactory.PingResponse
                    {
                    // ---- Fields declarations ----
                    
                    // Default constructor
                    public PingResponse()
                        {
                        this(null, null, true);
                        }
                    
                    // Initializing constructor
                    public PingResponse(String sName, com.tangosol.coherence.Component compParent, boolean fInit)
                        {
                        super(sName, compParent, false);
                        
                        if (fInit)
                            {
                            __init();
                            }
                        }
                    
                    // Main initializer
                    public void __init()
                        {
                        // private initialization
                        __initPrivate();
                        
                        
                        // signal the end of the initialization
                        set_Constructed(true);
                        }
                    
                    // Private initializer
                    protected void __initPrivate()
                        {
                        
                        super.__initPrivate();
                        }
                    
                    //++ getter for static property _Instance
                    /**
                     * Getter for property _Instance.<p>
                    * Auto generated
                     */
                    public static com.tangosol.coherence.Component get_Instance()
                        {
                        return new com.tangosol.coherence.component.net.Cluster.NameService.TcpAcceptor.MessageFactory.PingResponse();
                        }
                    
                    //++ getter for static property _CLASS
                    /**
                     * Getter for property _CLASS.<p>
                    * Property with auto-generated accessor that returns the
                    * Class object for a given component.
                     */
                    public static Class get_CLASS()
                        {
                        Class clz;
                        try
                            {
                            clz = Class.forName("com.tangosol.coherence/component/net/Cluster$NameService$TcpAcceptor$MessageFactory$PingResponse".replace('/', '.'));
                            }
                        catch (ClassNotFoundException e)
                            {
                            throw new NoClassDefFoundError(e.getMessage());
                            }
                        return clz;
                        }
                    
                    //++ getter for autogen property _Module
                    /**
                     * This is an auto-generated method that returns the global
                    * [design time] parent component.
                    * 
                    * Note: the class generator will ignore any custom
                    * implementation for this behavior.
                     */
                    private com.tangosol.coherence.Component get_Module()
                        {
                        return this.get_Parent().get_Parent().get_Parent().get_Parent();
                        }
                    }

                // ---- class: com.tangosol.coherence.component.net.Cluster$NameService$TcpAcceptor$MessageFactory$Response
                
                /**
                 * Generic Response used for all internal Requests.
                 */
                @SuppressWarnings({"deprecation", "rawtypes", "unused", "unchecked", "ConstantConditions", "DuplicatedCode", "ForLoopReplaceableByForEach", "IfCanBeSwitch", "RedundantArrayCreation", "RedundantSuppression", "SameParameterValue", "TryFinallyCanBeTryWithResources", "TryWithIdenticalCatches", "UnnecessaryBoxing", "UnnecessaryUnboxing", "UnusedAssignment"})
                public static class Response
                        extends    com.tangosol.coherence.component.util.NameService.TcpAcceptor.MessageFactory.Response
                    {
                    // ---- Fields declarations ----
                    
                    // Default constructor
                    public Response()
                        {
                        this(null, null, true);
                        }
                    
                    // Initializing constructor
                    public Response(String sName, com.tangosol.coherence.Component compParent, boolean fInit)
                        {
                        super(sName, compParent, false);
                        
                        if (fInit)
                            {
                            __init();
                            }
                        }
                    
                    // Main initializer
                    public void __init()
                        {
                        // private initialization
                        __initPrivate();
                        
                        
                        // signal the end of the initialization
                        set_Constructed(true);
                        }
                    
                    // Private initializer
                    protected void __initPrivate()
                        {
                        
                        super.__initPrivate();
                        }
                    
                    //++ getter for static property _Instance
                    /**
                     * Getter for property _Instance.<p>
                    * Auto generated
                     */
                    public static com.tangosol.coherence.Component get_Instance()
                        {
                        return new com.tangosol.coherence.component.net.Cluster.NameService.TcpAcceptor.MessageFactory.Response();
                        }
                    
                    //++ getter for static property _CLASS
                    /**
                     * Getter for property _CLASS.<p>
                    * Property with auto-generated accessor that returns the
                    * Class object for a given component.
                     */
                    public static Class get_CLASS()
                        {
                        Class clz;
                        try
                            {
                            clz = Class.forName("com.tangosol.coherence/component/net/Cluster$NameService$TcpAcceptor$MessageFactory$Response".replace('/', '.'));
                            }
                        catch (ClassNotFoundException e)
                            {
                            throw new NoClassDefFoundError(e.getMessage());
                            }
                        return clz;
                        }
                    
                    //++ getter for autogen property _Module
                    /**
                     * This is an auto-generated method that returns the global
                    * [design time] parent component.
                    * 
                    * Note: the class generator will ignore any custom
                    * implementation for this behavior.
                     */
                    private com.tangosol.coherence.Component get_Module()
                        {
                        return this.get_Parent().get_Parent().get_Parent().get_Parent();
                        }
                    }
                }

            // ---- class: com.tangosol.coherence.component.net.Cluster$NameService$TcpAcceptor$Protocol
            
            /**
             * The Protocol used by the ConnectionManager to manage the
             * lifecycle of Connection and Channel objects. 
             * 
             * The name of this Protocol is "MessagingProtocol".
             */
            @SuppressWarnings({"deprecation", "rawtypes", "unused", "unchecked", "ConstantConditions", "DuplicatedCode", "ForLoopReplaceableByForEach", "IfCanBeSwitch", "RedundantArrayCreation", "RedundantSuppression", "SameParameterValue", "TryFinallyCanBeTryWithResources", "TryWithIdenticalCatches", "UnnecessaryBoxing", "UnnecessaryUnboxing", "UnusedAssignment"})
            public static class Protocol
                    extends    com.tangosol.coherence.component.util.daemon.queueProcessor.service.Peer.Protocol
                {
                // ---- Fields declarations ----
                
                // Default constructor
                public Protocol()
                    {
                    this(null, null, true);
                    }
                
                // Initializing constructor
                public Protocol(String sName, com.tangosol.coherence.Component compParent, boolean fInit)
                    {
                    super(sName, compParent, false);
                    
                    if (fInit)
                        {
                        __init();
                        }
                    }
                
                // Main initializer
                public void __init()
                    {
                    // private initialization
                    __initPrivate();
                    
                    // state initialization: public and protected properties
                    try
                        {
                        setVersionCurrent(3);
                        setVersionSupported(2);
                        }
                    catch (java.lang.Exception e)
                        {
                        // re-throw as a runtime exception
                        throw new com.tangosol.util.WrapperException(e);
                        }
                    
                    // signal the end of the initialization
                    set_Constructed(true);
                    }
                
                // Private initializer
                protected void __initPrivate()
                    {
                    
                    super.__initPrivate();
                    }
                
                //++ getter for static property _Instance
                /**
                 * Getter for property _Instance.<p>
                * Auto generated
                 */
                public static com.tangosol.coherence.Component get_Instance()
                    {
                    return new com.tangosol.coherence.component.net.Cluster.NameService.TcpAcceptor.Protocol();
                    }
                
                //++ getter for static property _CLASS
                /**
                 * Getter for property _CLASS.<p>
                * Property with auto-generated accessor that returns the Class
                * object for a given component.
                 */
                public static Class get_CLASS()
                    {
                    Class clz;
                    try
                        {
                        clz = Class.forName("com.tangosol.coherence/component/net/Cluster$NameService$TcpAcceptor$Protocol".replace('/', '.'));
                        }
                    catch (ClassNotFoundException e)
                        {
                        throw new NoClassDefFoundError(e.getMessage());
                        }
                    return clz;
                    }
                
                //++ getter for autogen property _Module
                /**
                 * This is an auto-generated method that returns the global
                * [design time] parent component.
                * 
                * Note: the class generator will ignore any custom
                * implementation for this behavior.
                 */
                private com.tangosol.coherence.Component get_Module()
                    {
                    return this.get_Parent().get_Parent().get_Parent();
                    }
                }

            // ---- class: com.tangosol.coherence.component.net.Cluster$NameService$TcpAcceptor$Queue
            
            /**
             * This is the Queue to which items that need to be processed are
             * added, and from which the daemon pulls items to process.
             */
            @SuppressWarnings({"deprecation", "rawtypes", "unused", "unchecked", "ConstantConditions", "DuplicatedCode", "ForLoopReplaceableByForEach", "IfCanBeSwitch", "RedundantArrayCreation", "RedundantSuppression", "SameParameterValue", "TryFinallyCanBeTryWithResources", "TryWithIdenticalCatches", "UnnecessaryBoxing", "UnnecessaryUnboxing", "UnusedAssignment"})
            public static class Queue
                    extends    com.tangosol.coherence.component.util.NameService.TcpAcceptor.Queue
                {
                // ---- Fields declarations ----
                private static com.tangosol.util.ListMap __mapChildren;
                
                // Static initializer
                static
                    {
                    __initStatic();
                    }
                
                // Default static initializer
                private static void __initStatic()
                    {
                    // register child classes
                    __mapChildren = new com.tangosol.util.ListMap();
                    __mapChildren.put("Iterator", Cluster.NameService.TcpAcceptor.Queue.Iterator.get_CLASS());
                    }
                
                // Default constructor
                public Queue()
                    {
                    this(null, null, true);
                    }
                
                // Initializing constructor
                public Queue(String sName, com.tangosol.coherence.Component compParent, boolean fInit)
                    {
                    super(sName, compParent, false);
                    
                    if (fInit)
                        {
                        __init();
                        }
                    }
                
                // Main initializer
                public void __init()
                    {
                    // private initialization
                    __initPrivate();
                    
                    // state initialization: public and protected properties
                    try
                        {
                        setElementList(new com.tangosol.util.RecyclingLinkedList());
                        }
                    catch (java.lang.Exception e)
                        {
                        // re-throw as a runtime exception
                        throw new com.tangosol.util.WrapperException(e);
                        }
                    
                    // containment initialization: children
                    
                    // signal the end of the initialization
                    set_Constructed(true);
                    }
                
                // Private initializer
                protected void __initPrivate()
                    {
                    
                    super.__initPrivate();
                    }
                
                //++ getter for static property _Instance
                /**
                 * Getter for property _Instance.<p>
                * Auto generated
                 */
                public static com.tangosol.coherence.Component get_Instance()
                    {
                    return new com.tangosol.coherence.component.net.Cluster.NameService.TcpAcceptor.Queue();
                    }
                
                //++ getter for static property _CLASS
                /**
                 * Getter for property _CLASS.<p>
                * Property with auto-generated accessor that returns the Class
                * object for a given component.
                 */
                public static Class get_CLASS()
                    {
                    Class clz;
                    try
                        {
                        clz = Class.forName("com.tangosol.coherence/component/net/Cluster$NameService$TcpAcceptor$Queue".replace('/', '.'));
                        }
                    catch (ClassNotFoundException e)
                        {
                        throw new NoClassDefFoundError(e.getMessage());
                        }
                    return clz;
                    }
                
                //++ getter for autogen property _Module
                /**
                 * This is an auto-generated method that returns the global
                * [design time] parent component.
                * 
                * Note: the class generator will ignore any custom
                * implementation for this behavior.
                 */
                private com.tangosol.coherence.Component get_Module()
                    {
                    return this.get_Parent().get_Parent().get_Parent();
                    }
                
                //++ getter for autogen property _ChildClasses
                /**
                 * This is an auto-generated method that returns the map of
                * design time [static] children.
                * 
                * Note: the class generator will ignore any custom
                * implementation for this behavior.
                 */
                protected java.util.Map get_ChildClasses()
                    {
                    return __mapChildren;
                    }

                // ---- class: com.tangosol.coherence.component.net.Cluster$NameService$TcpAcceptor$Queue$Iterator
                
                /**
                 * Iterator of a snapshot of the List object that backs the
                 * Queue. Supports remove(). Uses the Queue as the monitor if
                 * any synchronization is required.
                 */
                @SuppressWarnings({"deprecation", "rawtypes", "unused", "unchecked", "ConstantConditions", "DuplicatedCode", "ForLoopReplaceableByForEach", "IfCanBeSwitch", "RedundantArrayCreation", "RedundantSuppression", "SameParameterValue", "TryFinallyCanBeTryWithResources", "TryWithIdenticalCatches", "UnnecessaryBoxing", "UnnecessaryUnboxing", "UnusedAssignment"})
                public static class Iterator
                        extends    com.tangosol.coherence.component.util.NameService.TcpAcceptor.Queue.Iterator
                    {
                    // ---- Fields declarations ----
                    
                    // Default constructor
                    public Iterator()
                        {
                        this(null, null, true);
                        }
                    
                    // Initializing constructor
                    public Iterator(String sName, com.tangosol.coherence.Component compParent, boolean fInit)
                        {
                        super(sName, compParent, false);
                        
                        if (fInit)
                            {
                            __init();
                            }
                        }
                    
                    // Main initializer
                    public void __init()
                        {
                        // private initialization
                        __initPrivate();
                        
                        
                        // signal the end of the initialization
                        set_Constructed(true);
                        }
                    
                    // Private initializer
                    protected void __initPrivate()
                        {
                        
                        super.__initPrivate();
                        }
                    
                    //++ getter for static property _Instance
                    /**
                     * Getter for property _Instance.<p>
                    * Auto generated
                     */
                    public static com.tangosol.coherence.Component get_Instance()
                        {
                        return new com.tangosol.coherence.component.net.Cluster.NameService.TcpAcceptor.Queue.Iterator();
                        }
                    
                    //++ getter for static property _CLASS
                    /**
                     * Getter for property _CLASS.<p>
                    * Property with auto-generated accessor that returns the
                    * Class object for a given component.
                     */
                    public static Class get_CLASS()
                        {
                        Class clz;
                        try
                            {
                            clz = Class.forName("com.tangosol.coherence/component/net/Cluster$NameService$TcpAcceptor$Queue$Iterator".replace('/', '.'));
                            }
                        catch (ClassNotFoundException e)
                            {
                            throw new NoClassDefFoundError(e.getMessage());
                            }
                        return clz;
                        }
                    
                    //++ getter for autogen property _Module
                    /**
                     * This is an auto-generated method that returns the global
                    * [design time] parent component.
                    * 
                    * Note: the class generator will ignore any custom
                    * implementation for this behavior.
                     */
                    private com.tangosol.coherence.Component get_Module()
                        {
                        return this.get_Parent().get_Parent().get_Parent().get_Parent();
                        }
                    }
                }

            // ---- class: com.tangosol.coherence.component.net.Cluster$NameService$TcpAcceptor$TcpConnection
            
            /**
             * Connection implementation that wraps a non-blocking TCP/IP
             * Socket.
             */
            @SuppressWarnings({"deprecation", "rawtypes", "unused", "unchecked", "ConstantConditions", "DuplicatedCode", "ForLoopReplaceableByForEach", "IfCanBeSwitch", "RedundantArrayCreation", "RedundantSuppression", "SameParameterValue", "TryFinallyCanBeTryWithResources", "TryWithIdenticalCatches", "UnnecessaryBoxing", "UnnecessaryUnboxing", "UnusedAssignment"})
            public static class TcpConnection
                    extends    com.tangosol.coherence.component.util.NameService.TcpAcceptor.TcpConnection
                {
                // ---- Fields declarations ----
                
                // Default constructor
                public TcpConnection()
                    {
                    this(null, null, true);
                    }
                
                // Initializing constructor
                public TcpConnection(String sName, com.tangosol.coherence.Component compParent, boolean fInit)
                    {
                    super(sName, compParent, false);
                    
                    if (fInit)
                        {
                        __init();
                        }
                    }
                
                // Main initializer
                public void __init()
                    {
                    // private initialization
                    __initPrivate();
                    
                    // state initialization: public and protected properties
                    try
                        {
                        setChannelArray(new com.tangosol.util.SparseArray());
                        setChannelPendingArray(new com.tangosol.util.SparseArray());
                        }
                    catch (java.lang.Exception e)
                        {
                        // re-throw as a runtime exception
                        throw new com.tangosol.util.WrapperException(e);
                        }
                    
                    // signal the end of the initialization
                    set_Constructed(true);
                    }
                
                // Private initializer
                protected void __initPrivate()
                    {
                    
                    super.__initPrivate();
                    }
                
                //++ getter for static property _Instance
                /**
                 * Getter for property _Instance.<p>
                * Auto generated
                 */
                public static com.tangosol.coherence.Component get_Instance()
                    {
                    return new com.tangosol.coherence.component.net.Cluster.NameService.TcpAcceptor.TcpConnection();
                    }
                
                //++ getter for static property _CLASS
                /**
                 * Getter for property _CLASS.<p>
                * Property with auto-generated accessor that returns the Class
                * object for a given component.
                 */
                public static Class get_CLASS()
                    {
                    Class clz;
                    try
                        {
                        clz = Class.forName("com.tangosol.coherence/component/net/Cluster$NameService$TcpAcceptor$TcpConnection".replace('/', '.'));
                        }
                    catch (ClassNotFoundException e)
                        {
                        throw new NoClassDefFoundError(e.getMessage());
                        }
                    return clz;
                    }
                
                //++ getter for autogen property _Module
                /**
                 * This is an auto-generated method that returns the global
                * [design time] parent component.
                * 
                * Note: the class generator will ignore any custom
                * implementation for this behavior.
                 */
                private com.tangosol.coherence.Component get_Module()
                    {
                    return this.get_Parent().get_Parent().get_Parent();
                    }
                }

            // ---- class: com.tangosol.coherence.component.net.Cluster$NameService$TcpAcceptor$TcpProcessor
            
            /**
             * Daemon used to perform all non-blocking TCP/IP I/O operations.
             */
            @SuppressWarnings({"deprecation", "rawtypes", "unused", "unchecked", "ConstantConditions", "DuplicatedCode", "ForLoopReplaceableByForEach", "IfCanBeSwitch", "RedundantArrayCreation", "RedundantSuppression", "SameParameterValue", "TryFinallyCanBeTryWithResources", "TryWithIdenticalCatches", "UnnecessaryBoxing", "UnnecessaryUnboxing", "UnusedAssignment"})
            public static class TcpProcessor
                    extends    com.tangosol.coherence.component.util.NameService.TcpAcceptor.TcpProcessor
                {
                // ---- Fields declarations ----
                
                // Default constructor
                public TcpProcessor()
                    {
                    this(null, null, true);
                    }
                
                // Initializing constructor
                public TcpProcessor(String sName, com.tangosol.coherence.Component compParent, boolean fInit)
                    {
                    super(sName, compParent, false);
                    
                    if (fInit)
                        {
                        __init();
                        }
                    }
                
                // Main initializer
                public void __init()
                    {
                    // private initialization
                    __initPrivate();
                    
                    // state initialization: public and protected properties
                    try
                        {
                        setDaemonState(0);
                        setDefaultGuardRecovery(0.9F);
                        setDefaultGuardTimeout(60000L);
                        setNotifier(new com.oracle.coherence.common.base.SingleWaiterMultiNotifier());
                        }
                    catch (java.lang.Exception e)
                        {
                        // re-throw as a runtime exception
                        throw new com.tangosol.util.WrapperException(e);
                        }
                    
                    // containment initialization: children
                    _addChild(new Cluster.NameService.TcpAcceptor.TcpProcessor.Guard("Guard", this, true), "Guard");
                    
                    // signal the end of the initialization
                    set_Constructed(true);
                    }
                
                // Private initializer
                protected void __initPrivate()
                    {
                    
                    super.__initPrivate();
                    }
                
                //++ getter for static property _Instance
                /**
                 * Getter for property _Instance.<p>
                * Auto generated
                 */
                public static com.tangosol.coherence.Component get_Instance()
                    {
                    return new com.tangosol.coherence.component.net.Cluster.NameService.TcpAcceptor.TcpProcessor();
                    }
                
                //++ getter for static property _CLASS
                /**
                 * Getter for property _CLASS.<p>
                * Property with auto-generated accessor that returns the Class
                * object for a given component.
                 */
                public static Class get_CLASS()
                    {
                    Class clz;
                    try
                        {
                        clz = Class.forName("com.tangosol.coherence/component/net/Cluster$NameService$TcpAcceptor$TcpProcessor".replace('/', '.'));
                        }
                    catch (ClassNotFoundException e)
                        {
                        throw new NoClassDefFoundError(e.getMessage());
                        }
                    return clz;
                    }
                
                //++ getter for autogen property _Module
                /**
                 * This is an auto-generated method that returns the global
                * [design time] parent component.
                * 
                * Note: the class generator will ignore any custom
                * implementation for this behavior.
                 */
                private com.tangosol.coherence.Component get_Module()
                    {
                    return this.get_Parent().get_Parent().get_Parent();
                    }

                // ---- class: com.tangosol.coherence.component.net.Cluster$NameService$TcpAcceptor$TcpProcessor$Guard
                
                /**
                 * Guard provides the Guardable interface implementation for
                 * the Daemon.
                 */
                @SuppressWarnings({"deprecation", "rawtypes", "unused", "unchecked", "ConstantConditions", "DuplicatedCode", "ForLoopReplaceableByForEach", "IfCanBeSwitch", "RedundantArrayCreation", "RedundantSuppression", "SameParameterValue", "TryFinallyCanBeTryWithResources", "TryWithIdenticalCatches", "UnnecessaryBoxing", "UnnecessaryUnboxing", "UnusedAssignment"})
                public static class Guard
                        extends    com.tangosol.coherence.component.util.Daemon.Guard
                    {
                    // ---- Fields declarations ----
                    
                    // Default constructor
                    public Guard()
                        {
                        this(null, null, true);
                        }
                    
                    // Initializing constructor
                    public Guard(String sName, com.tangosol.coherence.Component compParent, boolean fInit)
                        {
                        super(sName, compParent, false);
                        
                        if (fInit)
                            {
                            __init();
                            }
                        }
                    
                    // Main initializer
                    public void __init()
                        {
                        // private initialization
                        __initPrivate();
                        
                        
                        // signal the end of the initialization
                        set_Constructed(true);
                        }
                    
                    // Private initializer
                    protected void __initPrivate()
                        {
                        
                        super.__initPrivate();
                        }
                    
                    //++ getter for static property _Instance
                    /**
                     * Getter for property _Instance.<p>
                    * Auto generated
                     */
                    public static com.tangosol.coherence.Component get_Instance()
                        {
                        return new com.tangosol.coherence.component.net.Cluster.NameService.TcpAcceptor.TcpProcessor.Guard();
                        }
                    
                    //++ getter for static property _CLASS
                    /**
                     * Getter for property _CLASS.<p>
                    * Property with auto-generated accessor that returns the
                    * Class object for a given component.
                     */
                    public static Class get_CLASS()
                        {
                        Class clz;
                        try
                            {
                            clz = Class.forName("com.tangosol.coherence/component/net/Cluster$NameService$TcpAcceptor$TcpProcessor$Guard".replace('/', '.'));
                            }
                        catch (ClassNotFoundException e)
                            {
                            throw new NoClassDefFoundError(e.getMessage());
                            }
                        return clz;
                        }
                    
                    //++ getter for autogen property _Module
                    /**
                     * This is an auto-generated method that returns the global
                    * [design time] parent component.
                    * 
                    * Note: the class generator will ignore any custom
                    * implementation for this behavior.
                     */
                    private com.tangosol.coherence.Component get_Module()
                        {
                        return this.get_Parent().get_Parent().get_Parent().get_Parent();
                        }
                    }
                }
            }
        }

    // ---- class: com.tangosol.coherence.component.net.Cluster$NameServiceBridge
    
    /**
     * The NameServiceBridge is used to handle the case where multiple clusters
     * run on the same machine using the same cluster port.  The bridge allows
     * the secondary clusters to register themselves in the cluster which has
     * an NS bound to the cluster port, this allows clients and broadcast
     * packets to be routed to the secondary cluster.
     */
    @SuppressWarnings({"deprecation", "rawtypes", "unused", "unchecked", "ConstantConditions", "DuplicatedCode", "ForLoopReplaceableByForEach", "IfCanBeSwitch", "RedundantArrayCreation", "RedundantSuppression", "SameParameterValue", "TryFinallyCanBeTryWithResources", "TryWithIdenticalCatches", "UnnecessaryBoxing", "UnnecessaryUnboxing", "UnusedAssignment"})
    public static class NameServiceBridge
            extends    com.tangosol.coherence.component.net.extend.remoteService.RemoteNameService
        {
        // ---- Fields declarations ----
        
        /**
         * Property ForeignBroadcastBound
         *
         * @volatile
         */
        private volatile boolean __m_ForeignBroadcastBound;
        
        /**
         * Property ForeignNSBound
         *
         * @volatile
         */
        private volatile boolean __m_ForeignNSBound;
        private static com.tangosol.util.ListMap __mapChildren;
        
        // Static initializer
        static
            {
            __initStatic();
            }
        
        // Default static initializer
        private static void __initStatic()
            {
            // register child classes
            __mapChildren = new com.tangosol.util.ListMap();
            __mapChildren.put("InterruptTask", Cluster.NameServiceBridge.InterruptTask.get_CLASS());
            }
        
        // Default constructor
        public NameServiceBridge()
            {
            this(null, null, true);
            }
        
        // Initializing constructor
        public NameServiceBridge(String sName, com.tangosol.coherence.Component compParent, boolean fInit)
            {
            super(sName, compParent, false);
            
            if (fInit)
                {
                __init();
                }
            }
        
        // Main initializer
        public void __init()
            {
            // private initialization
            __initPrivate();
            
            // state initialization: public and protected properties
            try
                {
                setMemberListeners(new com.tangosol.util.Listeners());
                setResourceRegistry(new com.tangosol.util.SimpleResourceRegistry());
                setServiceListeners(new com.tangosol.util.Listeners());
                setServiceName("NameServiceBridge");
                setServiceVersion("1");
                }
            catch (java.lang.Exception e)
                {
                // re-throw as a runtime exception
                throw new com.tangosol.util.WrapperException(e);
                }
            
            // containment initialization: children
            
            // signal the end of the initialization
            set_Constructed(true);
            }
        
        // Private initializer
        protected void __initPrivate()
            {
            
            super.__initPrivate();
            }
        
        //++ getter for static property _Instance
        /**
         * Getter for property _Instance.<p>
        * Auto generated
         */
        public static com.tangosol.coherence.Component get_Instance()
            {
            return new com.tangosol.coherence.component.net.Cluster.NameServiceBridge();
            }
        
        //++ getter for static property _CLASS
        /**
         * Getter for property _CLASS.<p>
        * Property with auto-generated accessor that returns the Class object
        * for a given component.
         */
        public static Class get_CLASS()
            {
            Class clz;
            try
                {
                clz = Class.forName("com.tangosol.coherence/component/net/Cluster$NameServiceBridge".replace('/', '.'));
                }
            catch (ClassNotFoundException e)
                {
                throw new NoClassDefFoundError(e.getMessage());
                }
            return clz;
            }
        
        //++ getter for autogen property _Module
        /**
         * This is an auto-generated method that returns the global [design
        * time] parent component.
        * 
        * Note: the class generator will ignore any custom implementation for
        * this behavior.
         */
        private com.tangosol.coherence.Component get_Module()
            {
            return this.get_Parent();
            }
        
        //++ getter for autogen property _ChildClasses
        /**
         * This is an auto-generated method that returns the map of design time
        * [static] children.
        * 
        * Note: the class generator will ignore any custom implementation for
        * this behavior.
         */
        protected java.util.Map get_ChildClasses()
            {
            return __mapChildren;
            }
        
        public void halt()
            {
            // import Component.Util.Daemon.QueueProcessor.Service.Peer.Initiator.TcpInitiator;
            // import Component.Util.Daemon.QueueProcessor.Service.Peer.Initiator.TcpInitiator$TcpConnection as com.tangosol.coherence.component.util.daemon.queueProcessor.service.peer.initiator.TcpInitiator.TcpConnection;
            
            try
                {
                ((com.tangosol.coherence.component.util.daemon.queueProcessor.service.peer.initiator.TcpInitiator.TcpConnection) ((TcpInitiator) getInitiator()).getConnection()).close();
                }
            catch (Throwable t)
                {
                }
            
            // ClusterService.onExit will do the stop, see note in onExit
            }
        
        // Accessor for the property "ForeignBroadcastBound"
        /**
         * Getter for property ForeignBroadcastBound.<p>
        * @volatile
         */
        public boolean isForeignBroadcastBound()
            {
            return __m_ForeignBroadcastBound;
            }
        
        // Accessor for the property "ForeignNSBound"
        /**
         * Getter for property ForeignNSBound.<p>
        * @volatile
         */
        public boolean isForeignNSBound()
            {
            return __m_ForeignNSBound;
            }
        
        // Accessor for the property "FullyBound"
        /**
         * Getter for property FullyBound.<p>
         */
        public boolean isFullyBound()
            {
            return isForeignBroadcastBound() && isForeignNSBound();
            }
        
        // Declared at the super level
        /**
         * Setter for property Channel.<p>
        * The Channel used to send and receive Messages to/from the remote
        * ProxyService.
        * 
        * @volatile
         */
        protected synchronized void setChannel(com.tangosol.net.messaging.Channel channel)
            {
            setForeignBroadcastBound(false);
            setForeignNSBound(false);
            super.setChannel(channel);
            }
        
        // Accessor for the property "ForeignBroadcastBound"
        /**
         * Setter for property ForeignBroadcastBound.<p>
        * @volatile
         */
        protected void setForeignBroadcastBound(boolean fBound)
            {
            __m_ForeignBroadcastBound = fBound;
            }
        
        // Accessor for the property "ForeignNSBound"
        /**
         * Setter for property ForeignNSBound.<p>
        * @volatile
         */
        protected void setForeignNSBound(boolean fBound)
            {
            __m_ForeignNSBound = fBound;
            }
        
        // Declared at the super level
        public synchronized void start()
            {
            // override super to allow restartability, this is critical in case the initiator
            // fails to connect, we can't allow that to make this instance unuseable
            if (!isRunning())
                {
                try
                    {
                    doStart();
                    }
                catch (RuntimeException e)
                    {
                    throw e;
                    }
                }
            }
        
        /**
         * Try to bind this member in the foregin NS.
         */
        public boolean tryForeignBind()
            {
            // import Component.Util.Daemon.QueueProcessor.Service;
            // import com.tangosol.util.Base;
            // import com.oracle.coherence.common.internal.net.MultiplexedSocketProvider;
            // import com.oracle.coherence.common.net.InetAddresses;
            // import com.oracle.coherence.common.net.InetAddressComparator;
            // import com.oracle.coherence.common.net.InetSocketAddress32;
            // import java.net.InetAddress;
            // import java.net.InetSocketAddress;
            
            if (isFullyBound())
                {
                return true;
                }
            
            Cluster cluster = (Cluster) get_Module();
            boolean fJoined = cluster.getClusterService().getState() >= Cluster.ClusterService.STATE_JOINED;
            
            try
                {
                if (!isRunning())
                    {
                    // foreign NS is started on-demand only if we fail to locally start the NS
                    start();
                    }
            
                String      sNameThis    = cluster.getClusterName();
                String      sNameOther   = (String) lookup("Cluster/name");
                InetAddress addrDiscThis = cluster.getDependencies().getLocalDiscoveryAddress();
                InetAddress addrDiscThat = (InetAddress) lookup("Cluster/localDiscoveryInetAddress");                 
                InetAddress addrNSThis   = cluster.getNameService().getLocalAddress();
                InetAddress addrNSThat   = (InetAddress) lookup("NameService/localInetAddress");
                boolean     fIpv4This    = InetAddresses.PreferIPv4Stack;
                Boolean     FIpv4That    = (Boolean) lookup("Cluster/IPv4Stack");
            
                if (sNameThis.equals(sNameOther))
                    {
                    if (fJoined)
                        {
                        // apparently the holder is a machine junior of this cluster, so we are as good as being fully bound and don't need
                        // to try to change things until this connection closes
                        setForeignBroadcastBound(true);
                        setForeignNSBound(true);
                        return true;
                        }
                    else if (!Base.equals(lookup("Cluster/multicastInetAddress"),
                        cluster.getClusterService().isWkaEnabled() ? null : cluster.getDependencies().getGroupAddress()))
                        {
                        _trace("there appears to be other members of the cluster '" + sNameOther +
                            "' already running with an incompatible network configuration, aborting join with " + lookup("Cluster/info"), 1);
                        cluster.getClusterService().onStopJoining();
                        }
                    else
                        {
                        // Note we log "Cluster/info" because there appears to be a persistent failure
                        cluster.getClusterService().resetBroadcastCounter("there appears to be other members of the cluster '" + sNameOther +
                            "' already running likely with an incompatible network configuration, retrying to join with " + lookup("Cluster/info"), null);
                        }
                    }
                else if (!cluster.isClusterPortSharingEnabled()) // rare
                    {
                    _trace("this cluster '" + sNameThis + "' does not support port sharing and there is another cluster '" +
                            sNameOther + "' already bound to the cluster port '" + cluster.getDependencies().getGroupPort() + "' on this machine. " + lookup("Cluster/info"), 1);
                    if (fJoined)
                        {
                        // this could only happen because of a race where the other cluster was started just as another local member of this cluster died and released the
                        // port before any other cluster member could grab it, this is quite unlikely to ever happen as the configuration is invalid and in most cases would
                        // result in startup failure (resetBroadcast) rather then a failure after startup
                        cluster.getClusterService().onStopRunning();
                        }
                    else
                        {
                        cluster.getClusterService().onStopJoining();
                        }
                    return false;
                    }
                else if (InetAddressComparator.INSTANCE.compare(addrDiscThis, addrDiscThat) != 0) // rare
                    {
                    // if the discovery addresses don't match then we can't ensure our respective members will find us
                    _trace("this cluster '" + sNameThis + "' is configured with a local discovery address of '" + addrDiscThis + "' which is not compatible with " +
                        "cluster '" + sNameOther + "' which is using '" + addrDiscThat + "' and currently hosting the shared cluster port '" +
                        cluster.getDependencies().getGroupPort() + "', in order to share a cluster port the discovery addresses must be equal. " + lookup("Cluster/info"), 1);
                    if (fJoined)
                        {
                        // this could only happen because of a race where the other cluster was started just as another local member of this cluster died and released the
                        // port before any other cluster member could grab it, this is quite unlikely to ever happen as the configuration is invalid and in most cases would
                        // result in startup failure (resetBroadcast) rather then a failure after startup
                        cluster.getClusterService().onStopRunning();
                        }
                    else
                        {
                        cluster.getClusterService().onStopJoining();
                        }
                    return false;
                    }
                else if (InetAddressComparator.INSTANCE.compare(addrNSThis, addrNSThat) != 0) // rare
                    {
                    // if the NS addresses don't match then we can't ensure our respective clients will find us
                    _trace("this cluster '" + sNameThis + "' is configured with a local NameService address of '" + addrNSThis + "' which is not compatible with " +
                        "cluster '" + sNameOther + "' which is using '" + addrNSThat + "' and currently hosting the shared cluster port '" +
                        cluster.getDependencies().getGroupPort() + "', in order to share a cluster port the NameService addresses must be equal. " + lookup("Cluster/info"), 1);
                    if (fJoined)
                        {
                        // this could only happen because of a race where the other cluster was started just as another local member of this cluster died and released the
                        // port before any other cluster member could grab it, this is quite unlikely to ever happen as the configuration is invalid and in most cases would
                        // result in startup failure (resetBroadcast) rather then a failure after startup
                        cluster.getClusterService().onStopRunning();
                        }
                    else
                        {
                        cluster.getClusterService().onStopJoining();
                        }
                    return false;
                    }
                else if ((FIpv4That == null || FIpv4That.booleanValue() != fIpv4This) && (addrDiscThis.isAnyLocalAddress() || addrNSThis.isAnyLocalAddress())) // rare
                    {
                    // both nodes need the same IP stack support so that the wildcard address covers the same set of local addresses
                    _trace("this JVM for cluster '" + sNameThis + "' is" + (fIpv4This ? " not" : "")+ " configured to allow IPv6 which differs from the configurtion" +
                        " of the local JVM for cluster '" + sNameOther + "' which is currently hosting the shared cluster port. In order to share a cluster port this setting must be equal. " +
                        "The java.net.preferIPv4Stack system propery can be used to restrict IPv6 support. " + lookup("Cluster/info"), 1);
                    if (fJoined)
                        {
                        // this could only happen because of a race where the other cluster was started just as another local member of this cluster died and released the
                        // port before any other cluster member could grab it, this is quite unlikely to ever happen as the configuration is invalid and in most cases would
                        // result in startup failure (resetBroadcast) rather then a failure after startup
                        cluster.getClusterService().onStopRunning();
                        }
                    else
                        {
                        cluster.getClusterService().onStopJoining();
                        }
                    return false;
                    }
                else
                    {
                    String sBindPoint = null;
                    try
                        {
                        if (!isForeignBroadcastBound())
                            {
                            // TODO: verify that the foreign NS is listening on the same IP address as we'd like to, this is to ensure that if we
                            // want to be discoverable via wildcard and it is only listening on something more specific that we don't do a foreign
                            // bind and claim success, esentially this is a non-sharable cnofiguration.  Note we need to do the same for the
                            // broadcast listener as well.
            
                            InetSocketAddress addrLocal = (InetSocketAddress) cluster.getSocketManager().getUnicastUdpSocket().getDatagramSocket().getLocalSocketAddress();
                            if (addrLocal.getAddress().isAnyLocalAddress())
                                {
                                // we can't ask packets to be forwarded to wildcard, switch to loopback since the relay is local
                                addrLocal = new InetSocketAddress(InetAddress.getLoopbackAddress(), addrLocal.getPort());
                                }
                            bind(sBindPoint = "Cluster/foreign/" + sNameThis + "/Cluster/localAddress", addrLocal);
                            bind("Cluster/foreign/" + sNameThis + "/Cluster/announceVersion",
                                Integer.valueOf(Cluster.ClusterService.ANNOUNCE_PROTOCOL_VERSION));
                            
                            setForeignBroadcastBound(true);
                            }
            
                        if (fJoined && !isForeignNSBound())
                            {
                            // Note unlike the broadcast address here we only need to register the port as it is a requirement that both NSs listen on the
                            // same inet address.  As this address is generally the wildcard address usage of it would be difficult as it is only meaningful
                            // at bind time and can't be used to make a connection.
                            bind(sBindPoint = "Cluster/foreign/" + sNameThis + "/NameService/localPort",
                                Integer.valueOf(MultiplexedSocketProvider.getBasePort(
                                    cluster.getNameService().getAcceptor().getProcessor().getServerSocket().getLocalPort())));
                            setForeignNSBound(true);
                            }
                    
                        return true;
                        }
                    catch (Exception e)
                        {
                        // the bind was rejected, this can happen because the other side doesn't support port sharing, or because
                        // the resource was already bound
                        if (!fJoined)
                            {
                            Object oBind = lookup(sBindPoint);
                            if (oBind == null)
                                {
                                cluster.getClusterService().resetBroadcastCounter("there is another cluster '" + sNameOther + "' already bound to the cluster port '" +
                                    cluster.getDependencies().getGroupPort() + "' on this machine and it does not appear to support port sharing.  " + lookup("Cluster/info"), null);
            
                                // we continue to retry as it could a failed bind followed by a null lookup could be the result of a peer having been remotly bound and
                                // then dying, this would not be persistent and thus we retry.
                                }
                            else
                                {
                                cluster.getClusterService().resetBroadcastCounter("there appears to be other member of the cluster '" + sNameOther +
                                    "' already running likely with an incompatible network configuration, retrying to join with " + oBind, null);
                                }
                            }
                        // else; we'll silently retry
                        }
                    }
                }
            catch (Exception e)
                {
                // apparently not a Coherence node, or an unresponsive Coherence node (due to GC or some other issues);
                // since those are indistinguishable and it could be the latter, let's try until the join times out
                if (!fJoined)
                    {
                    int nPort = cluster.getDependencies().getGroupPort();
                    cluster.getClusterService().resetBroadcastCounter("there appears to be an unresponsive or non-Coherence "
                        + "process bound to the cluster-port '" + nPort + "' on this machine, retrying join after "
                        + e + (InetAddresses.isEphemeral(nPort) ? (". The port '" + nPort + "' appears to be in the "
                        + "ephemeral port range on this machine and thus may have been randomly assigned to another process. See "
                        + "your OS documentation on how to check the range and either adjust the range or your cluster port "
                        + "selection such that the port is outside the ephemeral range.") : "") , null);
                    }
                }
            
            return false;
            }

        // ---- class: com.tangosol.coherence.component.net.Cluster$NameServiceBridge$InterruptTask
        
        /**
         * A helper task to interrupt a thread in MC lookup if the service is
         * concurrently closed.
         */
        @SuppressWarnings({"deprecation", "rawtypes", "unused", "unchecked", "ConstantConditions", "DuplicatedCode", "ForLoopReplaceableByForEach", "IfCanBeSwitch", "RedundantArrayCreation", "RedundantSuppression", "SameParameterValue", "TryFinallyCanBeTryWithResources", "TryWithIdenticalCatches", "UnnecessaryBoxing", "UnnecessaryUnboxing", "UnusedAssignment"})
        public static class InterruptTask
                extends    com.tangosol.coherence.component.net.extend.remoteService.RemoteNameService.InterruptTask
            {
            // ---- Fields declarations ----
            
            // Default constructor
            public InterruptTask()
                {
                this(null, null, true);
                }
            
            // Initializing constructor
            public InterruptTask(String sName, com.tangosol.coherence.Component compParent, boolean fInit)
                {
                super(sName, compParent, false);
                
                if (fInit)
                    {
                    __init();
                    }
                }
            
            // Main initializer
            public void __init()
                {
                // private initialization
                __initPrivate();
                
                
                // signal the end of the initialization
                set_Constructed(true);
                }
            
            // Private initializer
            protected void __initPrivate()
                {
                
                super.__initPrivate();
                }
            
            //++ getter for static property _Instance
            /**
             * Getter for property _Instance.<p>
            * Auto generated
             */
            public static com.tangosol.coherence.Component get_Instance()
                {
                return new com.tangosol.coherence.component.net.Cluster.NameServiceBridge.InterruptTask();
                }
            
            //++ getter for static property _CLASS
            /**
             * Getter for property _CLASS.<p>
            * Property with auto-generated accessor that returns the Class
            * object for a given component.
             */
            public static Class get_CLASS()
                {
                Class clz;
                try
                    {
                    clz = Class.forName("com.tangosol.coherence/component/net/Cluster$NameServiceBridge$InterruptTask".replace('/', '.'));
                    }
                catch (ClassNotFoundException e)
                    {
                    throw new NoClassDefFoundError(e.getMessage());
                    }
                return clz;
                }
            
            //++ getter for autogen property _Module
            /**
             * This is an auto-generated method that returns the global [design
            * time] parent component.
            * 
            * Note: the class generator will ignore any custom implementation
            * for this behavior.
             */
            private com.tangosol.coherence.Component get_Module()
                {
                return this.get_Parent().get_Parent();
                }
            }
        }

    // ---- class: com.tangosol.coherence.component.net.Cluster$PacketListener1
    
    /**
     * PacketListener1 listens on the Member's advertised port for packets up
     * to the cluster's MaximumPacketLength.
     */
    @SuppressWarnings({"deprecation", "rawtypes", "unused", "unchecked", "ConstantConditions", "DuplicatedCode", "ForLoopReplaceableByForEach", "IfCanBeSwitch", "RedundantArrayCreation", "RedundantSuppression", "SameParameterValue", "TryFinallyCanBeTryWithResources", "TryWithIdenticalCatches", "UnnecessaryBoxing", "UnnecessaryUnboxing", "UnusedAssignment"})
    public static class PacketListener1
            extends    com.tangosol.coherence.component.util.daemon.queueProcessor.packetProcessor.PacketListener
        {
        // ---- Fields declarations ----
        private static com.tangosol.util.ListMap __mapChildren;
        
        // Static initializer
        static
            {
            __initStatic();
            }
        
        // Default static initializer
        private static void __initStatic()
            {
            // register child classes
            __mapChildren = new com.tangosol.util.ListMap();
            __mapChildren.put("Queue", Cluster.PacketListener1.Queue.get_CLASS());
            }
        
        // Default constructor
        public PacketListener1()
            {
            this(null, null, true);
            }
        
        // Initializing constructor
        public PacketListener1(String sName, com.tangosol.coherence.Component compParent, boolean fInit)
            {
            super(sName, compParent, false);
            
            if (fInit)
                {
                __init();
                }
            }
        
        // Main initializer
        public void __init()
            {
            // private initialization
            __initPrivate();
            
            // state initialization: public and protected properties
            try
                {
                setDaemonState(0);
                setDefaultGuardRecovery(0.9F);
                setDefaultGuardTimeout(60000L);
                setNotifier(new com.oracle.coherence.common.base.SingleWaiterMultiNotifier());
                }
            catch (java.lang.Exception e)
                {
                // re-throw as a runtime exception
                throw new com.tangosol.util.WrapperException(e);
                }
            
            // containment initialization: children
            
            // signal the end of the initialization
            set_Constructed(true);
            }
        
        // Private initializer
        protected void __initPrivate()
            {
            
            super.__initPrivate();
            }
        
        //++ getter for static property _Instance
        /**
         * Getter for property _Instance.<p>
        * Auto generated
         */
        public static com.tangosol.coherence.Component get_Instance()
            {
            return new com.tangosol.coherence.component.net.Cluster.PacketListener1();
            }
        
        //++ getter for static property _CLASS
        /**
         * Getter for property _CLASS.<p>
        * Property with auto-generated accessor that returns the Class object
        * for a given component.
         */
        public static Class get_CLASS()
            {
            Class clz;
            try
                {
                clz = Class.forName("com.tangosol.coherence/component/net/Cluster$PacketListener1".replace('/', '.'));
                }
            catch (ClassNotFoundException e)
                {
                throw new NoClassDefFoundError(e.getMessage());
                }
            return clz;
            }
        
        //++ getter for autogen property _Module
        /**
         * This is an auto-generated method that returns the global [design
        * time] parent component.
        * 
        * Note: the class generator will ignore any custom implementation for
        * this behavior.
         */
        private com.tangosol.coherence.Component get_Module()
            {
            return this.get_Parent();
            }
        
        //++ getter for autogen property _ChildClasses
        /**
         * This is an auto-generated method that returns the map of design time
        * [static] children.
        * 
        * Note: the class generator will ignore any custom implementation for
        * this behavior.
         */
        protected java.util.Map get_ChildClasses()
            {
            return __mapChildren;
            }
        
        // Declared at the super level
        /**
         * This event occurs when an exception is thrown from onEnter, onWait,
        * onNotify and onExit.
        * 
        * If the exception should terminate the daemon, call stop(). The
        * default implementation prints debugging information and terminates
        * the daemon.
        * 
        * @param e  the Throwable object (a RuntimeException or an Error)
        * 
        * @throws RuntimeException may be thrown; will terminate the daemon
        * @throws Error may be thrown; will terminate the daemon
         */
        protected void onException(Throwable e)
            {
            Cluster cluster = (Cluster) get_Module();
            try
                {
                if (cluster.getState() < Cluster.STATE_RUNNING)
                    {
                    super.onException(e);
                    }
                }
            finally
                {
                cluster.onException(e);
                }
            }
        
        // Declared at the super level
        /**
         * Invoked when a packet is received.
         */
        protected void onPacket(java.net.SocketAddress addrSource, java.nio.ByteBuffer bufPacket)
            {
            ((Cluster) get_Module()).onPacket(this, addrSource, bufPacket);
            }

        // ---- class: com.tangosol.coherence.component.net.Cluster$PacketListener1$Queue
        
        /**
         * This is the Queue to which items that need to be processed are
         * added, and from which the daemon pulls items to process.
         */
        @SuppressWarnings({"deprecation", "rawtypes", "unused", "unchecked", "ConstantConditions", "DuplicatedCode", "ForLoopReplaceableByForEach", "IfCanBeSwitch", "RedundantArrayCreation", "RedundantSuppression", "SameParameterValue", "TryFinallyCanBeTryWithResources", "TryWithIdenticalCatches", "UnnecessaryBoxing", "UnnecessaryUnboxing", "UnusedAssignment"})
        public static class Queue
                extends    com.tangosol.coherence.component.util.daemon.QueueProcessor.Queue
            {
            // ---- Fields declarations ----
            private static com.tangosol.util.ListMap __mapChildren;
            
            // Static initializer
            static
                {
                __initStatic();
                }
            
            // Default static initializer
            private static void __initStatic()
                {
                // register child classes
                __mapChildren = new com.tangosol.util.ListMap();
                __mapChildren.put("Iterator", Cluster.PacketListener1.Queue.Iterator.get_CLASS());
                }
            
            // Default constructor
            public Queue()
                {
                this(null, null, true);
                }
            
            // Initializing constructor
            public Queue(String sName, com.tangosol.coherence.Component compParent, boolean fInit)
                {
                super(sName, compParent, false);
                
                if (fInit)
                    {
                    __init();
                    }
                }
            
            // Main initializer
            public void __init()
                {
                // private initialization
                __initPrivate();
                
                // state initialization: public and protected properties
                try
                    {
                    setElementList(new com.tangosol.util.RecyclingLinkedList());
                    }
                catch (java.lang.Exception e)
                    {
                    // re-throw as a runtime exception
                    throw new com.tangosol.util.WrapperException(e);
                    }
                
                // containment initialization: children
                
                // signal the end of the initialization
                set_Constructed(true);
                }
            
            // Private initializer
            protected void __initPrivate()
                {
                
                super.__initPrivate();
                }
            
            //++ getter for static property _Instance
            /**
             * Getter for property _Instance.<p>
            * Auto generated
             */
            public static com.tangosol.coherence.Component get_Instance()
                {
                return new com.tangosol.coherence.component.net.Cluster.PacketListener1.Queue();
                }
            
            //++ getter for static property _CLASS
            /**
             * Getter for property _CLASS.<p>
            * Property with auto-generated accessor that returns the Class
            * object for a given component.
             */
            public static Class get_CLASS()
                {
                Class clz;
                try
                    {
                    clz = Class.forName("com.tangosol.coherence/component/net/Cluster$PacketListener1$Queue".replace('/', '.'));
                    }
                catch (ClassNotFoundException e)
                    {
                    throw new NoClassDefFoundError(e.getMessage());
                    }
                return clz;
                }
            
            //++ getter for autogen property _Module
            /**
             * This is an auto-generated method that returns the global [design
            * time] parent component.
            * 
            * Note: the class generator will ignore any custom implementation
            * for this behavior.
             */
            private com.tangosol.coherence.Component get_Module()
                {
                return this.get_Parent().get_Parent();
                }
            
            //++ getter for autogen property _ChildClasses
            /**
             * This is an auto-generated method that returns the map of design
            * time [static] children.
            * 
            * Note: the class generator will ignore any custom implementation
            * for this behavior.
             */
            protected java.util.Map get_ChildClasses()
                {
                return __mapChildren;
                }

            // ---- class: com.tangosol.coherence.component.net.Cluster$PacketListener1$Queue$Iterator
            
            /**
             * Iterator of a snapshot of the List object that backs the Queue.
             * Supports remove(). Uses the Queue as the monitor if any
             * synchronization is required.
             */
            @SuppressWarnings({"deprecation", "rawtypes", "unused", "unchecked", "ConstantConditions", "DuplicatedCode", "ForLoopReplaceableByForEach", "IfCanBeSwitch", "RedundantArrayCreation", "RedundantSuppression", "SameParameterValue", "TryFinallyCanBeTryWithResources", "TryWithIdenticalCatches", "UnnecessaryBoxing", "UnnecessaryUnboxing", "UnusedAssignment"})
            public static class Iterator
                    extends    com.tangosol.coherence.component.util.daemon.QueueProcessor.Queue.Iterator
                {
                // ---- Fields declarations ----
                
                // Default constructor
                public Iterator()
                    {
                    this(null, null, true);
                    }
                
                // Initializing constructor
                public Iterator(String sName, com.tangosol.coherence.Component compParent, boolean fInit)
                    {
                    super(sName, compParent, false);
                    
                    if (fInit)
                        {
                        __init();
                        }
                    }
                
                // Main initializer
                public void __init()
                    {
                    // private initialization
                    __initPrivate();
                    
                    
                    // signal the end of the initialization
                    set_Constructed(true);
                    }
                
                // Private initializer
                protected void __initPrivate()
                    {
                    
                    super.__initPrivate();
                    }
                
                //++ getter for static property _Instance
                /**
                 * Getter for property _Instance.<p>
                * Auto generated
                 */
                public static com.tangosol.coherence.Component get_Instance()
                    {
                    return new com.tangosol.coherence.component.net.Cluster.PacketListener1.Queue.Iterator();
                    }
                
                //++ getter for static property _CLASS
                /**
                 * Getter for property _CLASS.<p>
                * Property with auto-generated accessor that returns the Class
                * object for a given component.
                 */
                public static Class get_CLASS()
                    {
                    Class clz;
                    try
                        {
                        clz = Class.forName("com.tangosol.coherence/component/net/Cluster$PacketListener1$Queue$Iterator".replace('/', '.'));
                        }
                    catch (ClassNotFoundException e)
                        {
                        throw new NoClassDefFoundError(e.getMessage());
                        }
                    return clz;
                    }
                
                //++ getter for autogen property _Module
                /**
                 * This is an auto-generated method that returns the global
                * [design time] parent component.
                * 
                * Note: the class generator will ignore any custom
                * implementation for this behavior.
                 */
                private com.tangosol.coherence.Component get_Module()
                    {
                    return this.get_Parent().get_Parent().get_Parent();
                    }
                }
            }
        }

    // ---- class: com.tangosol.coherence.component.net.Cluster$PacketListener1P
    
    /**
     * PacketListener1P listens on the Member's preferred port for packets up
     * to the cluster's PreferredPacketLength.
     */
    @SuppressWarnings({"deprecation", "rawtypes", "unused", "unchecked", "ConstantConditions", "DuplicatedCode", "ForLoopReplaceableByForEach", "IfCanBeSwitch", "RedundantArrayCreation", "RedundantSuppression", "SameParameterValue", "TryFinallyCanBeTryWithResources", "TryWithIdenticalCatches", "UnnecessaryBoxing", "UnnecessaryUnboxing", "UnusedAssignment"})
    public static class PacketListener1P
            extends    com.tangosol.coherence.component.util.daemon.queueProcessor.packetProcessor.PacketListener
        {
        // ---- Fields declarations ----
        private static com.tangosol.util.ListMap __mapChildren;
        
        // Static initializer
        static
            {
            __initStatic();
            }
        
        // Default static initializer
        private static void __initStatic()
            {
            // register child classes
            __mapChildren = new com.tangosol.util.ListMap();
            __mapChildren.put("Queue", Cluster.PacketListener1P.Queue.get_CLASS());
            }
        
        // Default constructor
        public PacketListener1P()
            {
            this(null, null, true);
            }
        
        // Initializing constructor
        public PacketListener1P(String sName, com.tangosol.coherence.Component compParent, boolean fInit)
            {
            super(sName, compParent, false);
            
            if (fInit)
                {
                __init();
                }
            }
        
        // Main initializer
        public void __init()
            {
            // private initialization
            __initPrivate();
            
            // state initialization: public and protected properties
            try
                {
                setDaemonState(0);
                setDefaultGuardRecovery(0.9F);
                setDefaultGuardTimeout(60000L);
                setNotifier(new com.oracle.coherence.common.base.SingleWaiterMultiNotifier());
                }
            catch (java.lang.Exception e)
                {
                // re-throw as a runtime exception
                throw new com.tangosol.util.WrapperException(e);
                }
            
            // containment initialization: children
            
            // signal the end of the initialization
            set_Constructed(true);
            }
        
        // Private initializer
        protected void __initPrivate()
            {
            
            super.__initPrivate();
            }
        
        //++ getter for static property _Instance
        /**
         * Getter for property _Instance.<p>
        * Auto generated
         */
        public static com.tangosol.coherence.Component get_Instance()
            {
            return new com.tangosol.coherence.component.net.Cluster.PacketListener1P();
            }
        
        //++ getter for static property _CLASS
        /**
         * Getter for property _CLASS.<p>
        * Property with auto-generated accessor that returns the Class object
        * for a given component.
         */
        public static Class get_CLASS()
            {
            Class clz;
            try
                {
                clz = Class.forName("com.tangosol.coherence/component/net/Cluster$PacketListener1P".replace('/', '.'));
                }
            catch (ClassNotFoundException e)
                {
                throw new NoClassDefFoundError(e.getMessage());
                }
            return clz;
            }
        
        //++ getter for autogen property _Module
        /**
         * This is an auto-generated method that returns the global [design
        * time] parent component.
        * 
        * Note: the class generator will ignore any custom implementation for
        * this behavior.
         */
        private com.tangosol.coherence.Component get_Module()
            {
            return this.get_Parent();
            }
        
        //++ getter for autogen property _ChildClasses
        /**
         * This is an auto-generated method that returns the map of design time
        * [static] children.
        * 
        * Note: the class generator will ignore any custom implementation for
        * this behavior.
         */
        protected java.util.Map get_ChildClasses()
            {
            return __mapChildren;
            }
        
        // Declared at the super level
        /**
         * This event occurs when an exception is thrown from onEnter, onWait,
        * onNotify and onExit.
        * 
        * If the exception should terminate the daemon, call stop(). The
        * default implementation prints debugging information and terminates
        * the daemon.
        * 
        * @param e  the Throwable object (a RuntimeException or an Error)
        * 
        * @throws RuntimeException may be thrown; will terminate the daemon
        * @throws Error may be thrown; will terminate the daemon
         */
        protected void onException(Throwable e)
            {
            Cluster cluster = (Cluster) get_Module();
            try
                {
                if (cluster.getState() < Cluster.STATE_RUNNING)
                    {
                    super.onException(e);
                    }
                }
            finally
                {
                cluster.onException(e);
                }
            }
        
        // Declared at the super level
        /**
         * Invoked when a packet is received.
         */
        protected void onPacket(java.net.SocketAddress addrSource, java.nio.ByteBuffer bufPacket)
            {
            ((Cluster) get_Module()).onPacket(this, addrSource, bufPacket);
            }

        // ---- class: com.tangosol.coherence.component.net.Cluster$PacketListener1P$Queue
        
        /**
         * This is the Queue to which items that need to be processed are
         * added, and from which the daemon pulls items to process.
         */
        @SuppressWarnings({"deprecation", "rawtypes", "unused", "unchecked", "ConstantConditions", "DuplicatedCode", "ForLoopReplaceableByForEach", "IfCanBeSwitch", "RedundantArrayCreation", "RedundantSuppression", "SameParameterValue", "TryFinallyCanBeTryWithResources", "TryWithIdenticalCatches", "UnnecessaryBoxing", "UnnecessaryUnboxing", "UnusedAssignment"})
        public static class Queue
                extends    com.tangosol.coherence.component.util.daemon.QueueProcessor.Queue
            {
            // ---- Fields declarations ----
            private static com.tangosol.util.ListMap __mapChildren;
            
            // Static initializer
            static
                {
                __initStatic();
                }
            
            // Default static initializer
            private static void __initStatic()
                {
                // register child classes
                __mapChildren = new com.tangosol.util.ListMap();
                __mapChildren.put("Iterator", Cluster.PacketListener1P.Queue.Iterator.get_CLASS());
                }
            
            // Default constructor
            public Queue()
                {
                this(null, null, true);
                }
            
            // Initializing constructor
            public Queue(String sName, com.tangosol.coherence.Component compParent, boolean fInit)
                {
                super(sName, compParent, false);
                
                if (fInit)
                    {
                    __init();
                    }
                }
            
            // Main initializer
            public void __init()
                {
                // private initialization
                __initPrivate();
                
                // state initialization: public and protected properties
                try
                    {
                    setElementList(new com.tangosol.util.RecyclingLinkedList());
                    }
                catch (java.lang.Exception e)
                    {
                    // re-throw as a runtime exception
                    throw new com.tangosol.util.WrapperException(e);
                    }
                
                // containment initialization: children
                
                // signal the end of the initialization
                set_Constructed(true);
                }
            
            // Private initializer
            protected void __initPrivate()
                {
                
                super.__initPrivate();
                }
            
            //++ getter for static property _Instance
            /**
             * Getter for property _Instance.<p>
            * Auto generated
             */
            public static com.tangosol.coherence.Component get_Instance()
                {
                return new com.tangosol.coherence.component.net.Cluster.PacketListener1P.Queue();
                }
            
            //++ getter for static property _CLASS
            /**
             * Getter for property _CLASS.<p>
            * Property with auto-generated accessor that returns the Class
            * object for a given component.
             */
            public static Class get_CLASS()
                {
                Class clz;
                try
                    {
                    clz = Class.forName("com.tangosol.coherence/component/net/Cluster$PacketListener1P$Queue".replace('/', '.'));
                    }
                catch (ClassNotFoundException e)
                    {
                    throw new NoClassDefFoundError(e.getMessage());
                    }
                return clz;
                }
            
            //++ getter for autogen property _Module
            /**
             * This is an auto-generated method that returns the global [design
            * time] parent component.
            * 
            * Note: the class generator will ignore any custom implementation
            * for this behavior.
             */
            private com.tangosol.coherence.Component get_Module()
                {
                return this.get_Parent().get_Parent();
                }
            
            //++ getter for autogen property _ChildClasses
            /**
             * This is an auto-generated method that returns the map of design
            * time [static] children.
            * 
            * Note: the class generator will ignore any custom implementation
            * for this behavior.
             */
            protected java.util.Map get_ChildClasses()
                {
                return __mapChildren;
                }

            // ---- class: com.tangosol.coherence.component.net.Cluster$PacketListener1P$Queue$Iterator
            
            /**
             * Iterator of a snapshot of the List object that backs the Queue.
             * Supports remove(). Uses the Queue as the monitor if any
             * synchronization is required.
             */
            @SuppressWarnings({"deprecation", "rawtypes", "unused", "unchecked", "ConstantConditions", "DuplicatedCode", "ForLoopReplaceableByForEach", "IfCanBeSwitch", "RedundantArrayCreation", "RedundantSuppression", "SameParameterValue", "TryFinallyCanBeTryWithResources", "TryWithIdenticalCatches", "UnnecessaryBoxing", "UnnecessaryUnboxing", "UnusedAssignment"})
            public static class Iterator
                    extends    com.tangosol.coherence.component.util.daemon.QueueProcessor.Queue.Iterator
                {
                // ---- Fields declarations ----
                
                // Default constructor
                public Iterator()
                    {
                    this(null, null, true);
                    }
                
                // Initializing constructor
                public Iterator(String sName, com.tangosol.coherence.Component compParent, boolean fInit)
                    {
                    super(sName, compParent, false);
                    
                    if (fInit)
                        {
                        __init();
                        }
                    }
                
                // Main initializer
                public void __init()
                    {
                    // private initialization
                    __initPrivate();
                    
                    
                    // signal the end of the initialization
                    set_Constructed(true);
                    }
                
                // Private initializer
                protected void __initPrivate()
                    {
                    
                    super.__initPrivate();
                    }
                
                //++ getter for static property _Instance
                /**
                 * Getter for property _Instance.<p>
                * Auto generated
                 */
                public static com.tangosol.coherence.Component get_Instance()
                    {
                    return new com.tangosol.coherence.component.net.Cluster.PacketListener1P.Queue.Iterator();
                    }
                
                //++ getter for static property _CLASS
                /**
                 * Getter for property _CLASS.<p>
                * Property with auto-generated accessor that returns the Class
                * object for a given component.
                 */
                public static Class get_CLASS()
                    {
                    Class clz;
                    try
                        {
                        clz = Class.forName("com.tangosol.coherence/component/net/Cluster$PacketListener1P$Queue$Iterator".replace('/', '.'));
                        }
                    catch (ClassNotFoundException e)
                        {
                        throw new NoClassDefFoundError(e.getMessage());
                        }
                    return clz;
                    }
                
                //++ getter for autogen property _Module
                /**
                 * This is an auto-generated method that returns the global
                * [design time] parent component.
                * 
                * Note: the class generator will ignore any custom
                * implementation for this behavior.
                 */
                private com.tangosol.coherence.Component get_Module()
                    {
                    return this.get_Parent().get_Parent().get_Parent();
                    }
                }
            }
        }

    // ---- class: com.tangosol.coherence.component.net.Cluster$PacketListenerBT
    
    /**
     * PacketListener1A listens on the auxiliary Cluster port within WKA
     * clusters  for discovery packets from members not yet in the cluster.
     * 
     * Here auxiliary really means opposite, namely if listener 1B listens on
     * UDP then this listener is on TCP, and vice-versa.
     */
    @SuppressWarnings({"deprecation", "rawtypes", "unused", "unchecked", "ConstantConditions", "DuplicatedCode", "ForLoopReplaceableByForEach", "IfCanBeSwitch", "RedundantArrayCreation", "RedundantSuppression", "SameParameterValue", "TryFinallyCanBeTryWithResources", "TryWithIdenticalCatches", "UnnecessaryBoxing", "UnnecessaryUnboxing", "UnusedAssignment"})
    public static class PacketListenerBT
            extends    com.tangosol.coherence.component.util.daemon.queueProcessor.packetProcessor.PacketListener
        {
        // ---- Fields declarations ----
        private static com.tangosol.util.ListMap __mapChildren;
        
        // Static initializer
        static
            {
            __initStatic();
            }
        
        // Default static initializer
        private static void __initStatic()
            {
            // register child classes
            __mapChildren = new com.tangosol.util.ListMap();
            __mapChildren.put("Queue", Cluster.PacketListenerBT.Queue.get_CLASS());
            }
        
        // Default constructor
        public PacketListenerBT()
            {
            this(null, null, true);
            }
        
        // Initializing constructor
        public PacketListenerBT(String sName, com.tangosol.coherence.Component compParent, boolean fInit)
            {
            super(sName, compParent, false);
            
            if (fInit)
                {
                __init();
                }
            }
        
        // Main initializer
        public void __init()
            {
            // private initialization
            __initPrivate();
            
            // state initialization: public and protected properties
            try
                {
                setDaemonState(0);
                setDefaultGuardRecovery(0.9F);
                setDefaultGuardTimeout(60000L);
                setNotifier(new com.oracle.coherence.common.base.SingleWaiterMultiNotifier());
                }
            catch (java.lang.Exception e)
                {
                // re-throw as a runtime exception
                throw new com.tangosol.util.WrapperException(e);
                }
            
            // containment initialization: children
            
            // signal the end of the initialization
            set_Constructed(true);
            }
        
        // Private initializer
        protected void __initPrivate()
            {
            
            super.__initPrivate();
            }
        
        //++ getter for static property _Instance
        /**
         * Getter for property _Instance.<p>
        * Auto generated
         */
        public static com.tangosol.coherence.Component get_Instance()
            {
            return new com.tangosol.coherence.component.net.Cluster.PacketListenerBT();
            }
        
        //++ getter for static property _CLASS
        /**
         * Getter for property _CLASS.<p>
        * Property with auto-generated accessor that returns the Class object
        * for a given component.
         */
        public static Class get_CLASS()
            {
            Class clz;
            try
                {
                clz = Class.forName("com.tangosol.coherence/component/net/Cluster$PacketListenerBT".replace('/', '.'));
                }
            catch (ClassNotFoundException e)
                {
                throw new NoClassDefFoundError(e.getMessage());
                }
            return clz;
            }
        
        //++ getter for autogen property _Module
        /**
         * This is an auto-generated method that returns the global [design
        * time] parent component.
        * 
        * Note: the class generator will ignore any custom implementation for
        * this behavior.
         */
        private com.tangosol.coherence.Component get_Module()
            {
            return this.get_Parent();
            }
        
        //++ getter for autogen property _ChildClasses
        /**
         * This is an auto-generated method that returns the map of design time
        * [static] children.
        * 
        * Note: the class generator will ignore any custom implementation for
        * this behavior.
         */
        protected java.util.Map get_ChildClasses()
            {
            return __mapChildren;
            }
        
        // Declared at the super level
        /**
         * This event occurs when an exception is thrown from onEnter, onWait,
        * onNotify and onExit.
        * 
        * If the exception should terminate the daemon, call stop(). The
        * default implementation prints debugging information and terminates
        * the daemon.
        * 
        * @param e  the Throwable object (a RuntimeException or an Error)
        * 
        * @throws RuntimeException may be thrown; will terminate the daemon
        * @throws Error may be thrown; will terminate the daemon
         */
        protected void onException(Throwable e)
            {
            Cluster cluster = (Cluster) get_Module();
            int     nState  = cluster.getState();
            if (nState < Cluster.STATE_LEAVING) // stopped by ClusterService.onExit
                {
                try
                    {
                    if (nState < Cluster.STATE_RUNNING)
                        {
                        super.onException(e);
                        }
                    }
                finally
                    {
                    cluster.onException(e);
                    }
                }
            }
        
        // Declared at the super level
        /**
         * Invoked when a packet is received.
         */
        protected void onPacket(java.net.SocketAddress addrSource, java.nio.ByteBuffer bufPacket)
            {
            ((Cluster) get_Module()).onPacket(this, addrSource, bufPacket);
            }

        // ---- class: com.tangosol.coherence.component.net.Cluster$PacketListenerBT$Queue
        
        /**
         * This is the Queue to which items that need to be processed are
         * added, and from which the daemon pulls items to process.
         */
        @SuppressWarnings({"deprecation", "rawtypes", "unused", "unchecked", "ConstantConditions", "DuplicatedCode", "ForLoopReplaceableByForEach", "IfCanBeSwitch", "RedundantArrayCreation", "RedundantSuppression", "SameParameterValue", "TryFinallyCanBeTryWithResources", "TryWithIdenticalCatches", "UnnecessaryBoxing", "UnnecessaryUnboxing", "UnusedAssignment"})
        public static class Queue
                extends    com.tangosol.coherence.component.util.daemon.QueueProcessor.Queue
            {
            // ---- Fields declarations ----
            private static com.tangosol.util.ListMap __mapChildren;
            
            // Static initializer
            static
                {
                __initStatic();
                }
            
            // Default static initializer
            private static void __initStatic()
                {
                // register child classes
                __mapChildren = new com.tangosol.util.ListMap();
                __mapChildren.put("Iterator", Cluster.PacketListenerBT.Queue.Iterator.get_CLASS());
                }
            
            // Default constructor
            public Queue()
                {
                this(null, null, true);
                }
            
            // Initializing constructor
            public Queue(String sName, com.tangosol.coherence.Component compParent, boolean fInit)
                {
                super(sName, compParent, false);
                
                if (fInit)
                    {
                    __init();
                    }
                }
            
            // Main initializer
            public void __init()
                {
                // private initialization
                __initPrivate();
                
                // state initialization: public and protected properties
                try
                    {
                    setElementList(new com.tangosol.util.RecyclingLinkedList());
                    }
                catch (java.lang.Exception e)
                    {
                    // re-throw as a runtime exception
                    throw new com.tangosol.util.WrapperException(e);
                    }
                
                // containment initialization: children
                
                // signal the end of the initialization
                set_Constructed(true);
                }
            
            // Private initializer
            protected void __initPrivate()
                {
                
                super.__initPrivate();
                }
            
            //++ getter for static property _Instance
            /**
             * Getter for property _Instance.<p>
            * Auto generated
             */
            public static com.tangosol.coherence.Component get_Instance()
                {
                return new com.tangosol.coherence.component.net.Cluster.PacketListenerBT.Queue();
                }
            
            //++ getter for static property _CLASS
            /**
             * Getter for property _CLASS.<p>
            * Property with auto-generated accessor that returns the Class
            * object for a given component.
             */
            public static Class get_CLASS()
                {
                Class clz;
                try
                    {
                    clz = Class.forName("com.tangosol.coherence/component/net/Cluster$PacketListenerBT$Queue".replace('/', '.'));
                    }
                catch (ClassNotFoundException e)
                    {
                    throw new NoClassDefFoundError(e.getMessage());
                    }
                return clz;
                }
            
            //++ getter for autogen property _Module
            /**
             * This is an auto-generated method that returns the global [design
            * time] parent component.
            * 
            * Note: the class generator will ignore any custom implementation
            * for this behavior.
             */
            private com.tangosol.coherence.Component get_Module()
                {
                return this.get_Parent().get_Parent();
                }
            
            //++ getter for autogen property _ChildClasses
            /**
             * This is an auto-generated method that returns the map of design
            * time [static] children.
            * 
            * Note: the class generator will ignore any custom implementation
            * for this behavior.
             */
            protected java.util.Map get_ChildClasses()
                {
                return __mapChildren;
                }

            // ---- class: com.tangosol.coherence.component.net.Cluster$PacketListenerBT$Queue$Iterator
            
            /**
             * Iterator of a snapshot of the List object that backs the Queue.
             * Supports remove(). Uses the Queue as the monitor if any
             * synchronization is required.
             */
            @SuppressWarnings({"deprecation", "rawtypes", "unused", "unchecked", "ConstantConditions", "DuplicatedCode", "ForLoopReplaceableByForEach", "IfCanBeSwitch", "RedundantArrayCreation", "RedundantSuppression", "SameParameterValue", "TryFinallyCanBeTryWithResources", "TryWithIdenticalCatches", "UnnecessaryBoxing", "UnnecessaryUnboxing", "UnusedAssignment"})
            public static class Iterator
                    extends    com.tangosol.coherence.component.util.daemon.QueueProcessor.Queue.Iterator
                {
                // ---- Fields declarations ----
                
                // Default constructor
                public Iterator()
                    {
                    this(null, null, true);
                    }
                
                // Initializing constructor
                public Iterator(String sName, com.tangosol.coherence.Component compParent, boolean fInit)
                    {
                    super(sName, compParent, false);
                    
                    if (fInit)
                        {
                        __init();
                        }
                    }
                
                // Main initializer
                public void __init()
                    {
                    // private initialization
                    __initPrivate();
                    
                    
                    // signal the end of the initialization
                    set_Constructed(true);
                    }
                
                // Private initializer
                protected void __initPrivate()
                    {
                    
                    super.__initPrivate();
                    }
                
                //++ getter for static property _Instance
                /**
                 * Getter for property _Instance.<p>
                * Auto generated
                 */
                public static com.tangosol.coherence.Component get_Instance()
                    {
                    return new com.tangosol.coherence.component.net.Cluster.PacketListenerBT.Queue.Iterator();
                    }
                
                //++ getter for static property _CLASS
                /**
                 * Getter for property _CLASS.<p>
                * Property with auto-generated accessor that returns the Class
                * object for a given component.
                 */
                public static Class get_CLASS()
                    {
                    Class clz;
                    try
                        {
                        clz = Class.forName("com.tangosol.coherence/component/net/Cluster$PacketListenerBT$Queue$Iterator".replace('/', '.'));
                        }
                    catch (ClassNotFoundException e)
                        {
                        throw new NoClassDefFoundError(e.getMessage());
                        }
                    return clz;
                    }
                
                //++ getter for autogen property _Module
                /**
                 * This is an auto-generated method that returns the global
                * [design time] parent component.
                * 
                * Note: the class generator will ignore any custom
                * implementation for this behavior.
                 */
                private com.tangosol.coherence.Component get_Module()
                    {
                    return this.get_Parent().get_Parent().get_Parent();
                    }
                }
            }
        }

    // ---- class: com.tangosol.coherence.component.net.Cluster$PacketListenerBU
    
    /**
     * PacketListener1BU listens on the Cluster port within WKA clusters  for
     * discovery packets from members not yet in the cluster.
     */
    @SuppressWarnings({"deprecation", "rawtypes", "unused", "unchecked", "ConstantConditions", "DuplicatedCode", "ForLoopReplaceableByForEach", "IfCanBeSwitch", "RedundantArrayCreation", "RedundantSuppression", "SameParameterValue", "TryFinallyCanBeTryWithResources", "TryWithIdenticalCatches", "UnnecessaryBoxing", "UnnecessaryUnboxing", "UnusedAssignment"})
    public static class PacketListenerBU
            extends    com.tangosol.coherence.component.util.daemon.queueProcessor.packetProcessor.PacketListener
        {
        // ---- Fields declarations ----
        
        /**
         * Property InGroup
         *
         */
        private boolean __m_InGroup;
        
        /**
         * Property SuspectBinding
         *
         * True if the binding is suspect.
         */
        private boolean __m_SuspectBinding;
        
        /**
         * Property SuspectGroupTimestamp
         *
         * The time by which a MC packet must be received or else a MC rejoin
         * will be performed.
         */
        private long __m_SuspectGroupTimestamp;
        private static com.tangosol.util.ListMap __mapChildren;
        
        // Static initializer
        static
            {
            __initStatic();
            }
        
        // Default static initializer
        private static void __initStatic()
            {
            // register child classes
            __mapChildren = new com.tangosol.util.ListMap();
            __mapChildren.put("Queue", Cluster.PacketListenerBU.Queue.get_CLASS());
            }
        
        // Default constructor
        public PacketListenerBU()
            {
            this(null, null, true);
            }
        
        // Initializing constructor
        public PacketListenerBU(String sName, com.tangosol.coherence.Component compParent, boolean fInit)
            {
            super(sName, compParent, false);
            
            if (fInit)
                {
                __init();
                }
            }
        
        // Main initializer
        public void __init()
            {
            // private initialization
            __initPrivate();
            
            // state initialization: public and protected properties
            try
                {
                setDaemonState(0);
                setDefaultGuardRecovery(0.9F);
                setDefaultGuardTimeout(60000L);
                setNotifier(new com.oracle.coherence.common.base.SingleWaiterMultiNotifier());
                }
            catch (java.lang.Exception e)
                {
                // re-throw as a runtime exception
                throw new com.tangosol.util.WrapperException(e);
                }
            
            // containment initialization: children
            
            // signal the end of the initialization
            set_Constructed(true);
            }
        
        // Private initializer
        protected void __initPrivate()
            {
            
            super.__initPrivate();
            }
        
        //++ getter for static property _Instance
        /**
         * Getter for property _Instance.<p>
        * Auto generated
         */
        public static com.tangosol.coherence.Component get_Instance()
            {
            return new com.tangosol.coherence.component.net.Cluster.PacketListenerBU();
            }
        
        //++ getter for static property _CLASS
        /**
         * Getter for property _CLASS.<p>
        * Property with auto-generated accessor that returns the Class object
        * for a given component.
         */
        public static Class get_CLASS()
            {
            Class clz;
            try
                {
                clz = Class.forName("com.tangosol.coherence/component/net/Cluster$PacketListenerBU".replace('/', '.'));
                }
            catch (ClassNotFoundException e)
                {
                throw new NoClassDefFoundError(e.getMessage());
                }
            return clz;
            }
        
        //++ getter for autogen property _Module
        /**
         * This is an auto-generated method that returns the global [design
        * time] parent component.
        * 
        * Note: the class generator will ignore any custom implementation for
        * this behavior.
         */
        private com.tangosol.coherence.Component get_Module()
            {
            return this.get_Parent();
            }
        
        //++ getter for autogen property _ChildClasses
        /**
         * This is an auto-generated method that returns the map of design time
        * [static] children.
        * 
        * Note: the class generator will ignore any custom implementation for
        * this behavior.
         */
        protected java.util.Map get_ChildClasses()
            {
            return __mapChildren;
            }
        
        /**
         * Ensure that the socket is properly bound, this means that it can hear
        * the expected unicast and or multicast communications.
         */
        public void ensureBinding()
            {
            // import Component.Net.Packet;
            // import com.tangosol.util.Base;
            // import java.io.IOException;
            // import java.net.DatagramPacket;
            // import java.net.DatagramSocket;
            // import java.net.InetAddress;
            // import java.nio.ByteBuffer;
            
            boolean fRebound = false;
            
            if (isSuspectBinding())
                {
                // rebind the socket, our binding can effectively be stolen
                // if a multicast node for some other cluster has started on
                // this machine, some OSs (Linux, AIX) will only direct unicast
                // packets for a given UDP REUSE_ADDR port to the latest binding.
                // rebinding allows us to steel it back
                ((Cluster.SocketManager.BroadcastUdpSocket) getUdpSocket()).rebind();
                setSuspectBinding(false);
                fRebound = true;
                }
            else if (((Cluster) get_Module()).getTcpBroadcastListener().isStarted()) // we should also own the unicast listen port
                {
                setSuspectBinding(true);
            
                // send to myself to ensure we're not deaf, i.e. that our binding hasn't been stollen
                // by a multicast node
                
                ByteBuffer bufTest = ByteBuffer.allocate(4);
                bufTest.putInt(Packet.TYPE_TEST_MULTICAST).flip(); // MulticastTest uses this header and listener knows to ignore it
            
                DatagramSocket socket = getUdpSocket().getDatagramSocket();
                InetAddress addrLocal = socket.getLocalAddress();
                if (addrLocal == null || addrLocal.isAnyLocalAddress())
                    {
                    addrLocal = InetAddress.getLoopbackAddress();
                    }
            
                try
                    {
                    socket.send(new DatagramPacket(bufTest.array(), bufTest.limit(), addrLocal, socket.getLocalPort()));
                    }
                catch (IOException e) {}
                }
            
            // additionally ensure we are hearing MC transmissions
            if (isInGroup())
                {
                if (fRebound || Base.getSafeTimeMillis() > getSuspectGroupTimestamp())
                    {
                    // COH-883: rejoin the multicast group in case of listener failure
                    //          by refreshing the multicast socket
                    if (!fRebound)
                        {
                        _trace("Scheduled senior member heartbeat is overdue; rejoining multicast group.", 9);
                        }
                    // else; don't log a message if we did the rebind
            
                    try
                        {
                        leaveGroup();
                        }
                    finally
                        {
                        joinGroup();
                        }
                    }
                }
            }
        
        // Accessor for the property "SuspectGroupTimestamp"
        /**
         * Getter for property SuspectGroupTimestamp.<p>
        * The time by which a MC packet must be received or else a MC rejoin
        * will be performed.
         */
        public long getSuspectGroupTimestamp()
            {
            return __m_SuspectGroupTimestamp;
            }
        
        // Accessor for the property "InGroup"
        /**
         * Getter for property InGroup.<p>
         */
        public boolean isInGroup()
            {
            return __m_InGroup;
            }
        
        // Accessor for the property "SuspectBinding"
        /**
         * Getter for property SuspectBinding.<p>
        * True if the binding is suspect.
         */
        public boolean isSuspectBinding()
            {
            return __m_SuspectBinding;
            }
        
        public void joinGroup()
            {
            // import com.tangosol.net.ClusterDependencies;
            // import java.io.IOException;;
            // import java.io.IOException;
            // import java.net.InetAddress;
            // import java.net.InetSocketAddress;
            // import java.net.NetworkInterface;
            // import java.net.MulticastSocket;
            
            MulticastSocket socket = (MulticastSocket) getUdpSocket().getDatagramSocket();
            
            try
                {
                if (!isInGroup())
                    {
                    setInGroup(true); // record that we are supposed to be in the group; allows periodic rejoins on failure
            
                    Cluster             cluster   = (Cluster) get_Module();
                    ClusterDependencies config    = cluster.getDependencies();
                    InetAddress         addrMcast = config.getLocalDiscoveryAddress();
            
                    socket.joinGroup(new InetSocketAddress(config.getGroupAddress(),
                        config.getGroupPort()),
                        addrMcast == null ?
                            null : NetworkInterface.getByInetAddress(addrMcast));
            
                    resetSuspectGroupTimestamp();
                    }
                }
            catch (IOException e)
                {
                if (!socket.isClosed())
                    {
                    getUdpSocket().onException(e);
                    }
                }
            }
        
        public void leaveGroup()
            {
            // import java.io.IOException;
            // import java.net.InetSocketAddress;
            // import java.net.MulticastSocket;
            
            MulticastSocket socket  = (MulticastSocket) getUdpSocket().getDatagramSocket();
            
            if (isInGroup())
                {
                try
                    {
                    setInGroup(false);
                    Cluster         cluster = (Cluster) get_Module();
                    socket.leaveGroup(
                        new InetSocketAddress(cluster.getDependencies().getGroupAddress(), cluster.getDependencies().getGroupPort()),
                        /*interface*/ null);
                    }
                catch (IOException e)
                    {
                    if (!socket.isClosed())
                        {
                        getUdpSocket().onException(e);
                        }
                    }
                }
            }
        
        // Declared at the super level
        /**
         * Event notification called once the daemon's thread starts and before
        * the daemon thread goes into the "wait - perform" loop. Unlike the
        * <code>onInit()</code> event, this method executes on the daemon's
        * thread.
        * 
        * Note1: this method is called while the caller's thread is still
        * waiting for a notification to  "unblock" itself.
        * Note2: any exception thrown by this method will terminate the thread
        * immediately
         */
        protected void onEnter()
            {
            // import java.io.IOException;
            // import java.net.DatagramPacket;
            // import java.net.DatagramSocket;
            
            super.onEnter();
            
            // drain existing contents which may be quite old, on Linux for instance if another process
            // on the box is in the group then any process bound to the port may also receive the packets.
            // the old packets could contains SMHB which would be confusing when processed long after they
            // were sent, so we drain any existing contents when starting the listener.
            // Note: the only reason this socket is bound before we start the listener is that we are allowed
            // to send discovery messages at any time, through realistically they are only sent during join
            // so we could remove this "drain" by having a temporary socket used duing join.
            DatagramSocket socket   = getUdpSocket().getDatagramSocket();
            int            cbPacket = getPacketLength();
            int            cMillis  = 0;
            try
                {
                cMillis = socket.getSoTimeout();
                socket.setSoTimeout(1);
            
                DatagramPacket p = new DatagramPacket(new byte[cbPacket], cbPacket);
                for (;;)
                    {
                    socket.receive(p);
                    }
                // we never get here; we only exit via an exception
                }
            catch (IOException e)
                {
                // normal exit point from the above loops
                }
            finally
                {
                try
                    {
                    socket.setSoTimeout(cMillis);
                    }
                catch (IOException e)
                    {
                    onException(e);
                    }
                }
            
            setWaitMillis(cMillis);
            }
        
        // Declared at the super level
        /**
         * This event occurs when an exception is thrown from onEnter, onWait,
        * onNotify and onExit.
        * 
        * If the exception should terminate the daemon, call stop(). The
        * default implementation prints debugging information and terminates
        * the daemon.
        * 
        * @param e  the Throwable object (a RuntimeException or an Error)
        * 
        * @throws RuntimeException may be thrown; will terminate the daemon
        * @throws Error may be thrown; will terminate the daemon
         */
        protected void onException(Throwable e)
            {
            Cluster cluster = (Cluster) get_Module();
            int     nState  = cluster.getState();
            if (nState < Cluster.STATE_LEAVING) // stopped by ClusterService.onExit
                {
                try
                    {
                    if (nState < Cluster.STATE_RUNNING)
                        {
                        super.onException(e);
                        }
                    }
                finally
                    {
                    cluster.onException(e);
                    }
                }
            }
        
        // Declared at the super level
        /**
         * Event notification for performing low frequency periodic maintance
        * tasks.  The interval is dictated by the WaitMillis property.
        * 
        * This is used for tasks which have a high enough cost that it is not
        * reasonble to perform them on every call to onWait() since it could be
        * called with a high frequency in the presense of work-loads with fast
        * oscillation between onWait() and onNotify().  As an example a single
        * threaded client could produce such a load.
         */
        protected void onInterval()
            {
            super.onInterval();
            
            ensureBinding();
            }
        
        // Declared at the super level
        /**
         * Invoked when a packet is received.
         */
        protected void onPacket(java.net.SocketAddress addrSource, java.nio.ByteBuffer bufPacket)
            {
            // import Component.Net.Packet;
            // import java.net.InetSocketAddress;
            
            Cluster cluster = (Cluster) get_Module();
            
            // check the packet type only to help identify if we are receiving unicast broadcasts
            // i.e. validate that our binding hasn't been taken
            if (isSuspectBinding() && bufPacket.remaining() >= 4)
                {
                if (isInGroup())
                    {
                    if (bufPacket.remaining() == 4 && bufPacket.getInt(bufPacket.position()) == Packet.TYPE_TEST_MULTICAST)
                        {
                        // we actually unicast this packet to ourselves (see ensureBinding) thus proving we still hold the binding
                        setSuspectBinding(false);
                        }
                    // else; we can't tell at this level if this is UC or MC, see Cluster.onBroadcastPacket
                    }
                else
                    {
                    // we must be hearing a unicast
                    setSuspectBinding(false);
                    }
                }
            
            // always delegate to the Cluster to determine what to do with the packet
            cluster.onPacket(this, addrSource, bufPacket);
            }
        
        /**
         * Reset the timestamp for when we must received on next multicast
        * packet.
         */
        public void resetSuspectGroupTimestamp()
            {
            // import com.tangosol.util.Base;
            
            setSuspectGroupTimestamp(Base.getSafeTimeMillis() + Math.max(1000L, ((Cluster) get_Module()).getDependencies().getClusterHeartbeatDelayMillis() * 3));
            }
        
        // Accessor for the property "InGroup"
        /**
         * Setter for property InGroup.<p>
         */
        protected void setInGroup(boolean fGroup)
            {
            __m_InGroup = fGroup;
            }
        
        // Accessor for the property "SuspectBinding"
        /**
         * Setter for property SuspectBinding.<p>
        * True if the binding is suspect.
         */
        public void setSuspectBinding(boolean fBinding)
            {
            __m_SuspectBinding = fBinding;
            }
        
        // Accessor for the property "SuspectGroupTimestamp"
        /**
         * Setter for property SuspectGroupTimestamp.<p>
        * The time by which a MC packet must be received or else a MC rejoin
        * will be performed.
         */
        public void setSuspectGroupTimestamp(long fBinding)
            {
            __m_SuspectGroupTimestamp = fBinding;
            }

        // ---- class: com.tangosol.coherence.component.net.Cluster$PacketListenerBU$Queue
        
        /**
         * This is the Queue to which items that need to be processed are
         * added, and from which the daemon pulls items to process.
         */
        @SuppressWarnings({"deprecation", "rawtypes", "unused", "unchecked", "ConstantConditions", "DuplicatedCode", "ForLoopReplaceableByForEach", "IfCanBeSwitch", "RedundantArrayCreation", "RedundantSuppression", "SameParameterValue", "TryFinallyCanBeTryWithResources", "TryWithIdenticalCatches", "UnnecessaryBoxing", "UnnecessaryUnboxing", "UnusedAssignment"})
        public static class Queue
                extends    com.tangosol.coherence.component.util.daemon.QueueProcessor.Queue
            {
            // ---- Fields declarations ----
            private static com.tangosol.util.ListMap __mapChildren;
            
            // Static initializer
            static
                {
                __initStatic();
                }
            
            // Default static initializer
            private static void __initStatic()
                {
                // register child classes
                __mapChildren = new com.tangosol.util.ListMap();
                __mapChildren.put("Iterator", Cluster.PacketListenerBU.Queue.Iterator.get_CLASS());
                }
            
            // Default constructor
            public Queue()
                {
                this(null, null, true);
                }
            
            // Initializing constructor
            public Queue(String sName, com.tangosol.coherence.Component compParent, boolean fInit)
                {
                super(sName, compParent, false);
                
                if (fInit)
                    {
                    __init();
                    }
                }
            
            // Main initializer
            public void __init()
                {
                // private initialization
                __initPrivate();
                
                // state initialization: public and protected properties
                try
                    {
                    setElementList(new com.tangosol.util.RecyclingLinkedList());
                    }
                catch (java.lang.Exception e)
                    {
                    // re-throw as a runtime exception
                    throw new com.tangosol.util.WrapperException(e);
                    }
                
                // containment initialization: children
                
                // signal the end of the initialization
                set_Constructed(true);
                }
            
            // Private initializer
            protected void __initPrivate()
                {
                
                super.__initPrivate();
                }
            
            //++ getter for static property _Instance
            /**
             * Getter for property _Instance.<p>
            * Auto generated
             */
            public static com.tangosol.coherence.Component get_Instance()
                {
                return new com.tangosol.coherence.component.net.Cluster.PacketListenerBU.Queue();
                }
            
            //++ getter for static property _CLASS
            /**
             * Getter for property _CLASS.<p>
            * Property with auto-generated accessor that returns the Class
            * object for a given component.
             */
            public static Class get_CLASS()
                {
                Class clz;
                try
                    {
                    clz = Class.forName("com.tangosol.coherence/component/net/Cluster$PacketListenerBU$Queue".replace('/', '.'));
                    }
                catch (ClassNotFoundException e)
                    {
                    throw new NoClassDefFoundError(e.getMessage());
                    }
                return clz;
                }
            
            //++ getter for autogen property _Module
            /**
             * This is an auto-generated method that returns the global [design
            * time] parent component.
            * 
            * Note: the class generator will ignore any custom implementation
            * for this behavior.
             */
            private com.tangosol.coherence.Component get_Module()
                {
                return this.get_Parent().get_Parent();
                }
            
            //++ getter for autogen property _ChildClasses
            /**
             * This is an auto-generated method that returns the map of design
            * time [static] children.
            * 
            * Note: the class generator will ignore any custom implementation
            * for this behavior.
             */
            protected java.util.Map get_ChildClasses()
                {
                return __mapChildren;
                }

            // ---- class: com.tangosol.coherence.component.net.Cluster$PacketListenerBU$Queue$Iterator
            
            /**
             * Iterator of a snapshot of the List object that backs the Queue.
             * Supports remove(). Uses the Queue as the monitor if any
             * synchronization is required.
             */
            @SuppressWarnings({"deprecation", "rawtypes", "unused", "unchecked", "ConstantConditions", "DuplicatedCode", "ForLoopReplaceableByForEach", "IfCanBeSwitch", "RedundantArrayCreation", "RedundantSuppression", "SameParameterValue", "TryFinallyCanBeTryWithResources", "TryWithIdenticalCatches", "UnnecessaryBoxing", "UnnecessaryUnboxing", "UnusedAssignment"})
            public static class Iterator
                    extends    com.tangosol.coherence.component.util.daemon.QueueProcessor.Queue.Iterator
                {
                // ---- Fields declarations ----
                
                // Default constructor
                public Iterator()
                    {
                    this(null, null, true);
                    }
                
                // Initializing constructor
                public Iterator(String sName, com.tangosol.coherence.Component compParent, boolean fInit)
                    {
                    super(sName, compParent, false);
                    
                    if (fInit)
                        {
                        __init();
                        }
                    }
                
                // Main initializer
                public void __init()
                    {
                    // private initialization
                    __initPrivate();
                    
                    
                    // signal the end of the initialization
                    set_Constructed(true);
                    }
                
                // Private initializer
                protected void __initPrivate()
                    {
                    
                    super.__initPrivate();
                    }
                
                //++ getter for static property _Instance
                /**
                 * Getter for property _Instance.<p>
                * Auto generated
                 */
                public static com.tangosol.coherence.Component get_Instance()
                    {
                    return new com.tangosol.coherence.component.net.Cluster.PacketListenerBU.Queue.Iterator();
                    }
                
                //++ getter for static property _CLASS
                /**
                 * Getter for property _CLASS.<p>
                * Property with auto-generated accessor that returns the Class
                * object for a given component.
                 */
                public static Class get_CLASS()
                    {
                    Class clz;
                    try
                        {
                        clz = Class.forName("com.tangosol.coherence/component/net/Cluster$PacketListenerBU$Queue$Iterator".replace('/', '.'));
                        }
                    catch (ClassNotFoundException e)
                        {
                        throw new NoClassDefFoundError(e.getMessage());
                        }
                    return clz;
                    }
                
                //++ getter for autogen property _Module
                /**
                 * This is an auto-generated method that returns the global
                * [design time] parent component.
                * 
                * Note: the class generator will ignore any custom
                * implementation for this behavior.
                 */
                private com.tangosol.coherence.Component get_Module()
                    {
                    return this.get_Parent().get_Parent().get_Parent();
                    }
                }
            }
        }

    // ---- class: com.tangosol.coherence.component.net.Cluster$PacketPublisher
    
    /**
     * This is a Daemon component that waits for items to process from a Queue.
     * Whenever the Queue contains an item, the onNotify event occurs. It is
     * expected that sub-classes will process onNotify as follows:
     * <pre><code>
     * Object o;
     * while ((o = getQueue().removeNoWait()) != null)
     *     {
     *     // process the item
     *     // ...
     *     }
     * </code></pre>
     * <p>
     * The Queue is used as the synchronization point for the daemon.
     * 
     * <br>
     * A client of PacketProcessor must configure:<br>
     * <br><ul>
     * <li>MemberSet property</li>
     * </ul><br>
     * A client of PacketDispatcher may configure:<br>
     * <br><ul>
     * <li>Priority property</li>
     * <li>ThreadGroup property</li>
     * </ul><br>
     * See the associated documentation for each.<br>
     * <br>
     * Once the PacketProcessor is configured, the client can start the
     * processor using the start() method.<br>
     * 
     * 
     * A client of PacketPublisher must additionally configure:
     * <ul>
     * <li>DatagramSocket property</li>
     * <li>MulticastAddress property</li>
     * <li>MulticastSocket property</li>
     * <li>MessageOutgoing property</li>
     * </ul>
     * A client of PacketPublisher may configure:
     * <ul>
     * <li>ResendDelay property</li>
     * <li>ResendTimeout property</li>
     * <li>AckDelay property</li>
     * <li>RequestDelay property</li>
     * </ul>
     */
    @SuppressWarnings({"deprecation", "rawtypes", "unused", "unchecked", "ConstantConditions", "DuplicatedCode", "ForLoopReplaceableByForEach", "IfCanBeSwitch", "RedundantArrayCreation", "RedundantSuppression", "SameParameterValue", "TryFinallyCanBeTryWithResources", "TryWithIdenticalCatches", "UnnecessaryBoxing", "UnnecessaryUnboxing", "UnusedAssignment"})
    public static class PacketPublisher
            extends    com.tangosol.coherence.component.util.daemon.queueProcessor.packetProcessor.PacketPublisher
        {
        // ---- Fields declarations ----
        
        // Default constructor
        public PacketPublisher()
            {
            this(null, null, true);
            }
        
        // Initializing constructor
        public PacketPublisher(String sName, com.tangosol.coherence.Component compParent, boolean fInit)
            {
            super(sName, compParent, false);
            
            if (fInit)
                {
                __init();
                }
            }
        
        // Main initializer
        public void __init()
            {
            // private initialization
            __initPrivate();
            
            // state initialization: public and protected properties
            try
                {
                setAckdPacketListTemp(new com.tangosol.util.RecyclingLinkedList());
                setCloggedCount(1024);
                setCloggedDelay(32);
                setDaemonState(0);
                setDefaultGuardRecovery(0.9F);
                setDefaultGuardTimeout(60000L);
                setLostPacketListTemp(new com.tangosol.util.RecyclingLinkedList());
                setMulticastEnabled(true);
                setMulticastThreshold(0.25);
                setNotifier(new com.oracle.coherence.common.base.SingleWaiterMultiNotifier());
                setSingleMemberSetTemp(new com.tangosol.coherence.component.net.memberSet.SingleMemberSet());
                }
            catch (java.lang.Exception e)
                {
                // re-throw as a runtime exception
                throw new com.tangosol.util.WrapperException(e);
                }
            
            // containment initialization: children
            _addChild(new Cluster.PacketPublisher.AckQueue("AckQueue", this, true), "AckQueue");
            _addChild(new Cluster.PacketPublisher.ConfirmationQueue("ConfirmationQueue", this, true), "ConfirmationQueue");
            _addChild(new Cluster.PacketPublisher.InQueue("InQueue", this, true), "InQueue");
            _addChild(new com.tangosol.coherence.component.util.daemon.queueProcessor.packetProcessor.PacketPublisher.OutgoingMessageArray("OutgoingMessageArray", this, true), "OutgoingMessageArray");
            _addChild(new Cluster.PacketPublisher.ResendQueue("ResendQueue", this, true), "ResendQueue");
            
            // signal the end of the initialization
            set_Constructed(true);
            }
        
        // Private initializer
        protected void __initPrivate()
            {
            
            super.__initPrivate();
            }
        
        //++ getter for static property _Instance
        /**
         * Getter for property _Instance.<p>
        * Auto generated
         */
        public static com.tangosol.coherence.Component get_Instance()
            {
            return new com.tangosol.coherence.component.net.Cluster.PacketPublisher();
            }
        
        //++ getter for static property _CLASS
        /**
         * Getter for property _CLASS.<p>
        * Property with auto-generated accessor that returns the Class object
        * for a given component.
         */
        public static Class get_CLASS()
            {
            Class clz;
            try
                {
                clz = Class.forName("com.tangosol.coherence/component/net/Cluster$PacketPublisher".replace('/', '.'));
                }
            catch (ClassNotFoundException e)
                {
                throw new NoClassDefFoundError(e.getMessage());
                }
            return clz;
            }
        
        //++ getter for autogen property _Module
        /**
         * This is an auto-generated method that returns the global [design
        * time] parent component.
        * 
        * Note: the class generator will ignore any custom implementation for
        * this behavior.
         */
        private com.tangosol.coherence.Component get_Module()
            {
            return this.get_Parent();
            }
        
        // Declared at the super level
        /**
         * Halt the daemon.  Brings down the daemon in an ungraceful manner.
        * This method should not synchronize or block in any way.
        * This method may not return.
         */
        public void halt()
            {
            // super method is protected
            super.halt();
            }
        
        // Declared at the super level
        /**
         * This event occurs when an exception is thrown from onEnter, onWait,
        * onNotify and onExit.
        * 
        * If the exception should terminate the daemon, call stop(). The
        * default implementation prints debugging information and terminates
        * the daemon.
        * 
        * @param e  the Throwable object (a RuntimeException or an Error)
        * 
        * @throws RuntimeException may be thrown; will terminate the daemon
        * @throws Error may be thrown; will terminate the daemon
         */
        public void onException(Throwable e)
            {
            Cluster cluster = (Cluster) get_Module();
            try
                {
                if (cluster.getState() < Cluster.STATE_RUNNING)
                    {
                    super.onException(e);
                    }
                }
            finally
                {
                cluster.onException(e);
                }
            }
        
        // Declared at the super level
        public void onSlowPacket(com.tangosol.coherence.component.net.packet.MessagePacket packet)
            {
            // import Component.Net.Member;
            // import Component.Net.MemberSet;
            // import java.util.Iterator;
            
            Cluster.ClusterService service = ((Cluster) get_Module()).getClusterService();
            
            int nToId = packet.getToId();
            if (nToId != 0)
                {
                service.verifyMemberSlow(getMember(nToId), packet);
                }
            else
                {
                // check the multi "addressed to" packet property
                MemberSet setToMember = packet.getToMemberSet();
                if (setToMember != null)
                    {
                    for (Iterator iter = setToMember.iterator(); iter.hasNext();)
                        {
                        Member member = (Member) iter.next();
                        service.verifyMemberSlow(member, packet);
                        }
                    }
                }
            }
        
        // Declared at the super level
        public void onUndeliverablePacket(com.tangosol.coherence.component.net.packet.MessagePacket packet)
            {
            // import Component.Net.Member;
            // import Component.Net.MemberSet;
            // import Component.Net.MemberSet.ActualMemberSet;
            // import Component.Net.Packet.MessagePacket;
            
            Cluster.ClusterService service = ((Cluster) get_Module()).getClusterService();
            MemberSet       setLate = null;
            
            // check the single "addressed to" packet property
            int nToId = packet.getToId();
            if (nToId != 0)
                {
                Member member = getMember(nToId);
                if (member != null)
                    {
                    // Note: we don't use SingleMemberSet here, as its iterator
                    //       does not support remove()
                    setLate = new ActualMemberSet();
                    setLate.add(member);
                    }
                }
            else
                {
                // check the multi "addressed to" packet property
                MemberSet setToMember = packet.getToMemberSet();
                if (setToMember != null && !setToMember.isEmpty())
                    {
                    setLate = new ActualMemberSet();
                    setLate.addAll(setToMember);
                    }
                }
            
            if (setLate != null)
                {
                // report the late members to the cluster service
                service.doNotifyTcmpTimeout((MessagePacket) packet.clone(), setLate);
                }
            }

        // ---- class: com.tangosol.coherence.component.net.Cluster$PacketPublisher$AckQueue
        
        /**
         * The DualQueue is optimized for the producer consumer use case.
         * 
         * Producers work on the tail of the queue, consumers operate on the
         * head of the queue.  The two portions of the queue are maintained as
         * seperate lists, and protected by seperate locks.
         * 
         * When a consumer looks at the head of the queue, if it is empty, the
         * head and tail will be swaped.
         * 
         * The PacketPublisher's AckQueue child is used to queue Ack Packets
         * such that they can be slightly delayed to allow multiple
         * acknowledgements to be bundled together.  This queue will cross
         * notify the Publisher's input queue as needed.
         */
        @SuppressWarnings({"deprecation", "rawtypes", "unused", "unchecked", "ConstantConditions", "DuplicatedCode", "ForLoopReplaceableByForEach", "IfCanBeSwitch", "RedundantArrayCreation", "RedundantSuppression", "SameParameterValue", "TryFinallyCanBeTryWithResources", "TryWithIdenticalCatches", "UnnecessaryBoxing", "UnnecessaryUnboxing", "UnusedAssignment"})
        public static class AckQueue
                extends    com.tangosol.coherence.component.util.daemon.queueProcessor.packetProcessor.PacketPublisher.AckQueue
            {
            // ---- Fields declarations ----
            private static com.tangosol.util.ListMap __mapChildren;
            
            // Static initializer
            static
                {
                __initStatic();
                }
            
            // Default static initializer
            private static void __initStatic()
                {
                // register child classes
                __mapChildren = new com.tangosol.util.ListMap();
                __mapChildren.put("Iterator", Cluster.PacketPublisher.AckQueue.Iterator.get_CLASS());
                }
            
            // Default constructor
            public AckQueue()
                {
                this(null, null, true);
                }
            
            // Initializing constructor
            public AckQueue(String sName, com.tangosol.coherence.Component compParent, boolean fInit)
                {
                super(sName, compParent, false);
                
                if (fInit)
                    {
                    __init();
                    }
                }
            
            // Main initializer
            public void __init()
                {
                // private initialization
                __initPrivate();
                
                // state initialization: public and protected properties
                try
                    {
                    setBatchSize(1);
                    setDelayMillis(10);
                    setElementList(new com.tangosol.util.RecyclingLinkedList());
                    setHeadElementList(new com.tangosol.util.RecyclingLinkedList());
                    setHeadLock(new java.lang.Object());
                    setLastKnownReadyIndex(-1);
                    }
                catch (java.lang.Exception e)
                    {
                    // re-throw as a runtime exception
                    throw new com.tangosol.util.WrapperException(e);
                    }
                
                // containment initialization: children
                
                // signal the end of the initialization
                set_Constructed(true);
                }
            
            // Private initializer
            protected void __initPrivate()
                {
                
                super.__initPrivate();
                }
            
            //++ getter for static property _Instance
            /**
             * Getter for property _Instance.<p>
            * Auto generated
             */
            public static com.tangosol.coherence.Component get_Instance()
                {
                return new com.tangosol.coherence.component.net.Cluster.PacketPublisher.AckQueue();
                }
            
            //++ getter for static property _CLASS
            /**
             * Getter for property _CLASS.<p>
            * Property with auto-generated accessor that returns the Class
            * object for a given component.
             */
            public static Class get_CLASS()
                {
                Class clz;
                try
                    {
                    clz = Class.forName("com.tangosol.coherence/component/net/Cluster$PacketPublisher$AckQueue".replace('/', '.'));
                    }
                catch (ClassNotFoundException e)
                    {
                    throw new NoClassDefFoundError(e.getMessage());
                    }
                return clz;
                }
            
            //++ getter for autogen property _Module
            /**
             * This is an auto-generated method that returns the global [design
            * time] parent component.
            * 
            * Note: the class generator will ignore any custom implementation
            * for this behavior.
             */
            private com.tangosol.coherence.Component get_Module()
                {
                return this.get_Parent().get_Parent();
                }
            
            //++ getter for autogen property _ChildClasses
            /**
             * This is an auto-generated method that returns the map of design
            * time [static] children.
            * 
            * Note: the class generator will ignore any custom implementation
            * for this behavior.
             */
            protected java.util.Map get_ChildClasses()
                {
                return __mapChildren;
                }

            // ---- class: com.tangosol.coherence.component.net.Cluster$PacketPublisher$AckQueue$Iterator
            
            /**
             * Iterator of a snapshot of the List object that backs the Queue.
             * Supports remove(). Uses the Queue as the monitor if any
             * synchronization is required.
             */
            @SuppressWarnings({"deprecation", "rawtypes", "unused", "unchecked", "ConstantConditions", "DuplicatedCode", "ForLoopReplaceableByForEach", "IfCanBeSwitch", "RedundantArrayCreation", "RedundantSuppression", "SameParameterValue", "TryFinallyCanBeTryWithResources", "TryWithIdenticalCatches", "UnnecessaryBoxing", "UnnecessaryUnboxing", "UnusedAssignment"})
            public static class Iterator
                    extends    com.tangosol.coherence.component.util.daemon.queueProcessor.packetProcessor.PacketPublisher.AckQueue.Iterator
                {
                // ---- Fields declarations ----
                
                // Default constructor
                public Iterator()
                    {
                    this(null, null, true);
                    }
                
                // Initializing constructor
                public Iterator(String sName, com.tangosol.coherence.Component compParent, boolean fInit)
                    {
                    super(sName, compParent, false);
                    
                    if (fInit)
                        {
                        __init();
                        }
                    }
                
                // Main initializer
                public void __init()
                    {
                    // private initialization
                    __initPrivate();
                    
                    
                    // signal the end of the initialization
                    set_Constructed(true);
                    }
                
                // Private initializer
                protected void __initPrivate()
                    {
                    
                    super.__initPrivate();
                    }
                
                //++ getter for static property _Instance
                /**
                 * Getter for property _Instance.<p>
                * Auto generated
                 */
                public static com.tangosol.coherence.Component get_Instance()
                    {
                    return new com.tangosol.coherence.component.net.Cluster.PacketPublisher.AckQueue.Iterator();
                    }
                
                //++ getter for static property _CLASS
                /**
                 * Getter for property _CLASS.<p>
                * Property with auto-generated accessor that returns the Class
                * object for a given component.
                 */
                public static Class get_CLASS()
                    {
                    Class clz;
                    try
                        {
                        clz = Class.forName("com.tangosol.coherence/component/net/Cluster$PacketPublisher$AckQueue$Iterator".replace('/', '.'));
                        }
                    catch (ClassNotFoundException e)
                        {
                        throw new NoClassDefFoundError(e.getMessage());
                        }
                    return clz;
                    }
                
                //++ getter for autogen property _Module
                /**
                 * This is an auto-generated method that returns the global
                * [design time] parent component.
                * 
                * Note: the class generator will ignore any custom
                * implementation for this behavior.
                 */
                private com.tangosol.coherence.Component get_Module()
                    {
                    return this.get_Parent().get_Parent().get_Parent();
                    }
                }
            }

        // ---- class: com.tangosol.coherence.component.net.Cluster$PacketPublisher$ConfirmationQueue
        
        /**
         * SingleConsumerQueue is a concurrent queue optimized for multi
         * producer single consumer workloads.  More specifically it is not
         * safe to consume from multiple threads.
         * 
         * The PacketPublisher's ConfirmationQueue holds Ack packets received
         * from other members, which must be processed as confirmations to
         * packets sent by this member.  This queue will cross notify the
         * Publisher's input queue as needed.
         */
        @SuppressWarnings({"deprecation", "rawtypes", "unused", "unchecked", "ConstantConditions", "DuplicatedCode", "ForLoopReplaceableByForEach", "IfCanBeSwitch", "RedundantArrayCreation", "RedundantSuppression", "SameParameterValue", "TryFinallyCanBeTryWithResources", "TryWithIdenticalCatches", "UnnecessaryBoxing", "UnnecessaryUnboxing", "UnusedAssignment"})
        public static class ConfirmationQueue
                extends    com.tangosol.coherence.component.util.daemon.queueProcessor.packetProcessor.PacketPublisher.ConfirmationQueue
            {
            // ---- Fields declarations ----
            
            // Default constructor
            public ConfirmationQueue()
                {
                this(null, null, true);
                }
            
            // Initializing constructor
            public ConfirmationQueue(String sName, com.tangosol.coherence.Component compParent, boolean fInit)
                {
                super(sName, compParent, false);
                
                if (fInit)
                    {
                    __init();
                    }
                }
            
            // Main initializer
            public void __init()
                {
                // private initialization
                __initPrivate();
                
                // state initialization: public and protected properties
                try
                    {
                    setBatchSize(1);
                    setDelegate(new com.oracle.coherence.common.collections.ConcurrentLinkedQueue());
                    setNotifier(new com.oracle.coherence.common.base.SingleWaiterMultiNotifier());
                    }
                catch (java.lang.Exception e)
                    {
                    // re-throw as a runtime exception
                    throw new com.tangosol.util.WrapperException(e);
                    }
                
                // containment initialization: children
                
                // signal the end of the initialization
                set_Constructed(true);
                }
            
            // Private initializer
            protected void __initPrivate()
                {
                
                super.__initPrivate();
                }
            
            //++ getter for static property _Instance
            /**
             * Getter for property _Instance.<p>
            * Auto generated
             */
            public static com.tangosol.coherence.Component get_Instance()
                {
                return new com.tangosol.coherence.component.net.Cluster.PacketPublisher.ConfirmationQueue();
                }
            
            //++ getter for static property _CLASS
            /**
             * Getter for property _CLASS.<p>
            * Property with auto-generated accessor that returns the Class
            * object for a given component.
             */
            public static Class get_CLASS()
                {
                Class clz;
                try
                    {
                    clz = Class.forName("com.tangosol.coherence/component/net/Cluster$PacketPublisher$ConfirmationQueue".replace('/', '.'));
                    }
                catch (ClassNotFoundException e)
                    {
                    throw new NoClassDefFoundError(e.getMessage());
                    }
                return clz;
                }
            
            //++ getter for autogen property _Module
            /**
             * This is an auto-generated method that returns the global [design
            * time] parent component.
            * 
            * Note: the class generator will ignore any custom implementation
            * for this behavior.
             */
            private com.tangosol.coherence.Component get_Module()
                {
                return this.get_Parent().get_Parent();
                }
            }

        // ---- class: com.tangosol.coherence.component.net.Cluster$PacketPublisher$InQueue
        
        /**
         * SingleConsumerQueue is a concurrent queue optimized for multi
         * producer single consumer workloads.  More specifically it is not
         * safe to consume from multiple threads.
         */
        @SuppressWarnings({"deprecation", "rawtypes", "unused", "unchecked", "ConstantConditions", "DuplicatedCode", "ForLoopReplaceableByForEach", "IfCanBeSwitch", "RedundantArrayCreation", "RedundantSuppression", "SameParameterValue", "TryFinallyCanBeTryWithResources", "TryWithIdenticalCatches", "UnnecessaryBoxing", "UnnecessaryUnboxing", "UnusedAssignment"})
        public static class InQueue
                extends    com.tangosol.coherence.component.util.daemon.queueProcessor.packetProcessor.PacketPublisher.InQueue
            {
            // ---- Fields declarations ----
            
            // Default constructor
            public InQueue()
                {
                this(null, null, true);
                }
            
            // Initializing constructor
            public InQueue(String sName, com.tangosol.coherence.Component compParent, boolean fInit)
                {
                super(sName, compParent, false);
                
                if (fInit)
                    {
                    __init();
                    }
                }
            
            // Main initializer
            public void __init()
                {
                // private initialization
                __initPrivate();
                
                // state initialization: public and protected properties
                try
                    {
                    setBatchSize(1);
                    setDelegate(new com.oracle.coherence.common.collections.ConcurrentLinkedQueue());
                    setNotifier(new com.oracle.coherence.common.base.SingleWaiterMultiNotifier());
                    }
                catch (java.lang.Exception e)
                    {
                    // re-throw as a runtime exception
                    throw new com.tangosol.util.WrapperException(e);
                    }
                
                // containment initialization: children
                _addChild(new Cluster.PacketPublisher.InQueue.PacketAdapter("PacketAdapter", this, true), "PacketAdapter");
                
                // signal the end of the initialization
                set_Constructed(true);
                }
            
            // Private initializer
            protected void __initPrivate()
                {
                
                super.__initPrivate();
                }
            
            //++ getter for static property _Instance
            /**
             * Getter for property _Instance.<p>
            * Auto generated
             */
            public static com.tangosol.coherence.Component get_Instance()
                {
                return new com.tangosol.coherence.component.net.Cluster.PacketPublisher.InQueue();
                }
            
            //++ getter for static property _CLASS
            /**
             * Getter for property _CLASS.<p>
            * Property with auto-generated accessor that returns the Class
            * object for a given component.
             */
            public static Class get_CLASS()
                {
                Class clz;
                try
                    {
                    clz = Class.forName("com.tangosol.coherence/component/net/Cluster$PacketPublisher$InQueue".replace('/', '.'));
                    }
                catch (ClassNotFoundException e)
                    {
                    throw new NoClassDefFoundError(e.getMessage());
                    }
                return clz;
                }
            
            //++ getter for autogen property _Module
            /**
             * This is an auto-generated method that returns the global [design
            * time] parent component.
            * 
            * Note: the class generator will ignore any custom implementation
            * for this behavior.
             */
            private com.tangosol.coherence.Component get_Module()
                {
                return this.get_Parent().get_Parent();
                }

            // ---- class: com.tangosol.coherence.component.net.Cluster$PacketPublisher$InQueue$PacketAdapter
            
            /**
             * The PacketAdapter provides a means for dequeueing packets from
             * the message queue.
             */
            @SuppressWarnings({"deprecation", "rawtypes", "unused", "unchecked", "ConstantConditions", "DuplicatedCode", "ForLoopReplaceableByForEach", "IfCanBeSwitch", "RedundantArrayCreation", "RedundantSuppression", "SameParameterValue", "TryFinallyCanBeTryWithResources", "TryWithIdenticalCatches", "UnnecessaryBoxing", "UnnecessaryUnboxing", "UnusedAssignment"})
            public static class PacketAdapter
                    extends    com.tangosol.coherence.component.util.daemon.queueProcessor.packetProcessor.PacketPublisher.InQueue.PacketAdapter
                {
                // ---- Fields declarations ----
                private static com.tangosol.util.ListMap __mapChildren;
                
                // Static initializer
                static
                    {
                    __initStatic();
                    }
                
                // Default static initializer
                private static void __initStatic()
                    {
                    // register child classes
                    __mapChildren = new com.tangosol.util.ListMap();
                    __mapChildren.put("Iterator", Cluster.PacketPublisher.InQueue.PacketAdapter.Iterator.get_CLASS());
                    }
                
                // Default constructor
                public PacketAdapter()
                    {
                    this(null, null, true);
                    }
                
                // Initializing constructor
                public PacketAdapter(String sName, com.tangosol.coherence.Component compParent, boolean fInit)
                    {
                    super(sName, compParent, false);
                    
                    if (fInit)
                        {
                        __init();
                        }
                    }
                
                // Main initializer
                public void __init()
                    {
                    // private initialization
                    __initPrivate();
                    
                    // state initialization: public and protected properties
                    try
                        {
                        setElementList(new com.tangosol.util.RecyclingLinkedList());
                        }
                    catch (java.lang.Exception e)
                        {
                        // re-throw as a runtime exception
                        throw new com.tangosol.util.WrapperException(e);
                        }
                    
                    // containment initialization: children
                    
                    // signal the end of the initialization
                    set_Constructed(true);
                    }
                
                // Private initializer
                protected void __initPrivate()
                    {
                    
                    super.__initPrivate();
                    }
                
                //++ getter for static property _Instance
                /**
                 * Getter for property _Instance.<p>
                * Auto generated
                 */
                public static com.tangosol.coherence.Component get_Instance()
                    {
                    return new com.tangosol.coherence.component.net.Cluster.PacketPublisher.InQueue.PacketAdapter();
                    }
                
                //++ getter for static property _CLASS
                /**
                 * Getter for property _CLASS.<p>
                * Property with auto-generated accessor that returns the Class
                * object for a given component.
                 */
                public static Class get_CLASS()
                    {
                    Class clz;
                    try
                        {
                        clz = Class.forName("com.tangosol.coherence/component/net/Cluster$PacketPublisher$InQueue$PacketAdapter".replace('/', '.'));
                        }
                    catch (ClassNotFoundException e)
                        {
                        throw new NoClassDefFoundError(e.getMessage());
                        }
                    return clz;
                    }
                
                //++ getter for autogen property _Module
                /**
                 * This is an auto-generated method that returns the global
                * [design time] parent component.
                * 
                * Note: the class generator will ignore any custom
                * implementation for this behavior.
                 */
                private com.tangosol.coherence.Component get_Module()
                    {
                    return this.get_Parent().get_Parent().get_Parent();
                    }
                
                //++ getter for autogen property _ChildClasses
                /**
                 * This is an auto-generated method that returns the map of
                * design time [static] children.
                * 
                * Note: the class generator will ignore any custom
                * implementation for this behavior.
                 */
                protected java.util.Map get_ChildClasses()
                    {
                    return __mapChildren;
                    }

                // ---- class: com.tangosol.coherence.component.net.Cluster$PacketPublisher$InQueue$PacketAdapter$Iterator
                
                /**
                 * Iterator of a snapshot of the List object that backs the
                 * Queue. Supports remove(). Uses the Queue as the monitor if
                 * any synchronization is required.
                 */
                @SuppressWarnings({"deprecation", "rawtypes", "unused", "unchecked", "ConstantConditions", "DuplicatedCode", "ForLoopReplaceableByForEach", "IfCanBeSwitch", "RedundantArrayCreation", "RedundantSuppression", "SameParameterValue", "TryFinallyCanBeTryWithResources", "TryWithIdenticalCatches", "UnnecessaryBoxing", "UnnecessaryUnboxing", "UnusedAssignment"})
                public static class Iterator
                        extends    com.tangosol.coherence.component.util.daemon.queueProcessor.packetProcessor.PacketPublisher.InQueue.PacketAdapter.Iterator
                    {
                    // ---- Fields declarations ----
                    
                    // Default constructor
                    public Iterator()
                        {
                        this(null, null, true);
                        }
                    
                    // Initializing constructor
                    public Iterator(String sName, com.tangosol.coherence.Component compParent, boolean fInit)
                        {
                        super(sName, compParent, false);
                        
                        if (fInit)
                            {
                            __init();
                            }
                        }
                    
                    // Main initializer
                    public void __init()
                        {
                        // private initialization
                        __initPrivate();
                        
                        
                        // signal the end of the initialization
                        set_Constructed(true);
                        }
                    
                    // Private initializer
                    protected void __initPrivate()
                        {
                        
                        super.__initPrivate();
                        }
                    
                    //++ getter for static property _Instance
                    /**
                     * Getter for property _Instance.<p>
                    * Auto generated
                     */
                    public static com.tangosol.coherence.Component get_Instance()
                        {
                        return new com.tangosol.coherence.component.net.Cluster.PacketPublisher.InQueue.PacketAdapter.Iterator();
                        }
                    
                    //++ getter for static property _CLASS
                    /**
                     * Getter for property _CLASS.<p>
                    * Property with auto-generated accessor that returns the
                    * Class object for a given component.
                     */
                    public static Class get_CLASS()
                        {
                        Class clz;
                        try
                            {
                            clz = Class.forName("com.tangosol.coherence/component/net/Cluster$PacketPublisher$InQueue$PacketAdapter$Iterator".replace('/', '.'));
                            }
                        catch (ClassNotFoundException e)
                            {
                            throw new NoClassDefFoundError(e.getMessage());
                            }
                        return clz;
                        }
                    
                    //++ getter for autogen property _Module
                    /**
                     * This is an auto-generated method that returns the global
                    * [design time] parent component.
                    * 
                    * Note: the class generator will ignore any custom
                    * implementation for this behavior.
                     */
                    private com.tangosol.coherence.Component get_Module()
                        {
                        return this.get_Parent().get_Parent().get_Parent().get_Parent();
                        }
                    }
                }
            }

        // ---- class: com.tangosol.coherence.component.net.Cluster$PacketPublisher$ResendQueue
        
        /**
         * An unsynchronized (non-notifying) Queue implementation.
         * 
         * The PacketPublisher's ResendQueue child is used to implement
         * guaranteed-delivery; Packets are placed in the Queue so that they
         * are automatically resent if they are not first acknowledged.
         */
        @SuppressWarnings({"deprecation", "rawtypes", "unused", "unchecked", "ConstantConditions", "DuplicatedCode", "ForLoopReplaceableByForEach", "IfCanBeSwitch", "RedundantArrayCreation", "RedundantSuppression", "SameParameterValue", "TryFinallyCanBeTryWithResources", "TryWithIdenticalCatches", "UnnecessaryBoxing", "UnnecessaryUnboxing", "UnusedAssignment"})
        public static class ResendQueue
                extends    com.tangosol.coherence.component.util.daemon.queueProcessor.packetProcessor.PacketPublisher.ResendQueue
            {
            // ---- Fields declarations ----
            private static com.tangosol.util.ListMap __mapChildren;
            
            // Static initializer
            static
                {
                __initStatic();
                }
            
            // Default static initializer
            private static void __initStatic()
                {
                // register child classes
                __mapChildren = new com.tangosol.util.ListMap();
                __mapChildren.put("Iterator", Cluster.PacketPublisher.ResendQueue.Iterator.get_CLASS());
                }
            
            // Default constructor
            public ResendQueue()
                {
                this(null, null, true);
                }
            
            // Initializing constructor
            public ResendQueue(String sName, com.tangosol.coherence.Component compParent, boolean fInit)
                {
                super(sName, compParent, false);
                
                if (fInit)
                    {
                    __init();
                    }
                }
            
            // Main initializer
            public void __init()
                {
                // private initialization
                __initPrivate();
                
                // state initialization: public and protected properties
                try
                    {
                    setElementList(new com.tangosol.util.RecyclingLinkedList());
                    setResendMillis(400);
                    setTimeoutMillis(20000);
                    }
                catch (java.lang.Exception e)
                    {
                    // re-throw as a runtime exception
                    throw new com.tangosol.util.WrapperException(e);
                    }
                
                // containment initialization: children
                
                // signal the end of the initialization
                set_Constructed(true);
                }
            
            // Private initializer
            protected void __initPrivate()
                {
                
                super.__initPrivate();
                }
            
            //++ getter for static property _Instance
            /**
             * Getter for property _Instance.<p>
            * Auto generated
             */
            public static com.tangosol.coherence.Component get_Instance()
                {
                return new com.tangosol.coherence.component.net.Cluster.PacketPublisher.ResendQueue();
                }
            
            //++ getter for static property _CLASS
            /**
             * Getter for property _CLASS.<p>
            * Property with auto-generated accessor that returns the Class
            * object for a given component.
             */
            public static Class get_CLASS()
                {
                Class clz;
                try
                    {
                    clz = Class.forName("com.tangosol.coherence/component/net/Cluster$PacketPublisher$ResendQueue".replace('/', '.'));
                    }
                catch (ClassNotFoundException e)
                    {
                    throw new NoClassDefFoundError(e.getMessage());
                    }
                return clz;
                }
            
            //++ getter for autogen property _Module
            /**
             * This is an auto-generated method that returns the global [design
            * time] parent component.
            * 
            * Note: the class generator will ignore any custom implementation
            * for this behavior.
             */
            private com.tangosol.coherence.Component get_Module()
                {
                return this.get_Parent().get_Parent();
                }
            
            //++ getter for autogen property _ChildClasses
            /**
             * This is an auto-generated method that returns the map of design
            * time [static] children.
            * 
            * Note: the class generator will ignore any custom implementation
            * for this behavior.
             */
            protected java.util.Map get_ChildClasses()
                {
                return __mapChildren;
                }

            // ---- class: com.tangosol.coherence.component.net.Cluster$PacketPublisher$ResendQueue$Iterator
            
            /**
             * Iterator of a snapshot of the List object that backs the Queue.
             * Supports remove(). Uses the Queue as the monitor if any
             * synchronization is required.
             */
            @SuppressWarnings({"deprecation", "rawtypes", "unused", "unchecked", "ConstantConditions", "DuplicatedCode", "ForLoopReplaceableByForEach", "IfCanBeSwitch", "RedundantArrayCreation", "RedundantSuppression", "SameParameterValue", "TryFinallyCanBeTryWithResources", "TryWithIdenticalCatches", "UnnecessaryBoxing", "UnnecessaryUnboxing", "UnusedAssignment"})
            public static class Iterator
                    extends    com.tangosol.coherence.component.util.daemon.queueProcessor.packetProcessor.PacketPublisher.ResendQueue.Iterator
                {
                // ---- Fields declarations ----
                
                // Default constructor
                public Iterator()
                    {
                    this(null, null, true);
                    }
                
                // Initializing constructor
                public Iterator(String sName, com.tangosol.coherence.Component compParent, boolean fInit)
                    {
                    super(sName, compParent, false);
                    
                    if (fInit)
                        {
                        __init();
                        }
                    }
                
                // Main initializer
                public void __init()
                    {
                    // private initialization
                    __initPrivate();
                    
                    
                    // signal the end of the initialization
                    set_Constructed(true);
                    }
                
                // Private initializer
                protected void __initPrivate()
                    {
                    
                    super.__initPrivate();
                    }
                
                //++ getter for static property _Instance
                /**
                 * Getter for property _Instance.<p>
                * Auto generated
                 */
                public static com.tangosol.coherence.Component get_Instance()
                    {
                    return new com.tangosol.coherence.component.net.Cluster.PacketPublisher.ResendQueue.Iterator();
                    }
                
                //++ getter for static property _CLASS
                /**
                 * Getter for property _CLASS.<p>
                * Property with auto-generated accessor that returns the Class
                * object for a given component.
                 */
                public static Class get_CLASS()
                    {
                    Class clz;
                    try
                        {
                        clz = Class.forName("com.tangosol.coherence/component/net/Cluster$PacketPublisher$ResendQueue$Iterator".replace('/', '.'));
                        }
                    catch (ClassNotFoundException e)
                        {
                        throw new NoClassDefFoundError(e.getMessage());
                        }
                    return clz;
                    }
                
                //++ getter for autogen property _Module
                /**
                 * This is an auto-generated method that returns the global
                * [design time] parent component.
                * 
                * Note: the class generator will ignore any custom
                * implementation for this behavior.
                 */
                private com.tangosol.coherence.Component get_Module()
                    {
                    return this.get_Parent().get_Parent().get_Parent();
                    }
                }
            }
        }

    // ---- class: com.tangosol.coherence.component.net.Cluster$PacketReceiver
    
    /**
     * This is a Daemon component that waits for items to process from a Queue.
     * Whenever the Queue contains an item, the onNotify event occurs. It is
     * expected that sub-classes will process onNotify as follows:
     * <pre><code>
     * Object o;
     * while ((o = getQueue().removeNoWait()) != null)
     *     {
     *     // process the item
     *     // ...
     *     }
     * </code></pre>
     * <p>
     * The Queue is used as the synchronization point for the daemon.
     * 
     * <br>
     * A client of PacketProcessor must configure:<br>
     * <br><ul>
     * <li>MemberSet property</li>
     * </ul><br>
     * A client of PacketDispatcher may configure:<br>
     * <br><ul>
     * <li>Priority property</li>
     * <li>ThreadGroup property</li>
     * </ul><br>
     * See the associated documentation for each.<br>
     * <br>
     * Once the PacketProcessor is configured, the client can start the
     * processor using the start() method.<br>
     * 
     * 
     * --
     * 
     * A client of PacketReceiver must additionally configure:
     * - SendQueue property
     * - MessageOutgoing property
     * 
     * Once the Member mini-id is assigned to this Member, the onJoined event
     * must be triggered.
     * 
     * The following properties need to be updated as other Cluster-enabled
     * Services are added to this Member:
     * - Service property
     */
    @SuppressWarnings({"deprecation", "rawtypes", "unused", "unchecked", "ConstantConditions", "DuplicatedCode", "ForLoopReplaceableByForEach", "IfCanBeSwitch", "RedundantArrayCreation", "RedundantSuppression", "SameParameterValue", "TryFinallyCanBeTryWithResources", "TryWithIdenticalCatches", "UnnecessaryBoxing", "UnnecessaryUnboxing", "UnusedAssignment"})
    public static class PacketReceiver
            extends    com.tangosol.coherence.component.util.daemon.queueProcessor.packetProcessor.PacketReceiver
        {
        // ---- Fields declarations ----
        
        /**
         * Property ClusterService
         *
         * Cache'd ClusterService reference
         */
        private Cluster.ClusterService __m_ClusterService;
        private static com.tangosol.util.ListMap __mapChildren;
        
        // Static initializer
        static
            {
            __initStatic();
            }
        
        // Default static initializer
        private static void __initStatic()
            {
            // register child classes
            __mapChildren = new com.tangosol.util.ListMap();
            __mapChildren.put("AddressedBuffer", Cluster.PacketReceiver.AddressedBuffer.get_CLASS());
            }
        
        // Default constructor
        public PacketReceiver()
            {
            this(null, null, true);
            }
        
        // Initializing constructor
        public PacketReceiver(String sName, com.tangosol.coherence.Component compParent, boolean fInit)
            {
            super(sName, compParent, false);
            
            if (fInit)
                {
                __init();
                }
            }
        
        // Main initializer
        public void __init()
            {
            // private initialization
            __initPrivate();
            
            // state initialization: public and protected properties
            try
                {
                setDaemonState(0);
                setDefaultGuardRecovery(0.9F);
                setDefaultGuardTimeout(60000L);
                setNotifier(new com.oracle.coherence.common.base.SingleWaiterMultiNotifier());
                }
            catch (java.lang.Exception e)
                {
                // re-throw as a runtime exception
                throw new com.tangosol.util.WrapperException(e);
                }
            
            // containment initialization: children
            _addChild(new Cluster.PacketReceiver.InQueue("InQueue", this, true), "InQueue");
            
            // signal the end of the initialization
            set_Constructed(true);
            }
        
        // Private initializer
        protected void __initPrivate()
            {
            
            super.__initPrivate();
            }
        
        //++ getter for static property _Instance
        /**
         * Getter for property _Instance.<p>
        * Auto generated
         */
        public static com.tangosol.coherence.Component get_Instance()
            {
            return new com.tangosol.coherence.component.net.Cluster.PacketReceiver();
            }
        
        //++ getter for static property _CLASS
        /**
         * Getter for property _CLASS.<p>
        * Property with auto-generated accessor that returns the Class object
        * for a given component.
         */
        public static Class get_CLASS()
            {
            Class clz;
            try
                {
                clz = Class.forName("com.tangosol.coherence/component/net/Cluster$PacketReceiver".replace('/', '.'));
                }
            catch (ClassNotFoundException e)
                {
                throw new NoClassDefFoundError(e.getMessage());
                }
            return clz;
            }
        
        //++ getter for autogen property _Module
        /**
         * This is an auto-generated method that returns the global [design
        * time] parent component.
        * 
        * Note: the class generator will ignore any custom implementation for
        * this behavior.
         */
        private com.tangosol.coherence.Component get_Module()
            {
            return this.get_Parent();
            }
        
        //++ getter for autogen property _ChildClasses
        /**
         * This is an auto-generated method that returns the map of design time
        * [static] children.
        * 
        * Note: the class generator will ignore any custom implementation for
        * this behavior.
         */
        protected java.util.Map get_ChildClasses()
            {
            return __mapChildren;
            }
        
        // Accessor for the property "ClusterService"
        /**
         * Getter for property ClusterService.<p>
        * Cache'd ClusterService reference
         */
        public Cluster.ClusterService getClusterService()
            {
            return __m_ClusterService;
            }
        
        // Declared at the super level
        /**
         * Getter for property Service.<p>
        * Indexed property of Services that are running on this Member. The
        * Service is used to instantiate Message objects from incoming Packet
        * information.
         */
        public com.tangosol.coherence.component.util.daemon.queueProcessor.service.Grid getService(int i)
            {
            return getClusterService().getService(i);
            }
        
        // Declared at the super level
        /**
         * This event occurs when an exception is thrown from onEnter, onWait,
        * onNotify and onExit.
        * 
        * If the exception should terminate the daemon, call stop(). The
        * default implementation prints debugging information and terminates
        * the daemon.
        * 
        * @param e  the Throwable object (a RuntimeException or an Error)
        * 
        * @throws RuntimeException may be thrown; will terminate the daemon
        * @throws Error may be thrown; will terminate the daemon
         */
        protected void onException(Throwable e)
            {
            Cluster cluster = (Cluster) get_Module();
            try
                {
                if (cluster.getState() < Cluster.STATE_RUNNING)
                    {
                    super.onException(e);
                    }
                }
            finally
                {
                cluster.onException(e);
                }
            }
        
        // Accessor for the property "ClusterService"
        /**
         * Setter for property ClusterService.<p>
        * Cache'd ClusterService reference
         */
        public void setClusterService(Cluster.ClusterService serviceCluster)
            {
            __m_ClusterService = serviceCluster;
            }

        // ---- class: com.tangosol.coherence.component.net.Cluster$PacketReceiver$AddressedBuffer
        
        /**
         * A ByteBuffer and corresponding source address.
         * 
         * @since 12.2.3
         */
        @SuppressWarnings({"deprecation", "rawtypes", "unused", "unchecked", "ConstantConditions", "DuplicatedCode", "ForLoopReplaceableByForEach", "IfCanBeSwitch", "RedundantArrayCreation", "RedundantSuppression", "SameParameterValue", "TryFinallyCanBeTryWithResources", "TryWithIdenticalCatches", "UnnecessaryBoxing", "UnnecessaryUnboxing", "UnusedAssignment"})
        public static class AddressedBuffer
                extends    com.tangosol.coherence.component.util.daemon.queueProcessor.packetProcessor.PacketReceiver.AddressedBuffer
            {
            // ---- Fields declarations ----
            
            // Default constructor
            public AddressedBuffer()
                {
                this(null, null, true);
                }
            
            // Initializing constructor
            public AddressedBuffer(String sName, com.tangosol.coherence.Component compParent, boolean fInit)
                {
                super(sName, compParent, false);
                
                if (fInit)
                    {
                    __init();
                    }
                }
            
            // Main initializer
            public void __init()
                {
                // private initialization
                __initPrivate();
                
                
                // signal the end of the initialization
                set_Constructed(true);
                }
            
            // Private initializer
            protected void __initPrivate()
                {
                
                super.__initPrivate();
                }
            
            //++ getter for static property _Instance
            /**
             * Getter for property _Instance.<p>
            * Auto generated
             */
            public static com.tangosol.coherence.Component get_Instance()
                {
                return new com.tangosol.coherence.component.net.Cluster.PacketReceiver.AddressedBuffer();
                }
            
            //++ getter for static property _CLASS
            /**
             * Getter for property _CLASS.<p>
            * Property with auto-generated accessor that returns the Class
            * object for a given component.
             */
            public static Class get_CLASS()
                {
                Class clz;
                try
                    {
                    clz = Class.forName("com.tangosol.coherence/component/net/Cluster$PacketReceiver$AddressedBuffer".replace('/', '.'));
                    }
                catch (ClassNotFoundException e)
                    {
                    throw new NoClassDefFoundError(e.getMessage());
                    }
                return clz;
                }
            
            //++ getter for autogen property _Module
            /**
             * This is an auto-generated method that returns the global [design
            * time] parent component.
            * 
            * Note: the class generator will ignore any custom implementation
            * for this behavior.
             */
            private com.tangosol.coherence.Component get_Module()
                {
                return this.get_Parent().get_Parent();
                }
            }

        // ---- class: com.tangosol.coherence.component.net.Cluster$PacketReceiver$InQueue
        
        /**
         * SingleConsumerQueue is a concurrent queue optimized for multi
         * producer single consumer workloads.  More specifically it is not
         * safe to consume from multiple threads.
         */
        @SuppressWarnings({"deprecation", "rawtypes", "unused", "unchecked", "ConstantConditions", "DuplicatedCode", "ForLoopReplaceableByForEach", "IfCanBeSwitch", "RedundantArrayCreation", "RedundantSuppression", "SameParameterValue", "TryFinallyCanBeTryWithResources", "TryWithIdenticalCatches", "UnnecessaryBoxing", "UnnecessaryUnboxing", "UnusedAssignment"})
        public static class InQueue
                extends    com.tangosol.coherence.component.util.daemon.queueProcessor.packetProcessor.PacketReceiver.InQueue
            {
            // ---- Fields declarations ----
            
            // Default constructor
            public InQueue()
                {
                this(null, null, true);
                }
            
            // Initializing constructor
            public InQueue(String sName, com.tangosol.coherence.Component compParent, boolean fInit)
                {
                super(sName, compParent, false);
                
                if (fInit)
                    {
                    __init();
                    }
                }
            
            // Main initializer
            public void __init()
                {
                // private initialization
                __initPrivate();
                
                // state initialization: public and protected properties
                try
                    {
                    setBatchSize(1);
                    setDelegate(new com.oracle.coherence.common.collections.ConcurrentLinkedQueue());
                    setNotifier(new com.oracle.coherence.common.base.SingleWaiterMultiNotifier());
                    }
                catch (java.lang.Exception e)
                    {
                    // re-throw as a runtime exception
                    throw new com.tangosol.util.WrapperException(e);
                    }
                
                // containment initialization: children
                
                // signal the end of the initialization
                set_Constructed(true);
                }
            
            // Private initializer
            protected void __initPrivate()
                {
                
                super.__initPrivate();
                }
            
            //++ getter for static property _Instance
            /**
             * Getter for property _Instance.<p>
            * Auto generated
             */
            public static com.tangosol.coherence.Component get_Instance()
                {
                return new com.tangosol.coherence.component.net.Cluster.PacketReceiver.InQueue();
                }
            
            //++ getter for static property _CLASS
            /**
             * Getter for property _CLASS.<p>
            * Property with auto-generated accessor that returns the Class
            * object for a given component.
             */
            public static Class get_CLASS()
                {
                Class clz;
                try
                    {
                    clz = Class.forName("com.tangosol.coherence/component/net/Cluster$PacketReceiver$InQueue".replace('/', '.'));
                    }
                catch (ClassNotFoundException e)
                    {
                    throw new NoClassDefFoundError(e.getMessage());
                    }
                return clz;
                }
            
            //++ getter for autogen property _Module
            /**
             * This is an auto-generated method that returns the global [design
            * time] parent component.
            * 
            * Note: the class generator will ignore any custom implementation
            * for this behavior.
             */
            private com.tangosol.coherence.Component get_Module()
                {
                return this.get_Parent().get_Parent();
                }
            }
        }

    // ---- class: com.tangosol.coherence.component.net.Cluster$PacketSpeaker
    
    /**
     * This is a Daemon component that waits for items to process from a Queue.
     * Whenever the Queue contains an item, the onNotify event occurs. It is
     * expected that sub-classes will process onNotify as follows:
     * <pre><code>
     * Object o;
     * while ((o = getQueue().removeNoWait()) != null)
     *     {
     *     // process the item
     *     // ...
     *     }
     * </code></pre>
     * <p>
     * The Queue is used as the synchronization point for the daemon.
     * 
     * <br>
     * A client of PacketProcessor must configure:<br>
     * <br><ul>
     * <li>MemberSet property</li>
     * </ul><br>
     * A client of PacketDispatcher may configure:<br>
     * <br><ul>
     * <li>Priority property</li>
     * <li>ThreadGroup property</li>
     * </ul><br>
     * See the associated documentation for each.<br>
     * <br>
     * Once the PacketProcessor is configured, the client can start the
     * processor using the start() method.<br>
     */
    @SuppressWarnings({"deprecation", "rawtypes", "unused", "unchecked", "ConstantConditions", "DuplicatedCode", "ForLoopReplaceableByForEach", "IfCanBeSwitch", "RedundantArrayCreation", "RedundantSuppression", "SameParameterValue", "TryFinallyCanBeTryWithResources", "TryWithIdenticalCatches", "UnnecessaryBoxing", "UnnecessaryUnboxing", "UnusedAssignment"})
    public static class PacketSpeaker
            extends    com.tangosol.coherence.component.util.daemon.queueProcessor.packetProcessor.PacketSpeaker
        {
        // ---- Fields declarations ----
        private static com.tangosol.util.ListMap __mapChildren;
        
        // Static initializer
        static
            {
            __initStatic();
            }
        
        // Default static initializer
        private static void __initStatic()
            {
            // register child classes
            __mapChildren = new com.tangosol.util.ListMap();
            __mapChildren.put("BundlingQueue", Cluster.PacketSpeaker.BundlingQueue.get_CLASS());
            __mapChildren.put("InQueue", Cluster.PacketSpeaker.InQueue.get_CLASS());
            }
        
        // Default constructor
        public PacketSpeaker()
            {
            this(null, null, true);
            }
        
        // Initializing constructor
        public PacketSpeaker(String sName, com.tangosol.coherence.Component compParent, boolean fInit)
            {
            super(sName, compParent, false);
            
            if (fInit)
                {
                __init();
                }
            }
        
        // Main initializer
        public void __init()
            {
            // private initialization
            __initPrivate();
            
            // state initialization: public and protected properties
            try
                {
                setDaemonState(0);
                setDefaultGuardRecovery(0.9F);
                setDefaultGuardTimeout(60000L);
                setNotifier(new com.oracle.coherence.common.base.SingleWaiterMultiNotifier());
                }
            catch (java.lang.Exception e)
                {
                // re-throw as a runtime exception
                throw new com.tangosol.util.WrapperException(e);
                }
            
            // containment initialization: children
            
            // signal the end of the initialization
            set_Constructed(true);
            }
        
        // Private initializer
        protected void __initPrivate()
            {
            
            super.__initPrivate();
            }
        
        //++ getter for static property _Instance
        /**
         * Getter for property _Instance.<p>
        * Auto generated
         */
        public static com.tangosol.coherence.Component get_Instance()
            {
            return new com.tangosol.coherence.component.net.Cluster.PacketSpeaker();
            }
        
        //++ getter for static property _CLASS
        /**
         * Getter for property _CLASS.<p>
        * Property with auto-generated accessor that returns the Class object
        * for a given component.
         */
        public static Class get_CLASS()
            {
            Class clz;
            try
                {
                clz = Class.forName("com.tangosol.coherence/component/net/Cluster$PacketSpeaker".replace('/', '.'));
                }
            catch (ClassNotFoundException e)
                {
                throw new NoClassDefFoundError(e.getMessage());
                }
            return clz;
            }
        
        //++ getter for autogen property _Module
        /**
         * This is an auto-generated method that returns the global [design
        * time] parent component.
        * 
        * Note: the class generator will ignore any custom implementation for
        * this behavior.
         */
        private com.tangosol.coherence.Component get_Module()
            {
            return this.get_Parent();
            }
        
        //++ getter for autogen property _ChildClasses
        /**
         * This is an auto-generated method that returns the map of design time
        * [static] children.
        * 
        * Note: the class generator will ignore any custom implementation for
        * this behavior.
         */
        protected java.util.Map get_ChildClasses()
            {
            return __mapChildren;
            }
        
        // Declared at the super level
        /**
         * This event occurs when an exception is thrown from onEnter, onWait,
        * onNotify and onExit.
        * 
        * If the exception should terminate the daemon, call stop(). The
        * default implementation prints debugging information and terminates
        * the daemon.
        * 
        * @param e  the Throwable object (a RuntimeException or an Error)
        * 
        * @throws RuntimeException may be thrown; will terminate the daemon
        * @throws Error may be thrown; will terminate the daemon
         */
        protected void onException(Throwable e)
            {
            Cluster cluster = (Cluster) get_Module();
            try
                {
                if (cluster.getState() < Cluster.STATE_RUNNING)
                    {
                    super.onException(e);
                    }
                }
            finally
                {
                cluster.onException(e);
                }
            }

        // ---- class: com.tangosol.coherence.component.net.Cluster$PacketSpeaker$BundlingQueue
        
        /**
         * A Queue which multiplexes and bundles enqueued items onto one of
         * many internal queues based on a "target" property of the enqueued
         * item.  Items enqueued with the same target will maintain FIFO
         * ordering, but may be re-ordered with respect to items with for
         * different targets.
         * 
         * The abstract implementation must be extended with implementations
         * for bundle(Object, Object).
         */
        @SuppressWarnings({"deprecation", "rawtypes", "unused", "unchecked", "ConstantConditions", "DuplicatedCode", "ForLoopReplaceableByForEach", "IfCanBeSwitch", "RedundantArrayCreation", "RedundantSuppression", "SameParameterValue", "TryFinallyCanBeTryWithResources", "TryWithIdenticalCatches", "UnnecessaryBoxing", "UnnecessaryUnboxing", "UnusedAssignment"})
        public static class BundlingQueue
                extends    com.tangosol.coherence.component.util.daemon.queueProcessor.packetProcessor.PacketSpeaker.BundlingQueue
            {
            // ---- Fields declarations ----
            private static com.tangosol.util.ListMap __mapChildren;
            
            // Static initializer
            static
                {
                __initStatic();
                }
            
            // Default static initializer
            private static void __initStatic()
                {
                // register child classes
                __mapChildren = new com.tangosol.util.ListMap();
                __mapChildren.put("Iterator", Cluster.PacketSpeaker.BundlingQueue.Iterator.get_CLASS());
                __mapChildren.put("TargetQueue", Cluster.PacketSpeaker.BundlingQueue.TargetQueue.get_CLASS());
                }
            
            // Default constructor
            public BundlingQueue()
                {
                this(null, null, true);
                }
            
            // Initializing constructor
            public BundlingQueue(String sName, com.tangosol.coherence.Component compParent, boolean fInit)
                {
                super(sName, compParent, false);
                
                if (fInit)
                    {
                    __init();
                    }
                }
            
            // Main initializer
            public void __init()
                {
                // private initialization
                __initPrivate();
                
                // state initialization: public and protected properties
                try
                    {
                    setBatchSize(4);
                    setBundlingEnabled(true);
                    setCloggedCount(1024);
                    setCloggedDelay(32);
                    setElementList(new com.tangosol.util.RecyclingLinkedList());
                    setTargetMap(new com.tangosol.util.SafeHashMap());
                    }
                catch (java.lang.Exception e)
                    {
                    // re-throw as a runtime exception
                    throw new com.tangosol.util.WrapperException(e);
                    }
                
                // containment initialization: children
                
                // signal the end of the initialization
                set_Constructed(true);
                }
            
            // Private initializer
            protected void __initPrivate()
                {
                
                super.__initPrivate();
                }
            
            //++ getter for static property _Instance
            /**
             * Getter for property _Instance.<p>
            * Auto generated
             */
            public static com.tangosol.coherence.Component get_Instance()
                {
                return new com.tangosol.coherence.component.net.Cluster.PacketSpeaker.BundlingQueue();
                }
            
            //++ getter for static property _CLASS
            /**
             * Getter for property _CLASS.<p>
            * Property with auto-generated accessor that returns the Class
            * object for a given component.
             */
            public static Class get_CLASS()
                {
                Class clz;
                try
                    {
                    clz = Class.forName("com.tangosol.coherence/component/net/Cluster$PacketSpeaker$BundlingQueue".replace('/', '.'));
                    }
                catch (ClassNotFoundException e)
                    {
                    throw new NoClassDefFoundError(e.getMessage());
                    }
                return clz;
                }
            
            //++ getter for autogen property _Module
            /**
             * This is an auto-generated method that returns the global [design
            * time] parent component.
            * 
            * Note: the class generator will ignore any custom implementation
            * for this behavior.
             */
            private com.tangosol.coherence.Component get_Module()
                {
                return this.get_Parent().get_Parent();
                }
            
            //++ getter for autogen property _ChildClasses
            /**
             * This is an auto-generated method that returns the map of design
            * time [static] children.
            * 
            * Note: the class generator will ignore any custom implementation
            * for this behavior.
             */
            protected java.util.Map get_ChildClasses()
                {
                return __mapChildren;
                }

            // ---- class: com.tangosol.coherence.component.net.Cluster$PacketSpeaker$BundlingQueue$Iterator
            
            /**
             * Iterator of a snapshot of the List object that backs the Queue.
             * Supports remove(). Uses the Queue as the monitor if any
             * synchronization is required.
             */
            @SuppressWarnings({"deprecation", "rawtypes", "unused", "unchecked", "ConstantConditions", "DuplicatedCode", "ForLoopReplaceableByForEach", "IfCanBeSwitch", "RedundantArrayCreation", "RedundantSuppression", "SameParameterValue", "TryFinallyCanBeTryWithResources", "TryWithIdenticalCatches", "UnnecessaryBoxing", "UnnecessaryUnboxing", "UnusedAssignment"})
            public static class Iterator
                    extends    com.tangosol.coherence.component.util.daemon.queueProcessor.packetProcessor.PacketSpeaker.BundlingQueue.Iterator
                {
                // ---- Fields declarations ----
                
                // Default constructor
                public Iterator()
                    {
                    this(null, null, true);
                    }
                
                // Initializing constructor
                public Iterator(String sName, com.tangosol.coherence.Component compParent, boolean fInit)
                    {
                    super(sName, compParent, false);
                    
                    if (fInit)
                        {
                        __init();
                        }
                    }
                
                // Main initializer
                public void __init()
                    {
                    // private initialization
                    __initPrivate();
                    
                    
                    // signal the end of the initialization
                    set_Constructed(true);
                    }
                
                // Private initializer
                protected void __initPrivate()
                    {
                    
                    super.__initPrivate();
                    }
                
                //++ getter for static property _Instance
                /**
                 * Getter for property _Instance.<p>
                * Auto generated
                 */
                public static com.tangosol.coherence.Component get_Instance()
                    {
                    return new com.tangosol.coherence.component.net.Cluster.PacketSpeaker.BundlingQueue.Iterator();
                    }
                
                //++ getter for static property _CLASS
                /**
                 * Getter for property _CLASS.<p>
                * Property with auto-generated accessor that returns the Class
                * object for a given component.
                 */
                public static Class get_CLASS()
                    {
                    Class clz;
                    try
                        {
                        clz = Class.forName("com.tangosol.coherence/component/net/Cluster$PacketSpeaker$BundlingQueue$Iterator".replace('/', '.'));
                        }
                    catch (ClassNotFoundException e)
                        {
                        throw new NoClassDefFoundError(e.getMessage());
                        }
                    return clz;
                    }
                
                //++ getter for autogen property _Module
                /**
                 * This is an auto-generated method that returns the global
                * [design time] parent component.
                * 
                * Note: the class generator will ignore any custom
                * implementation for this behavior.
                 */
                private com.tangosol.coherence.Component get_Module()
                    {
                    return this.get_Parent().get_Parent().get_Parent();
                    }
                }

            // ---- class: com.tangosol.coherence.component.net.Cluster$PacketSpeaker$BundlingQueue$TargetQueue
            
            /**
             * Child queue implementation; it is based on DualQueue but avoids
             * all notification during add as there are no threads that block
             * on the child queue.
             */
            @SuppressWarnings({"deprecation", "rawtypes", "unused", "unchecked", "ConstantConditions", "DuplicatedCode", "ForLoopReplaceableByForEach", "IfCanBeSwitch", "RedundantArrayCreation", "RedundantSuppression", "SameParameterValue", "TryFinallyCanBeTryWithResources", "TryWithIdenticalCatches", "UnnecessaryBoxing", "UnnecessaryUnboxing", "UnusedAssignment"})
            public static class TargetQueue
                    extends    com.tangosol.coherence.component.util.daemon.queueProcessor.packetProcessor.PacketSpeaker.BundlingQueue.TargetQueue
                {
                // ---- Fields declarations ----
                private static com.tangosol.util.ListMap __mapChildren;
                
                // Static initializer
                static
                    {
                    __initStatic();
                    }
                
                // Default static initializer
                private static void __initStatic()
                    {
                    // register child classes
                    __mapChildren = new com.tangosol.util.ListMap();
                    __mapChildren.put("Iterator", Cluster.PacketSpeaker.BundlingQueue.TargetQueue.Iterator.get_CLASS());
                    }
                
                // Default constructor
                public TargetQueue()
                    {
                    this(null, null, true);
                    }
                
                // Initializing constructor
                public TargetQueue(String sName, com.tangosol.coherence.Component compParent, boolean fInit)
                    {
                    super(sName, compParent, false);
                    
                    if (fInit)
                        {
                        __init();
                        }
                    }
                
                // Main initializer
                public void __init()
                    {
                    // private initialization
                    __initPrivate();
                    
                    // state initialization: public and protected properties
                    try
                        {
                        setElementList(new com.tangosol.util.RecyclingLinkedList());
                        setHeadElementList(new com.tangosol.util.RecyclingLinkedList());
                        setHeadLock(new java.lang.Object());
                        }
                    catch (java.lang.Exception e)
                        {
                        // re-throw as a runtime exception
                        throw new com.tangosol.util.WrapperException(e);
                        }
                    
                    // containment initialization: children
                    
                    // signal the end of the initialization
                    set_Constructed(true);
                    }
                
                // Private initializer
                protected void __initPrivate()
                    {
                    
                    super.__initPrivate();
                    }
                
                //++ getter for static property _Instance
                /**
                 * Getter for property _Instance.<p>
                * Auto generated
                 */
                public static com.tangosol.coherence.Component get_Instance()
                    {
                    return new com.tangosol.coherence.component.net.Cluster.PacketSpeaker.BundlingQueue.TargetQueue();
                    }
                
                //++ getter for static property _CLASS
                /**
                 * Getter for property _CLASS.<p>
                * Property with auto-generated accessor that returns the Class
                * object for a given component.
                 */
                public static Class get_CLASS()
                    {
                    Class clz;
                    try
                        {
                        clz = Class.forName("com.tangosol.coherence/component/net/Cluster$PacketSpeaker$BundlingQueue$TargetQueue".replace('/', '.'));
                        }
                    catch (ClassNotFoundException e)
                        {
                        throw new NoClassDefFoundError(e.getMessage());
                        }
                    return clz;
                    }
                
                //++ getter for autogen property _Module
                /**
                 * This is an auto-generated method that returns the global
                * [design time] parent component.
                * 
                * Note: the class generator will ignore any custom
                * implementation for this behavior.
                 */
                private com.tangosol.coherence.Component get_Module()
                    {
                    return this.get_Parent().get_Parent().get_Parent();
                    }
                
                //++ getter for autogen property _ChildClasses
                /**
                 * This is an auto-generated method that returns the map of
                * design time [static] children.
                * 
                * Note: the class generator will ignore any custom
                * implementation for this behavior.
                 */
                protected java.util.Map get_ChildClasses()
                    {
                    return __mapChildren;
                    }

                // ---- class: com.tangosol.coherence.component.net.Cluster$PacketSpeaker$BundlingQueue$TargetQueue$Iterator
                
                /**
                 * Iterator of a snapshot of the List object that backs the
                 * Queue. Supports remove(). Uses the Queue as the monitor if
                 * any synchronization is required.
                 */
                @SuppressWarnings({"deprecation", "rawtypes", "unused", "unchecked", "ConstantConditions", "DuplicatedCode", "ForLoopReplaceableByForEach", "IfCanBeSwitch", "RedundantArrayCreation", "RedundantSuppression", "SameParameterValue", "TryFinallyCanBeTryWithResources", "TryWithIdenticalCatches", "UnnecessaryBoxing", "UnnecessaryUnboxing", "UnusedAssignment"})
                public static class Iterator
                        extends    com.tangosol.coherence.component.util.daemon.queueProcessor.packetProcessor.PacketSpeaker.BundlingQueue.TargetQueue.Iterator
                    {
                    // ---- Fields declarations ----
                    
                    // Default constructor
                    public Iterator()
                        {
                        this(null, null, true);
                        }
                    
                    // Initializing constructor
                    public Iterator(String sName, com.tangosol.coherence.Component compParent, boolean fInit)
                        {
                        super(sName, compParent, false);
                        
                        if (fInit)
                            {
                            __init();
                            }
                        }
                    
                    // Main initializer
                    public void __init()
                        {
                        // private initialization
                        __initPrivate();
                        
                        
                        // signal the end of the initialization
                        set_Constructed(true);
                        }
                    
                    // Private initializer
                    protected void __initPrivate()
                        {
                        
                        super.__initPrivate();
                        }
                    
                    //++ getter for static property _Instance
                    /**
                     * Getter for property _Instance.<p>
                    * Auto generated
                     */
                    public static com.tangosol.coherence.Component get_Instance()
                        {
                        return new com.tangosol.coherence.component.net.Cluster.PacketSpeaker.BundlingQueue.TargetQueue.Iterator();
                        }
                    
                    //++ getter for static property _CLASS
                    /**
                     * Getter for property _CLASS.<p>
                    * Property with auto-generated accessor that returns the
                    * Class object for a given component.
                     */
                    public static Class get_CLASS()
                        {
                        Class clz;
                        try
                            {
                            clz = Class.forName("com.tangosol.coherence/component/net/Cluster$PacketSpeaker$BundlingQueue$TargetQueue$Iterator".replace('/', '.'));
                            }
                        catch (ClassNotFoundException e)
                            {
                            throw new NoClassDefFoundError(e.getMessage());
                            }
                        return clz;
                        }
                    
                    //++ getter for autogen property _Module
                    /**
                     * This is an auto-generated method that returns the global
                    * [design time] parent component.
                    * 
                    * Note: the class generator will ignore any custom
                    * implementation for this behavior.
                     */
                    private com.tangosol.coherence.Component get_Module()
                        {
                        return this.get_Parent().get_Parent().get_Parent().get_Parent();
                        }
                    }
                }
            }

        // ---- class: com.tangosol.coherence.component.net.Cluster$PacketSpeaker$InQueue
        
        /**
         * The DualQueue is optimized for the producer consumer use case.
         * 
         * Producers work on the tail of the queue, consumers operate on the
         * head of the queue.  The two portions of the queue are maintained as
         * seperate lists, and protected by seperate locks.
         * 
         * When a consumer looks at the head of the queue, if it is empty, the
         * head and tail will be swaped.
         */
        @SuppressWarnings({"deprecation", "rawtypes", "unused", "unchecked", "ConstantConditions", "DuplicatedCode", "ForLoopReplaceableByForEach", "IfCanBeSwitch", "RedundantArrayCreation", "RedundantSuppression", "SameParameterValue", "TryFinallyCanBeTryWithResources", "TryWithIdenticalCatches", "UnnecessaryBoxing", "UnnecessaryUnboxing", "UnusedAssignment"})
        public static class InQueue
                extends    com.tangosol.coherence.component.util.daemon.queueProcessor.packetProcessor.PacketSpeaker.InQueue
            {
            // ---- Fields declarations ----
            private static com.tangosol.util.ListMap __mapChildren;
            
            // Static initializer
            static
                {
                __initStatic();
                }
            
            // Default static initializer
            private static void __initStatic()
                {
                // register child classes
                __mapChildren = new com.tangosol.util.ListMap();
                __mapChildren.put("Iterator", Cluster.PacketSpeaker.InQueue.Iterator.get_CLASS());
                }
            
            // Default constructor
            public InQueue()
                {
                this(null, null, true);
                }
            
            // Initializing constructor
            public InQueue(String sName, com.tangosol.coherence.Component compParent, boolean fInit)
                {
                super(sName, compParent, false);
                
                if (fInit)
                    {
                    __init();
                    }
                }
            
            // Main initializer
            public void __init()
                {
                // private initialization
                __initPrivate();
                
                // state initialization: public and protected properties
                try
                    {
                    setBatchSize(1);
                    setElementList(new com.tangosol.util.RecyclingLinkedList());
                    setHeadElementList(new com.tangosol.util.RecyclingLinkedList());
                    setHeadLock(new java.lang.Object());
                    }
                catch (java.lang.Exception e)
                    {
                    // re-throw as a runtime exception
                    throw new com.tangosol.util.WrapperException(e);
                    }
                
                // containment initialization: children
                
                // signal the end of the initialization
                set_Constructed(true);
                }
            
            // Private initializer
            protected void __initPrivate()
                {
                
                super.__initPrivate();
                }
            
            //++ getter for static property _Instance
            /**
             * Getter for property _Instance.<p>
            * Auto generated
             */
            public static com.tangosol.coherence.Component get_Instance()
                {
                return new com.tangosol.coherence.component.net.Cluster.PacketSpeaker.InQueue();
                }
            
            //++ getter for static property _CLASS
            /**
             * Getter for property _CLASS.<p>
            * Property with auto-generated accessor that returns the Class
            * object for a given component.
             */
            public static Class get_CLASS()
                {
                Class clz;
                try
                    {
                    clz = Class.forName("com.tangosol.coherence/component/net/Cluster$PacketSpeaker$InQueue".replace('/', '.'));
                    }
                catch (ClassNotFoundException e)
                    {
                    throw new NoClassDefFoundError(e.getMessage());
                    }
                return clz;
                }
            
            //++ getter for autogen property _Module
            /**
             * This is an auto-generated method that returns the global [design
            * time] parent component.
            * 
            * Note: the class generator will ignore any custom implementation
            * for this behavior.
             */
            private com.tangosol.coherence.Component get_Module()
                {
                return this.get_Parent().get_Parent();
                }
            
            //++ getter for autogen property _ChildClasses
            /**
             * This is an auto-generated method that returns the map of design
            * time [static] children.
            * 
            * Note: the class generator will ignore any custom implementation
            * for this behavior.
             */
            protected java.util.Map get_ChildClasses()
                {
                return __mapChildren;
                }

            // ---- class: com.tangosol.coherence.component.net.Cluster$PacketSpeaker$InQueue$Iterator
            
            /**
             * Iterator of a snapshot of the List object that backs the Queue.
             * Supports remove(). Uses the Queue as the monitor if any
             * synchronization is required.
             */
            @SuppressWarnings({"deprecation", "rawtypes", "unused", "unchecked", "ConstantConditions", "DuplicatedCode", "ForLoopReplaceableByForEach", "IfCanBeSwitch", "RedundantArrayCreation", "RedundantSuppression", "SameParameterValue", "TryFinallyCanBeTryWithResources", "TryWithIdenticalCatches", "UnnecessaryBoxing", "UnnecessaryUnboxing", "UnusedAssignment"})
            public static class Iterator
                    extends    com.tangosol.coherence.component.util.daemon.queueProcessor.packetProcessor.PacketSpeaker.InQueue.Iterator
                {
                // ---- Fields declarations ----
                
                // Default constructor
                public Iterator()
                    {
                    this(null, null, true);
                    }
                
                // Initializing constructor
                public Iterator(String sName, com.tangosol.coherence.Component compParent, boolean fInit)
                    {
                    super(sName, compParent, false);
                    
                    if (fInit)
                        {
                        __init();
                        }
                    }
                
                // Main initializer
                public void __init()
                    {
                    // private initialization
                    __initPrivate();
                    
                    
                    // signal the end of the initialization
                    set_Constructed(true);
                    }
                
                // Private initializer
                protected void __initPrivate()
                    {
                    
                    super.__initPrivate();
                    }
                
                //++ getter for static property _Instance
                /**
                 * Getter for property _Instance.<p>
                * Auto generated
                 */
                public static com.tangosol.coherence.Component get_Instance()
                    {
                    return new com.tangosol.coherence.component.net.Cluster.PacketSpeaker.InQueue.Iterator();
                    }
                
                //++ getter for static property _CLASS
                /**
                 * Getter for property _CLASS.<p>
                * Property with auto-generated accessor that returns the Class
                * object for a given component.
                 */
                public static Class get_CLASS()
                    {
                    Class clz;
                    try
                        {
                        clz = Class.forName("com.tangosol.coherence/component/net/Cluster$PacketSpeaker$InQueue$Iterator".replace('/', '.'));
                        }
                    catch (ClassNotFoundException e)
                        {
                        throw new NoClassDefFoundError(e.getMessage());
                        }
                    return clz;
                    }
                
                //++ getter for autogen property _Module
                /**
                 * This is an auto-generated method that returns the global
                * [design time] parent component.
                * 
                * Note: the class generator will ignore any custom
                * implementation for this behavior.
                 */
                private com.tangosol.coherence.Component get_Module()
                    {
                    return this.get_Parent().get_Parent().get_Parent();
                    }
                }
            }
        }

    // ---- class: com.tangosol.coherence.component.net.Cluster$PublicGuardian
    
    /**
     * PublicGuardian is a Guardian exposed via the
     * Cluster.getResourceRegistry(). It can be consumed via a registry lookup
     * such as:
     * 
     * <code>
     * Cluster.getResourceRegistry().getResource(Guardian.class);
     * </code>
     * 
     * This PublicGuardian daemon is lazily started; the first guard request
     * will start this daemon thread. Guardables that register with the
     * PublicGuardian are expected to understand their guarding is scoped to
     * the Cluster instance thus upon Cluster restarts Guardables must
     * re-register with the PublicGuardian.
     */
    @SuppressWarnings({"deprecation", "rawtypes", "unused", "unchecked", "ConstantConditions", "DuplicatedCode", "ForLoopReplaceableByForEach", "IfCanBeSwitch", "RedundantArrayCreation", "RedundantSuppression", "SameParameterValue", "TryFinallyCanBeTryWithResources", "TryWithIdenticalCatches", "UnnecessaryBoxing", "UnnecessaryUnboxing", "UnusedAssignment"})
    public static class PublicGuardian
            extends    com.tangosol.coherence.component.util.Daemon
        {
        // ---- Fields declarations ----
        
        // Default constructor
        public PublicGuardian()
            {
            this(null, null, true);
            }
        
        // Initializing constructor
        public PublicGuardian(String sName, com.tangosol.coherence.Component compParent, boolean fInit)
            {
            super(sName, compParent, false);
            
            if (fInit)
                {
                __init();
                }
            }
        
        // Main initializer
        public void __init()
            {
            // private initialization
            __initPrivate();
            
            // state initialization: public and protected properties
            try
                {
                setDaemonState(0);
                setDefaultGuardRecovery(0.9F);
                setDefaultGuardTimeout(60000L);
                setNotifier(new com.oracle.coherence.common.base.SingleWaiterMultiNotifier());
                }
            catch (java.lang.Exception e)
                {
                // re-throw as a runtime exception
                throw new com.tangosol.util.WrapperException(e);
                }
            
            // containment initialization: children
            _addChild(new Cluster.PublicGuardian.Guard("Guard", this, true), "Guard");
            
            // signal the end of the initialization
            set_Constructed(true);
            }
        
        // Private initializer
        protected void __initPrivate()
            {
            
            super.__initPrivate();
            }
        
        //++ getter for static property _Instance
        /**
         * Getter for property _Instance.<p>
        * Auto generated
         */
        public static com.tangosol.coherence.Component get_Instance()
            {
            return new com.tangosol.coherence.component.net.Cluster.PublicGuardian();
            }
        
        //++ getter for static property _CLASS
        /**
         * Getter for property _CLASS.<p>
        * Property with auto-generated accessor that returns the Class object
        * for a given component.
         */
        public static Class get_CLASS()
            {
            Class clz;
            try
                {
                clz = Class.forName("com.tangosol.coherence/component/net/Cluster$PublicGuardian".replace('/', '.'));
                }
            catch (ClassNotFoundException e)
                {
                throw new NoClassDefFoundError(e.getMessage());
                }
            return clz;
            }
        
        //++ getter for autogen property _Module
        /**
         * This is an auto-generated method that returns the global [design
        * time] parent component.
        * 
        * Note: the class generator will ignore any custom implementation for
        * this behavior.
         */
        private com.tangosol.coherence.Component get_Module()
            {
            return this.get_Parent();
            }
        
        protected void ensureStarted()
            {
            // in the majority avoid the unnecessary synchronization of start()
            Cluster cluster = (Cluster) get_Module();
            if (cluster.isRunning() && !isStarted())
                {
                synchronized (this)
                    {
                    if (cluster.isRunning() && !isStarted())
                        {
                        start();
                        cluster.getClusterService().guard(getGuardable());
                        }
                    }
                }
            }
        
        // Declared at the super level
        public com.tangosol.net.Guardian.GuardContext guard(com.tangosol.net.Guardable guardable, long cMillis, float flPctRecover)
            {
            // import Component.Util.Daemon.QueueProcessor.Service.Grid;
            // import Component.Util.Daemon.QueueProcessor.Service.Grid$Guard as com.tangosol.coherence.component.util.daemon.queueProcessor.service.Grid.Guard;
            
            ensureStarted();
            
            // wrap the guardable with a service-aware wrapper
            if (guardable instanceof com.tangosol.coherence.component.util.daemon.queueProcessor.service.Grid.Guard)
                {
                // the guardable is from a (Grid) service itself; instantiate a wrapper
                // that associates it with itself.
                Grid service = (Grid) ((com.tangosol.coherence.component.util.daemon.queueProcessor.service.Grid.Guard) guardable).get_Parent();
                guardable = service.instantiateWrapperGuardable(guardable);
                }
            else
                {
                // the guardable is not from a (Grid) service; instantiate a wrapper
                // that associates it with the cluster service
                guardable = ((Cluster) get_Module()).getClusterService().instantiateWrapperGuardable(guardable);
                }
            
            return super.guard(guardable, cMillis, flPctRecover);
            }

        // ---- class: com.tangosol.coherence.component.net.Cluster$PublicGuardian$Guard
        
        /**
         * Guard provides the Guardable interface implementation for the Daemon.
         */
        @SuppressWarnings({"deprecation", "rawtypes", "unused", "unchecked", "ConstantConditions", "DuplicatedCode", "ForLoopReplaceableByForEach", "IfCanBeSwitch", "RedundantArrayCreation", "RedundantSuppression", "SameParameterValue", "TryFinallyCanBeTryWithResources", "TryWithIdenticalCatches", "UnnecessaryBoxing", "UnnecessaryUnboxing", "UnusedAssignment"})
        public static class Guard
                extends    com.tangosol.coherence.component.util.Daemon.Guard
            {
            // ---- Fields declarations ----
            
            // Default constructor
            public Guard()
                {
                this(null, null, true);
                }
            
            // Initializing constructor
            public Guard(String sName, com.tangosol.coherence.Component compParent, boolean fInit)
                {
                super(sName, compParent, false);
                
                if (fInit)
                    {
                    __init();
                    }
                }
            
            // Main initializer
            public void __init()
                {
                // private initialization
                __initPrivate();
                
                
                // signal the end of the initialization
                set_Constructed(true);
                }
            
            // Private initializer
            protected void __initPrivate()
                {
                
                super.__initPrivate();
                }
            
            //++ getter for static property _Instance
            /**
             * Getter for property _Instance.<p>
            * Auto generated
             */
            public static com.tangosol.coherence.Component get_Instance()
                {
                return new com.tangosol.coherence.component.net.Cluster.PublicGuardian.Guard();
                }
            
            //++ getter for static property _CLASS
            /**
             * Getter for property _CLASS.<p>
            * Property with auto-generated accessor that returns the Class
            * object for a given component.
             */
            public static Class get_CLASS()
                {
                Class clz;
                try
                    {
                    clz = Class.forName("com.tangosol.coherence/component/net/Cluster$PublicGuardian$Guard".replace('/', '.'));
                    }
                catch (ClassNotFoundException e)
                    {
                    throw new NoClassDefFoundError(e.getMessage());
                    }
                return clz;
                }
            
            //++ getter for autogen property _Module
            /**
             * This is an auto-generated method that returns the global [design
            * time] parent component.
            * 
            * Note: the class generator will ignore any custom implementation
            * for this behavior.
             */
            private com.tangosol.coherence.Component get_Module()
                {
                return this.get_Parent().get_Parent();
                }
            }
        }

    // ---- class: com.tangosol.coherence.component.net.Cluster$ShutdownHook
    
    /**
     * Abstract runnable component used as a virtual-machine shutdown hook.
     * Runnable component used as a virtual-machine shutdown hook.
     * 
     * @see Cluster#onStarted 
     */
    @SuppressWarnings({"deprecation", "rawtypes", "unused", "unchecked", "ConstantConditions", "DuplicatedCode", "ForLoopReplaceableByForEach", "IfCanBeSwitch", "RedundantArrayCreation", "RedundantSuppression", "SameParameterValue", "TryFinallyCanBeTryWithResources", "TryWithIdenticalCatches", "UnnecessaryBoxing", "UnnecessaryUnboxing", "UnusedAssignment"})
    public static class ShutdownHook
            extends    com.tangosol.coherence.component.util.ShutdownHook
        {
        // ---- Fields declarations ----
        private static com.tangosol.util.ListMap __mapChildren;
        
        // Static initializer
        static
            {
            __initStatic();
            }
        
        // Default static initializer
        private static void __initStatic()
            {
            // register child classes
            __mapChildren = new com.tangosol.util.ListMap();
            __mapChildren.put("UnregisterAction", Cluster.ShutdownHook.UnregisterAction.get_CLASS());
            }
        
        // Default constructor
        public ShutdownHook()
            {
            this(null, null, true);
            }
        
        // Initializing constructor
        public ShutdownHook(String sName, com.tangosol.coherence.Component compParent, boolean fInit)
            {
            super(sName, compParent, false);
            
            if (fInit)
                {
                __init();
                }
            }
        
        // Main initializer
        public void __init()
            {
            // private initialization
            __initPrivate();
            
            
            // containment initialization: children
            
            // signal the end of the initialization
            set_Constructed(true);
            }
        
        // Private initializer
        protected void __initPrivate()
            {
            
            super.__initPrivate();
            }
        
        //++ getter for static property _Instance
        /**
         * Getter for property _Instance.<p>
        * Auto generated
         */
        public static com.tangosol.coherence.Component get_Instance()
            {
            return new com.tangosol.coherence.component.net.Cluster.ShutdownHook();
            }
        
        //++ getter for static property _CLASS
        /**
         * Getter for property _CLASS.<p>
        * Property with auto-generated accessor that returns the Class object
        * for a given component.
         */
        public static Class get_CLASS()
            {
            Class clz;
            try
                {
                clz = Class.forName("com.tangosol.coherence/component/net/Cluster$ShutdownHook".replace('/', '.'));
                }
            catch (ClassNotFoundException e)
                {
                throw new NoClassDefFoundError(e.getMessage());
                }
            return clz;
            }
        
        //++ getter for autogen property _Module
        /**
         * This is an auto-generated method that returns the global [design
        * time] parent component.
        * 
        * Note: the class generator will ignore any custom implementation for
        * this behavior.
         */
        private com.tangosol.coherence.Component get_Module()
            {
            return this.get_Parent();
            }
        
        //++ getter for autogen property _ChildClasses
        /**
         * This is an auto-generated method that returns the map of design time
        * [static] children.
        * 
        * Note: the class generator will ignore any custom implementation for
        * this behavior.
         */
        protected java.util.Map get_ChildClasses()
            {
            return __mapChildren;
            }
        
        // Declared at the super level
        public void run()
            {
            if (getThread() == null)
                {
                // started by unregister() to avoid memory leak
                return;
                }
            
            try
                {
                Cluster cluster = (Cluster) get_Module();
                if (cluster.getState() == Cluster.STATE_RUNNING)
                    {
                    if (isGraceful())
                        {
                        _trace(get_Name() + ": shutting down cluster node", 3);
                        cluster.shutdown();
                        }
                    else
                        {
                        _trace(get_Name() + ": stopping cluster node", 3);
                        cluster.stop();
                        }
                    }
                }
            catch (Throwable e) {}
            }

        // ---- class: com.tangosol.coherence.component.net.Cluster$ShutdownHook$UnregisterAction
        
        @SuppressWarnings({"deprecation", "rawtypes", "unused", "unchecked", "ConstantConditions", "DuplicatedCode", "ForLoopReplaceableByForEach", "IfCanBeSwitch", "RedundantArrayCreation", "RedundantSuppression", "SameParameterValue", "TryFinallyCanBeTryWithResources", "TryWithIdenticalCatches", "UnnecessaryBoxing", "UnnecessaryUnboxing", "UnusedAssignment"})
        public static class UnregisterAction
                extends    com.tangosol.coherence.component.util.ShutdownHook.UnregisterAction
            {
            // ---- Fields declarations ----
            
            // Default constructor
            public UnregisterAction()
                {
                this(null, null, true);
                }
            
            // Initializing constructor
            public UnregisterAction(String sName, com.tangosol.coherence.Component compParent, boolean fInit)
                {
                super(sName, compParent, false);
                
                if (fInit)
                    {
                    __init();
                    }
                }
            
            // Main initializer
            public void __init()
                {
                // private initialization
                __initPrivate();
                
                
                // signal the end of the initialization
                set_Constructed(true);
                }
            
            // Private initializer
            protected void __initPrivate()
                {
                
                super.__initPrivate();
                }
            
            //++ getter for static property _Instance
            /**
             * Getter for property _Instance.<p>
            * Auto generated
             */
            public static com.tangosol.coherence.Component get_Instance()
                {
                return new com.tangosol.coherence.component.net.Cluster.ShutdownHook.UnregisterAction();
                }
            
            //++ getter for static property _CLASS
            /**
             * Getter for property _CLASS.<p>
            * Property with auto-generated accessor that returns the Class
            * object for a given component.
             */
            public static Class get_CLASS()
                {
                Class clz;
                try
                    {
                    clz = Class.forName("com.tangosol.coherence/component/net/Cluster$ShutdownHook$UnregisterAction".replace('/', '.'));
                    }
                catch (ClassNotFoundException e)
                    {
                    throw new NoClassDefFoundError(e.getMessage());
                    }
                return clz;
                }
            
            //++ getter for autogen property _Module
            /**
             * This is an auto-generated method that returns the global [design
            * time] parent component.
            * 
            * Note: the class generator will ignore any custom implementation
            * for this behavior.
             */
            private com.tangosol.coherence.Component get_Module()
                {
                return this.get_Parent().get_Parent();
                }
            }
        }

    // ---- class: com.tangosol.coherence.component.net.Cluster$SocketManager
    
    /**
     * The SocketManager is responsible for all sockets related to TCMP for a
     * given node.
     */
    @SuppressWarnings({"deprecation", "rawtypes", "unused", "unchecked", "ConstantConditions", "DuplicatedCode", "ForLoopReplaceableByForEach", "IfCanBeSwitch", "RedundantArrayCreation", "RedundantSuppression", "SameParameterValue", "TryFinallyCanBeTryWithResources", "TryWithIdenticalCatches", "UnnecessaryBoxing", "UnnecessaryUnboxing", "UnusedAssignment"})
    public static class SocketManager
            extends    com.tangosol.coherence.component.Util
        {
        // ---- Fields declarations ----
        
        /**
         * Property Depot
         *
         * The exabus Depot.
         * 
         * @volatile
         */
        private volatile transient com.oracle.coherence.common.net.exabus.Depot __m_Depot;
        
        /**
         * Property TcpRingSocketProvider
         *
         * The SocketProvider used to create new Sockets.
         */
        private com.oracle.coherence.common.net.SocketProvider __m_TcpRingSocketProvider;
        
        /**
         * Property UnicastUdpSocketProvider
         *
         */
        private com.tangosol.net.DatagramSocketProvider __m_UnicastUdpSocketProvider;
        
        // Default constructor
        public SocketManager()
            {
            this(null, null, true);
            }
        
        // Initializing constructor
        public SocketManager(String sName, com.tangosol.coherence.Component compParent, boolean fInit)
            {
            super(sName, compParent, false);
            
            if (fInit)
                {
                __init();
                }
            }
        
        // Main initializer
        public void __init()
            {
            // private initialization
            __initPrivate();
            
            
            // containment initialization: children
            _addChild(new Cluster.SocketManager.AcceptorChannel("AcceptorChannel", this, true), "AcceptorChannel");
            _addChild(new Cluster.SocketManager.BroadcastTcpSocket("BroadcastTcpSocket", this, true), "BroadcastTcpSocket");
            _addChild(new Cluster.SocketManager.BroadcastUdpSocket("BroadcastUdpSocket", this, true), "BroadcastUdpSocket");
            _addChild(new Cluster.SocketManager.PreferredUnicastUdpSocket("PreferredUnicastUdpSocket", this, true), "PreferredUnicastUdpSocket");
            _addChild(new Cluster.SocketManager.UnicastUdpSocket("UnicastUdpSocket", this, true), "UnicastUdpSocket");
            
            // signal the end of the initialization
            set_Constructed(true);
            }
        
        // Private initializer
        protected void __initPrivate()
            {
            
            super.__initPrivate();
            }
        
        //++ getter for static property _Instance
        /**
         * Getter for property _Instance.<p>
        * Auto generated
         */
        public static com.tangosol.coherence.Component get_Instance()
            {
            return new com.tangosol.coherence.component.net.Cluster.SocketManager();
            }
        
        //++ getter for static property _CLASS
        /**
         * Getter for property _CLASS.<p>
        * Property with auto-generated accessor that returns the Class object
        * for a given component.
         */
        public static Class get_CLASS()
            {
            Class clz;
            try
                {
                clz = Class.forName("com.tangosol.coherence/component/net/Cluster$SocketManager".replace('/', '.'));
                }
            catch (ClassNotFoundException e)
                {
                throw new NoClassDefFoundError(e.getMessage());
                }
            return clz;
            }
        
        //++ getter for autogen property _Module
        /**
         * This is an auto-generated method that returns the global [design
        * time] parent component.
        * 
        * Note: the class generator will ignore any custom implementation for
        * this behavior.
         */
        private com.tangosol.coherence.Component get_Module()
            {
            return this.get_Parent();
            }
        
        /**
         * Bind and open necessary sockets/channels.
         */
        public void bindSockets()
                throws java.io.IOException
            {
            // import com.tangosol.net.ClusterDependencies;
            // import com.tangosol.net.DatagramSocketProvider;
            // import com.tangosol.net.InetAddressHelper;
            // import com.tangosol.util.Base;
            // import com.oracle.coherence.common.net.InetAddresses;
            // import java.net.InetAddress;
            // import java.net.InetSocketAddress;
            // import java.net.UnknownHostException;
            // import java.io.IOException;
            // import java.net.DatagramSocket;
            // import java.nio.channels.ServerSocketChannel;
            
            Cluster                cluster         = (Cluster) get_Module();
            ClusterDependencies    config          = cluster.getDependencies();
            Cluster.SocketManager.AcceptorChannel       acceptorChannel = getAcceptorChannel();
            Cluster.SocketManager.UnicastUdpSocket      udpSocket       = getUnicastUdpSocket();
            InetAddress            addrInet        = udpSocket.getInetAddress();
            DatagramSocketProvider provider        = getUnicastUdpSocketProvider();
            boolean                fTransportSvc   = cluster.isTransportServiceEnabled();
            boolean                fBound          = false;
            ServerSocketChannel    channelTcp;
            
            if (!InetAddresses.isLocalAddress(addrInet))
                {
                throw new IOException(addrInet + " is not a local address");
                }
            
            int nPort = config.getLocalPort();
            if (nPort == 0 &&
                config.getGroupPort() != 8088 && 
                config.getWellKnownAddresses() != null &&
                cluster.getClusterService().getWellKnownAddresses()
                    .contains(new InetSocketAddress(addrInet, 8088)))
                {
                // pre 12.2.1 WKA config backwards compatibility
                // if the WKA configuration is relying upon *default* cluster listen ports then
                // we must actually listen on them. Note this isn't necessary for non-default
                // values as that config must have also manually set the listen port as well.   
                nPort = 8088; // TODO: deprecated remove post 12.2.1
                }
            
            IOException eLast          = null;
            int         nPortMin       = nPort;
            int         nPortAdjustMax = config.isLocalPortAutoAdjust()
                ? config.getLocalPortAutoAdjust()
                : nPort + (fTransportSvc ? 0 : 1); // when datagram only we require two ports, so nPort and nPort + 1
            
            // we bind to TCP even if we don't use TcpRing, this is because we want to pre-reserve this member's
            // TCP port which will be used for many things such as MessageBus, NS, Proxy, Federation, and doing
            // it here ensures it is in the configured range, and that it has at least a chance of being equal
            // to the UDP port. Note we don't mandate that they are equal but this gives an impression of a
            // smaller footprint.
            fBound = false;
            do
                {
                channelTcp = null;
                try
                    {
                    acceptorChannel.setPort(nPort);
                    channelTcp = acceptorChannel.instantiateChannel();
                    acceptorChannel.setChannel(channelTcp);
                    acceptorChannel.open();
                    fBound = true;
                    }
                catch (IOException e1)
                    {
                    eLast = e1;
                    if (channelTcp != null)
                        {
                        try
                            {
                            channelTcp.close();
                            }
                        catch (IOException e2) {}
                        }
                    }
                }
            while (!fBound && nPort != 0 && (++nPort <= nPortAdjustMax)); // only one pass with nPort == 0
            
            if (fBound)
                {
                fBound = false;
                try
                    {
                    // first try to get the same UDP port as we've used for TCP (for tidyness)
                    udpSocket.setPort(nPort == 0 ? acceptorChannel.getPort() : nPort);
                    udpSocket.open();
                    fBound = true;
                    }
                catch (IOException e1)
                    {
                    eLast = e1;
                    nPort = nPortMin; // restart scan for datagram port
                    do
                        {
                        try
                            {
                            // try to bind the udp port
                            udpSocket.setPort(nPort);
                            udpSocket.open();
                            fBound = true;
                            break;
                            }
                        catch (IOException e2)
                            {
                            eLast = e2;
                            }
                        }
                    while (!fBound && nPort != 0 && (++nPort <= nPortAdjustMax)); // only one pass with nPort == 0
                    }
                }
            
            if (fBound && !fTransportSvc) // no need for preferred port/listener if we're using the TransportService
                {
                fBound = false;
                if (nPort > 0 && nPort < nPortAdjustMax)
                    {
                    ++nPort; // continue scan on datagram port
                    }
            
                Cluster.SocketManager.PreferredUnicastUdpSocket udpSocketPref = getPreferredUnicastUdpSocket();
                do
                    {
                    try
                        {
                        // try to bind the udp port
                        udpSocketPref.setPort(nPort);
                        udpSocketPref.open();
                        fBound = true;
                        }
                    catch (IOException e1)
                        {
                        eLast = e1;
                        }
                    }
                while (!fBound && nPort != 0 && (++nPort <= nPortAdjustMax)); // only one pass with nPort == 0
                }
            
            if (fBound)
                {
                InetSocketAddress addrBind = (InetSocketAddress) udpSocket.getDatagramSocket().getLocalSocketAddress();
                String            sAddr    = addrBind.toString();
                if (addrBind.getAddress().isAnyLocalAddress())
                    {
                    try
                        {
                        sAddr = InetAddress.getLocalHost().getHostName() + ":" + addrBind.getPort();
                        }
                    catch (UnknownHostException e) {}
                    }
                _trace("TCMP bound to " + sAddr + " using " + provider, 3);
                }
            else
                {
                // ran out of ports
                if (config.isLocalPortAutoAdjust())
                    {
                    throw new IOException(provider + " unable to find available port(s) within " + nPortMin + ".." + Math.max(0, nPort - 1), eLast);
                    }
                else
                    {
                    throw new IOException(provider + " failed to bind to configured port " + nPortMin +
                        ". Note, that port auto-adjust feature has been explicitly disabled", eLast);
                    }
                }
            
            if (cluster.getClusterService().getWellKnownAddresses() == null)
                {
                // multicast is open but not joined on startup; only used for send initially
                getBroadcastUdpSocket().open();
                }
            
            // BroadcastListeners will bind on demand
            }
        
        /**
         * Configure a DatagramSocket
         */
        public void configure(java.net.DatagramSocket socket)
                throws java.io.IOException
            {
            // import com.tangosol.net.ClusterDependencies;
            // import com.tangosol.net.TcpDatagramSocket;
            // import com.oracle.coherence.common.net.InetAddresses;
            // import java.net.InetAddress;
            // import java.net.MulticastSocket;
            
            ClusterDependencies config = ((Cluster) get_Module()).getDependencies();
            
            if (socket instanceof TcpDatagramSocket)
                {
                // instruct the TcpDatagramSocket socket about the TCMP header, allowing it
                // to reuse the first three bytes of each packet.
                TcpDatagramSocket datagram = (TcpDatagramSocket) socket;    
                datagram.setPacketMagic(0x0DDF00D0, 0xFFFFFFF0);
            
                // pass along TCP specifiec SocketOptions
                datagram.setSocketOptions(config.getTcpDatagramSocketOptions());
                datagram.setListenBacklog(config.getTcpBacklog());
                }
            else if (socket instanceof MulticastSocket)
                {
                MulticastSocket socketMulti = (MulticastSocket) socket;
                InetAddress     addrUnicast = getUnicastUdpSocket().getInetAddress();
            
                socketMulti.setTimeToLive(config.getGroupTimeToLive());
                InetAddress addrGroup = config.getGroupInterface();
            
                if (addrGroup != null && !addrGroup.isAnyLocalAddress())
                    {
                    // specified; just use it
                    }
                else if (config.getPublisherGroupThreshold() < 100 || // MC is being used for data, default to UC interface
                         addrUnicast.isLoopbackAddress())             // legacy support; this shows a clear intent to limit the cluster to just this machine
                    {
                    addrGroup = addrUnicast;
                    }
                else
                    {
                    // (common); MC is only being used for discovery and thus it isn't criticial that it be on the same interface
                    // as UC because we won't send any ACKable packets over it. This is especially important for AIX because
                    // setting the interface there appears to direct all (not just MC) packets out that interface and that
                    // can break cross-cluster broadcasts for collocated clusters running on different NICs.
                    addrGroup = null;
                    }
            
                if (addrGroup != null &&
                    !InetAddresses.isNatLocalAddress(addrGroup, config.getLocalPort(), config.getLocalPortAutoAdjust()))
                    {
                    socketMulti.setInterface(addrGroup);
                    }
                }
            // else; no specific configuration for plain old DatagramSockets
            }
        
        /**
         * Configure a ServerSocket
         */
        public void configure(java.net.ServerSocket socket)
                throws java.io.IOException
            {
            ((Cluster) get_Module()).getClusterService().getTcpRing().getSocketOptions().apply(socket);
            }
        
        // Accessor for the property "AcceptorChannel"
        /**
         * Getter for property AcceptorChannel.<p>
        * The ServerSocketChannel wrapper.
         */
        public Cluster.SocketManager.AcceptorChannel getAcceptorChannel()
            {
            return (Cluster.SocketManager.AcceptorChannel) _findChild("AcceptorChannel");
            }
        
        // Accessor for the property "BroadcastTcpSocket"
        /**
         * Getter for property BroadcastTcpSocket.<p>
        * Bound to the Cluster port.
         */
        public Cluster.SocketManager.BroadcastTcpSocket getBroadcastTcpSocket()
            {
            return (Cluster.SocketManager.BroadcastTcpSocket) _findChild("BroadcastTcpSocket");
            }
        
        // Accessor for the property "BroadcastUdpSocket"
        /**
         * Getter for property BroadcastUdpSocket.<p>
        * Bound to the Cluster port.
         */
        public Cluster.SocketManager.BroadcastUdpSocket getBroadcastUdpSocket()
            {
            return (Cluster.SocketManager.BroadcastUdpSocket) _findChild("BroadcastUdpSocket");
            }
        
        // Accessor for the property "Depot"
        /**
         * Getter for property Depot.<p>
        * The exabus Depot.
        * 
        * @volatile
         */
        public com.oracle.coherence.common.net.exabus.Depot getDepot()
            {
            // import com.oracle.coherence.common.internal.net.socketbus.SocketBusDriver;
            // import com.oracle.coherence.common.internal.net.socketbus.SocketBusDriver$Dependencies as com.oracle.coherence.common.internal.net.socketbus.SocketBusDriver.Dependencies;
            // import com.oracle.coherence.common.internal.net.socketbus.SocketBusDriver$DefaultDependencies as com.oracle.coherence.common.internal.net.socketbus.SocketBusDriver.DefaultDependencies;
            // import com.oracle.coherence.common.net.InetAddresses;
            // import com.oracle.coherence.common.net.exabus.util.SimpleDepot;
            // import com.oracle.coherence.common.net.exabus.util.SimpleDepot$DefaultDependencies as com.oracle.coherence.common.net.exabus.util.SimpleDepot.DefaultDependencies;
            // import com.oracle.coherence.common.net.exabus.spi.Driver;
            // import com.tangosol.internal.util.LoggingBridge;
            // import com.tangosol.net.ClusterDependencies;
            // import java.net.InetAddress;
            // import java.util.HashMap;
            // import java.util.Iterator;
            // import java.util.Map;
            // import java.util.Map$Entry as java.util.Map.Entry;
            // import com.oracle.coherence.common.net.exabus.Depot;;
            // import com.oracle.coherence.common.net.exabus.Depot;
            
            Depot depot = __m_Depot;
            
            if (depot == null)
                {
                // lazy initialize; the late initialization is minimally required so that we can learn our member's NAT address before we
                // configure the depot, so that we can set the depot's external address accordingly
                synchronized (this)
                    {
                    depot = __m_Depot;
                    if (depot == null)
                        {
                        // construct custom Depot based on coherence configuration
                        Cluster             cluster    = (Cluster) get_Module();
                        ClusterDependencies config     = cluster.getDependencies();
                        com.oracle.coherence.common.net.exabus.util.SimpleDepot.DefaultDependencies   depsDepot  = new com.oracle.coherence.common.net.exabus.util.SimpleDepot.DefaultDependencies()
                            .setSSLSettings(config.getUnicastSocketProviderBuilder().getSSLSettings());
            
                        Map mapDrivers = new HashMap(depsDepot.getDrivers());
                        for (Iterator iterEntry = mapDrivers.entrySet().iterator(); iterEntry.hasNext(); )
                            {
                            java.util.Map.Entry  entry  = (java.util.Map.Entry) iterEntry.next();
                            Driver driver = (Driver) entry.getValue();
                            if (driver instanceof SocketBusDriver)
                                {
                                com.oracle.coherence.common.internal.net.socketbus.SocketBusDriver.Dependencies depsSocket = ((SocketBusDriver) driver).getDependencies();
                                entry.setValue(new SocketBusDriver(
                                    new com.oracle.coherence.common.internal.net.socketbus.SocketBusDriver.DefaultDependencies(depsSocket)
                                        .setLogger(LoggingBridge.createBridge())
                                        .setDefaultAckTimeoutMillis(config.getIpMonitorTimeoutMillis() *
                                                             config.getIpMonitorAttempts())      // how long we can be stuck before migrating a connection
                                        .setAckFatalTimeoutMillis(0L)                            // retry until TCMP gives up
                                        .setSocketReconnectLimit(Integer.MAX_VALUE)              // retry until TCMP gives up
                                        ));       
                                }
                            }
            
                        depsDepot.setDrivers(mapDrivers);
                        depot = new SimpleDepot(depsDepot);
                        setDepot(depot);
                        }
                    }
                }
            
            return depot;
            }
        
        // Accessor for the property "PreferredUnicastUdpSocket"
        /**
         * Getter for property PreferredUnicastUdpSocket.<p>
        * Bound to the Member's preferred UDP port.
         */
        public Cluster.SocketManager.PreferredUnicastUdpSocket getPreferredUnicastUdpSocket()
            {
            return (Cluster.SocketManager.PreferredUnicastUdpSocket) _findChild("PreferredUnicastUdpSocket");
            }
        
        // Accessor for the property "TcpRingSocketProvider"
        /**
         * Getter for property TcpRingSocketProvider.<p>
        * The SocketProvider used to create new Sockets.
         */
        public com.oracle.coherence.common.net.SocketProvider getTcpRingSocketProvider()
            {
            return __m_TcpRingSocketProvider;
            }
        
        // Accessor for the property "UnicastUdpSocket"
        /**
         * Getter for property UnicastUdpSocket.<p>
        * Bound to the Member's advertised UDP port.
         */
        public Cluster.SocketManager.UnicastUdpSocket getUnicastUdpSocket()
            {
            return (Cluster.SocketManager.UnicastUdpSocket) _findChild("UnicastUdpSocket");
            }
        
        // Accessor for the property "UnicastUdpSocketProvider"
        /**
         * Getter for property UnicastUdpSocketProvider.<p>
         */
        public com.tangosol.net.DatagramSocketProvider getUnicastUdpSocketProvider()
            {
            return __m_UnicastUdpSocketProvider;
            }
        
        public void releaseSockets()
            {
            // see ClusterService.onExit; getBroadcastUdpSocket()       .close();
            // see ClusterService.onExit; getBroadcastTcpSocket()       .close();
            getUnicastUdpSocket()         .close();
            getPreferredUnicastUdpSocket().close();
            getAcceptorChannel()          .close();
            }
        
        // Accessor for the property "Depot"
        /**
         * Setter for property Depot.<p>
        * The exabus Depot.
        * 
        * @volatile
         */
        public void setDepot(com.oracle.coherence.common.net.exabus.Depot depot)
            {
            __m_Depot = depot;
            }
        
        // Accessor for the property "TcpRingSocketProvider"
        /**
         * Setter for property TcpRingSocketProvider.<p>
        * The SocketProvider used to create new Sockets.
         */
        public void setTcpRingSocketProvider(com.oracle.coherence.common.net.SocketProvider pSocketProvider)
            {
            __m_TcpRingSocketProvider = pSocketProvider;
            }
        
        // Accessor for the property "UnicastUdpSocketProvider"
        /**
         * Setter for property UnicastUdpSocketProvider.<p>
         */
        public void setUnicastUdpSocketProvider(com.tangosol.net.DatagramSocketProvider providerSocket)
            {
            __m_UnicastUdpSocketProvider = providerSocket;
            }

        // ---- class: com.tangosol.coherence.component.net.Cluster$SocketManager$AcceptorChannel
        
        /**
         * AcceptorChannel provides a refreshable wrapper around a
         * ServerSocketChannel used by the TcpRing.
         */
        @SuppressWarnings({"deprecation", "rawtypes", "unused", "unchecked", "ConstantConditions", "DuplicatedCode", "ForLoopReplaceableByForEach", "IfCanBeSwitch", "RedundantArrayCreation", "RedundantSuppression", "SameParameterValue", "TryFinallyCanBeTryWithResources", "TryWithIdenticalCatches", "UnnecessaryBoxing", "UnnecessaryUnboxing", "UnusedAssignment"})
        public static class AcceptorChannel
                extends    com.tangosol.coherence.Component
            {
            // ---- Fields declarations ----
            
            /**
             * Property Backlog
             *
             * Specifies the maximum queue length for incoming connection
             * indications (a request to connect). If a connection indication
             * arrives when the queue is full, the connection is refused. 
             */
            private int __m_Backlog;
            
            /**
             * Property Channel
             *
             * The underlying ServerSocketChannel.
             */
            private java.nio.channels.ServerSocketChannel __m_Channel;
            
            /**
             * Property InetAddress
             *
             * The local address that the channel binds to. This property must
             * be configured before the channel is opened.
             */
            private java.net.InetAddress __m_InetAddress;
            
            /**
             * Property Lock
             *
             * The object that is used for synchronization. By default, it is
             * this socket. This property must be configured before the socket
             * is opened.
             */
            private Object __m_Lock;
            
            /**
             * Property Port
             *
             * The network port number that the channel uses binds to. This
             * property must be configured before the channel is opened.
             */
            private int __m_Port;
            
            // Default constructor
            public AcceptorChannel()
                {
                this(null, null, true);
                }
            
            // Initializing constructor
            public AcceptorChannel(String sName, com.tangosol.coherence.Component compParent, boolean fInit)
                {
                super(sName, compParent, false);
                
                if (fInit)
                    {
                    __init();
                    }
                }
            
            // Main initializer
            public void __init()
                {
                // private initialization
                __initPrivate();
                
                // state initialization: public and protected properties
                try
                    {
                    setBacklog(0);
                    }
                catch (java.lang.Exception e)
                    {
                    // re-throw as a runtime exception
                    throw new com.tangosol.util.WrapperException(e);
                    }
                
                // signal the end of the initialization
                set_Constructed(true);
                }
            
            // Private initializer
            protected void __initPrivate()
                {
                
                super.__initPrivate();
                }
            
            //++ getter for static property _Instance
            /**
             * Getter for property _Instance.<p>
            * Auto generated
             */
            public static com.tangosol.coherence.Component get_Instance()
                {
                return new com.tangosol.coherence.component.net.Cluster.SocketManager.AcceptorChannel();
                }
            
            //++ getter for static property _CLASS
            /**
             * Getter for property _CLASS.<p>
            * Property with auto-generated accessor that returns the Class
            * object for a given component.
             */
            public static Class get_CLASS()
                {
                Class clz;
                try
                    {
                    clz = Class.forName("com.tangosol.coherence/component/net/Cluster$SocketManager$AcceptorChannel".replace('/', '.'));
                    }
                catch (ClassNotFoundException e)
                    {
                    throw new NoClassDefFoundError(e.getMessage());
                    }
                return clz;
                }
            
            //++ getter for autogen property _Module
            /**
             * This is an auto-generated method that returns the global [design
            * time] parent component.
            * 
            * Note: the class generator will ignore any custom implementation
            * for this behavior.
             */
            private com.tangosol.coherence.Component get_Module()
                {
                return this.get_Parent().get_Parent();
                }
            
            public void close()
                {
                // import java.io.IOException;
                // import java.nio.channels.ServerSocketChannel;
                
                synchronized (getLock())
                    {
                    ServerSocketChannel channel = getChannel();
                    if (channel != null && channel.isOpen())
                        {
                        try
                            {
                            channel.close();
                            }
                        catch (IOException e) {}
                        }
                
                    setChannel(null);
                    }
                }
            
            // Accessor for the property "Backlog"
            /**
             * Getter for property Backlog.<p>
            * Specifies the maximum queue length for incoming connection
            * indications (a request to connect). If a connection indication
            * arrives when the queue is full, the connection is refused. 
             */
            public int getBacklog()
                {
                return __m_Backlog;
                }
            
            // Accessor for the property "Channel"
            /**
             * Getter for property Channel.<p>
            * The underlying ServerSocketChannel.
             */
            public java.nio.channels.ServerSocketChannel getChannel()
                {
                return __m_Channel;
                }
            
            // Accessor for the property "Cluster"
            /**
             * Getter for property Cluster.<p>
             */
            public Cluster getCluster()
                {
                return (Cluster) get_Module();
                }
            
            // Accessor for the property "InetAddress"
            /**
             * Getter for property InetAddress.<p>
            * The local address that the channel binds to. This property must
            * be configured before the channel is opened.
             */
            public java.net.InetAddress getInetAddress()
                {
                return __m_InetAddress;
                }
            
            // Accessor for the property "Lock"
            /**
             * Getter for property Lock.<p>
            * The object that is used for synchronization. By default, it is
            * this socket. This property must be configured before the socket
            * is opened.
             */
            public Object getLock()
                {
                Object lock = __m_Lock;
                return lock == null ? this : lock;
                }
            
            // Accessor for the property "Port"
            /**
             * Getter for property Port.<p>
            * The network port number that the channel uses binds to. This
            * property must be configured before the channel is opened.
             */
            public int getPort()
                {
                return __m_Port;
                }
            
            // Accessor for the property "Provider"
            /**
             * Getter for property Provider.<p>
            * The provider to use in creating Sockets.
             */
            public com.oracle.coherence.common.net.SocketProvider getProvider()
                {
                return ((Cluster.SocketManager) get_Parent()).getTcpRingSocketProvider();
                }
            
            /**
             * Instantiate the underlying ServerSocketChannel.
             */
            public java.nio.channels.ServerSocketChannel instantiateChannel()
                    throws java.io.IOException
                {
                // import java.net.BindException;
                // import java.net.InetSocketAddress;
                // import java.net.ServerSocket;
                // import java.nio.channels.ServerSocketChannel;
                
                ServerSocketChannel channel = getProvider().openServerSocketChannel();
                ServerSocket        socket = channel.socket();
                
                try
                    {
                    channel.configureBlocking(false);
                    ((Cluster.SocketManager) get_Parent()).configure(socket);
                    int nPort = getPort();
                    socket.bind(new InetSocketAddress(getInetAddress(), nPort), getBacklog());
                
                    if (nPort == 0)
                        {
                        setPort(socket.getLocalPort());
                        }
                    }
                catch (BindException e)
                    {
                    channel.close();
                    throw e;
                    }
                return channel;
                }
            
            public java.nio.channels.ServerSocketChannel open()
                    throws java.io.IOException
                {
                // import java.io.IOException;
                // import java.nio.channels.ServerSocketChannel;
                
                synchronized (getLock())
                    {
                    ServerSocketChannel channel = getChannel();
                    if (channel == null || !channel.isOpen())
                        {
                        channel = instantiateChannel();
                        setChannel(channel);
                        }
                
                    return channel;
                    }
                }
            
            // Accessor for the property "Backlog"
            /**
             * Setter for property Backlog.<p>
            * Specifies the maximum queue length for incoming connection
            * indications (a request to connect). If a connection indication
            * arrives when the queue is full, the connection is refused. 
             */
            public void setBacklog(int cBacklog)
                {
                __m_Backlog = cBacklog;
                }
            
            // Accessor for the property "Channel"
            /**
             * Setter for property Channel.<p>
            * The underlying ServerSocketChannel.
             */
            public void setChannel(java.nio.channels.ServerSocketChannel channel)
                {
                __m_Channel = channel;
                }
            
            // Accessor for the property "InetAddress"
            /**
             * Setter for property InetAddress.<p>
            * The local address that the channel binds to. This property must
            * be configured before the channel is opened.
             */
            public void setInetAddress(java.net.InetAddress address)
                {
                __m_InetAddress = address;
                }
            
            // Accessor for the property "Lock"
            /**
             * Setter for property Lock.<p>
            * The object that is used for synchronization. By default, it is
            * this socket. This property must be configured before the socket
            * is opened.
             */
            protected void setLock(Object oLock)
                {
                __m_Lock = oLock;
                }
            
            // Accessor for the property "Port"
            /**
             * Setter for property Port.<p>
            * The network port number that the channel uses binds to. This
            * property must be configured before the channel is opened.
             */
            public void setPort(int nPort)
                {
                __m_Port = nPort;
                }
            }

        // ---- class: com.tangosol.coherence.component.net.Cluster$SocketManager$BroadcastTcpSocket
        
        /**
         * The optional well-known unicast socket used for receving broadcast
         * point to point communications.
         */
        @SuppressWarnings({"deprecation", "rawtypes", "unused", "unchecked", "ConstantConditions", "DuplicatedCode", "ForLoopReplaceableByForEach", "IfCanBeSwitch", "RedundantArrayCreation", "RedundantSuppression", "SameParameterValue", "TryFinallyCanBeTryWithResources", "TryWithIdenticalCatches", "UnnecessaryBoxing", "UnnecessaryUnboxing", "UnusedAssignment"})
        public static class BroadcastTcpSocket
                extends    com.tangosol.coherence.component.net.socket.udpSocket.UnicastUdpSocket
            {
            // ---- Fields declarations ----
            
            // Default constructor
            public BroadcastTcpSocket()
                {
                this(null, null, true);
                }
            
            // Initializing constructor
            public BroadcastTcpSocket(String sName, com.tangosol.coherence.Component compParent, boolean fInit)
                {
                super(sName, compParent, false);
                
                if (fInit)
                    {
                    __init();
                    }
                }
            
            // Main initializer
            public void __init()
                {
                // private initialization
                __initPrivate();
                
                // state initialization: public and protected properties
                try
                    {
                    setIgnoreSendErrors(false);
                    setPacketLength(0);
                    setRxDebugDropRate(0);
                    setSoTimeout(-1);
                    setTxDebugDropRate(0);
                    }
                catch (java.lang.Exception e)
                    {
                    // re-throw as a runtime exception
                    throw new com.tangosol.util.WrapperException(e);
                    }
                
                // signal the end of the initialization
                set_Constructed(true);
                }
            
            // Private initializer
            protected void __initPrivate()
                {
                
                super.__initPrivate();
                }
            
            //++ getter for static property _Instance
            /**
             * Getter for property _Instance.<p>
            * Auto generated
             */
            public static com.tangosol.coherence.Component get_Instance()
                {
                return new com.tangosol.coherence.component.net.Cluster.SocketManager.BroadcastTcpSocket();
                }
            
            //++ getter for static property _CLASS
            /**
             * Getter for property _CLASS.<p>
            * Property with auto-generated accessor that returns the Class
            * object for a given component.
             */
            public static Class get_CLASS()
                {
                Class clz;
                try
                    {
                    clz = Class.forName("com.tangosol.coherence/component/net/Cluster$SocketManager$BroadcastTcpSocket".replace('/', '.'));
                    }
                catch (ClassNotFoundException e)
                    {
                    throw new NoClassDefFoundError(e.getMessage());
                    }
                return clz;
                }
            
            //++ getter for autogen property _Module
            /**
             * This is an auto-generated method that returns the global [design
            * time] parent component.
            * 
            * Note: the class generator will ignore any custom implementation
            * for this behavior.
             */
            private com.tangosol.coherence.Component get_Module()
                {
                return this.get_Parent().get_Parent();
                }
            
            // Accessor for the property "Cluster"
            /**
             * Getter for property Cluster.<p>
             */
            public Cluster getCluster()
                {
                return (Cluster) get_Module();
                }
            
            // Declared at the super level
            /**
             * Getter for property DatagramSocketProvider.<p>
             */
            public com.tangosol.net.DatagramSocketProvider getDatagramSocketProvider()
                {
                // import com.tangosol.net.DatagramSocketProvider;
                // import com.tangosol.net.TcpDatagramSocketProvider;
                // import com.tangosol.net.TcpDatagramSocketProvider$DefaultDependencies as com.tangosol.net.TcpDatagramSocketProvider.DefaultDependencies;
                // import com.oracle.coherence.common.net.TcpSocketProvider;
                // import com.oracle.coherence.common.internal.net.DemultiplexedSocketProvider;
                // import com.oracle.coherence.common.internal.net.MultiplexedSocketProvider$WellKnownSubPorts as com.oracle.coherence.common.internal.net.MultiplexedSocketProvider.WellKnownSubPorts;
                
                DatagramSocketProvider provider = ((Cluster.SocketManager) get_Parent()).getUnicastUdpSocketProvider();
                if (provider instanceof TcpDatagramSocketProvider)
                    {
                    return provider;
                    }
                else
                    {
                    // the cluster is not using TcpDatagramSockets, but this listener must use them so that it can
                    // forward TCP broadcasts
                    
                    return new TcpDatagramSocketProvider(new com.tangosol.net.TcpDatagramSocketProvider.DefaultDependencies()
                        .setDelegateSocketProvider(new DemultiplexedSocketProvider(
                            TcpSocketProvider.MULTIPLEXED, com.oracle.coherence.common.internal.net.MultiplexedSocketProvider.WellKnownSubPorts.COHERENCE_TCMP_DATAGRAM.getSubPort())));
                    }
                }
            
            // Declared at the super level
            /**
             * Set up the specified java.net.DatagramSocket.
             */
            protected void initializeDatagramSocket(java.net.DatagramSocket socket)
                    throws java.io.IOException
                {
                ((Cluster.SocketManager) get_Parent()).configure(socket);
                super.initializeDatagramSocket(socket);
                }
            
            // Declared at the super level
            /**
             * Instantiate an underlying java.net.DatagramSocket.
             */
            public java.net.DatagramSocket instantiateDatagramSocket()
                    throws java.io.IOException
                {
                return super.instantiateDatagramSocket();
                }
            
            // Declared at the super level
            /**
             * InterruptedIOException could be raised only when SoTimeout value
            * is greater then zero, and the timeout expires during a call to
            * receive() for a DatagramSocket, accept() for ServerSocket or
            * getInputStream().read() for Socket. The underlying socket remains
            * valid.
            * 
            * @param eException  the causal exception
            * @param lSocketActionMillis  the time that the exception occurred
            * (or the enclosing operation began or was in progress)
            * 
            * @see SoTimeout property
             */
            protected void onInterruptedIOException(java.io.InterruptedIOException eException)
                {
                // Since the SoTimeout value is set to zero meaning undefinite timeout
                // this exception could only be caused by Thread.interrupt() call
                // indicating that all the Cluster threads are stopping in which case
                // we could safely ignore this exception
                
                return;
                }
            
            // Declared at the super level
            /**
             * Setter for property DatagramSocket.<p>
            * The actual socket.
             */
            public void setDatagramSocket(java.net.DatagramSocket socket)
                {
                super.setDatagramSocket(socket);
                }
            
            // Declared at the super level
            protected void validateBufferSize(String sBufferName, int cbActualSize, int cbRequestedSize, int cbMinimumSize)
                {
                if (!getCluster().isTransportServiceEnabled() || cbActualSize < cbMinimumSize)
                    {
                    super.validateBufferSize(sBufferName, cbActualSize, cbRequestedSize, cbMinimumSize);
                    }
                // else; we don't care about UDP performance when we're running over MessageBus
                }
            }

        // ---- class: com.tangosol.coherence.component.net.Cluster$SocketManager$BroadcastUdpSocket
        
        /**
         * The optional well-known unicast UDP socket used for receving
         * broadcast point to point communications.
         */
        @SuppressWarnings({"deprecation", "rawtypes", "unused", "unchecked", "ConstantConditions", "DuplicatedCode", "ForLoopReplaceableByForEach", "IfCanBeSwitch", "RedundantArrayCreation", "RedundantSuppression", "SameParameterValue", "TryFinallyCanBeTryWithResources", "TryWithIdenticalCatches", "UnnecessaryBoxing", "UnnecessaryUnboxing", "UnusedAssignment"})
        public static class BroadcastUdpSocket
                extends    com.tangosol.coherence.component.net.socket.udpSocket.UnicastUdpSocket
            {
            // ---- Fields declarations ----
            
            // Default constructor
            public BroadcastUdpSocket()
                {
                this(null, null, true);
                }
            
            // Initializing constructor
            public BroadcastUdpSocket(String sName, com.tangosol.coherence.Component compParent, boolean fInit)
                {
                super(sName, compParent, false);
                
                if (fInit)
                    {
                    __init();
                    }
                }
            
            // Main initializer
            public void __init()
                {
                // private initialization
                __initPrivate();
                
                // state initialization: public and protected properties
                try
                    {
                    setIgnoreSendErrors(false);
                    setPacketLength(0);
                    setRxDebugDropRate(0);
                    setSoTimeout(-1);
                    setTxDebugDropRate(0);
                    }
                catch (java.lang.Exception e)
                    {
                    // re-throw as a runtime exception
                    throw new com.tangosol.util.WrapperException(e);
                    }
                
                // signal the end of the initialization
                set_Constructed(true);
                }
            
            // Private initializer
            protected void __initPrivate()
                {
                
                super.__initPrivate();
                }
            
            //++ getter for static property _Instance
            /**
             * Getter for property _Instance.<p>
            * Auto generated
             */
            public static com.tangosol.coherence.Component get_Instance()
                {
                return new com.tangosol.coherence.component.net.Cluster.SocketManager.BroadcastUdpSocket();
                }
            
            //++ getter for static property _CLASS
            /**
             * Getter for property _CLASS.<p>
            * Property with auto-generated accessor that returns the Class
            * object for a given component.
             */
            public static Class get_CLASS()
                {
                Class clz;
                try
                    {
                    clz = Class.forName("com.tangosol.coherence/component/net/Cluster$SocketManager$BroadcastUdpSocket".replace('/', '.'));
                    }
                catch (ClassNotFoundException e)
                    {
                    throw new NoClassDefFoundError(e.getMessage());
                    }
                return clz;
                }
            
            //++ getter for autogen property _Module
            /**
             * This is an auto-generated method that returns the global [design
            * time] parent component.
            * 
            * Note: the class generator will ignore any custom implementation
            * for this behavior.
             */
            private com.tangosol.coherence.Component get_Module()
                {
                return this.get_Parent().get_Parent();
                }
            
            // Accessor for the property "Cluster"
            /**
             * Getter for property Cluster.<p>
             */
            public Cluster getCluster()
                {
                return (Cluster) get_Module();
                }
            
            // Declared at the super level
            /**
             * Getter for property DatagramSocketProvider.<p>
             */
            public com.tangosol.net.DatagramSocketProvider getDatagramSocketProvider()
                {
                return ((Cluster.SocketManager) get_Parent()).getUnicastUdpSocketProvider();
                }
            
            // Declared at the super level
            /**
             * Set up the specified java.net.DatagramSocket.
             */
            protected void initializeDatagramSocket(java.net.DatagramSocket socket)
                    throws java.io.IOException
                {
                ((Cluster.SocketManager) get_Parent()).configure(socket);
                super.initializeDatagramSocket(socket);
                }
            
            // Declared at the super level
            /**
             * Instantiate an underlying java.net.DatagramSocket.
             */
            public java.net.DatagramSocket instantiateDatagramSocket()
                    throws java.io.IOException
                {
                // for shared cluster-port support across colocated clusters we always use a MC socket for broadcasts
                // this allows the port to be shared my UC and MC clusters.  Note the UC cluster won't join the group.
                return getDatagramSocketProvider().openMulticastSocket();
                }
            
            // Declared at the super level
            /**
             * InterruptedIOException could be raised only when SoTimeout value
            * is greater then zero, and the timeout expires during a call to
            * receive() for a DatagramSocket, accept() for ServerSocket or
            * getInputStream().read() for Socket. The underlying socket remains
            * valid.
            * 
            * @param eException  the causal exception
            * @param lSocketActionMillis  the time that the exception occurred
            * (or the enclosing operation began or was in progress)
            * 
            * @see SoTimeout property
             */
            protected void onInterruptedIOException(java.io.InterruptedIOException eException)
                {
                return; // normal on broadcast socket, we simply return and allow onInterval to ensure our bindings/MC group membership
                }
            
            /**
             * rebiond the socket
             */
            public void rebind()
                {
                // import java.io.IOException;
                // import java.net.DatagramSocket;
                
                synchronized (getLock())
                    {
                    DatagramSocket socketNew = null;
                    try
                        {
                        socketNew = instantiateDatagramSocket();        
                        initializeDatagramSocket(socketNew);
                
                        bind(socketNew);    
                
                        getDatagramSocket().close();
                        setDatagramSocket(socketNew);
                        }
                    catch (IOException e)
                        {
                        socketNew.close();
                        onException(e);
                        }
                    }
                }
            
            // Declared at the super level
            /**
             * Setter for property DatagramSocket.<p>
            * The actual socket.
             */
            public void setDatagramSocket(java.net.DatagramSocket socket)
                {
                super.setDatagramSocket(socket);
                }
            
            // Declared at the super level
            protected void validateBufferSize(String sBufferName, int cbActualSize, int cbRequestedSize, int cbMinimumSize)
                {
                if (!getCluster().isTransportServiceEnabled() || cbActualSize < cbMinimumSize)
                    {
                    super.validateBufferSize(sBufferName, cbActualSize, cbRequestedSize, cbMinimumSize);
                    }
                // else; we don't care about UDP performance when we're running over MessageBus
                }
            }

        // ---- class: com.tangosol.coherence.component.net.Cluster$SocketManager$PreferredUnicastUdpSocket
        
        /**
         * The preferred unicast UDP socket used for receiving point to point
         * communications.  To reduce possible contention between sending and
         * receiving threads on a single socket, this socket is used only for
         * inbound communications.  The address and packet size associated with
         * this socket are communicated to other cluster members as part of the
         * NewMemberWelcome[Request].
         */
        @SuppressWarnings({"deprecation", "rawtypes", "unused", "unchecked", "ConstantConditions", "DuplicatedCode", "ForLoopReplaceableByForEach", "IfCanBeSwitch", "RedundantArrayCreation", "RedundantSuppression", "SameParameterValue", "TryFinallyCanBeTryWithResources", "TryWithIdenticalCatches", "UnnecessaryBoxing", "UnnecessaryUnboxing", "UnusedAssignment"})
        public static class PreferredUnicastUdpSocket
                extends    com.tangosol.coherence.component.net.socket.udpSocket.UnicastUdpSocket
            {
            // ---- Fields declarations ----
            
            // Default constructor
            public PreferredUnicastUdpSocket()
                {
                this(null, null, true);
                }
            
            // Initializing constructor
            public PreferredUnicastUdpSocket(String sName, com.tangosol.coherence.Component compParent, boolean fInit)
                {
                super(sName, compParent, false);
                
                if (fInit)
                    {
                    __init();
                    }
                }
            
            // Main initializer
            public void __init()
                {
                // private initialization
                __initPrivate();
                
                // state initialization: public and protected properties
                try
                    {
                    setIgnoreSendErrors(false);
                    setPacketLength(0);
                    setRxDebugDropRate(0);
                    setSoTimeout(-1);
                    setTxDebugDropRate(0);
                    }
                catch (java.lang.Exception e)
                    {
                    // re-throw as a runtime exception
                    throw new com.tangosol.util.WrapperException(e);
                    }
                
                // signal the end of the initialization
                set_Constructed(true);
                }
            
            // Private initializer
            protected void __initPrivate()
                {
                
                super.__initPrivate();
                }
            
            //++ getter for static property _Instance
            /**
             * Getter for property _Instance.<p>
            * Auto generated
             */
            public static com.tangosol.coherence.Component get_Instance()
                {
                return new com.tangosol.coherence.component.net.Cluster.SocketManager.PreferredUnicastUdpSocket();
                }
            
            //++ getter for static property _CLASS
            /**
             * Getter for property _CLASS.<p>
            * Property with auto-generated accessor that returns the Class
            * object for a given component.
             */
            public static Class get_CLASS()
                {
                Class clz;
                try
                    {
                    clz = Class.forName("com.tangosol.coherence/component/net/Cluster$SocketManager$PreferredUnicastUdpSocket".replace('/', '.'));
                    }
                catch (ClassNotFoundException e)
                    {
                    throw new NoClassDefFoundError(e.getMessage());
                    }
                return clz;
                }
            
            //++ getter for autogen property _Module
            /**
             * This is an auto-generated method that returns the global [design
            * time] parent component.
            * 
            * Note: the class generator will ignore any custom implementation
            * for this behavior.
             */
            private com.tangosol.coherence.Component get_Module()
                {
                return this.get_Parent().get_Parent();
                }
            
            // Accessor for the property "Cluster"
            /**
             * Getter for property Cluster.<p>
             */
            public Cluster getCluster()
                {
                return (Cluster) get_Module();
                }
            
            // Declared at the super level
            /**
             * Getter for property DatagramSocketProvider.<p>
             */
            public com.tangosol.net.DatagramSocketProvider getDatagramSocketProvider()
                {
                return ((Cluster.SocketManager) get_Parent()).getUnicastUdpSocketProvider();
                }
            
            // Declared at the super level
            /**
             * Set up the specified java.net.DatagramSocket.
             */
            protected void initializeDatagramSocket(java.net.DatagramSocket socket)
                    throws java.io.IOException
                {
                ((Cluster.SocketManager) get_Parent()).configure(socket);
                super.initializeDatagramSocket(socket);
                }
            
            // Declared at the super level
            /**
             * Instantiate an underlying java.net.DatagramSocket.
             */
            public java.net.DatagramSocket instantiateDatagramSocket()
                    throws java.io.IOException
                {
                return super.instantiateDatagramSocket();
                }
            
            // Declared at the super level
            /**
             * InterruptedIOException could be raised only when SoTimeout value
            * is greater then zero, and the timeout expires during a call to
            * receive() for a DatagramSocket, accept() for ServerSocket or
            * getInputStream().read() for Socket. The underlying socket remains
            * valid.
            * 
            * @param eException  the causal exception
            * @param lSocketActionMillis  the time that the exception occurred
            * (or the enclosing operation began or was in progress)
            * 
            * @see SoTimeout property
             */
            protected void onInterruptedIOException(java.io.InterruptedIOException eException)
                {
                // Since the SoTimeout value is set to zero meaning undefinite timeout
                // this exception could only be caused by Thread.interrupt() call
                // indicating that all the Cluster threads are stopping in which case
                // we could safely ignore this exception
                
                return;
                }
            
            // Declared at the super level
            /**
             * Setter for property DatagramSocket.<p>
            * The actual socket.
             */
            public void setDatagramSocket(java.net.DatagramSocket socket)
                {
                super.setDatagramSocket(socket);
                }
            
            // Declared at the super level
            protected void validateBufferSize(String sBufferName, int cbActualSize, int cbRequestedSize, int cbMinimumSize)
                {
                if (!getCluster().isTransportServiceEnabled() || cbActualSize < cbMinimumSize)
                    {
                    super.validateBufferSize(sBufferName, cbActualSize, cbRequestedSize, cbMinimumSize);
                    }
                // else; we don't care about UDP performance when we're running over MessageBus
                }
            }

        // ---- class: com.tangosol.coherence.component.net.Cluster$SocketManager$UnicastUdpSocket
        
        /**
         * The advertised unicast UDP socket used for sending all point to
         * point communications, and for receiving a limited amount of inbound
         * traffic.  Only the initial discovery packets, and subsequent large
         * (> preferred) packets will be received upon this socket, keeping the
         * receive versus send contention low.
         */
        @SuppressWarnings({"deprecation", "rawtypes", "unused", "unchecked", "ConstantConditions", "DuplicatedCode", "ForLoopReplaceableByForEach", "IfCanBeSwitch", "RedundantArrayCreation", "RedundantSuppression", "SameParameterValue", "TryFinallyCanBeTryWithResources", "TryWithIdenticalCatches", "UnnecessaryBoxing", "UnnecessaryUnboxing", "UnusedAssignment"})
        public static class UnicastUdpSocket
                extends    com.tangosol.coherence.component.net.socket.udpSocket.UnicastUdpSocket
            {
            // ---- Fields declarations ----
            
            // Default constructor
            public UnicastUdpSocket()
                {
                this(null, null, true);
                }
            
            // Initializing constructor
            public UnicastUdpSocket(String sName, com.tangosol.coherence.Component compParent, boolean fInit)
                {
                super(sName, compParent, false);
                
                if (fInit)
                    {
                    __init();
                    }
                }
            
            // Main initializer
            public void __init()
                {
                // private initialization
                __initPrivate();
                
                // state initialization: public and protected properties
                try
                    {
                    setIgnoreSendErrors(false);
                    setPacketLength(0);
                    setRxDebugDropRate(0);
                    setSoTimeout(-1);
                    setTxDebugDropRate(0);
                    }
                catch (java.lang.Exception e)
                    {
                    // re-throw as a runtime exception
                    throw new com.tangosol.util.WrapperException(e);
                    }
                
                // signal the end of the initialization
                set_Constructed(true);
                }
            
            // Private initializer
            protected void __initPrivate()
                {
                
                super.__initPrivate();
                }
            
            //++ getter for static property _Instance
            /**
             * Getter for property _Instance.<p>
            * Auto generated
             */
            public static com.tangosol.coherence.Component get_Instance()
                {
                return new com.tangosol.coherence.component.net.Cluster.SocketManager.UnicastUdpSocket();
                }
            
            //++ getter for static property _CLASS
            /**
             * Getter for property _CLASS.<p>
            * Property with auto-generated accessor that returns the Class
            * object for a given component.
             */
            public static Class get_CLASS()
                {
                Class clz;
                try
                    {
                    clz = Class.forName("com.tangosol.coherence/component/net/Cluster$SocketManager$UnicastUdpSocket".replace('/', '.'));
                    }
                catch (ClassNotFoundException e)
                    {
                    throw new NoClassDefFoundError(e.getMessage());
                    }
                return clz;
                }
            
            //++ getter for autogen property _Module
            /**
             * This is an auto-generated method that returns the global [design
            * time] parent component.
            * 
            * Note: the class generator will ignore any custom implementation
            * for this behavior.
             */
            private com.tangosol.coherence.Component get_Module()
                {
                return this.get_Parent().get_Parent();
                }
            
            // Accessor for the property "Cluster"
            /**
             * Getter for property Cluster.<p>
             */
            public Cluster getCluster()
                {
                return (Cluster) get_Module();
                }
            
            // Declared at the super level
            /**
             * Getter for property DatagramSocketProvider.<p>
             */
            public com.tangosol.net.DatagramSocketProvider getDatagramSocketProvider()
                {
                return ((Cluster.SocketManager) get_Parent()).getUnicastUdpSocketProvider();
                }
            
            // Declared at the super level
            /**
             * Set up the specified java.net.DatagramSocket.
             */
            protected void initializeDatagramSocket(java.net.DatagramSocket socket)
                    throws java.io.IOException
                {
                ((Cluster.SocketManager) get_Parent()).configure(socket);
                super.initializeDatagramSocket(socket);
                }
            
            // Declared at the super level
            /**
             * Instantiate an underlying java.net.DatagramSocket.
             */
            public java.net.DatagramSocket instantiateDatagramSocket()
                    throws java.io.IOException
                {
                return super.instantiateDatagramSocket();
                }
            
            // Declared at the super level
            /**
             * InterruptedIOException could be raised only when SoTimeout value
            * is greater then zero, and the timeout expires during a call to
            * receive() for a DatagramSocket, accept() for ServerSocket or
            * getInputStream().read() for Socket. The underlying socket remains
            * valid.
            * 
            * @param eException  the causal exception
            * @param lSocketActionMillis  the time that the exception occurred
            * (or the enclosing operation began or was in progress)
            * 
            * @see SoTimeout property
             */
            protected void onInterruptedIOException(java.io.InterruptedIOException eException)
                {
                // Since the SoTimeout value is set to zero meaning undefinite timeout
                // this exception could only be caused by Thread.interrupt() call
                // indicating that all the Cluster threads are stopping in which case
                // we could safely ignore this exception
                
                return;
                }
            
            // Declared at the super level
            /**
             * Setter for property DatagramSocket.<p>
            * The actual socket.
             */
            public void setDatagramSocket(java.net.DatagramSocket socket)
                {
                super.setDatagramSocket(socket);
                }
            
            // Declared at the super level
            protected void validateBufferSize(String sBufferName, int cbActualSize, int cbRequestedSize, int cbMinimumSize)
                {
                if (!getCluster().isTransportServiceEnabled() || cbActualSize < cbMinimumSize)
                    {
                    super.validateBufferSize(sBufferName, cbActualSize, cbRequestedSize, cbMinimumSize);
                    }
                // else; we don't care about UDP performance when we're running over MessageBus
                }
            }
        }

    // ---- class: com.tangosol.coherence.component.net.Cluster$TransportService
    
    /**
     * TransportService is a service which hosts a MessageBus based transport
     * which may be used by other grid services.
     * 
     * The message range from [33-64] is reserved for usage by the
     * TransportService component
     * 
     * Currently used MessageTypes:
     * [1-32]  Reserved by Grid
     * 33         Heartbeat
     */
    @SuppressWarnings({"deprecation", "rawtypes", "unused", "unchecked", "ConstantConditions", "DuplicatedCode", "ForLoopReplaceableByForEach", "IfCanBeSwitch", "RedundantArrayCreation", "RedundantSuppression", "SameParameterValue", "TryFinallyCanBeTryWithResources", "TryWithIdenticalCatches", "UnnecessaryBoxing", "UnnecessaryUnboxing", "UnusedAssignment"})
    public static class TransportService
            extends    com.tangosol.coherence.component.util.daemon.queueProcessor.service.grid.TransportService
        {
        // ---- Fields declarations ----
        
        /**
         * Property Enabled
         *
         * True iff the TransportService is to be used in this member.
         */
        private boolean __m_Enabled;
        private static com.tangosol.util.ListMap __mapChildren;
        
        // Static initializer
        static
            {
            __initStatic();
            }
        
        // Default static initializer
        private static void __initStatic()
            {
            // register child classes
            __mapChildren = new com.tangosol.util.ListMap();
            __mapChildren.put("Acknowledgement", Cluster.TransportService.Acknowledgement.get_CLASS());
            __mapChildren.put("BusEventMessage", Cluster.TransportService.BusEventMessage.get_CLASS());
            __mapChildren.put("ConfigRequest", Cluster.TransportService.ConfigRequest.get_CLASS());
            __mapChildren.put("ConfigResponse", Cluster.TransportService.ConfigResponse.get_CLASS());
            __mapChildren.put("ConfigSync", Cluster.TransportService.ConfigSync.get_CLASS());
            __mapChildren.put("ConfigUpdate", Cluster.TransportService.ConfigUpdate.get_CLASS());
            __mapChildren.put("DispatchEvent", Cluster.TransportService.DispatchEvent.get_CLASS());
            __mapChildren.put("DispatchNotification", Cluster.TransportService.DispatchNotification.get_CLASS());
            __mapChildren.put("Heartbeat", Cluster.TransportService.Heartbeat.get_CLASS());
            __mapChildren.put("MemberConfigUpdate", Cluster.TransportService.MemberConfigUpdate.get_CLASS());
            __mapChildren.put("MemberJoined", Cluster.TransportService.MemberJoined.get_CLASS());
            __mapChildren.put("MemberWelcome", Cluster.TransportService.MemberWelcome.get_CLASS());
            __mapChildren.put("MemberWelcomeRequest", Cluster.TransportService.MemberWelcomeRequest.get_CLASS());
            __mapChildren.put("MemberWelcomeRequestTask", Cluster.TransportService.MemberWelcomeRequestTask.get_CLASS());
            __mapChildren.put("MessageHandler", Cluster.TransportService.MessageHandler.get_CLASS());
            __mapChildren.put("NotifyConnectionClose", Cluster.TransportService.NotifyConnectionClose.get_CLASS());
            __mapChildren.put("NotifyConnectionOpen", Cluster.TransportService.NotifyConnectionOpen.get_CLASS());
            __mapChildren.put("NotifyMemberJoined", Cluster.TransportService.NotifyMemberJoined.get_CLASS());
            __mapChildren.put("NotifyMemberLeaving", Cluster.TransportService.NotifyMemberLeaving.get_CLASS());
            __mapChildren.put("NotifyMemberLeft", Cluster.TransportService.NotifyMemberLeft.get_CLASS());
            __mapChildren.put("NotifyMessageReceipt", Cluster.TransportService.NotifyMessageReceipt.get_CLASS());
            __mapChildren.put("NotifyPollClosed", Cluster.TransportService.NotifyPollClosed.get_CLASS());
            __mapChildren.put("NotifyResponse", Cluster.TransportService.NotifyResponse.get_CLASS());
            __mapChildren.put("NotifyServiceAnnounced", Cluster.TransportService.NotifyServiceAnnounced.get_CLASS());
            __mapChildren.put("NotifyServiceJoining", Cluster.TransportService.NotifyServiceJoining.get_CLASS());
            __mapChildren.put("NotifyServiceLeaving", Cluster.TransportService.NotifyServiceLeaving.get_CLASS());
            __mapChildren.put("NotifyServiceLeft", Cluster.TransportService.NotifyServiceLeft.get_CLASS());
            __mapChildren.put("NotifyServiceQuiescence", Cluster.TransportService.NotifyServiceQuiescence.get_CLASS());
            __mapChildren.put("NotifyShutdown", Cluster.TransportService.NotifyShutdown.get_CLASS());
            __mapChildren.put("NotifyStartup", Cluster.TransportService.NotifyStartup.get_CLASS());
            __mapChildren.put("PingRequest", Cluster.TransportService.PingRequest.get_CLASS());
            __mapChildren.put("ProtocolContext", Cluster.TransportService.ProtocolContext.get_CLASS());
            __mapChildren.put("Response", Cluster.TransportService.Response.get_CLASS());
            __mapChildren.put("WrapperGuardable", Cluster.TransportService.WrapperGuardable.get_CLASS());
            }
        
        // Default constructor
        public TransportService()
            {
            this(null, null, true);
            }
        
        // Initializing constructor
        public TransportService(String sName, com.tangosol.coherence.Component compParent, boolean fInit)
            {
            super(sName, compParent, false);
            
            if (fInit)
                {
                __init();
                }
            }
        
        // Main initializer
        public void __init()
            {
            // private initialization
            __initPrivate();
            
            // state initialization: public and protected properties
            try
                {
                setDaemonState(0);
                setDefaultGuardRecovery(0.9F);
                setDefaultGuardTimeout(60000L);
                setMessageClassMap(new java.util.HashMap());
                setNotifier(new com.oracle.coherence.common.base.SingleWaiterMultiNotifier());
                setOldestPendingRequestSUIDCounter(new java.util.concurrent.atomic.AtomicLong());
                setResourceRegistry(new com.tangosol.util.SimpleResourceRegistry());
                setSerializerMap(new java.util.WeakHashMap());
                setServiceName("TransportService");
                setSuspendPollLimit(new java.util.concurrent.atomic.AtomicLong());
                }
            catch (java.lang.Exception e)
                {
                // re-throw as a runtime exception
                throw new com.tangosol.util.WrapperException(e);
                }
            
            // containment initialization: children
            _addChild(new Cluster.TransportService.DaemonPool("DaemonPool", this, true), "DaemonPool");
            _addChild(new Cluster.TransportService.EventDispatcher("EventDispatcher", this, true), "EventDispatcher");
            _addChild(new Cluster.TransportService.Guard("Guard", this, true), "Guard");
            _addChild(new com.tangosol.coherence.component.util.daemon.queueProcessor.service.Grid.MemberConfigListener("MemberConfigListener", this, true), "MemberConfigListener");
            _addChild(new Cluster.TransportService.PollArray("PollArray", this, true), "PollArray");
            _addChild(new com.tangosol.coherence.component.util.daemon.queueProcessor.service.Grid.ReceiveQueue("ReceiveQueue", this, true), "ReceiveQueue");
            _addChild(new Cluster.TransportService.ServiceConfig("ServiceConfig", this, true), "ServiceConfig");
            
            // signal the end of the initialization
            set_Constructed(true);
            }
        
        // Private initializer
        protected void __initPrivate()
            {
            
            super.__initPrivate();
            }
        
        //++ getter for static property _Instance
        /**
         * Getter for property _Instance.<p>
        * Auto generated
         */
        public static com.tangosol.coherence.Component get_Instance()
            {
            return new com.tangosol.coherence.component.net.Cluster.TransportService();
            }
        
        //++ getter for static property _CLASS
        /**
         * Getter for property _CLASS.<p>
        * Property with auto-generated accessor that returns the Class object
        * for a given component.
         */
        public static Class get_CLASS()
            {
            Class clz;
            try
                {
                clz = Class.forName("com.tangosol.coherence/component/net/Cluster$TransportService".replace('/', '.'));
                }
            catch (ClassNotFoundException e)
                {
                throw new NoClassDefFoundError(e.getMessage());
                }
            return clz;
            }
        
        //++ getter for autogen property _Module
        /**
         * This is an auto-generated method that returns the global [design
        * time] parent component.
        * 
        * Note: the class generator will ignore any custom implementation for
        * this behavior.
         */
        private com.tangosol.coherence.Component get_Module()
            {
            return this.get_Parent();
            }
        
        //++ getter for autogen property _ChildClasses
        /**
         * This is an auto-generated method that returns the map of design time
        * [static] children.
        * 
        * Note: the class generator will ignore any custom implementation for
        * this behavior.
         */
        protected java.util.Map get_ChildClasses()
            {
            return __mapChildren;
            }
        
        // Declared at the super level
        /**
         * Halt the daemon.  Brings down the daemon in an ungraceful manner.
        * This method should not synchronize or block in any way.
        * This method may not return.
         */
        public void halt()
            {
            // super method is protected
            ((Cluster.TransportService.MessageHandler) getMessageHandler()).halt();
            super.halt();
            }
        
        // Accessor for the property "Enabled"
        /**
         * Getter for property Enabled.<p>
        * True iff the TransportService is to be used in this member.
         */
        public boolean isEnabled()
            {
            return __m_Enabled;
            }
        
        // Declared at the super level
        /**
         * This event occurs when an exception is thrown from onEnter, onWait,
        * onNotify and onExit.
        * 
        * If the exception should terminate the daemon, call stop(). The
        * default implementation prints debugging information and terminates
        * the daemon.
        * 
        * @param e  the Throwable object (a RuntimeException or an Error)
        * 
        * @throws RuntimeException may be thrown; will terminate the daemon
        * @throws Error may be thrown; will terminate the daemon
         */
        public void onException(Throwable e)
            {
            Cluster cluster = (Cluster) get_Module();
            try
                {
                if (cluster.getState() < Cluster.STATE_RUNNING)
                    {
                    super.onException(e);
                    }
                }
            finally
                {
                cluster.onException(e);
                }
            }
        
        // Accessor for the property "Enabled"
        /**
         * Setter for property Enabled.<p>
        * True iff the TransportService is to be used in this member.
         */
        public void setEnabled(boolean fEnabled)
            {
            __m_Enabled = fEnabled;
            }
        
        // Declared at the super level
        /**
         * Hard-stop the Service. Use shutdown() for normal  termination.
         */
        public void stop()
            {
            // import Component.Net.Cluster;
            
            Cluster cluster = (Cluster) getCluster();
            if (isAcceptingClients() && cluster.getState() < Cluster.STATE_LEAVING)
                {
                _trace("Requested to stop transport service.", 1);
                cluster.stop();
                }
            else
                {
                super.stop();
                }
            }

        // ---- class: com.tangosol.coherence.component.net.Cluster$TransportService$Acknowledgement
        
        /**
         * This Message is meant to be used as a simple acknowledgement to a
         * RequestMessage requiring an poll response.
         */
        @SuppressWarnings({"deprecation", "rawtypes", "unused", "unchecked", "ConstantConditions", "DuplicatedCode", "ForLoopReplaceableByForEach", "IfCanBeSwitch", "RedundantArrayCreation", "RedundantSuppression", "SameParameterValue", "TryFinallyCanBeTryWithResources", "TryWithIdenticalCatches", "UnnecessaryBoxing", "UnnecessaryUnboxing", "UnusedAssignment"})
        public static class Acknowledgement
                extends    com.tangosol.coherence.component.util.daemon.queueProcessor.service.Grid.Acknowledgement
            {
            // ---- Fields declarations ----
            
            // Default constructor
            public Acknowledgement()
                {
                this(null, null, true);
                }
            
            // Initializing constructor
            public Acknowledgement(String sName, com.tangosol.coherence.Component compParent, boolean fInit)
                {
                super(sName, compParent, false);
                
                if (fInit)
                    {
                    __init();
                    }
                }
            
            // Main initializer
            public void __init()
                {
                // private initialization
                __initPrivate();
                
                // state initialization: public and protected properties
                try
                    {
                    setMessageType(1);
                    }
                catch (java.lang.Exception e)
                    {
                    // re-throw as a runtime exception
                    throw new com.tangosol.util.WrapperException(e);
                    }
                
                // signal the end of the initialization
                set_Constructed(true);
                }
            
            // Private initializer
            protected void __initPrivate()
                {
                
                super.__initPrivate();
                }
            
            //++ getter for static property _Instance
            /**
             * Getter for property _Instance.<p>
            * Auto generated
             */
            public static com.tangosol.coherence.Component get_Instance()
                {
                return new com.tangosol.coherence.component.net.Cluster.TransportService.Acknowledgement();
                }
            
            //++ getter for static property _CLASS
            /**
             * Getter for property _CLASS.<p>
            * Property with auto-generated accessor that returns the Class
            * object for a given component.
             */
            public static Class get_CLASS()
                {
                Class clz;
                try
                    {
                    clz = Class.forName("com.tangosol.coherence/component/net/Cluster$TransportService$Acknowledgement".replace('/', '.'));
                    }
                catch (ClassNotFoundException e)
                    {
                    throw new NoClassDefFoundError(e.getMessage());
                    }
                return clz;
                }
            
            //++ getter for autogen property _Module
            /**
             * This is an auto-generated method that returns the global [design
            * time] parent component.
            * 
            * Note: the class generator will ignore any custom implementation
            * for this behavior.
             */
            private com.tangosol.coherence.Component get_Module()
                {
                return this.get_Parent().get_Parent();
                }
            }

        // ---- class: com.tangosol.coherence.component.net.Cluster$TransportService$BusEventMessage
        
        /**
         * BusEventMessage is an internal message used to pass Exabus events
         * onto the corresponding service thread.
         * 
         * Attributes:
         *     MessageHandler
         *     Event
         */
        @SuppressWarnings({"deprecation", "rawtypes", "unused", "unchecked", "ConstantConditions", "DuplicatedCode", "ForLoopReplaceableByForEach", "IfCanBeSwitch", "RedundantArrayCreation", "RedundantSuppression", "SameParameterValue", "TryFinallyCanBeTryWithResources", "TryWithIdenticalCatches", "UnnecessaryBoxing", "UnnecessaryUnboxing", "UnusedAssignment"})
        public static class BusEventMessage
                extends    com.tangosol.coherence.component.util.daemon.queueProcessor.service.Grid.BusEventMessage
            {
            // ---- Fields declarations ----
            
            // Default constructor
            public BusEventMessage()
                {
                this(null, null, true);
                }
            
            // Initializing constructor
            public BusEventMessage(String sName, com.tangosol.coherence.Component compParent, boolean fInit)
                {
                super(sName, compParent, false);
                
                if (fInit)
                    {
                    __init();
                    }
                }
            
            // Main initializer
            public void __init()
                {
                // private initialization
                __initPrivate();
                
                // state initialization: public and protected properties
                try
                    {
                    setMessageType(-21);
                    }
                catch (java.lang.Exception e)
                    {
                    // re-throw as a runtime exception
                    throw new com.tangosol.util.WrapperException(e);
                    }
                
                // signal the end of the initialization
                set_Constructed(true);
                }
            
            // Private initializer
            protected void __initPrivate()
                {
                
                super.__initPrivate();
                }
            
            //++ getter for static property _Instance
            /**
             * Getter for property _Instance.<p>
            * Auto generated
             */
            public static com.tangosol.coherence.Component get_Instance()
                {
                return new com.tangosol.coherence.component.net.Cluster.TransportService.BusEventMessage();
                }
            
            //++ getter for static property _CLASS
            /**
             * Getter for property _CLASS.<p>
            * Property with auto-generated accessor that returns the Class
            * object for a given component.
             */
            public static Class get_CLASS()
                {
                Class clz;
                try
                    {
                    clz = Class.forName("com.tangosol.coherence/component/net/Cluster$TransportService$BusEventMessage".replace('/', '.'));
                    }
                catch (ClassNotFoundException e)
                    {
                    throw new NoClassDefFoundError(e.getMessage());
                    }
                return clz;
                }
            
            //++ getter for autogen property _Module
            /**
             * This is an auto-generated method that returns the global [design
            * time] parent component.
            * 
            * Note: the class generator will ignore any custom implementation
            * for this behavior.
             */
            private com.tangosol.coherence.Component get_Module()
                {
                return this.get_Parent().get_Parent();
                }
            }

        // ---- class: com.tangosol.coherence.component.net.Cluster$TransportService$ConfigRequest
        
        /**
         * This RequestMessage is a poll (where Poll is an instance child) that
         * all members send to the config coordinator Member to request that a
         * ConfigUpdate be sent.
         * 
         * Attributes:
         *     Key
         *     Value
         *     Remove
         */
        @SuppressWarnings({"deprecation", "rawtypes", "unused", "unchecked", "ConstantConditions", "DuplicatedCode", "ForLoopReplaceableByForEach", "IfCanBeSwitch", "RedundantArrayCreation", "RedundantSuppression", "SameParameterValue", "TryFinallyCanBeTryWithResources", "TryWithIdenticalCatches", "UnnecessaryBoxing", "UnnecessaryUnboxing", "UnusedAssignment"})
        public static class ConfigRequest
                extends    com.tangosol.coherence.component.util.daemon.queueProcessor.service.Grid.ConfigRequest
            {
            // ---- Fields declarations ----
            
            // Default constructor
            public ConfigRequest()
                {
                this(null, null, true);
                }
            
            // Initializing constructor
            public ConfigRequest(String sName, com.tangosol.coherence.Component compParent, boolean fInit)
                {
                super(sName, compParent, false);
                
                if (fInit)
                    {
                    __init();
                    }
                }
            
            // Main initializer
            public void __init()
                {
                // private initialization
                __initPrivate();
                
                // state initialization: public and protected properties
                try
                    {
                    setMessageType(-15);
                    }
                catch (java.lang.Exception e)
                    {
                    // re-throw as a runtime exception
                    throw new com.tangosol.util.WrapperException(e);
                    }
                
                // containment initialization: children
                _addChild(new com.tangosol.coherence.component.util.daemon.queueProcessor.service.Grid.ConfigRequest.Poll("Poll", this, true), "Poll");
                
                // signal the end of the initialization
                set_Constructed(true);
                }
            
            // Private initializer
            protected void __initPrivate()
                {
                
                super.__initPrivate();
                }
            
            //++ getter for static property _Instance
            /**
             * Getter for property _Instance.<p>
            * Auto generated
             */
            public static com.tangosol.coherence.Component get_Instance()
                {
                return new com.tangosol.coherence.component.net.Cluster.TransportService.ConfigRequest();
                }
            
            //++ getter for static property _CLASS
            /**
             * Getter for property _CLASS.<p>
            * Property with auto-generated accessor that returns the Class
            * object for a given component.
             */
            public static Class get_CLASS()
                {
                Class clz;
                try
                    {
                    clz = Class.forName("com.tangosol.coherence/component/net/Cluster$TransportService$ConfigRequest".replace('/', '.'));
                    }
                catch (ClassNotFoundException e)
                    {
                    throw new NoClassDefFoundError(e.getMessage());
                    }
                return clz;
                }
            
            //++ getter for autogen property _Module
            /**
             * This is an auto-generated method that returns the global [design
            * time] parent component.
            * 
            * Note: the class generator will ignore any custom implementation
            * for this behavior.
             */
            private com.tangosol.coherence.Component get_Module()
                {
                return this.get_Parent().get_Parent();
                }
            }

        // ---- class: com.tangosol.coherence.component.net.Cluster$TransportService$ConfigResponse
        
        /**
         * This Message is sent by the config coordinator Member as a reponse
         * to the ConfigRequest (update or remove) poll. It serves as a proof
         * that the corresponding ConfigUpdate has been sent to all service
         * members.
         * 
         * Attributes:
         *     Acknowledged
         */
        @SuppressWarnings({"deprecation", "rawtypes", "unused", "unchecked", "ConstantConditions", "DuplicatedCode", "ForLoopReplaceableByForEach", "IfCanBeSwitch", "RedundantArrayCreation", "RedundantSuppression", "SameParameterValue", "TryFinallyCanBeTryWithResources", "TryWithIdenticalCatches", "UnnecessaryBoxing", "UnnecessaryUnboxing", "UnusedAssignment"})
        public static class ConfigResponse
                extends    com.tangosol.coherence.component.util.daemon.queueProcessor.service.Grid.ConfigResponse
            {
            // ---- Fields declarations ----
            
            // Default constructor
            public ConfigResponse()
                {
                this(null, null, true);
                }
            
            // Initializing constructor
            public ConfigResponse(String sName, com.tangosol.coherence.Component compParent, boolean fInit)
                {
                super(sName, compParent, false);
                
                if (fInit)
                    {
                    __init();
                    }
                }
            
            // Main initializer
            public void __init()
                {
                // private initialization
                __initPrivate();
                
                // state initialization: public and protected properties
                try
                    {
                    setMessageType(-16);
                    }
                catch (java.lang.Exception e)
                    {
                    // re-throw as a runtime exception
                    throw new com.tangosol.util.WrapperException(e);
                    }
                
                // signal the end of the initialization
                set_Constructed(true);
                }
            
            // Private initializer
            protected void __initPrivate()
                {
                
                super.__initPrivate();
                }
            
            //++ getter for static property _Instance
            /**
             * Getter for property _Instance.<p>
            * Auto generated
             */
            public static com.tangosol.coherence.Component get_Instance()
                {
                return new com.tangosol.coherence.component.net.Cluster.TransportService.ConfigResponse();
                }
            
            //++ getter for static property _CLASS
            /**
             * Getter for property _CLASS.<p>
            * Property with auto-generated accessor that returns the Class
            * object for a given component.
             */
            public static Class get_CLASS()
                {
                Class clz;
                try
                    {
                    clz = Class.forName("com.tangosol.coherence/component/net/Cluster$TransportService$ConfigResponse".replace('/', '.'));
                    }
                catch (ClassNotFoundException e)
                    {
                    throw new NoClassDefFoundError(e.getMessage());
                    }
                return clz;
                }
            
            //++ getter for autogen property _Module
            /**
             * This is an auto-generated method that returns the global [design
            * time] parent component.
            * 
            * Note: the class generator will ignore any custom implementation
            * for this behavior.
             */
            private com.tangosol.coherence.Component get_Module()
                {
                return this.get_Parent().get_Parent();
                }
            }

        // ---- class: com.tangosol.coherence.component.net.Cluster$TransportService$ConfigSync
        
        /**
         * This Message is sent by the config coordinator Member to a new
         * Service Member to provide the current ConfigMap contents, and also
         * to update all Members when a new Member becomes the config
         * coordinator.
         * 
         * Attributes:
         *     SyncMap
         */
        @SuppressWarnings({"deprecation", "rawtypes", "unused", "unchecked", "ConstantConditions", "DuplicatedCode", "ForLoopReplaceableByForEach", "IfCanBeSwitch", "RedundantArrayCreation", "RedundantSuppression", "SameParameterValue", "TryFinallyCanBeTryWithResources", "TryWithIdenticalCatches", "UnnecessaryBoxing", "UnnecessaryUnboxing", "UnusedAssignment"})
        public static class ConfigSync
                extends    com.tangosol.coherence.component.util.daemon.queueProcessor.service.Grid.ConfigSync
            {
            // ---- Fields declarations ----
            
            // Default constructor
            public ConfigSync()
                {
                this(null, null, true);
                }
            
            // Initializing constructor
            public ConfigSync(String sName, com.tangosol.coherence.Component compParent, boolean fInit)
                {
                super(sName, compParent, false);
                
                if (fInit)
                    {
                    __init();
                    }
                }
            
            // Main initializer
            public void __init()
                {
                // private initialization
                __initPrivate();
                
                // state initialization: public and protected properties
                try
                    {
                    setMessageType(-17);
                    }
                catch (java.lang.Exception e)
                    {
                    // re-throw as a runtime exception
                    throw new com.tangosol.util.WrapperException(e);
                    }
                
                // signal the end of the initialization
                set_Constructed(true);
                }
            
            // Private initializer
            protected void __initPrivate()
                {
                
                super.__initPrivate();
                }
            
            //++ getter for static property _Instance
            /**
             * Getter for property _Instance.<p>
            * Auto generated
             */
            public static com.tangosol.coherence.Component get_Instance()
                {
                return new com.tangosol.coherence.component.net.Cluster.TransportService.ConfigSync();
                }
            
            //++ getter for static property _CLASS
            /**
             * Getter for property _CLASS.<p>
            * Property with auto-generated accessor that returns the Class
            * object for a given component.
             */
            public static Class get_CLASS()
                {
                Class clz;
                try
                    {
                    clz = Class.forName("com.tangosol.coherence/component/net/Cluster$TransportService$ConfigSync".replace('/', '.'));
                    }
                catch (ClassNotFoundException e)
                    {
                    throw new NoClassDefFoundError(e.getMessage());
                    }
                return clz;
                }
            
            //++ getter for autogen property _Module
            /**
             * This is an auto-generated method that returns the global [design
            * time] parent component.
            * 
            * Note: the class generator will ignore any custom implementation
            * for this behavior.
             */
            private com.tangosol.coherence.Component get_Module()
                {
                return this.get_Parent().get_Parent();
                }
            }

        // ---- class: com.tangosol.coherence.component.net.Cluster$TransportService$ConfigUpdate
        
        /**
         * This Message is sent by the config coordinator Member to all other
         * Members running this service to inform them of a change to the
         * ConfigMap.
         * 
         * Attributes:
         *     Key
         *     Value
         *     Remove
         */
        @SuppressWarnings({"deprecation", "rawtypes", "unused", "unchecked", "ConstantConditions", "DuplicatedCode", "ForLoopReplaceableByForEach", "IfCanBeSwitch", "RedundantArrayCreation", "RedundantSuppression", "SameParameterValue", "TryFinallyCanBeTryWithResources", "TryWithIdenticalCatches", "UnnecessaryBoxing", "UnnecessaryUnboxing", "UnusedAssignment"})
        public static class ConfigUpdate
                extends    com.tangosol.coherence.component.util.daemon.queueProcessor.service.Grid.ConfigUpdate
            {
            // ---- Fields declarations ----
            
            // Default constructor
            public ConfigUpdate()
                {
                this(null, null, true);
                }
            
            // Initializing constructor
            public ConfigUpdate(String sName, com.tangosol.coherence.Component compParent, boolean fInit)
                {
                super(sName, compParent, false);
                
                if (fInit)
                    {
                    __init();
                    }
                }
            
            // Main initializer
            public void __init()
                {
                // private initialization
                __initPrivate();
                
                // state initialization: public and protected properties
                try
                    {
                    setMessageType(-18);
                    }
                catch (java.lang.Exception e)
                    {
                    // re-throw as a runtime exception
                    throw new com.tangosol.util.WrapperException(e);
                    }
                
                // signal the end of the initialization
                set_Constructed(true);
                }
            
            // Private initializer
            protected void __initPrivate()
                {
                
                super.__initPrivate();
                }
            
            //++ getter for static property _Instance
            /**
             * Getter for property _Instance.<p>
            * Auto generated
             */
            public static com.tangosol.coherence.Component get_Instance()
                {
                return new com.tangosol.coherence.component.net.Cluster.TransportService.ConfigUpdate();
                }
            
            //++ getter for static property _CLASS
            /**
             * Getter for property _CLASS.<p>
            * Property with auto-generated accessor that returns the Class
            * object for a given component.
             */
            public static Class get_CLASS()
                {
                Class clz;
                try
                    {
                    clz = Class.forName("com.tangosol.coherence/component/net/Cluster$TransportService$ConfigUpdate".replace('/', '.'));
                    }
                catch (ClassNotFoundException e)
                    {
                    throw new NoClassDefFoundError(e.getMessage());
                    }
                return clz;
                }
            
            //++ getter for autogen property _Module
            /**
             * This is an auto-generated method that returns the global [design
            * time] parent component.
            * 
            * Note: the class generator will ignore any custom implementation
            * for this behavior.
             */
            private com.tangosol.coherence.Component get_Module()
                {
                return this.get_Parent().get_Parent();
                }
            }

        // ---- class: com.tangosol.coherence.component.net.Cluster$TransportService$DaemonPool
        
        /**
         * DaemonPool is a class thread pool implementation for processing
         * queued operations on one or more daemon threads.
         * 
         * The designable properties are:
         *     AutoStart
         *     DaemonCount
         * 
         * The simple API for the DaemonPool is:
         *     public void start()
         *     public boolean isStarted()
         *     public void add(Runnable task)
         *     public void stop()
         * 
         * The advanced API for the DaemonPool is:
         *     DaemonCount property
         *     Daemons property
         *     Queues property
         *     ThreadGroup property
         * 
         * The DaemonPool is composed of two key components:
         * 
         * 1) An array of WorkSlot components that may or may not share Queues
         * with other WorkSlots. 
         * 
         * 2) An array of Daemon components feeding off the Queues. This
         * collection is accessed by the DaemonCount and Daemons properties,
         * and is managed by the DaemonCount mutator.
         */
        @SuppressWarnings({"deprecation", "rawtypes", "unused", "unchecked", "ConstantConditions", "DuplicatedCode", "ForLoopReplaceableByForEach", "IfCanBeSwitch", "RedundantArrayCreation", "RedundantSuppression", "SameParameterValue", "TryFinallyCanBeTryWithResources", "TryWithIdenticalCatches", "UnnecessaryBoxing", "UnnecessaryUnboxing", "UnusedAssignment"})
        public static class DaemonPool
                extends    com.tangosol.coherence.component.util.daemon.queueProcessor.service.Grid.DaemonPool
            {
            // ---- Fields declarations ----
            private static com.tangosol.util.ListMap __mapChildren;
            
            // Static initializer
            static
                {
                __initStatic();
                }
            
            // Default static initializer
            private static void __initStatic()
                {
                // register child classes
                __mapChildren = new com.tangosol.util.ListMap();
                __mapChildren.put("Daemon", Cluster.TransportService.DaemonPool.Daemon.get_CLASS());
                __mapChildren.put("ResizeTask", Cluster.TransportService.DaemonPool.ResizeTask.get_CLASS());
                __mapChildren.put("ScheduleTask", Cluster.TransportService.DaemonPool.ScheduleTask.get_CLASS());
                __mapChildren.put("StartTask", Cluster.TransportService.DaemonPool.StartTask.get_CLASS());
                __mapChildren.put("StopTask", Cluster.TransportService.DaemonPool.StopTask.get_CLASS());
                __mapChildren.put("WorkSlot", Cluster.TransportService.DaemonPool.WorkSlot.get_CLASS());
                __mapChildren.put("WrapperTask", Cluster.TransportService.DaemonPool.WrapperTask.get_CLASS());
                }
            
            // Default constructor
            public DaemonPool()
                {
                this(null, null, true);
                }
            
            // Initializing constructor
            public DaemonPool(String sName, com.tangosol.coherence.Component compParent, boolean fInit)
                {
                super(sName, compParent, false);
                
                if (fInit)
                    {
                    __init();
                    }
                }
            
            // Main initializer
            public void __init()
                {
                // private initialization
                __initPrivate();
                
                // state initialization: public and protected properties
                try
                    {
                    setAbandonThreshold(8);
                    setDaemonCountMax(2147483647);
                    setDaemonCountMin(1);
                    setScheduledTasks(new java.util.HashSet());
                    setStatsTaskAddCount(new java.util.concurrent.atomic.AtomicLong());
                    }
                catch (java.lang.Exception e)
                    {
                    // re-throw as a runtime exception
                    throw new com.tangosol.util.WrapperException(e);
                    }
                
                // containment initialization: children
                
                // signal the end of the initialization
                set_Constructed(true);
                }
            
            // Private initializer
            protected void __initPrivate()
                {
                
                super.__initPrivate();
                }
            
            //++ getter for static property _Instance
            /**
             * Getter for property _Instance.<p>
            * Auto generated
             */
            public static com.tangosol.coherence.Component get_Instance()
                {
                return new com.tangosol.coherence.component.net.Cluster.TransportService.DaemonPool();
                }
            
            //++ getter for static property _CLASS
            /**
             * Getter for property _CLASS.<p>
            * Property with auto-generated accessor that returns the Class
            * object for a given component.
             */
            public static Class get_CLASS()
                {
                Class clz;
                try
                    {
                    clz = Class.forName("com.tangosol.coherence/component/net/Cluster$TransportService$DaemonPool".replace('/', '.'));
                    }
                catch (ClassNotFoundException e)
                    {
                    throw new NoClassDefFoundError(e.getMessage());
                    }
                return clz;
                }
            
            //++ getter for autogen property _Module
            /**
             * This is an auto-generated method that returns the global [design
            * time] parent component.
            * 
            * Note: the class generator will ignore any custom implementation
            * for this behavior.
             */
            private com.tangosol.coherence.Component get_Module()
                {
                return this.get_Parent().get_Parent();
                }
            
            //++ getter for autogen property _ChildClasses
            /**
             * This is an auto-generated method that returns the map of design
            * time [static] children.
            * 
            * Note: the class generator will ignore any custom implementation
            * for this behavior.
             */
            protected java.util.Map get_ChildClasses()
                {
                return __mapChildren;
                }

            // ---- class: com.tangosol.coherence.component.net.Cluster$TransportService$DaemonPool$Daemon
            
            /**
             * The prototypical Daemon thread component that will belong to the
             * DaemonPool. An instance of this component is created for each
             * thread in the pool.
             */
            @SuppressWarnings({"deprecation", "rawtypes", "unused", "unchecked", "ConstantConditions", "DuplicatedCode", "ForLoopReplaceableByForEach", "IfCanBeSwitch", "RedundantArrayCreation", "RedundantSuppression", "SameParameterValue", "TryFinallyCanBeTryWithResources", "TryWithIdenticalCatches", "UnnecessaryBoxing", "UnnecessaryUnboxing", "UnusedAssignment"})
            public static class Daemon
                    extends    com.tangosol.coherence.component.util.daemon.queueProcessor.service.Grid.DaemonPool.Daemon
                {
                // ---- Fields declarations ----
                
                // Default constructor
                public Daemon()
                    {
                    this(null, null, true);
                    }
                
                // Initializing constructor
                public Daemon(String sName, com.tangosol.coherence.Component compParent, boolean fInit)
                    {
                    super(sName, compParent, false);
                    
                    if (fInit)
                        {
                        __init();
                        }
                    }
                
                // Main initializer
                public void __init()
                    {
                    // private initialization
                    __initPrivate();
                    
                    // state initialization: public and protected properties
                    try
                        {
                        setDaemonState(0);
                        setDefaultGuardRecovery(0.9F);
                        setDefaultGuardTimeout(60000L);
                        setNotifier(new com.oracle.coherence.common.base.SingleWaiterMultiNotifier());
                        setThreadName("Worker");
                        }
                    catch (java.lang.Exception e)
                        {
                        // re-throw as a runtime exception
                        throw new com.tangosol.util.WrapperException(e);
                        }
                    
                    // containment initialization: children
                    _addChild(new Cluster.TransportService.DaemonPool.Daemon.Guard("Guard", this, true), "Guard");
                    
                    // signal the end of the initialization
                    set_Constructed(true);
                    }
                
                // Private initializer
                protected void __initPrivate()
                    {
                    
                    super.__initPrivate();
                    }
                
                //++ getter for static property _Instance
                /**
                 * Getter for property _Instance.<p>
                * Auto generated
                 */
                public static com.tangosol.coherence.Component get_Instance()
                    {
                    return new com.tangosol.coherence.component.net.Cluster.TransportService.DaemonPool.Daemon();
                    }
                
                //++ getter for static property _CLASS
                /**
                 * Getter for property _CLASS.<p>
                * Property with auto-generated accessor that returns the Class
                * object for a given component.
                 */
                public static Class get_CLASS()
                    {
                    Class clz;
                    try
                        {
                        clz = Class.forName("com.tangosol.coherence/component/net/Cluster$TransportService$DaemonPool$Daemon".replace('/', '.'));
                        }
                    catch (ClassNotFoundException e)
                        {
                        throw new NoClassDefFoundError(e.getMessage());
                        }
                    return clz;
                    }
                
                //++ getter for autogen property _Module
                /**
                 * This is an auto-generated method that returns the global
                * [design time] parent component.
                * 
                * Note: the class generator will ignore any custom
                * implementation for this behavior.
                 */
                private com.tangosol.coherence.Component get_Module()
                    {
                    return this.get_Parent().get_Parent().get_Parent();
                    }

                // ---- class: com.tangosol.coherence.component.net.Cluster$TransportService$DaemonPool$Daemon$Guard
                
                /**
                 * Guard provides the Guardable interface implementation for
                 * the Daemon.
                 */
                @SuppressWarnings({"deprecation", "rawtypes", "unused", "unchecked", "ConstantConditions", "DuplicatedCode", "ForLoopReplaceableByForEach", "IfCanBeSwitch", "RedundantArrayCreation", "RedundantSuppression", "SameParameterValue", "TryFinallyCanBeTryWithResources", "TryWithIdenticalCatches", "UnnecessaryBoxing", "UnnecessaryUnboxing", "UnusedAssignment"})
                public static class Guard
                        extends    com.tangosol.coherence.component.util.daemon.queueProcessor.Service.DaemonPool.Daemon.Guard
                    {
                    // ---- Fields declarations ----
                    private static com.tangosol.util.ListMap __mapChildren;
                    
                    // Static initializer
                    static
                        {
                        __initStatic();
                        }
                    
                    // Default static initializer
                    private static void __initStatic()
                        {
                        // register child classes
                        __mapChildren = new com.tangosol.util.ListMap();
                        __mapChildren.put("Abandon", Cluster.TransportService.DaemonPool.Daemon.Guard.Abandon.get_CLASS());
                        }
                    
                    // Default constructor
                    public Guard()
                        {
                        this(null, null, true);
                        }
                    
                    // Initializing constructor
                    public Guard(String sName, com.tangosol.coherence.Component compParent, boolean fInit)
                        {
                        super(sName, compParent, false);
                        
                        if (fInit)
                            {
                            __init();
                            }
                        }
                    
                    // Main initializer
                    public void __init()
                        {
                        // private initialization
                        __initPrivate();
                        
                        
                        // containment initialization: children
                        
                        // signal the end of the initialization
                        set_Constructed(true);
                        }
                    
                    // Private initializer
                    protected void __initPrivate()
                        {
                        
                        super.__initPrivate();
                        }
                    
                    //++ getter for static property _Instance
                    /**
                     * Getter for property _Instance.<p>
                    * Auto generated
                     */
                    public static com.tangosol.coherence.Component get_Instance()
                        {
                        return new com.tangosol.coherence.component.net.Cluster.TransportService.DaemonPool.Daemon.Guard();
                        }
                    
                    //++ getter for static property _CLASS
                    /**
                     * Getter for property _CLASS.<p>
                    * Property with auto-generated accessor that returns the
                    * Class object for a given component.
                     */
                    public static Class get_CLASS()
                        {
                        Class clz;
                        try
                            {
                            clz = Class.forName("com.tangosol.coherence/component/net/Cluster$TransportService$DaemonPool$Daemon$Guard".replace('/', '.'));
                            }
                        catch (ClassNotFoundException e)
                            {
                            throw new NoClassDefFoundError(e.getMessage());
                            }
                        return clz;
                        }
                    
                    //++ getter for autogen property _Module
                    /**
                     * This is an auto-generated method that returns the global
                    * [design time] parent component.
                    * 
                    * Note: the class generator will ignore any custom
                    * implementation for this behavior.
                     */
                    private com.tangosol.coherence.Component get_Module()
                        {
                        return this.get_Parent().get_Parent().get_Parent().get_Parent();
                        }
                    
                    //++ getter for autogen property _ChildClasses
                    /**
                     * This is an auto-generated method that returns the map of
                    * design time [static] children.
                    * 
                    * Note: the class generator will ignore any custom
                    * implementation for this behavior.
                     */
                    protected java.util.Map get_ChildClasses()
                        {
                        return __mapChildren;
                        }

                    // ---- class: com.tangosol.coherence.component.net.Cluster$TransportService$DaemonPool$Daemon$Guard$Abandon
                    
                    @SuppressWarnings({"deprecation", "rawtypes", "unused", "unchecked", "ConstantConditions", "DuplicatedCode", "ForLoopReplaceableByForEach", "IfCanBeSwitch", "RedundantArrayCreation", "RedundantSuppression", "SameParameterValue", "TryFinallyCanBeTryWithResources", "TryWithIdenticalCatches", "UnnecessaryBoxing", "UnnecessaryUnboxing", "UnusedAssignment"})
                    public static class Abandon
                            extends    com.tangosol.coherence.component.util.daemon.queueProcessor.Service.DaemonPool.Daemon.Guard.Abandon
                        {
                        // ---- Fields declarations ----
                        
                        // Default constructor
                        public Abandon()
                            {
                            this(null, null, true);
                            }
                        
                        // Initializing constructor
                        public Abandon(String sName, com.tangosol.coherence.Component compParent, boolean fInit)
                            {
                            super(sName, compParent, false);
                            
                            if (fInit)
                                {
                                __init();
                                }
                            }
                        
                        // Main initializer
                        public void __init()
                            {
                            // private initialization
                            __initPrivate();
                            
                            
                            // signal the end of the initialization
                            set_Constructed(true);
                            }
                        
                        // Private initializer
                        protected void __initPrivate()
                            {
                            
                            super.__initPrivate();
                            }
                        
                        //++ getter for static property _Instance
                        /**
                         * Getter for property _Instance.<p>
                        * Auto generated
                         */
                        public static com.tangosol.coherence.Component get_Instance()
                            {
                            return new com.tangosol.coherence.component.net.Cluster.TransportService.DaemonPool.Daemon.Guard.Abandon();
                            }
                        
                        //++ getter for static property _CLASS
                        /**
                         * Getter for property _CLASS.<p>
                        * Property with auto-generated accessor that returns
                        * the Class object for a given component.
                         */
                        public static Class get_CLASS()
                            {
                            Class clz;
                            try
                                {
                                clz = Class.forName("com.tangosol.coherence/component/net/Cluster$TransportService$DaemonPool$Daemon$Guard$Abandon".replace('/', '.'));
                                }
                            catch (ClassNotFoundException e)
                                {
                                throw new NoClassDefFoundError(e.getMessage());
                                }
                            return clz;
                            }
                        
                        //++ getter for autogen property _Module
                        /**
                         * This is an auto-generated method that returns the
                        * global [design time] parent component.
                        * 
                        * Note: the class generator will ignore any custom
                        * implementation for this behavior.
                         */
                        private com.tangosol.coherence.Component get_Module()
                            {
                            return this.get_Parent().get_Parent().get_Parent().get_Parent().get_Parent();
                            }
                        }
                    }
                }

            // ---- class: com.tangosol.coherence.component.net.Cluster$TransportService$DaemonPool$ResizeTask
            
            /**
             * Runnable periodic task used to implement the dynamic resizing
             * algorithm.
             */
            @SuppressWarnings({"deprecation", "rawtypes", "unused", "unchecked", "ConstantConditions", "DuplicatedCode", "ForLoopReplaceableByForEach", "IfCanBeSwitch", "RedundantArrayCreation", "RedundantSuppression", "SameParameterValue", "TryFinallyCanBeTryWithResources", "TryWithIdenticalCatches", "UnnecessaryBoxing", "UnnecessaryUnboxing", "UnusedAssignment"})
            public static class ResizeTask
                    extends    com.tangosol.coherence.component.util.daemon.queueProcessor.Service.DaemonPool.ResizeTask
                {
                // ---- Fields declarations ----
                
                // Default constructor
                public ResizeTask()
                    {
                    this(null, null, true);
                    }
                
                // Initializing constructor
                public ResizeTask(String sName, com.tangosol.coherence.Component compParent, boolean fInit)
                    {
                    super(sName, compParent, false);
                    
                    if (fInit)
                        {
                        __init();
                        }
                    }
                
                // Main initializer
                public void __init()
                    {
                    // private initialization
                    __initPrivate();
                    
                    
                    // signal the end of the initialization
                    set_Constructed(true);
                    }
                
                // Private initializer
                protected void __initPrivate()
                    {
                    
                    super.__initPrivate();
                    }
                
                //++ getter for static property _Instance
                /**
                 * Getter for property _Instance.<p>
                * Auto generated
                 */
                public static com.tangosol.coherence.Component get_Instance()
                    {
                    return new com.tangosol.coherence.component.net.Cluster.TransportService.DaemonPool.ResizeTask();
                    }
                
                //++ getter for static property _CLASS
                /**
                 * Getter for property _CLASS.<p>
                * Property with auto-generated accessor that returns the Class
                * object for a given component.
                 */
                public static Class get_CLASS()
                    {
                    Class clz;
                    try
                        {
                        clz = Class.forName("com.tangosol.coherence/component/net/Cluster$TransportService$DaemonPool$ResizeTask".replace('/', '.'));
                        }
                    catch (ClassNotFoundException e)
                        {
                        throw new NoClassDefFoundError(e.getMessage());
                        }
                    return clz;
                    }
                
                //++ getter for autogen property _Module
                /**
                 * This is an auto-generated method that returns the global
                * [design time] parent component.
                * 
                * Note: the class generator will ignore any custom
                * implementation for this behavior.
                 */
                private com.tangosol.coherence.Component get_Module()
                    {
                    return this.get_Parent().get_Parent().get_Parent();
                    }
                }

            // ---- class: com.tangosol.coherence.component.net.Cluster$TransportService$DaemonPool$ScheduleTask
            
            /**
             * Runnable task that is used to schedule a task to be added to the
             * DaemonPool.
             */
            @SuppressWarnings({"deprecation", "rawtypes", "unused", "unchecked", "ConstantConditions", "DuplicatedCode", "ForLoopReplaceableByForEach", "IfCanBeSwitch", "RedundantArrayCreation", "RedundantSuppression", "SameParameterValue", "TryFinallyCanBeTryWithResources", "TryWithIdenticalCatches", "UnnecessaryBoxing", "UnnecessaryUnboxing", "UnusedAssignment"})
            public static class ScheduleTask
                    extends    com.tangosol.coherence.component.util.daemon.queueProcessor.Service.DaemonPool.ScheduleTask
                {
                // ---- Fields declarations ----
                
                // Default constructor
                public ScheduleTask()
                    {
                    this(null, null, true);
                    }
                
                // Initializing constructor
                public ScheduleTask(String sName, com.tangosol.coherence.Component compParent, boolean fInit)
                    {
                    super(sName, compParent, false);
                    
                    if (fInit)
                        {
                        __init();
                        }
                    }
                
                // Main initializer
                public void __init()
                    {
                    // private initialization
                    __initPrivate();
                    
                    
                    // signal the end of the initialization
                    set_Constructed(true);
                    }
                
                // Private initializer
                protected void __initPrivate()
                    {
                    
                    super.__initPrivate();
                    }
                
                //++ getter for static property _Instance
                /**
                 * Getter for property _Instance.<p>
                * Auto generated
                 */
                public static com.tangosol.coherence.Component get_Instance()
                    {
                    return new com.tangosol.coherence.component.net.Cluster.TransportService.DaemonPool.ScheduleTask();
                    }
                
                //++ getter for static property _CLASS
                /**
                 * Getter for property _CLASS.<p>
                * Property with auto-generated accessor that returns the Class
                * object for a given component.
                 */
                public static Class get_CLASS()
                    {
                    Class clz;
                    try
                        {
                        clz = Class.forName("com.tangosol.coherence/component/net/Cluster$TransportService$DaemonPool$ScheduleTask".replace('/', '.'));
                        }
                    catch (ClassNotFoundException e)
                        {
                        throw new NoClassDefFoundError(e.getMessage());
                        }
                    return clz;
                    }
                
                //++ getter for autogen property _Module
                /**
                 * This is an auto-generated method that returns the global
                * [design time] parent component.
                * 
                * Note: the class generator will ignore any custom
                * implementation for this behavior.
                 */
                private com.tangosol.coherence.Component get_Module()
                    {
                    return this.get_Parent().get_Parent().get_Parent();
                    }
                }

            // ---- class: com.tangosol.coherence.component.net.Cluster$TransportService$DaemonPool$StartTask
            
            /**
             * Runnable pseudo-task that is used to start one and only one
             * daemon thread.
             */
            @SuppressWarnings({"deprecation", "rawtypes", "unused", "unchecked", "ConstantConditions", "DuplicatedCode", "ForLoopReplaceableByForEach", "IfCanBeSwitch", "RedundantArrayCreation", "RedundantSuppression", "SameParameterValue", "TryFinallyCanBeTryWithResources", "TryWithIdenticalCatches", "UnnecessaryBoxing", "UnnecessaryUnboxing", "UnusedAssignment"})
            public static class StartTask
                    extends    com.tangosol.coherence.component.util.daemon.queueProcessor.Service.DaemonPool.StartTask
                {
                // ---- Fields declarations ----
                
                // Default constructor
                public StartTask()
                    {
                    this(null, null, true);
                    }
                
                // Initializing constructor
                public StartTask(String sName, com.tangosol.coherence.Component compParent, boolean fInit)
                    {
                    super(sName, compParent, false);
                    
                    if (fInit)
                        {
                        __init();
                        }
                    }
                
                // Main initializer
                public void __init()
                    {
                    // private initialization
                    __initPrivate();
                    
                    
                    // signal the end of the initialization
                    set_Constructed(true);
                    }
                
                // Private initializer
                protected void __initPrivate()
                    {
                    
                    super.__initPrivate();
                    }
                
                //++ getter for static property _Instance
                /**
                 * Getter for property _Instance.<p>
                * Auto generated
                 */
                public static com.tangosol.coherence.Component get_Instance()
                    {
                    return new com.tangosol.coherence.component.net.Cluster.TransportService.DaemonPool.StartTask();
                    }
                
                //++ getter for static property _CLASS
                /**
                 * Getter for property _CLASS.<p>
                * Property with auto-generated accessor that returns the Class
                * object for a given component.
                 */
                public static Class get_CLASS()
                    {
                    Class clz;
                    try
                        {
                        clz = Class.forName("com.tangosol.coherence/component/net/Cluster$TransportService$DaemonPool$StartTask".replace('/', '.'));
                        }
                    catch (ClassNotFoundException e)
                        {
                        throw new NoClassDefFoundError(e.getMessage());
                        }
                    return clz;
                    }
                
                //++ getter for autogen property _Module
                /**
                 * This is an auto-generated method that returns the global
                * [design time] parent component.
                * 
                * Note: the class generator will ignore any custom
                * implementation for this behavior.
                 */
                private com.tangosol.coherence.Component get_Module()
                    {
                    return this.get_Parent().get_Parent().get_Parent();
                    }
                }

            // ---- class: com.tangosol.coherence.component.net.Cluster$TransportService$DaemonPool$StopTask
            
            /**
             * Runnable pseudo-task that is used to terminate one and only one
             * daemon thread.
             */
            @SuppressWarnings({"deprecation", "rawtypes", "unused", "unchecked", "ConstantConditions", "DuplicatedCode", "ForLoopReplaceableByForEach", "IfCanBeSwitch", "RedundantArrayCreation", "RedundantSuppression", "SameParameterValue", "TryFinallyCanBeTryWithResources", "TryWithIdenticalCatches", "UnnecessaryBoxing", "UnnecessaryUnboxing", "UnusedAssignment"})
            public static class StopTask
                    extends    com.tangosol.coherence.component.util.daemon.queueProcessor.Service.DaemonPool.StopTask
                {
                // ---- Fields declarations ----
                
                // Default constructor
                public StopTask()
                    {
                    this(null, null, true);
                    }
                
                // Initializing constructor
                public StopTask(String sName, com.tangosol.coherence.Component compParent, boolean fInit)
                    {
                    super(sName, compParent, false);
                    
                    if (fInit)
                        {
                        __init();
                        }
                    }
                
                // Main initializer
                public void __init()
                    {
                    // private initialization
                    __initPrivate();
                    
                    
                    // signal the end of the initialization
                    set_Constructed(true);
                    }
                
                // Private initializer
                protected void __initPrivate()
                    {
                    
                    super.__initPrivate();
                    }
                
                //++ getter for static property _Instance
                /**
                 * Getter for property _Instance.<p>
                * Auto generated
                 */
                public static com.tangosol.coherence.Component get_Instance()
                    {
                    return new com.tangosol.coherence.component.net.Cluster.TransportService.DaemonPool.StopTask();
                    }
                
                //++ getter for static property _CLASS
                /**
                 * Getter for property _CLASS.<p>
                * Property with auto-generated accessor that returns the Class
                * object for a given component.
                 */
                public static Class get_CLASS()
                    {
                    Class clz;
                    try
                        {
                        clz = Class.forName("com.tangosol.coherence/component/net/Cluster$TransportService$DaemonPool$StopTask".replace('/', '.'));
                        }
                    catch (ClassNotFoundException e)
                        {
                        throw new NoClassDefFoundError(e.getMessage());
                        }
                    return clz;
                    }
                
                //++ getter for autogen property _Module
                /**
                 * This is an auto-generated method that returns the global
                * [design time] parent component.
                * 
                * Note: the class generator will ignore any custom
                * implementation for this behavior.
                 */
                private com.tangosol.coherence.Component get_Module()
                    {
                    return this.get_Parent().get_Parent().get_Parent();
                    }
                }

            // ---- class: com.tangosol.coherence.component.net.Cluster$TransportService$DaemonPool$WorkSlot
            
            /**
             * To reduce the contention across the worker threads, all tasks
             * added to the DaemonPool are directed to one of the WorkSlots in
             * a way that respects the association between tasks. The total
             * number of slots is fixed and calculated based on the number of
             * processors. Depending on the number of daemon threads, different
             * slots may share the queues.
             */
            @SuppressWarnings({"deprecation", "rawtypes", "unused", "unchecked", "ConstantConditions", "DuplicatedCode", "ForLoopReplaceableByForEach", "IfCanBeSwitch", "RedundantArrayCreation", "RedundantSuppression", "SameParameterValue", "TryFinallyCanBeTryWithResources", "TryWithIdenticalCatches", "UnnecessaryBoxing", "UnnecessaryUnboxing", "UnusedAssignment"})
            public static class WorkSlot
                    extends    com.tangosol.coherence.component.util.daemon.queueProcessor.Service.DaemonPool.WorkSlot
                {
                // ---- Fields declarations ----
                
                // Default constructor
                public WorkSlot()
                    {
                    this(null, null, true);
                    }
                
                // Initializing constructor
                public WorkSlot(String sName, com.tangosol.coherence.Component compParent, boolean fInit)
                    {
                    super(sName, compParent, false);
                    
                    if (fInit)
                        {
                        __init();
                        }
                    }
                
                // Main initializer
                public void __init()
                    {
                    // private initialization
                    __initPrivate();
                    
                    // state initialization: public and protected properties
                    try
                        {
                        setIndex(-1);
                        }
                    catch (java.lang.Exception e)
                        {
                        // re-throw as a runtime exception
                        throw new com.tangosol.util.WrapperException(e);
                        }
                    
                    // signal the end of the initialization
                    set_Constructed(true);
                    }
                
                // Private initializer
                protected void __initPrivate()
                    {
                    
                    super.__initPrivate();
                    }
                
                //++ getter for static property _Instance
                /**
                 * Getter for property _Instance.<p>
                * Auto generated
                 */
                public static com.tangosol.coherence.Component get_Instance()
                    {
                    return new com.tangosol.coherence.component.net.Cluster.TransportService.DaemonPool.WorkSlot();
                    }
                
                //++ getter for static property _CLASS
                /**
                 * Getter for property _CLASS.<p>
                * Property with auto-generated accessor that returns the Class
                * object for a given component.
                 */
                public static Class get_CLASS()
                    {
                    Class clz;
                    try
                        {
                        clz = Class.forName("com.tangosol.coherence/component/net/Cluster$TransportService$DaemonPool$WorkSlot".replace('/', '.'));
                        }
                    catch (ClassNotFoundException e)
                        {
                        throw new NoClassDefFoundError(e.getMessage());
                        }
                    return clz;
                    }
                
                //++ getter for autogen property _Module
                /**
                 * This is an auto-generated method that returns the global
                * [design time] parent component.
                * 
                * Note: the class generator will ignore any custom
                * implementation for this behavior.
                 */
                private com.tangosol.coherence.Component get_Module()
                    {
                    return this.get_Parent().get_Parent().get_Parent();
                    }
                }

            // ---- class: com.tangosol.coherence.component.net.Cluster$TransportService$DaemonPool$WrapperTask
            
            /**
             * A task that is used to wrap the actual tasks.
             */
            @SuppressWarnings({"deprecation", "rawtypes", "unused", "unchecked", "ConstantConditions", "DuplicatedCode", "ForLoopReplaceableByForEach", "IfCanBeSwitch", "RedundantArrayCreation", "RedundantSuppression", "SameParameterValue", "TryFinallyCanBeTryWithResources", "TryWithIdenticalCatches", "UnnecessaryBoxing", "UnnecessaryUnboxing", "UnusedAssignment"})
            public static class WrapperTask
                    extends    com.tangosol.coherence.component.util.daemon.queueProcessor.Service.DaemonPool.WrapperTask
                {
                // ---- Fields declarations ----
                
                // Default constructor
                public WrapperTask()
                    {
                    this(null, null, true);
                    }
                
                // Initializing constructor
                public WrapperTask(String sName, com.tangosol.coherence.Component compParent, boolean fInit)
                    {
                    super(sName, compParent, false);
                    
                    if (fInit)
                        {
                        __init();
                        }
                    }
                
                // Main initializer
                public void __init()
                    {
                    // private initialization
                    __initPrivate();
                    
                    
                    // signal the end of the initialization
                    set_Constructed(true);
                    }
                
                // Private initializer
                protected void __initPrivate()
                    {
                    
                    super.__initPrivate();
                    }
                
                //++ getter for static property _Instance
                /**
                 * Getter for property _Instance.<p>
                * Auto generated
                 */
                public static com.tangosol.coherence.Component get_Instance()
                    {
                    return new com.tangosol.coherence.component.net.Cluster.TransportService.DaemonPool.WrapperTask();
                    }
                
                //++ getter for static property _CLASS
                /**
                 * Getter for property _CLASS.<p>
                * Property with auto-generated accessor that returns the Class
                * object for a given component.
                 */
                public static Class get_CLASS()
                    {
                    Class clz;
                    try
                        {
                        clz = Class.forName("com.tangosol.coherence/component/net/Cluster$TransportService$DaemonPool$WrapperTask".replace('/', '.'));
                        }
                    catch (ClassNotFoundException e)
                        {
                        throw new NoClassDefFoundError(e.getMessage());
                        }
                    return clz;
                    }
                
                //++ getter for autogen property _Module
                /**
                 * This is an auto-generated method that returns the global
                * [design time] parent component.
                * 
                * Note: the class generator will ignore any custom
                * implementation for this behavior.
                 */
                private com.tangosol.coherence.Component get_Module()
                    {
                    return this.get_Parent().get_Parent().get_Parent();
                    }
                }
            }

        // ---- class: com.tangosol.coherence.component.net.Cluster$TransportService$DispatchEvent
        
        /**
         * Runnable event.
         */
        @SuppressWarnings({"deprecation", "rawtypes", "unused", "unchecked", "ConstantConditions", "DuplicatedCode", "ForLoopReplaceableByForEach", "IfCanBeSwitch", "RedundantArrayCreation", "RedundantSuppression", "SameParameterValue", "TryFinallyCanBeTryWithResources", "TryWithIdenticalCatches", "UnnecessaryBoxing", "UnnecessaryUnboxing", "UnusedAssignment"})
        public static class DispatchEvent
                extends    com.tangosol.coherence.component.util.daemon.queueProcessor.service.Grid.DispatchEvent
            {
            // ---- Fields declarations ----
            
            // Default constructor
            public DispatchEvent()
                {
                this(null, null, true);
                }
            
            // Initializing constructor
            public DispatchEvent(String sName, com.tangosol.coherence.Component compParent, boolean fInit)
                {
                super(sName, compParent, false);
                
                if (fInit)
                    {
                    __init();
                    }
                }
            
            // Main initializer
            public void __init()
                {
                // private initialization
                __initPrivate();
                
                
                // signal the end of the initialization
                set_Constructed(true);
                }
            
            // Private initializer
            protected void __initPrivate()
                {
                
                super.__initPrivate();
                }
            
            //++ getter for static property _Instance
            /**
             * Getter for property _Instance.<p>
            * Auto generated
             */
            public static com.tangosol.coherence.Component get_Instance()
                {
                return new com.tangosol.coherence.component.net.Cluster.TransportService.DispatchEvent();
                }
            
            //++ getter for static property _CLASS
            /**
             * Getter for property _CLASS.<p>
            * Property with auto-generated accessor that returns the Class
            * object for a given component.
             */
            public static Class get_CLASS()
                {
                Class clz;
                try
                    {
                    clz = Class.forName("com.tangosol.coherence/component/net/Cluster$TransportService$DispatchEvent".replace('/', '.'));
                    }
                catch (ClassNotFoundException e)
                    {
                    throw new NoClassDefFoundError(e.getMessage());
                    }
                return clz;
                }
            
            //++ getter for autogen property _Module
            /**
             * This is an auto-generated method that returns the global [design
            * time] parent component.
            * 
            * Note: the class generator will ignore any custom implementation
            * for this behavior.
             */
            private com.tangosol.coherence.Component get_Module()
                {
                return this.get_Parent().get_Parent();
                }
            }

        // ---- class: com.tangosol.coherence.component.net.Cluster$TransportService$DispatchNotification
        
        @SuppressWarnings({"deprecation", "rawtypes", "unused", "unchecked", "ConstantConditions", "DuplicatedCode", "ForLoopReplaceableByForEach", "IfCanBeSwitch", "RedundantArrayCreation", "RedundantSuppression", "SameParameterValue", "TryFinallyCanBeTryWithResources", "TryWithIdenticalCatches", "UnnecessaryBoxing", "UnnecessaryUnboxing", "UnusedAssignment"})
        public static class DispatchNotification
                extends    com.tangosol.coherence.component.util.daemon.queueProcessor.service.Grid.DispatchNotification
            {
            // ---- Fields declarations ----
            
            // Default constructor
            public DispatchNotification()
                {
                this(null, null, true);
                }
            
            // Initializing constructor
            public DispatchNotification(String sName, com.tangosol.coherence.Component compParent, boolean fInit)
                {
                super(sName, compParent, false);
                
                if (fInit)
                    {
                    __init();
                    }
                }
            
            // Main initializer
            public void __init()
                {
                // private initialization
                __initPrivate();
                
                
                // signal the end of the initialization
                set_Constructed(true);
                }
            
            // Private initializer
            protected void __initPrivate()
                {
                
                super.__initPrivate();
                }
            
            //++ getter for static property _Instance
            /**
             * Getter for property _Instance.<p>
            * Auto generated
             */
            public static com.tangosol.coherence.Component get_Instance()
                {
                return new com.tangosol.coherence.component.net.Cluster.TransportService.DispatchNotification();
                }
            
            //++ getter for static property _CLASS
            /**
             * Getter for property _CLASS.<p>
            * Property with auto-generated accessor that returns the Class
            * object for a given component.
             */
            public static Class get_CLASS()
                {
                Class clz;
                try
                    {
                    clz = Class.forName("com.tangosol.coherence/component/net/Cluster$TransportService$DispatchNotification".replace('/', '.'));
                    }
                catch (ClassNotFoundException e)
                    {
                    throw new NoClassDefFoundError(e.getMessage());
                    }
                return clz;
                }
            
            //++ getter for autogen property _Module
            /**
             * This is an auto-generated method that returns the global [design
            * time] parent component.
            * 
            * Note: the class generator will ignore any custom implementation
            * for this behavior.
             */
            private com.tangosol.coherence.Component get_Module()
                {
                return this.get_Parent().get_Parent();
                }
            }

        // ---- class: com.tangosol.coherence.component.net.Cluster$TransportService$EventDispatcher
        
        /**
         * This is a Daemon component that waits for items to process from a
         * Queue. Whenever the Queue contains an item, the onNotify event
         * occurs. It is expected that sub-classes will process onNotify as
         * follows:
         * <pre><code>
         * Object o;
         * while ((o = getQueue().removeNoWait()) != null)
         *     {
         *     // process the item
         *     // ...
         *     }
         * </code></pre>
         * <p>
         * The Queue is used as the synchronization point for the daemon.
         */
        @SuppressWarnings({"deprecation", "rawtypes", "unused", "unchecked", "ConstantConditions", "DuplicatedCode", "ForLoopReplaceableByForEach", "IfCanBeSwitch", "RedundantArrayCreation", "RedundantSuppression", "SameParameterValue", "TryFinallyCanBeTryWithResources", "TryWithIdenticalCatches", "UnnecessaryBoxing", "UnnecessaryUnboxing", "UnusedAssignment"})
        public static class EventDispatcher
                extends    com.tangosol.coherence.component.util.daemon.queueProcessor.service.Grid.EventDispatcher
            {
            // ---- Fields declarations ----
            private static com.tangosol.util.ListMap __mapChildren;
            
            // Static initializer
            static
                {
                __initStatic();
                }
            
            // Default static initializer
            private static void __initStatic()
                {
                // register child classes
                __mapChildren = new com.tangosol.util.ListMap();
                __mapChildren.put("Queue", Cluster.TransportService.EventDispatcher.Queue.get_CLASS());
                }
            
            // Default constructor
            public EventDispatcher()
                {
                this(null, null, true);
                }
            
            // Initializing constructor
            public EventDispatcher(String sName, com.tangosol.coherence.Component compParent, boolean fInit)
                {
                super(sName, compParent, false);
                
                if (fInit)
                    {
                    __init();
                    }
                }
            
            // Main initializer
            public void __init()
                {
                // private initialization
                __initPrivate();
                
                // state initialization: public and protected properties
                try
                    {
                    setCloggedCount(1024);
                    setCloggedDelay(32);
                    setDaemonState(0);
                    setDefaultGuardRecovery(0.9F);
                    setDefaultGuardTimeout(60000L);
                    setNotifier(new com.oracle.coherence.common.base.SingleWaiterMultiNotifier());
                    }
                catch (java.lang.Exception e)
                    {
                    // re-throw as a runtime exception
                    throw new com.tangosol.util.WrapperException(e);
                    }
                
                // containment initialization: children
                _addChild(new com.tangosol.coherence.component.util.daemon.queueProcessor.Service.EventDispatcher.Guard("Guard", this, true), "Guard");
                
                // signal the end of the initialization
                set_Constructed(true);
                }
            
            // Private initializer
            protected void __initPrivate()
                {
                
                super.__initPrivate();
                }
            
            //++ getter for static property _Instance
            /**
             * Getter for property _Instance.<p>
            * Auto generated
             */
            public static com.tangosol.coherence.Component get_Instance()
                {
                return new com.tangosol.coherence.component.net.Cluster.TransportService.EventDispatcher();
                }
            
            //++ getter for static property _CLASS
            /**
             * Getter for property _CLASS.<p>
            * Property with auto-generated accessor that returns the Class
            * object for a given component.
             */
            public static Class get_CLASS()
                {
                Class clz;
                try
                    {
                    clz = Class.forName("com.tangosol.coherence/component/net/Cluster$TransportService$EventDispatcher".replace('/', '.'));
                    }
                catch (ClassNotFoundException e)
                    {
                    throw new NoClassDefFoundError(e.getMessage());
                    }
                return clz;
                }
            
            //++ getter for autogen property _Module
            /**
             * This is an auto-generated method that returns the global [design
            * time] parent component.
            * 
            * Note: the class generator will ignore any custom implementation
            * for this behavior.
             */
            private com.tangosol.coherence.Component get_Module()
                {
                return this.get_Parent().get_Parent();
                }
            
            //++ getter for autogen property _ChildClasses
            /**
             * This is an auto-generated method that returns the map of design
            * time [static] children.
            * 
            * Note: the class generator will ignore any custom implementation
            * for this behavior.
             */
            protected java.util.Map get_ChildClasses()
                {
                return __mapChildren;
                }

            // ---- class: com.tangosol.coherence.component.net.Cluster$TransportService$EventDispatcher$Queue
            
            /**
             * This is the Queue to which items that need to be processed are
             * added, and from which the daemon pulls items to process.
             */
            @SuppressWarnings({"deprecation", "rawtypes", "unused", "unchecked", "ConstantConditions", "DuplicatedCode", "ForLoopReplaceableByForEach", "IfCanBeSwitch", "RedundantArrayCreation", "RedundantSuppression", "SameParameterValue", "TryFinallyCanBeTryWithResources", "TryWithIdenticalCatches", "UnnecessaryBoxing", "UnnecessaryUnboxing", "UnusedAssignment"})
            public static class Queue
                    extends    com.tangosol.coherence.component.util.daemon.queueProcessor.Service.EventDispatcher.Queue
                {
                // ---- Fields declarations ----
                private static com.tangosol.util.ListMap __mapChildren;
                
                // Static initializer
                static
                    {
                    __initStatic();
                    }
                
                // Default static initializer
                private static void __initStatic()
                    {
                    // register child classes
                    __mapChildren = new com.tangosol.util.ListMap();
                    __mapChildren.put("Iterator", Cluster.TransportService.EventDispatcher.Queue.Iterator.get_CLASS());
                    }
                
                // Default constructor
                public Queue()
                    {
                    this(null, null, true);
                    }
                
                // Initializing constructor
                public Queue(String sName, com.tangosol.coherence.Component compParent, boolean fInit)
                    {
                    super(sName, compParent, false);
                    
                    if (fInit)
                        {
                        __init();
                        }
                    }
                
                // Main initializer
                public void __init()
                    {
                    // private initialization
                    __initPrivate();
                    
                    // state initialization: public and protected properties
                    try
                        {
                        setElementList(new com.tangosol.util.RecyclingLinkedList());
                        }
                    catch (java.lang.Exception e)
                        {
                        // re-throw as a runtime exception
                        throw new com.tangosol.util.WrapperException(e);
                        }
                    
                    // containment initialization: children
                    
                    // signal the end of the initialization
                    set_Constructed(true);
                    }
                
                // Private initializer
                protected void __initPrivate()
                    {
                    
                    super.__initPrivate();
                    }
                
                //++ getter for static property _Instance
                /**
                 * Getter for property _Instance.<p>
                * Auto generated
                 */
                public static com.tangosol.coherence.Component get_Instance()
                    {
                    return new com.tangosol.coherence.component.net.Cluster.TransportService.EventDispatcher.Queue();
                    }
                
                //++ getter for static property _CLASS
                /**
                 * Getter for property _CLASS.<p>
                * Property with auto-generated accessor that returns the Class
                * object for a given component.
                 */
                public static Class get_CLASS()
                    {
                    Class clz;
                    try
                        {
                        clz = Class.forName("com.tangosol.coherence/component/net/Cluster$TransportService$EventDispatcher$Queue".replace('/', '.'));
                        }
                    catch (ClassNotFoundException e)
                        {
                        throw new NoClassDefFoundError(e.getMessage());
                        }
                    return clz;
                    }
                
                //++ getter for autogen property _Module
                /**
                 * This is an auto-generated method that returns the global
                * [design time] parent component.
                * 
                * Note: the class generator will ignore any custom
                * implementation for this behavior.
                 */
                private com.tangosol.coherence.Component get_Module()
                    {
                    return this.get_Parent().get_Parent().get_Parent();
                    }
                
                //++ getter for autogen property _ChildClasses
                /**
                 * This is an auto-generated method that returns the map of
                * design time [static] children.
                * 
                * Note: the class generator will ignore any custom
                * implementation for this behavior.
                 */
                protected java.util.Map get_ChildClasses()
                    {
                    return __mapChildren;
                    }

                // ---- class: com.tangosol.coherence.component.net.Cluster$TransportService$EventDispatcher$Queue$Iterator
                
                /**
                 * Iterator of a snapshot of the List object that backs the
                 * Queue. Supports remove(). Uses the Queue as the monitor if
                 * any synchronization is required.
                 */
                @SuppressWarnings({"deprecation", "rawtypes", "unused", "unchecked", "ConstantConditions", "DuplicatedCode", "ForLoopReplaceableByForEach", "IfCanBeSwitch", "RedundantArrayCreation", "RedundantSuppression", "SameParameterValue", "TryFinallyCanBeTryWithResources", "TryWithIdenticalCatches", "UnnecessaryBoxing", "UnnecessaryUnboxing", "UnusedAssignment"})
                public static class Iterator
                        extends    com.tangosol.coherence.component.util.daemon.queueProcessor.Service.EventDispatcher.Queue.Iterator
                    {
                    // ---- Fields declarations ----
                    
                    // Default constructor
                    public Iterator()
                        {
                        this(null, null, true);
                        }
                    
                    // Initializing constructor
                    public Iterator(String sName, com.tangosol.coherence.Component compParent, boolean fInit)
                        {
                        super(sName, compParent, false);
                        
                        if (fInit)
                            {
                            __init();
                            }
                        }
                    
                    // Main initializer
                    public void __init()
                        {
                        // private initialization
                        __initPrivate();
                        
                        
                        // signal the end of the initialization
                        set_Constructed(true);
                        }
                    
                    // Private initializer
                    protected void __initPrivate()
                        {
                        
                        super.__initPrivate();
                        }
                    
                    //++ getter for static property _Instance
                    /**
                     * Getter for property _Instance.<p>
                    * Auto generated
                     */
                    public static com.tangosol.coherence.Component get_Instance()
                        {
                        return new com.tangosol.coherence.component.net.Cluster.TransportService.EventDispatcher.Queue.Iterator();
                        }
                    
                    //++ getter for static property _CLASS
                    /**
                     * Getter for property _CLASS.<p>
                    * Property with auto-generated accessor that returns the
                    * Class object for a given component.
                     */
                    public static Class get_CLASS()
                        {
                        Class clz;
                        try
                            {
                            clz = Class.forName("com.tangosol.coherence/component/net/Cluster$TransportService$EventDispatcher$Queue$Iterator".replace('/', '.'));
                            }
                        catch (ClassNotFoundException e)
                            {
                            throw new NoClassDefFoundError(e.getMessage());
                            }
                        return clz;
                        }
                    
                    //++ getter for autogen property _Module
                    /**
                     * This is an auto-generated method that returns the global
                    * [design time] parent component.
                    * 
                    * Note: the class generator will ignore any custom
                    * implementation for this behavior.
                     */
                    private com.tangosol.coherence.Component get_Module()
                        {
                        return this.get_Parent().get_Parent().get_Parent().get_Parent();
                        }
                    }
                }
            }

        // ---- class: com.tangosol.coherence.component.net.Cluster$TransportService$Guard
        
        /**
         * Guard provides the Guardable interface implementation for the Daemon.
         */
        @SuppressWarnings({"deprecation", "rawtypes", "unused", "unchecked", "ConstantConditions", "DuplicatedCode", "ForLoopReplaceableByForEach", "IfCanBeSwitch", "RedundantArrayCreation", "RedundantSuppression", "SameParameterValue", "TryFinallyCanBeTryWithResources", "TryWithIdenticalCatches", "UnnecessaryBoxing", "UnnecessaryUnboxing", "UnusedAssignment"})
        public static class Guard
                extends    com.tangosol.coherence.component.util.daemon.queueProcessor.service.Grid.Guard
            {
            // ---- Fields declarations ----
            private static com.tangosol.util.ListMap __mapChildren;
            
            // Static initializer
            static
                {
                __initStatic();
                }
            
            // Default static initializer
            private static void __initStatic()
                {
                // register child classes
                __mapChildren = new com.tangosol.util.ListMap();
                __mapChildren.put("StopService", Cluster.TransportService.Guard.StopService.get_CLASS());
                }
            
            // Default constructor
            public Guard()
                {
                this(null, null, true);
                }
            
            // Initializing constructor
            public Guard(String sName, com.tangosol.coherence.Component compParent, boolean fInit)
                {
                super(sName, compParent, false);
                
                if (fInit)
                    {
                    __init();
                    }
                }
            
            // Main initializer
            public void __init()
                {
                // private initialization
                __initPrivate();
                
                
                // containment initialization: children
                
                // signal the end of the initialization
                set_Constructed(true);
                }
            
            // Private initializer
            protected void __initPrivate()
                {
                
                super.__initPrivate();
                }
            
            //++ getter for static property _Instance
            /**
             * Getter for property _Instance.<p>
            * Auto generated
             */
            public static com.tangosol.coherence.Component get_Instance()
                {
                return new com.tangosol.coherence.component.net.Cluster.TransportService.Guard();
                }
            
            //++ getter for static property _CLASS
            /**
             * Getter for property _CLASS.<p>
            * Property with auto-generated accessor that returns the Class
            * object for a given component.
             */
            public static Class get_CLASS()
                {
                Class clz;
                try
                    {
                    clz = Class.forName("com.tangosol.coherence/component/net/Cluster$TransportService$Guard".replace('/', '.'));
                    }
                catch (ClassNotFoundException e)
                    {
                    throw new NoClassDefFoundError(e.getMessage());
                    }
                return clz;
                }
            
            //++ getter for autogen property _Module
            /**
             * This is an auto-generated method that returns the global [design
            * time] parent component.
            * 
            * Note: the class generator will ignore any custom implementation
            * for this behavior.
             */
            private com.tangosol.coherence.Component get_Module()
                {
                return this.get_Parent().get_Parent();
                }
            
            //++ getter for autogen property _ChildClasses
            /**
             * This is an auto-generated method that returns the map of design
            * time [static] children.
            * 
            * Note: the class generator will ignore any custom implementation
            * for this behavior.
             */
            protected java.util.Map get_ChildClasses()
                {
                return __mapChildren;
                }

            // ---- class: com.tangosol.coherence.component.net.Cluster$TransportService$Guard$StopService
            
            /**
             * StopService provides the logic to stop the associated service
             * within the Runnable interface, so that it is suitable to be run
             * on a dedicated thread.
             */
            @SuppressWarnings({"deprecation", "rawtypes", "unused", "unchecked", "ConstantConditions", "DuplicatedCode", "ForLoopReplaceableByForEach", "IfCanBeSwitch", "RedundantArrayCreation", "RedundantSuppression", "SameParameterValue", "TryFinallyCanBeTryWithResources", "TryWithIdenticalCatches", "UnnecessaryBoxing", "UnnecessaryUnboxing", "UnusedAssignment"})
            public static class StopService
                    extends    com.tangosol.coherence.component.util.daemon.queueProcessor.service.Grid.Guard.StopService
                {
                // ---- Fields declarations ----
                
                // Default constructor
                public StopService()
                    {
                    this(null, null, true);
                    }
                
                // Initializing constructor
                public StopService(String sName, com.tangosol.coherence.Component compParent, boolean fInit)
                    {
                    super(sName, compParent, false);
                    
                    if (fInit)
                        {
                        __init();
                        }
                    }
                
                // Main initializer
                public void __init()
                    {
                    // private initialization
                    __initPrivate();
                    
                    
                    // signal the end of the initialization
                    set_Constructed(true);
                    }
                
                // Private initializer
                protected void __initPrivate()
                    {
                    
                    super.__initPrivate();
                    }
                
                //++ getter for static property _Instance
                /**
                 * Getter for property _Instance.<p>
                * Auto generated
                 */
                public static com.tangosol.coherence.Component get_Instance()
                    {
                    return new com.tangosol.coherence.component.net.Cluster.TransportService.Guard.StopService();
                    }
                
                //++ getter for static property _CLASS
                /**
                 * Getter for property _CLASS.<p>
                * Property with auto-generated accessor that returns the Class
                * object for a given component.
                 */
                public static Class get_CLASS()
                    {
                    Class clz;
                    try
                        {
                        clz = Class.forName("com.tangosol.coherence/component/net/Cluster$TransportService$Guard$StopService".replace('/', '.'));
                        }
                    catch (ClassNotFoundException e)
                        {
                        throw new NoClassDefFoundError(e.getMessage());
                        }
                    return clz;
                    }
                
                //++ getter for autogen property _Module
                /**
                 * This is an auto-generated method that returns the global
                * [design time] parent component.
                * 
                * Note: the class generator will ignore any custom
                * implementation for this behavior.
                 */
                private com.tangosol.coherence.Component get_Module()
                    {
                    return this.get_Parent().get_Parent().get_Parent();
                    }
                }
            }

        // ---- class: com.tangosol.coherence.component.net.Cluster$TransportService$Heartbeat
        
        /**
         * The Heartbeat message is used by the TransportService to test the
         * health of its peers.
         * 
         * @since 12.2.1.2.1
         */
        @SuppressWarnings({"deprecation", "rawtypes", "unused", "unchecked", "ConstantConditions", "DuplicatedCode", "ForLoopReplaceableByForEach", "IfCanBeSwitch", "RedundantArrayCreation", "RedundantSuppression", "SameParameterValue", "TryFinallyCanBeTryWithResources", "TryWithIdenticalCatches", "UnnecessaryBoxing", "UnnecessaryUnboxing", "UnusedAssignment"})
        public static class Heartbeat
                extends    com.tangosol.coherence.component.util.daemon.queueProcessor.service.grid.TransportService.Heartbeat
            {
            // ---- Fields declarations ----
            
            // Default constructor
            public Heartbeat()
                {
                this(null, null, true);
                }
            
            // Initializing constructor
            public Heartbeat(String sName, com.tangosol.coherence.Component compParent, boolean fInit)
                {
                super(sName, compParent, false);
                
                if (fInit)
                    {
                    __init();
                    }
                }
            
            // Main initializer
            public void __init()
                {
                // private initialization
                __initPrivate();
                
                // state initialization: public and protected properties
                try
                    {
                    setMessageType(33);
                    }
                catch (java.lang.Exception e)
                    {
                    // re-throw as a runtime exception
                    throw new com.tangosol.util.WrapperException(e);
                    }
                
                // signal the end of the initialization
                set_Constructed(true);
                }
            
            // Private initializer
            protected void __initPrivate()
                {
                
                super.__initPrivate();
                }
            
            //++ getter for static property _Instance
            /**
             * Getter for property _Instance.<p>
            * Auto generated
             */
            public static com.tangosol.coherence.Component get_Instance()
                {
                return new com.tangosol.coherence.component.net.Cluster.TransportService.Heartbeat();
                }
            
            //++ getter for static property _CLASS
            /**
             * Getter for property _CLASS.<p>
            * Property with auto-generated accessor that returns the Class
            * object for a given component.
             */
            public static Class get_CLASS()
                {
                Class clz;
                try
                    {
                    clz = Class.forName("com.tangosol.coherence/component/net/Cluster$TransportService$Heartbeat".replace('/', '.'));
                    }
                catch (ClassNotFoundException e)
                    {
                    throw new NoClassDefFoundError(e.getMessage());
                    }
                return clz;
                }
            
            //++ getter for autogen property _Module
            /**
             * This is an auto-generated method that returns the global [design
            * time] parent component.
            * 
            * Note: the class generator will ignore any custom implementation
            * for this behavior.
             */
            private com.tangosol.coherence.Component get_Module()
                {
                return this.get_Parent().get_Parent();
                }
            }

        // ---- class: com.tangosol.coherence.component.net.Cluster$TransportService$MemberConfigUpdate
        
        /**
         * This Message is sent to all other Members running this service to
         * inform them of a change to this Member's ConfigMap for this Service.
         * 
         * Attributes:
         *     Key
         *     Value
         *     Remove
         */
        @SuppressWarnings({"deprecation", "rawtypes", "unused", "unchecked", "ConstantConditions", "DuplicatedCode", "ForLoopReplaceableByForEach", "IfCanBeSwitch", "RedundantArrayCreation", "RedundantSuppression", "SameParameterValue", "TryFinallyCanBeTryWithResources", "TryWithIdenticalCatches", "UnnecessaryBoxing", "UnnecessaryUnboxing", "UnusedAssignment"})
        public static class MemberConfigUpdate
                extends    com.tangosol.coherence.component.util.daemon.queueProcessor.service.Grid.MemberConfigUpdate
            {
            // ---- Fields declarations ----
            
            // Default constructor
            public MemberConfigUpdate()
                {
                this(null, null, true);
                }
            
            // Initializing constructor
            public MemberConfigUpdate(String sName, com.tangosol.coherence.Component compParent, boolean fInit)
                {
                super(sName, compParent, false);
                
                if (fInit)
                    {
                    __init();
                    }
                }
            
            // Main initializer
            public void __init()
                {
                // private initialization
                __initPrivate();
                
                // state initialization: public and protected properties
                try
                    {
                    setMessageType(-3);
                    }
                catch (java.lang.Exception e)
                    {
                    // re-throw as a runtime exception
                    throw new com.tangosol.util.WrapperException(e);
                    }
                
                // signal the end of the initialization
                set_Constructed(true);
                }
            
            // Private initializer
            protected void __initPrivate()
                {
                
                super.__initPrivate();
                }
            
            //++ getter for static property _Instance
            /**
             * Getter for property _Instance.<p>
            * Auto generated
             */
            public static com.tangosol.coherence.Component get_Instance()
                {
                return new com.tangosol.coherence.component.net.Cluster.TransportService.MemberConfigUpdate();
                }
            
            //++ getter for static property _CLASS
            /**
             * Getter for property _CLASS.<p>
            * Property with auto-generated accessor that returns the Class
            * object for a given component.
             */
            public static Class get_CLASS()
                {
                Class clz;
                try
                    {
                    clz = Class.forName("com.tangosol.coherence/component/net/Cluster$TransportService$MemberConfigUpdate".replace('/', '.'));
                    }
                catch (ClassNotFoundException e)
                    {
                    throw new NoClassDefFoundError(e.getMessage());
                    }
                return clz;
                }
            
            //++ getter for autogen property _Module
            /**
             * This is an auto-generated method that returns the global [design
            * time] parent component.
            * 
            * Note: the class generator will ignore any custom implementation
            * for this behavior.
             */
            private com.tangosol.coherence.Component get_Module()
                {
                return this.get_Parent().get_Parent();
                }
            }

        // ---- class: com.tangosol.coherence.component.net.Cluster$TransportService$MemberJoined
        
        /**
         * This Message is sent to a service when a cluster Member that
         * previously did not expose the same service now does expose the same
         * service. In other words, if cluster Members are (A, B, C), and (A,
         * B) have a service #3, and C subsequently starts a service #3, then
         * the service #3 on (A, B) will be notified that C has a service #3.
         * 
         * Note: Prior to 12.2.1 this was NotifyServiceJoined as was sent by
         * the local ClusterService.  As of 12.2.1 it is a inner service
         * message to ensure ordering with any service specific transport.
         */
        @SuppressWarnings({"deprecation", "rawtypes", "unused", "unchecked", "ConstantConditions", "DuplicatedCode", "ForLoopReplaceableByForEach", "IfCanBeSwitch", "RedundantArrayCreation", "RedundantSuppression", "SameParameterValue", "TryFinallyCanBeTryWithResources", "TryWithIdenticalCatches", "UnnecessaryBoxing", "UnnecessaryUnboxing", "UnusedAssignment"})
        public static class MemberJoined
                extends    com.tangosol.coherence.component.util.daemon.queueProcessor.service.Grid.MemberJoined
            {
            // ---- Fields declarations ----
            
            // Default constructor
            public MemberJoined()
                {
                this(null, null, true);
                }
            
            // Initializing constructor
            public MemberJoined(String sName, com.tangosol.coherence.Component compParent, boolean fInit)
                {
                super(sName, compParent, false);
                
                if (fInit)
                    {
                    __init();
                    }
                }
            
            // Main initializer
            public void __init()
                {
                // private initialization
                __initPrivate();
                
                // state initialization: public and protected properties
                try
                    {
                    setMessageType(4);
                    }
                catch (java.lang.Exception e)
                    {
                    // re-throw as a runtime exception
                    throw new com.tangosol.util.WrapperException(e);
                    }
                
                // signal the end of the initialization
                set_Constructed(true);
                }
            
            // Private initializer
            protected void __initPrivate()
                {
                
                super.__initPrivate();
                }
            
            //++ getter for static property _Instance
            /**
             * Getter for property _Instance.<p>
            * Auto generated
             */
            public static com.tangosol.coherence.Component get_Instance()
                {
                return new com.tangosol.coherence.component.net.Cluster.TransportService.MemberJoined();
                }
            
            //++ getter for static property _CLASS
            /**
             * Getter for property _CLASS.<p>
            * Property with auto-generated accessor that returns the Class
            * object for a given component.
             */
            public static Class get_CLASS()
                {
                Class clz;
                try
                    {
                    clz = Class.forName("com.tangosol.coherence/component/net/Cluster$TransportService$MemberJoined".replace('/', '.'));
                    }
                catch (ClassNotFoundException e)
                    {
                    throw new NoClassDefFoundError(e.getMessage());
                    }
                return clz;
                }
            
            //++ getter for autogen property _Module
            /**
             * This is an auto-generated method that returns the global [design
            * time] parent component.
            * 
            * Note: the class generator will ignore any custom implementation
            * for this behavior.
             */
            private com.tangosol.coherence.Component get_Module()
                {
                return this.get_Parent().get_Parent();
                }
            }

        // ---- class: com.tangosol.coherence.component.net.Cluster$TransportService$MemberWelcome
        
        /**
         * This Message is used to welcome a new member into this Service.
         * 
         * Attributes:
         *     MemberConfigMap
         *     ServiceConfigMap  (optional)
         */
        @SuppressWarnings({"deprecation", "rawtypes", "unused", "unchecked", "ConstantConditions", "DuplicatedCode", "ForLoopReplaceableByForEach", "IfCanBeSwitch", "RedundantArrayCreation", "RedundantSuppression", "SameParameterValue", "TryFinallyCanBeTryWithResources", "TryWithIdenticalCatches", "UnnecessaryBoxing", "UnnecessaryUnboxing", "UnusedAssignment"})
        public static class MemberWelcome
                extends    com.tangosol.coherence.component.util.daemon.queueProcessor.service.Grid.MemberWelcome
            {
            // ---- Fields declarations ----
            
            // Default constructor
            public MemberWelcome()
                {
                this(null, null, true);
                }
            
            // Initializing constructor
            public MemberWelcome(String sName, com.tangosol.coherence.Component compParent, boolean fInit)
                {
                super(sName, compParent, false);
                
                if (fInit)
                    {
                    __init();
                    }
                }
            
            // Main initializer
            public void __init()
                {
                // private initialization
                __initPrivate();
                
                // state initialization: public and protected properties
                try
                    {
                    setMessageType(-2);
                    }
                catch (java.lang.Exception e)
                    {
                    // re-throw as a runtime exception
                    throw new com.tangosol.util.WrapperException(e);
                    }
                
                // signal the end of the initialization
                set_Constructed(true);
                }
            
            // Private initializer
            protected void __initPrivate()
                {
                
                super.__initPrivate();
                }
            
            //++ getter for static property _Instance
            /**
             * Getter for property _Instance.<p>
            * Auto generated
             */
            public static com.tangosol.coherence.Component get_Instance()
                {
                return new com.tangosol.coherence.component.net.Cluster.TransportService.MemberWelcome();
                }
            
            //++ getter for static property _CLASS
            /**
             * Getter for property _CLASS.<p>
            * Property with auto-generated accessor that returns the Class
            * object for a given component.
             */
            public static Class get_CLASS()
                {
                Class clz;
                try
                    {
                    clz = Class.forName("com.tangosol.coherence/component/net/Cluster$TransportService$MemberWelcome".replace('/', '.'));
                    }
                catch (ClassNotFoundException e)
                    {
                    throw new NoClassDefFoundError(e.getMessage());
                    }
                return clz;
                }
            
            //++ getter for autogen property _Module
            /**
             * This is an auto-generated method that returns the global [design
            * time] parent component.
            * 
            * Note: the class generator will ignore any custom implementation
            * for this behavior.
             */
            private com.tangosol.coherence.Component get_Module()
                {
                return this.get_Parent().get_Parent();
                }
            }

        // ---- class: com.tangosol.coherence.component.net.Cluster$TransportService$MemberWelcomeRequest
        
        /**
         * This Message is sent to all other Members running this service to
         * request to be "welcomed" to the service (see $MemberWelcome)
         * 
         * Attributes:
         *     SenderMemberSet
         * 
         * As of Coherence 12.1.2 this message is not used by ClusterService
         */
        @SuppressWarnings({"deprecation", "rawtypes", "unused", "unchecked", "ConstantConditions", "DuplicatedCode", "ForLoopReplaceableByForEach", "IfCanBeSwitch", "RedundantArrayCreation", "RedundantSuppression", "SameParameterValue", "TryFinallyCanBeTryWithResources", "TryWithIdenticalCatches", "UnnecessaryBoxing", "UnnecessaryUnboxing", "UnusedAssignment"})
        public static class MemberWelcomeRequest
                extends    com.tangosol.coherence.component.util.daemon.queueProcessor.service.Grid.MemberWelcomeRequest
            {
            // ---- Fields declarations ----
            private static com.tangosol.util.ListMap __mapChildren;
            
            // Static initializer
            static
                {
                __initStatic();
                }
            
            // Default static initializer
            private static void __initStatic()
                {
                // register child classes
                __mapChildren = new com.tangosol.util.ListMap();
                __mapChildren.put("Poll", Cluster.TransportService.MemberWelcomeRequest.Poll.get_CLASS());
                }
            
            // Default constructor
            public MemberWelcomeRequest()
                {
                this(null, null, true);
                }
            
            // Initializing constructor
            public MemberWelcomeRequest(String sName, com.tangosol.coherence.Component compParent, boolean fInit)
                {
                super(sName, compParent, false);
                
                if (fInit)
                    {
                    __init();
                    }
                }
            
            // Main initializer
            public void __init()
                {
                // private initialization
                __initPrivate();
                
                // state initialization: public and protected properties
                try
                    {
                    setMessageType(-1);
                    }
                catch (java.lang.Exception e)
                    {
                    // re-throw as a runtime exception
                    throw new com.tangosol.util.WrapperException(e);
                    }
                
                // containment initialization: children
                
                // signal the end of the initialization
                set_Constructed(true);
                }
            
            // Private initializer
            protected void __initPrivate()
                {
                
                super.__initPrivate();
                }
            
            //++ getter for static property _Instance
            /**
             * Getter for property _Instance.<p>
            * Auto generated
             */
            public static com.tangosol.coherence.Component get_Instance()
                {
                return new com.tangosol.coherence.component.net.Cluster.TransportService.MemberWelcomeRequest();
                }
            
            //++ getter for static property _CLASS
            /**
             * Getter for property _CLASS.<p>
            * Property with auto-generated accessor that returns the Class
            * object for a given component.
             */
            public static Class get_CLASS()
                {
                Class clz;
                try
                    {
                    clz = Class.forName("com.tangosol.coherence/component/net/Cluster$TransportService$MemberWelcomeRequest".replace('/', '.'));
                    }
                catch (ClassNotFoundException e)
                    {
                    throw new NoClassDefFoundError(e.getMessage());
                    }
                return clz;
                }
            
            //++ getter for autogen property _Module
            /**
             * This is an auto-generated method that returns the global [design
            * time] parent component.
            * 
            * Note: the class generator will ignore any custom implementation
            * for this behavior.
             */
            private com.tangosol.coherence.Component get_Module()
                {
                return this.get_Parent().get_Parent();
                }
            
            //++ getter for autogen property _ChildClasses
            /**
             * This is an auto-generated method that returns the map of design
            * time [static] children.
            * 
            * Note: the class generator will ignore any custom implementation
            * for this behavior.
             */
            protected java.util.Map get_ChildClasses()
                {
                return __mapChildren;
                }

            // ---- class: com.tangosol.coherence.component.net.Cluster$TransportService$MemberWelcomeRequest$Poll
            
            /**
             * The Poll contains information regarding a request sent to one or
             * more Cluster Members that require responses. A Service may poll
             * other Members that are running the same Service, and the Poll is
             * used to wait for and assemble the responses from each of those
             * Members. A client thread may also use the Poll to block on a
             * response or set of responses, thus waiting for the completion of
             * the Poll. In its simplest form, which is a Poll that is sent to
             * one Member of the Cluster, the Poll actually represents the
             * request/response model.
             */
            @SuppressWarnings({"deprecation", "rawtypes", "unused", "unchecked", "ConstantConditions", "DuplicatedCode", "ForLoopReplaceableByForEach", "IfCanBeSwitch", "RedundantArrayCreation", "RedundantSuppression", "SameParameterValue", "TryFinallyCanBeTryWithResources", "TryWithIdenticalCatches", "UnnecessaryBoxing", "UnnecessaryUnboxing", "UnusedAssignment"})
            public static class Poll
                    extends    com.tangosol.coherence.component.util.daemon.queueProcessor.service.Grid.MemberWelcomeRequest.Poll
                {
                // ---- Fields declarations ----
                
                // Default constructor
                public Poll()
                    {
                    this(null, null, true);
                    }
                
                // Initializing constructor
                public Poll(String sName, com.tangosol.coherence.Component compParent, boolean fInit)
                    {
                    super(sName, compParent, false);
                    
                    if (fInit)
                        {
                        __init();
                        }
                    }
                
                // Main initializer
                public void __init()
                    {
                    // private initialization
                    __initPrivate();
                    
                    
                    // signal the end of the initialization
                    set_Constructed(true);
                    }
                
                // Private initializer
                protected void __initPrivate()
                    {
                    
                    super.__initPrivate();
                    }
                
                //++ getter for static property _Instance
                /**
                 * Getter for property _Instance.<p>
                * Auto generated
                 */
                public static com.tangosol.coherence.Component get_Instance()
                    {
                    return new com.tangosol.coherence.component.net.Cluster.TransportService.MemberWelcomeRequest.Poll();
                    }
                
                //++ getter for static property _CLASS
                /**
                 * Getter for property _CLASS.<p>
                * Property with auto-generated accessor that returns the Class
                * object for a given component.
                 */
                public static Class get_CLASS()
                    {
                    Class clz;
                    try
                        {
                        clz = Class.forName("com.tangosol.coherence/component/net/Cluster$TransportService$MemberWelcomeRequest$Poll".replace('/', '.'));
                        }
                    catch (ClassNotFoundException e)
                        {
                        throw new NoClassDefFoundError(e.getMessage());
                        }
                    return clz;
                    }
                
                //++ getter for autogen property _Module
                /**
                 * This is an auto-generated method that returns the global
                * [design time] parent component.
                * 
                * Note: the class generator will ignore any custom
                * implementation for this behavior.
                 */
                private com.tangosol.coherence.Component get_Module()
                    {
                    return this.get_Parent().get_Parent().get_Parent();
                    }
                }
            }

        // ---- class: com.tangosol.coherence.component.net.Cluster$TransportService$MemberWelcomeRequestTask
        
        /**
         * Task to run MemberWelcomeRequest.
         */
        @SuppressWarnings({"deprecation", "rawtypes", "unused", "unchecked", "ConstantConditions", "DuplicatedCode", "ForLoopReplaceableByForEach", "IfCanBeSwitch", "RedundantArrayCreation", "RedundantSuppression", "SameParameterValue", "TryFinallyCanBeTryWithResources", "TryWithIdenticalCatches", "UnnecessaryBoxing", "UnnecessaryUnboxing", "UnusedAssignment"})
        public static class MemberWelcomeRequestTask
                extends    com.tangosol.coherence.component.util.daemon.queueProcessor.service.Grid.MemberWelcomeRequestTask
            {
            // ---- Fields declarations ----
            
            // Default constructor
            public MemberWelcomeRequestTask()
                {
                this(null, null, true);
                }
            
            // Initializing constructor
            public MemberWelcomeRequestTask(String sName, com.tangosol.coherence.Component compParent, boolean fInit)
                {
                super(sName, compParent, false);
                
                if (fInit)
                    {
                    __init();
                    }
                }
            
            // Main initializer
            public void __init()
                {
                // private initialization
                __initPrivate();
                
                
                // signal the end of the initialization
                set_Constructed(true);
                }
            
            // Private initializer
            protected void __initPrivate()
                {
                
                super.__initPrivate();
                }
            
            //++ getter for static property _Instance
            /**
             * Getter for property _Instance.<p>
            * Auto generated
             */
            public static com.tangosol.coherence.Component get_Instance()
                {
                return new com.tangosol.coherence.component.net.Cluster.TransportService.MemberWelcomeRequestTask();
                }
            
            //++ getter for static property _CLASS
            /**
             * Getter for property _CLASS.<p>
            * Property with auto-generated accessor that returns the Class
            * object for a given component.
             */
            public static Class get_CLASS()
                {
                Class clz;
                try
                    {
                    clz = Class.forName("com.tangosol.coherence/component/net/Cluster$TransportService$MemberWelcomeRequestTask".replace('/', '.'));
                    }
                catch (ClassNotFoundException e)
                    {
                    throw new NoClassDefFoundError(e.getMessage());
                    }
                return clz;
                }
            
            //++ getter for autogen property _Module
            /**
             * This is an auto-generated method that returns the global [design
            * time] parent component.
            * 
            * Note: the class generator will ignore any custom implementation
            * for this behavior.
             */
            private com.tangosol.coherence.Component get_Module()
                {
                return this.get_Parent().get_Parent();
                }
            }

        // ---- class: com.tangosol.coherence.component.net.Cluster$TransportService$MessageHandler
        
        /**
         * MessageHandler is an adapter between the Grid services and the
         * MessageBus.
         * 
         * The MessageHandler may be used in one of two modes:
         * 
         * Service dedicated mode.  In this mode the Handler resides within a
         * service and is used only for exchanging messages with other members
         * of the same service.
         * 
         * Shared mode.  In this mode the Handler resides on the
         * TransportService and other services make use of it via
         * Service.getMessagePublisher().  In this mode it becomes very
         * important to differentiate between
         * handler.getService().getMemberSet() and
         * msg.getService().getMemberSet(), as the former indicates who you can
         * send to on this transport, while the later indicates who you can
         * send to on any transport.
         */
        @SuppressWarnings({"deprecation", "rawtypes", "unused", "unchecked", "ConstantConditions", "DuplicatedCode", "ForLoopReplaceableByForEach", "IfCanBeSwitch", "RedundantArrayCreation", "RedundantSuppression", "SameParameterValue", "TryFinallyCanBeTryWithResources", "TryWithIdenticalCatches", "UnnecessaryBoxing", "UnnecessaryUnboxing", "UnusedAssignment"})
        public static class MessageHandler
                extends    com.tangosol.coherence.component.util.daemon.queueProcessor.service.grid.TransportService.MessageHandler
            {
            // ---- Fields declarations ----
            
            /**
             * Property ClusterService
             *
             */
            private Cluster.ClusterService __m_ClusterService;
            private static com.tangosol.util.ListMap __mapChildren;
            
            // Static initializer
            static
                {
                __initStatic();
                }
            
            // Default static initializer
            private static void __initStatic()
                {
                // register child classes
                __mapChildren = new com.tangosol.util.ListMap();
                __mapChildren.put("Connection", Cluster.TransportService.MessageHandler.Connection.get_CLASS());
                }
            
            // Default constructor
            public MessageHandler()
                {
                this(null, null, true);
                }
            
            // Initializing constructor
            public MessageHandler(String sName, com.tangosol.coherence.Component compParent, boolean fInit)
                {
                super(sName, compParent, false);
                
                if (fInit)
                    {
                    __init();
                    }
                }
            
            // Main initializer
            public void __init()
                {
                // private initialization
                __initPrivate();
                
                // state initialization: public and protected properties
                try
                    {
                    setConnectionMap(new com.tangosol.util.SafeHashMap());
                    setGlobalBacklogMonitor(new java.lang.Object());
                    setStatsBusBytesOutBuffered(new java.util.concurrent.atomic.AtomicLong());
                    setStatsDrainOverflowDuration(new java.util.concurrent.atomic.LongAdder());
                    }
                catch (java.lang.Exception e)
                    {
                    // re-throw as a runtime exception
                    throw new com.tangosol.util.WrapperException(e);
                    }
                
                // containment initialization: children
                _addChild(new Cluster.TransportService.MessageHandler.EventCollector("EventCollector", this, true), "EventCollector");
                
                // signal the end of the initialization
                set_Constructed(true);
                }
            
            // Private initializer
            protected void __initPrivate()
                {
                
                super.__initPrivate();
                }
            
            //++ getter for static property _Instance
            /**
             * Getter for property _Instance.<p>
            * Auto generated
             */
            public static com.tangosol.coherence.Component get_Instance()
                {
                return new com.tangosol.coherence.component.net.Cluster.TransportService.MessageHandler();
                }
            
            //++ getter for static property _CLASS
            /**
             * Getter for property _CLASS.<p>
            * Property with auto-generated accessor that returns the Class
            * object for a given component.
             */
            public static Class get_CLASS()
                {
                Class clz;
                try
                    {
                    clz = Class.forName("com.tangosol.coherence/component/net/Cluster$TransportService$MessageHandler".replace('/', '.'));
                    }
                catch (ClassNotFoundException e)
                    {
                    throw new NoClassDefFoundError(e.getMessage());
                    }
                return clz;
                }
            
            //++ getter for autogen property _Module
            /**
             * This is an auto-generated method that returns the global [design
            * time] parent component.
            * 
            * Note: the class generator will ignore any custom implementation
            * for this behavior.
             */
            private com.tangosol.coherence.Component get_Module()
                {
                return this.get_Parent().get_Parent();
                }
            
            //++ getter for autogen property _ChildClasses
            /**
             * This is an auto-generated method that returns the map of design
            * time [static] children.
            * 
            * Note: the class generator will ignore any custom implementation
            * for this behavior.
             */
            protected java.util.Map get_ChildClasses()
                {
                return __mapChildren;
                }
            
            // Declared at the super level
            public int compareImportance(Member member)
                {
                return getClusterService().compareImportance(member);
                }
            
            // Accessor for the property "ClusterService"
            /**
             * Getter for property ClusterService.<p>
             */
            public Cluster.ClusterService getClusterService()
                {
                return __m_ClusterService;
                }
            
            // Declared at the super level
            public com.tangosol.coherence.component.util.daemon.queueProcessor.service.Grid getServiceById(int nSvcId)
                {
                return getClusterService().getService(nSvcId);
                }
            
            public void halt()
                {
                getMessageBus().close();
                }
            
            // Declared at the super level
            /**
             * The "component has been initialized" method-notification called
            * out of setConstructed() for the topmost component and that in
            * turn notifies all the children.
            * 
            * This notification gets called before the control returns back to
            * this component instantiator (using <code>new Component.X()</code>
            * or <code>_newInstance(sName)</code>) and on the same thread. In
            * addition, visual components have a "posted" notification
            * <code>onInitUI</code> that is called after (or at the same time
            * as) the control returns back to the instantiator and possibly on
            * a different thread.
             */
            public void onInit()
                {
                super.onInit();
                
                setClusterService((Cluster.ClusterService) ((Cluster) get_Module())._findChild("ClusterService"));
                }
            
            // Accessor for the property "ClusterService"
            /**
             * Setter for property ClusterService.<p>
             */
            public void setClusterService(Cluster.ClusterService serviceCluster)
                {
                __m_ClusterService = serviceCluster;
                }

            // ---- class: com.tangosol.coherence.component.net.Cluster$TransportService$MessageHandler$Connection
            
            /**
             * Information about a connection to a peer.
             */
            @SuppressWarnings({"deprecation", "rawtypes", "unused", "unchecked", "ConstantConditions", "DuplicatedCode", "ForLoopReplaceableByForEach", "IfCanBeSwitch", "RedundantArrayCreation", "RedundantSuppression", "SameParameterValue", "TryFinallyCanBeTryWithResources", "TryWithIdenticalCatches", "UnnecessaryBoxing", "UnnecessaryUnboxing", "UnusedAssignment"})
            public static class Connection
                    extends    com.tangosol.coherence.component.util.daemon.queueProcessor.service.grid.TransportService.MessageHandler.Connection
                {
                // ---- Fields declarations ----
                
                // Default constructor
                public Connection()
                    {
                    this(null, null, true);
                    }
                
                // Initializing constructor
                public Connection(String sName, com.tangosol.coherence.Component compParent, boolean fInit)
                    {
                    super(sName, compParent, false);
                    
                    if (fInit)
                        {
                        __init();
                        }
                    }
                
                // Main initializer
                public void __init()
                    {
                    // private initialization
                    __initPrivate();
                    
                    
                    // signal the end of the initialization
                    set_Constructed(true);
                    }
                
                // Private initializer
                protected void __initPrivate()
                    {
                    
                    super.__initPrivate();
                    }
                
                //++ getter for static property _Instance
                /**
                 * Getter for property _Instance.<p>
                * Auto generated
                 */
                public static com.tangosol.coherence.Component get_Instance()
                    {
                    return new com.tangosol.coherence.component.net.Cluster.TransportService.MessageHandler.Connection();
                    }
                
                //++ getter for static property _CLASS
                /**
                 * Getter for property _CLASS.<p>
                * Property with auto-generated accessor that returns the Class
                * object for a given component.
                 */
                public static Class get_CLASS()
                    {
                    Class clz;
                    try
                        {
                        clz = Class.forName("com.tangosol.coherence/component/net/Cluster$TransportService$MessageHandler$Connection".replace('/', '.'));
                        }
                    catch (ClassNotFoundException e)
                        {
                        throw new NoClassDefFoundError(e.getMessage());
                        }
                    return clz;
                    }
                
                //++ getter for autogen property _Module
                /**
                 * This is an auto-generated method that returns the global
                * [design time] parent component.
                * 
                * Note: the class generator will ignore any custom
                * implementation for this behavior.
                 */
                private com.tangosol.coherence.Component get_Module()
                    {
                    return this.get_Parent().get_Parent().get_Parent();
                    }
                }

            // ---- class: com.tangosol.coherence.component.net.Cluster$TransportService$MessageHandler$EventCollector
            
            /**
             * The Collector implementation used by the MessageHandler.
             */
            @SuppressWarnings({"deprecation", "rawtypes", "unused", "unchecked", "ConstantConditions", "DuplicatedCode", "ForLoopReplaceableByForEach", "IfCanBeSwitch", "RedundantArrayCreation", "RedundantSuppression", "SameParameterValue", "TryFinallyCanBeTryWithResources", "TryWithIdenticalCatches", "UnnecessaryBoxing", "UnnecessaryUnboxing", "UnusedAssignment"})
            public static class EventCollector
                    extends    com.tangosol.coherence.component.util.daemon.queueProcessor.service.grid.TransportService.MessageHandler.EventCollector
                {
                // ---- Fields declarations ----
                
                // Default constructor
                public EventCollector()
                    {
                    this(null, null, true);
                    }
                
                // Initializing constructor
                public EventCollector(String sName, com.tangosol.coherence.Component compParent, boolean fInit)
                    {
                    super(sName, compParent, false);
                    
                    if (fInit)
                        {
                        __init();
                        }
                    }
                
                // Main initializer
                public void __init()
                    {
                    // private initialization
                    __initPrivate();
                    
                    
                    // signal the end of the initialization
                    set_Constructed(true);
                    }
                
                // Private initializer
                protected void __initPrivate()
                    {
                    
                    super.__initPrivate();
                    }
                
                //++ getter for static property _Instance
                /**
                 * Getter for property _Instance.<p>
                * Auto generated
                 */
                public static com.tangosol.coherence.Component get_Instance()
                    {
                    return new com.tangosol.coherence.component.net.Cluster.TransportService.MessageHandler.EventCollector();
                    }
                
                //++ getter for static property _CLASS
                /**
                 * Getter for property _CLASS.<p>
                * Property with auto-generated accessor that returns the Class
                * object for a given component.
                 */
                public static Class get_CLASS()
                    {
                    Class clz;
                    try
                        {
                        clz = Class.forName("com.tangosol.coherence/component/net/Cluster$TransportService$MessageHandler$EventCollector".replace('/', '.'));
                        }
                    catch (ClassNotFoundException e)
                        {
                        throw new NoClassDefFoundError(e.getMessage());
                        }
                    return clz;
                    }
                
                //++ getter for autogen property _Module
                /**
                 * This is an auto-generated method that returns the global
                * [design time] parent component.
                * 
                * Note: the class generator will ignore any custom
                * implementation for this behavior.
                 */
                private com.tangosol.coherence.Component get_Module()
                    {
                    return this.get_Parent().get_Parent().get_Parent();
                    }
                }
            }

        // ---- class: com.tangosol.coherence.component.net.Cluster$TransportService$NotifyConnectionClose
        
        /**
         * This internal Message is sent to all member aware services when an
         * extend client connection is closed or lost in ProxyService. The
         * NotifyMember refers to the extend client member leaving the
         * ProxyService.
         * 
         * Attributes:
         *     NotifyMember
         */
        @SuppressWarnings({"deprecation", "rawtypes", "unused", "unchecked", "ConstantConditions", "DuplicatedCode", "ForLoopReplaceableByForEach", "IfCanBeSwitch", "RedundantArrayCreation", "RedundantSuppression", "SameParameterValue", "TryFinallyCanBeTryWithResources", "TryWithIdenticalCatches", "UnnecessaryBoxing", "UnnecessaryUnboxing", "UnusedAssignment"})
        public static class NotifyConnectionClose
                extends    com.tangosol.coherence.component.util.daemon.queueProcessor.service.Grid.NotifyConnectionClose
            {
            // ---- Fields declarations ----
            
            // Default constructor
            public NotifyConnectionClose()
                {
                this(null, null, true);
                }
            
            // Initializing constructor
            public NotifyConnectionClose(String sName, com.tangosol.coherence.Component compParent, boolean fInit)
                {
                super(sName, compParent, false);
                
                if (fInit)
                    {
                    __init();
                    }
                }
            
            // Main initializer
            public void __init()
                {
                // private initialization
                __initPrivate();
                
                // state initialization: public and protected properties
                try
                    {
                    setMessageType(-24);
                    }
                catch (java.lang.Exception e)
                    {
                    // re-throw as a runtime exception
                    throw new com.tangosol.util.WrapperException(e);
                    }
                
                // signal the end of the initialization
                set_Constructed(true);
                }
            
            // Private initializer
            protected void __initPrivate()
                {
                
                super.__initPrivate();
                }
            
            //++ getter for static property _Instance
            /**
             * Getter for property _Instance.<p>
            * Auto generated
             */
            public static com.tangosol.coherence.Component get_Instance()
                {
                return new com.tangosol.coherence.component.net.Cluster.TransportService.NotifyConnectionClose();
                }
            
            //++ getter for static property _CLASS
            /**
             * Getter for property _CLASS.<p>
            * Property with auto-generated accessor that returns the Class
            * object for a given component.
             */
            public static Class get_CLASS()
                {
                Class clz;
                try
                    {
                    clz = Class.forName("com.tangosol.coherence/component/net/Cluster$TransportService$NotifyConnectionClose".replace('/', '.'));
                    }
                catch (ClassNotFoundException e)
                    {
                    throw new NoClassDefFoundError(e.getMessage());
                    }
                return clz;
                }
            
            //++ getter for autogen property _Module
            /**
             * This is an auto-generated method that returns the global [design
            * time] parent component.
            * 
            * Note: the class generator will ignore any custom implementation
            * for this behavior.
             */
            private com.tangosol.coherence.Component get_Module()
                {
                return this.get_Parent().get_Parent();
                }
            }

        // ---- class: com.tangosol.coherence.component.net.Cluster$TransportService$NotifyConnectionOpen
        
        /**
         * This internal Message is sent to all member aware services  when an
         * extend client opens a connection in ProxyService. The NotifyMember
         * refers to the extend client member.
         * 
         * Attributes:
         *     NotifyMember
         */
        @SuppressWarnings({"deprecation", "rawtypes", "unused", "unchecked", "ConstantConditions", "DuplicatedCode", "ForLoopReplaceableByForEach", "IfCanBeSwitch", "RedundantArrayCreation", "RedundantSuppression", "SameParameterValue", "TryFinallyCanBeTryWithResources", "TryWithIdenticalCatches", "UnnecessaryBoxing", "UnnecessaryUnboxing", "UnusedAssignment"})
        public static class NotifyConnectionOpen
                extends    com.tangosol.coherence.component.util.daemon.queueProcessor.service.Grid.NotifyConnectionOpen
            {
            // ---- Fields declarations ----
            
            // Default constructor
            public NotifyConnectionOpen()
                {
                this(null, null, true);
                }
            
            // Initializing constructor
            public NotifyConnectionOpen(String sName, com.tangosol.coherence.Component compParent, boolean fInit)
                {
                super(sName, compParent, false);
                
                if (fInit)
                    {
                    __init();
                    }
                }
            
            // Main initializer
            public void __init()
                {
                // private initialization
                __initPrivate();
                
                // state initialization: public and protected properties
                try
                    {
                    setMessageType(-23);
                    }
                catch (java.lang.Exception e)
                    {
                    // re-throw as a runtime exception
                    throw new com.tangosol.util.WrapperException(e);
                    }
                
                // signal the end of the initialization
                set_Constructed(true);
                }
            
            // Private initializer
            protected void __initPrivate()
                {
                
                super.__initPrivate();
                }
            
            //++ getter for static property _Instance
            /**
             * Getter for property _Instance.<p>
            * Auto generated
             */
            public static com.tangosol.coherence.Component get_Instance()
                {
                return new com.tangosol.coherence.component.net.Cluster.TransportService.NotifyConnectionOpen();
                }
            
            //++ getter for static property _CLASS
            /**
             * Getter for property _CLASS.<p>
            * Property with auto-generated accessor that returns the Class
            * object for a given component.
             */
            public static Class get_CLASS()
                {
                Class clz;
                try
                    {
                    clz = Class.forName("com.tangosol.coherence/component/net/Cluster$TransportService$NotifyConnectionOpen".replace('/', '.'));
                    }
                catch (ClassNotFoundException e)
                    {
                    throw new NoClassDefFoundError(e.getMessage());
                    }
                return clz;
                }
            
            //++ getter for autogen property _Module
            /**
             * This is an auto-generated method that returns the global [design
            * time] parent component.
            * 
            * Note: the class generator will ignore any custom implementation
            * for this behavior.
             */
            private com.tangosol.coherence.Component get_Module()
                {
                return this.get_Parent().get_Parent();
                }
            }

        // ---- class: com.tangosol.coherence.component.net.Cluster$TransportService$NotifyMemberJoined
        
        /**
         * This internal Message is sent to all services when a new Member
         * joins the cluster.
         * 
         * Attributes:
         *     NotifyMember
         */
        @SuppressWarnings({"deprecation", "rawtypes", "unused", "unchecked", "ConstantConditions", "DuplicatedCode", "ForLoopReplaceableByForEach", "IfCanBeSwitch", "RedundantArrayCreation", "RedundantSuppression", "SameParameterValue", "TryFinallyCanBeTryWithResources", "TryWithIdenticalCatches", "UnnecessaryBoxing", "UnnecessaryUnboxing", "UnusedAssignment"})
        public static class NotifyMemberJoined
                extends    com.tangosol.coherence.component.util.daemon.queueProcessor.service.Grid.NotifyMemberJoined
            {
            // ---- Fields declarations ----
            
            // Default constructor
            public NotifyMemberJoined()
                {
                this(null, null, true);
                }
            
            // Initializing constructor
            public NotifyMemberJoined(String sName, com.tangosol.coherence.Component compParent, boolean fInit)
                {
                super(sName, compParent, false);
                
                if (fInit)
                    {
                    __init();
                    }
                }
            
            // Main initializer
            public void __init()
                {
                // private initialization
                __initPrivate();
                
                // state initialization: public and protected properties
                try
                    {
                    setMessageType(-4);
                    }
                catch (java.lang.Exception e)
                    {
                    // re-throw as a runtime exception
                    throw new com.tangosol.util.WrapperException(e);
                    }
                
                // signal the end of the initialization
                set_Constructed(true);
                }
            
            // Private initializer
            protected void __initPrivate()
                {
                
                super.__initPrivate();
                }
            
            //++ getter for static property _Instance
            /**
             * Getter for property _Instance.<p>
            * Auto generated
             */
            public static com.tangosol.coherence.Component get_Instance()
                {
                return new com.tangosol.coherence.component.net.Cluster.TransportService.NotifyMemberJoined();
                }
            
            //++ getter for static property _CLASS
            /**
             * Getter for property _CLASS.<p>
            * Property with auto-generated accessor that returns the Class
            * object for a given component.
             */
            public static Class get_CLASS()
                {
                Class clz;
                try
                    {
                    clz = Class.forName("com.tangosol.coherence/component/net/Cluster$TransportService$NotifyMemberJoined".replace('/', '.'));
                    }
                catch (ClassNotFoundException e)
                    {
                    throw new NoClassDefFoundError(e.getMessage());
                    }
                return clz;
                }
            
            //++ getter for autogen property _Module
            /**
             * This is an auto-generated method that returns the global [design
            * time] parent component.
            * 
            * Note: the class generator will ignore any custom implementation
            * for this behavior.
             */
            private com.tangosol.coherence.Component get_Module()
                {
                return this.get_Parent().get_Parent();
                }
            }

        // ---- class: com.tangosol.coherence.component.net.Cluster$TransportService$NotifyMemberLeaving
        
        /**
         * This internal Message is sent to all services when a Member
         * announces its impending departure from the cluster.
         * 
         * Attributes:
         *     NotifyMember
         */
        @SuppressWarnings({"deprecation", "rawtypes", "unused", "unchecked", "ConstantConditions", "DuplicatedCode", "ForLoopReplaceableByForEach", "IfCanBeSwitch", "RedundantArrayCreation", "RedundantSuppression", "SameParameterValue", "TryFinallyCanBeTryWithResources", "TryWithIdenticalCatches", "UnnecessaryBoxing", "UnnecessaryUnboxing", "UnusedAssignment"})
        public static class NotifyMemberLeaving
                extends    com.tangosol.coherence.component.util.daemon.queueProcessor.service.Grid.NotifyMemberLeaving
            {
            // ---- Fields declarations ----
            
            // Default constructor
            public NotifyMemberLeaving()
                {
                this(null, null, true);
                }
            
            // Initializing constructor
            public NotifyMemberLeaving(String sName, com.tangosol.coherence.Component compParent, boolean fInit)
                {
                super(sName, compParent, false);
                
                if (fInit)
                    {
                    __init();
                    }
                }
            
            // Main initializer
            public void __init()
                {
                // private initialization
                __initPrivate();
                
                // state initialization: public and protected properties
                try
                    {
                    setMessageType(-5);
                    }
                catch (java.lang.Exception e)
                    {
                    // re-throw as a runtime exception
                    throw new com.tangosol.util.WrapperException(e);
                    }
                
                // signal the end of the initialization
                set_Constructed(true);
                }
            
            // Private initializer
            protected void __initPrivate()
                {
                
                super.__initPrivate();
                }
            
            //++ getter for static property _Instance
            /**
             * Getter for property _Instance.<p>
            * Auto generated
             */
            public static com.tangosol.coherence.Component get_Instance()
                {
                return new com.tangosol.coherence.component.net.Cluster.TransportService.NotifyMemberLeaving();
                }
            
            //++ getter for static property _CLASS
            /**
             * Getter for property _CLASS.<p>
            * Property with auto-generated accessor that returns the Class
            * object for a given component.
             */
            public static Class get_CLASS()
                {
                Class clz;
                try
                    {
                    clz = Class.forName("com.tangosol.coherence/component/net/Cluster$TransportService$NotifyMemberLeaving".replace('/', '.'));
                    }
                catch (ClassNotFoundException e)
                    {
                    throw new NoClassDefFoundError(e.getMessage());
                    }
                return clz;
                }
            
            //++ getter for autogen property _Module
            /**
             * This is an auto-generated method that returns the global [design
            * time] parent component.
            * 
            * Note: the class generator will ignore any custom implementation
            * for this behavior.
             */
            private com.tangosol.coherence.Component get_Module()
                {
                return this.get_Parent().get_Parent();
                }
            }

        // ---- class: com.tangosol.coherence.component.net.Cluster$TransportService$NotifyMemberLeft
        
        /**
         * This internal Message is sent to all services when a Member has
         * departed (normally or not) the cluster.
         * 
         * Attributes:
         *     NotifyMember
         */
        @SuppressWarnings({"deprecation", "rawtypes", "unused", "unchecked", "ConstantConditions", "DuplicatedCode", "ForLoopReplaceableByForEach", "IfCanBeSwitch", "RedundantArrayCreation", "RedundantSuppression", "SameParameterValue", "TryFinallyCanBeTryWithResources", "TryWithIdenticalCatches", "UnnecessaryBoxing", "UnnecessaryUnboxing", "UnusedAssignment"})
        public static class NotifyMemberLeft
                extends    com.tangosol.coherence.component.util.daemon.queueProcessor.service.Grid.NotifyMemberLeft
            {
            // ---- Fields declarations ----
            
            // Default constructor
            public NotifyMemberLeft()
                {
                this(null, null, true);
                }
            
            // Initializing constructor
            public NotifyMemberLeft(String sName, com.tangosol.coherence.Component compParent, boolean fInit)
                {
                super(sName, compParent, false);
                
                if (fInit)
                    {
                    __init();
                    }
                }
            
            // Main initializer
            public void __init()
                {
                // private initialization
                __initPrivate();
                
                // state initialization: public and protected properties
                try
                    {
                    setMessageType(-6);
                    }
                catch (java.lang.Exception e)
                    {
                    // re-throw as a runtime exception
                    throw new com.tangosol.util.WrapperException(e);
                    }
                
                // signal the end of the initialization
                set_Constructed(true);
                }
            
            // Private initializer
            protected void __initPrivate()
                {
                
                super.__initPrivate();
                }
            
            //++ getter for static property _Instance
            /**
             * Getter for property _Instance.<p>
            * Auto generated
             */
            public static com.tangosol.coherence.Component get_Instance()
                {
                return new com.tangosol.coherence.component.net.Cluster.TransportService.NotifyMemberLeft();
                }
            
            //++ getter for static property _CLASS
            /**
             * Getter for property _CLASS.<p>
            * Property with auto-generated accessor that returns the Class
            * object for a given component.
             */
            public static Class get_CLASS()
                {
                Class clz;
                try
                    {
                    clz = Class.forName("com.tangosol.coherence/component/net/Cluster$TransportService$NotifyMemberLeft".replace('/', '.'));
                    }
                catch (ClassNotFoundException e)
                    {
                    throw new NoClassDefFoundError(e.getMessage());
                    }
                return clz;
                }
            
            //++ getter for autogen property _Module
            /**
             * This is an auto-generated method that returns the global [design
            * time] parent component.
            * 
            * Note: the class generator will ignore any custom implementation
            * for this behavior.
             */
            private com.tangosol.coherence.Component get_Module()
                {
                return this.get_Parent().get_Parent();
                }
            }

        // ---- class: com.tangosol.coherence.component.net.Cluster$TransportService$NotifyMessageReceipt
        
        /**
         * This internal Message is sent to a service to inform it that a
         * Message with the return-receipt-requested option set was delivered
         * (or that the Message was at least partially undeliverable because
         * one or more Members to which it should have been delivered are
         * dead).  To receive this notification the message of interest must
         * have reached a state where it is free for processing by all living
         * recipients, i.e. they've also acknowledged all previous messages
         * addressed to them by this member, such that message ordering will
         * not keep the message from being processed.
         * 
         * Attributes:
         *     NotifyMessage
         */
        @SuppressWarnings({"deprecation", "rawtypes", "unused", "unchecked", "ConstantConditions", "DuplicatedCode", "ForLoopReplaceableByForEach", "IfCanBeSwitch", "RedundantArrayCreation", "RedundantSuppression", "SameParameterValue", "TryFinallyCanBeTryWithResources", "TryWithIdenticalCatches", "UnnecessaryBoxing", "UnnecessaryUnboxing", "UnusedAssignment"})
        public static class NotifyMessageReceipt
                extends    com.tangosol.coherence.component.util.daemon.queueProcessor.service.Grid.NotifyMessageReceipt
            {
            // ---- Fields declarations ----
            
            // Default constructor
            public NotifyMessageReceipt()
                {
                this(null, null, true);
                }
            
            // Initializing constructor
            public NotifyMessageReceipt(String sName, com.tangosol.coherence.Component compParent, boolean fInit)
                {
                super(sName, compParent, false);
                
                if (fInit)
                    {
                    __init();
                    }
                }
            
            // Main initializer
            public void __init()
                {
                // private initialization
                __initPrivate();
                
                // state initialization: public and protected properties
                try
                    {
                    setMessageType(-7);
                    }
                catch (java.lang.Exception e)
                    {
                    // re-throw as a runtime exception
                    throw new com.tangosol.util.WrapperException(e);
                    }
                
                // signal the end of the initialization
                set_Constructed(true);
                }
            
            // Private initializer
            protected void __initPrivate()
                {
                
                super.__initPrivate();
                }
            
            //++ getter for static property _Instance
            /**
             * Getter for property _Instance.<p>
            * Auto generated
             */
            public static com.tangosol.coherence.Component get_Instance()
                {
                return new com.tangosol.coherence.component.net.Cluster.TransportService.NotifyMessageReceipt();
                }
            
            //++ getter for static property _CLASS
            /**
             * Getter for property _CLASS.<p>
            * Property with auto-generated accessor that returns the Class
            * object for a given component.
             */
            public static Class get_CLASS()
                {
                Class clz;
                try
                    {
                    clz = Class.forName("com.tangosol.coherence/component/net/Cluster$TransportService$NotifyMessageReceipt".replace('/', '.'));
                    }
                catch (ClassNotFoundException e)
                    {
                    throw new NoClassDefFoundError(e.getMessage());
                    }
                return clz;
                }
            
            //++ getter for autogen property _Module
            /**
             * This is an auto-generated method that returns the global [design
            * time] parent component.
            * 
            * Note: the class generator will ignore any custom implementation
            * for this behavior.
             */
            private com.tangosol.coherence.Component get_Module()
                {
                return this.get_Parent().get_Parent();
                }
            }

        // ---- class: com.tangosol.coherence.component.net.Cluster$TransportService$NotifyPollClosed
        
        /**
         * This internal Message is sent to a service to inform it that an
         * outstanding Poll for a departed member, or one which was sent
         * without any destination members.
         * 
         * Attributes:
         *     NotifyMember
         *     NotifyPoll
         */
        @SuppressWarnings({"deprecation", "rawtypes", "unused", "unchecked", "ConstantConditions", "DuplicatedCode", "ForLoopReplaceableByForEach", "IfCanBeSwitch", "RedundantArrayCreation", "RedundantSuppression", "SameParameterValue", "TryFinallyCanBeTryWithResources", "TryWithIdenticalCatches", "UnnecessaryBoxing", "UnnecessaryUnboxing", "UnusedAssignment"})
        public static class NotifyPollClosed
                extends    com.tangosol.coherence.component.util.daemon.queueProcessor.service.Grid.NotifyPollClosed
            {
            // ---- Fields declarations ----
            
            // Default constructor
            public NotifyPollClosed()
                {
                this(null, null, true);
                }
            
            // Initializing constructor
            public NotifyPollClosed(String sName, com.tangosol.coherence.Component compParent, boolean fInit)
                {
                super(sName, compParent, false);
                
                if (fInit)
                    {
                    __init();
                    }
                }
            
            // Main initializer
            public void __init()
                {
                // private initialization
                __initPrivate();
                
                // state initialization: public and protected properties
                try
                    {
                    setMessageType(-8);
                    }
                catch (java.lang.Exception e)
                    {
                    // re-throw as a runtime exception
                    throw new com.tangosol.util.WrapperException(e);
                    }
                
                // signal the end of the initialization
                set_Constructed(true);
                }
            
            // Private initializer
            protected void __initPrivate()
                {
                
                super.__initPrivate();
                }
            
            //++ getter for static property _Instance
            /**
             * Getter for property _Instance.<p>
            * Auto generated
             */
            public static com.tangosol.coherence.Component get_Instance()
                {
                return new com.tangosol.coherence.component.net.Cluster.TransportService.NotifyPollClosed();
                }
            
            //++ getter for static property _CLASS
            /**
             * Getter for property _CLASS.<p>
            * Property with auto-generated accessor that returns the Class
            * object for a given component.
             */
            public static Class get_CLASS()
                {
                Class clz;
                try
                    {
                    clz = Class.forName("com.tangosol.coherence/component/net/Cluster$TransportService$NotifyPollClosed".replace('/', '.'));
                    }
                catch (ClassNotFoundException e)
                    {
                    throw new NoClassDefFoundError(e.getMessage());
                    }
                return clz;
                }
            
            //++ getter for autogen property _Module
            /**
             * This is an auto-generated method that returns the global [design
            * time] parent component.
            * 
            * Note: the class generator will ignore any custom implementation
            * for this behavior.
             */
            private com.tangosol.coherence.Component get_Module()
                {
                return this.get_Parent().get_Parent();
                }
            }

        // ---- class: com.tangosol.coherence.component.net.Cluster$TransportService$NotifyResponse
        
        /**
         * Some of the internal messages (e.g. NotifyServiceJoining) are used
         * as the inter-service request-response communications between the
         * ClusterService and other services. This message serves as a generic
         * response.
         * 
         * Unlike the Response, this message is an internal one and would never
         * be deferred.
         * 
         * Attributes:
         *     Result
         * 
         * @since Coherence 3.7.1
         */
        @SuppressWarnings({"deprecation", "rawtypes", "unused", "unchecked", "ConstantConditions", "DuplicatedCode", "ForLoopReplaceableByForEach", "IfCanBeSwitch", "RedundantArrayCreation", "RedundantSuppression", "SameParameterValue", "TryFinallyCanBeTryWithResources", "TryWithIdenticalCatches", "UnnecessaryBoxing", "UnnecessaryUnboxing", "UnusedAssignment"})
        public static class NotifyResponse
                extends    com.tangosol.coherence.component.util.daemon.queueProcessor.service.Grid.NotifyResponse
            {
            // ---- Fields declarations ----
            
            // Default constructor
            public NotifyResponse()
                {
                this(null, null, true);
                }
            
            // Initializing constructor
            public NotifyResponse(String sName, com.tangosol.coherence.Component compParent, boolean fInit)
                {
                super(sName, compParent, false);
                
                if (fInit)
                    {
                    __init();
                    }
                }
            
            // Main initializer
            public void __init()
                {
                // private initialization
                __initPrivate();
                
                // state initialization: public and protected properties
                try
                    {
                    setMessageType(-20);
                    }
                catch (java.lang.Exception e)
                    {
                    // re-throw as a runtime exception
                    throw new com.tangosol.util.WrapperException(e);
                    }
                
                // signal the end of the initialization
                set_Constructed(true);
                }
            
            // Private initializer
            protected void __initPrivate()
                {
                
                super.__initPrivate();
                }
            
            //++ getter for static property _Instance
            /**
             * Getter for property _Instance.<p>
            * Auto generated
             */
            public static com.tangosol.coherence.Component get_Instance()
                {
                return new com.tangosol.coherence.component.net.Cluster.TransportService.NotifyResponse();
                }
            
            //++ getter for static property _CLASS
            /**
             * Getter for property _CLASS.<p>
            * Property with auto-generated accessor that returns the Class
            * object for a given component.
             */
            public static Class get_CLASS()
                {
                Class clz;
                try
                    {
                    clz = Class.forName("com.tangosol.coherence/component/net/Cluster$TransportService$NotifyResponse".replace('/', '.'));
                    }
                catch (ClassNotFoundException e)
                    {
                    throw new NoClassDefFoundError(e.getMessage());
                    }
                return clz;
                }
            
            //++ getter for autogen property _Module
            /**
             * This is an auto-generated method that returns the global [design
            * time] parent component.
            * 
            * Note: the class generator will ignore any custom implementation
            * for this behavior.
             */
            private com.tangosol.coherence.Component get_Module()
                {
                return this.get_Parent().get_Parent();
                }
            }

        // ---- class: com.tangosol.coherence.component.net.Cluster$TransportService$NotifyServiceAnnounced
        
        /**
         * This internal Message is sent to all services when a Member
         * announces a Service that has not previously been available.
         * 
         * Attributes:
         *     NotifyServiceName
         */
        @SuppressWarnings({"deprecation", "rawtypes", "unused", "unchecked", "ConstantConditions", "DuplicatedCode", "ForLoopReplaceableByForEach", "IfCanBeSwitch", "RedundantArrayCreation", "RedundantSuppression", "SameParameterValue", "TryFinallyCanBeTryWithResources", "TryWithIdenticalCatches", "UnnecessaryBoxing", "UnnecessaryUnboxing", "UnusedAssignment"})
        public static class NotifyServiceAnnounced
                extends    com.tangosol.coherence.component.util.daemon.queueProcessor.service.Grid.NotifyServiceAnnounced
            {
            // ---- Fields declarations ----
            
            // Default constructor
            public NotifyServiceAnnounced()
                {
                this(null, null, true);
                }
            
            // Initializing constructor
            public NotifyServiceAnnounced(String sName, com.tangosol.coherence.Component compParent, boolean fInit)
                {
                super(sName, compParent, false);
                
                if (fInit)
                    {
                    __init();
                    }
                }
            
            // Main initializer
            public void __init()
                {
                // private initialization
                __initPrivate();
                
                // state initialization: public and protected properties
                try
                    {
                    setMessageType(-9);
                    }
                catch (java.lang.Exception e)
                    {
                    // re-throw as a runtime exception
                    throw new com.tangosol.util.WrapperException(e);
                    }
                
                // signal the end of the initialization
                set_Constructed(true);
                }
            
            // Private initializer
            protected void __initPrivate()
                {
                
                super.__initPrivate();
                }
            
            //++ getter for static property _Instance
            /**
             * Getter for property _Instance.<p>
            * Auto generated
             */
            public static com.tangosol.coherence.Component get_Instance()
                {
                return new com.tangosol.coherence.component.net.Cluster.TransportService.NotifyServiceAnnounced();
                }
            
            //++ getter for static property _CLASS
            /**
             * Getter for property _CLASS.<p>
            * Property with auto-generated accessor that returns the Class
            * object for a given component.
             */
            public static Class get_CLASS()
                {
                Class clz;
                try
                    {
                    clz = Class.forName("com.tangosol.coherence/component/net/Cluster$TransportService$NotifyServiceAnnounced".replace('/', '.'));
                    }
                catch (ClassNotFoundException e)
                    {
                    throw new NoClassDefFoundError(e.getMessage());
                    }
                return clz;
                }
            
            //++ getter for autogen property _Module
            /**
             * This is an auto-generated method that returns the global [design
            * time] parent component.
            * 
            * Note: the class generator will ignore any custom implementation
            * for this behavior.
             */
            private com.tangosol.coherence.Component get_Module()
                {
                return this.get_Parent().get_Parent();
                }
            }

        // ---- class: com.tangosol.coherence.component.net.Cluster$TransportService$NotifyServiceJoining
        
        /**
         * This internal Message is sent to a service when a cluster Member
         * that previously did not expose the same service has started the same
         * service. In other words, if cluster Members are (A, B, C), and (A,
         * B) have a service #3, and C subsequently registers a service #3,
         * then the service #3 on (A, B) will be notified that C has started
         * service #3.
         * 
         * As of Coherence 3.7.1, this notification is a poll that is sent by
         * the ClustersService BEFORE the specified member is added to the
         * correspondning ServiceMemberSet. The service join protocol will be
         * blocked until this service closes the underlying poll.
         * 
         * Subsequent $NotifyServiceJoined notification will be sent when the
         * member has finished starting the service.
         * 
         * Attributes:
         *     NotifyMember
         *     NotifyMemberConfigMap
         *     NotifyServiceEndPointName (@since Coherence 3.7.1)
         *     NotifyServiceJoinTime
         *     NotifyServiceVersion
         *     ContinuationMessage (@since Coherence 3.7.1)
         */
        @SuppressWarnings({"deprecation", "rawtypes", "unused", "unchecked", "ConstantConditions", "DuplicatedCode", "ForLoopReplaceableByForEach", "IfCanBeSwitch", "RedundantArrayCreation", "RedundantSuppression", "SameParameterValue", "TryFinallyCanBeTryWithResources", "TryWithIdenticalCatches", "UnnecessaryBoxing", "UnnecessaryUnboxing", "UnusedAssignment"})
        public static class NotifyServiceJoining
                extends    com.tangosol.coherence.component.util.daemon.queueProcessor.service.Grid.NotifyServiceJoining
            {
            // ---- Fields declarations ----
            
            // Default constructor
            public NotifyServiceJoining()
                {
                this(null, null, true);
                }
            
            // Initializing constructor
            public NotifyServiceJoining(String sName, com.tangosol.coherence.Component compParent, boolean fInit)
                {
                super(sName, compParent, false);
                
                if (fInit)
                    {
                    __init();
                    }
                }
            
            // Main initializer
            public void __init()
                {
                // private initialization
                __initPrivate();
                
                // state initialization: public and protected properties
                try
                    {
                    setMessageType(-10);
                    }
                catch (java.lang.Exception e)
                    {
                    // re-throw as a runtime exception
                    throw new com.tangosol.util.WrapperException(e);
                    }
                
                // containment initialization: children
                _addChild(new com.tangosol.coherence.component.util.daemon.queueProcessor.service.Grid.NotifyServiceJoining.Poll("Poll", this, true), "Poll");
                
                // signal the end of the initialization
                set_Constructed(true);
                }
            
            // Private initializer
            protected void __initPrivate()
                {
                
                super.__initPrivate();
                }
            
            //++ getter for static property _Instance
            /**
             * Getter for property _Instance.<p>
            * Auto generated
             */
            public static com.tangosol.coherence.Component get_Instance()
                {
                return new com.tangosol.coherence.component.net.Cluster.TransportService.NotifyServiceJoining();
                }
            
            //++ getter for static property _CLASS
            /**
             * Getter for property _CLASS.<p>
            * Property with auto-generated accessor that returns the Class
            * object for a given component.
             */
            public static Class get_CLASS()
                {
                Class clz;
                try
                    {
                    clz = Class.forName("com.tangosol.coherence/component/net/Cluster$TransportService$NotifyServiceJoining".replace('/', '.'));
                    }
                catch (ClassNotFoundException e)
                    {
                    throw new NoClassDefFoundError(e.getMessage());
                    }
                return clz;
                }
            
            //++ getter for autogen property _Module
            /**
             * This is an auto-generated method that returns the global [design
            * time] parent component.
            * 
            * Note: the class generator will ignore any custom implementation
            * for this behavior.
             */
            private com.tangosol.coherence.Component get_Module()
                {
                return this.get_Parent().get_Parent();
                }
            }

        // ---- class: com.tangosol.coherence.component.net.Cluster$TransportService$NotifyServiceLeaving
        
        /**
         * This internal Message is sent to a service when a cluster Member
         * that previously exposed the same service will no longer expose the
         * same service (potentially because the Member is leaving the
         * cluster). In other words, if cluster Members are (A, B, C) and each
         * has a service #3, and C subsequently announces that it is leaving
         * the cluster, then the service #3 on (A, B) will be notified that C
         * will no longer have a service #3.
         * 
         * Attributes:
         *     NotifyMember
         */
        @SuppressWarnings({"deprecation", "rawtypes", "unused", "unchecked", "ConstantConditions", "DuplicatedCode", "ForLoopReplaceableByForEach", "IfCanBeSwitch", "RedundantArrayCreation", "RedundantSuppression", "SameParameterValue", "TryFinallyCanBeTryWithResources", "TryWithIdenticalCatches", "UnnecessaryBoxing", "UnnecessaryUnboxing", "UnusedAssignment"})
        public static class NotifyServiceLeaving
                extends    com.tangosol.coherence.component.util.daemon.queueProcessor.service.Grid.NotifyServiceLeaving
            {
            // ---- Fields declarations ----
            
            // Default constructor
            public NotifyServiceLeaving()
                {
                this(null, null, true);
                }
            
            // Initializing constructor
            public NotifyServiceLeaving(String sName, com.tangosol.coherence.Component compParent, boolean fInit)
                {
                super(sName, compParent, false);
                
                if (fInit)
                    {
                    __init();
                    }
                }
            
            // Main initializer
            public void __init()
                {
                // private initialization
                __initPrivate();
                
                // state initialization: public and protected properties
                try
                    {
                    setMessageType(-11);
                    }
                catch (java.lang.Exception e)
                    {
                    // re-throw as a runtime exception
                    throw new com.tangosol.util.WrapperException(e);
                    }
                
                // signal the end of the initialization
                set_Constructed(true);
                }
            
            // Private initializer
            protected void __initPrivate()
                {
                
                super.__initPrivate();
                }
            
            //++ getter for static property _Instance
            /**
             * Getter for property _Instance.<p>
            * Auto generated
             */
            public static com.tangosol.coherence.Component get_Instance()
                {
                return new com.tangosol.coherence.component.net.Cluster.TransportService.NotifyServiceLeaving();
                }
            
            //++ getter for static property _CLASS
            /**
             * Getter for property _CLASS.<p>
            * Property with auto-generated accessor that returns the Class
            * object for a given component.
             */
            public static Class get_CLASS()
                {
                Class clz;
                try
                    {
                    clz = Class.forName("com.tangosol.coherence/component/net/Cluster$TransportService$NotifyServiceLeaving".replace('/', '.'));
                    }
                catch (ClassNotFoundException e)
                    {
                    throw new NoClassDefFoundError(e.getMessage());
                    }
                return clz;
                }
            
            //++ getter for autogen property _Module
            /**
             * This is an auto-generated method that returns the global [design
            * time] parent component.
            * 
            * Note: the class generator will ignore any custom implementation
            * for this behavior.
             */
            private com.tangosol.coherence.Component get_Module()
                {
                return this.get_Parent().get_Parent();
                }
            }

        // ---- class: com.tangosol.coherence.component.net.Cluster$TransportService$NotifyServiceLeft
        
        /**
         * This internal Message is sent to a service when a cluster Member
         * that previously exposed the same service now does not expose the
         * same service (potentially because the Member left the cluster). In
         * other words, if cluster Members are (A, B, C) and each has a service
         * #3, and C subsequently leaves the cluster, then the service #3 on
         * (A, B) will be notified that C no longer has a service #3.
         * 
         * Attributes:
         *     NotifyMember
         *     NotifyMemberJoined
         */
        @SuppressWarnings({"deprecation", "rawtypes", "unused", "unchecked", "ConstantConditions", "DuplicatedCode", "ForLoopReplaceableByForEach", "IfCanBeSwitch", "RedundantArrayCreation", "RedundantSuppression", "SameParameterValue", "TryFinallyCanBeTryWithResources", "TryWithIdenticalCatches", "UnnecessaryBoxing", "UnnecessaryUnboxing", "UnusedAssignment"})
        public static class NotifyServiceLeft
                extends    com.tangosol.coherence.component.util.daemon.queueProcessor.service.Grid.NotifyServiceLeft
            {
            // ---- Fields declarations ----
            
            // Default constructor
            public NotifyServiceLeft()
                {
                this(null, null, true);
                }
            
            // Initializing constructor
            public NotifyServiceLeft(String sName, com.tangosol.coherence.Component compParent, boolean fInit)
                {
                super(sName, compParent, false);
                
                if (fInit)
                    {
                    __init();
                    }
                }
            
            // Main initializer
            public void __init()
                {
                // private initialization
                __initPrivate();
                
                // state initialization: public and protected properties
                try
                    {
                    setMessageType(-12);
                    }
                catch (java.lang.Exception e)
                    {
                    // re-throw as a runtime exception
                    throw new com.tangosol.util.WrapperException(e);
                    }
                
                // signal the end of the initialization
                set_Constructed(true);
                }
            
            // Private initializer
            protected void __initPrivate()
                {
                
                super.__initPrivate();
                }
            
            //++ getter for static property _Instance
            /**
             * Getter for property _Instance.<p>
            * Auto generated
             */
            public static com.tangosol.coherence.Component get_Instance()
                {
                return new com.tangosol.coherence.component.net.Cluster.TransportService.NotifyServiceLeft();
                }
            
            //++ getter for static property _CLASS
            /**
             * Getter for property _CLASS.<p>
            * Property with auto-generated accessor that returns the Class
            * object for a given component.
             */
            public static Class get_CLASS()
                {
                Class clz;
                try
                    {
                    clz = Class.forName("com.tangosol.coherence/component/net/Cluster$TransportService$NotifyServiceLeft".replace('/', '.'));
                    }
                catch (ClassNotFoundException e)
                    {
                    throw new NoClassDefFoundError(e.getMessage());
                    }
                return clz;
                }
            
            //++ getter for autogen property _Module
            /**
             * This is an auto-generated method that returns the global [design
            * time] parent component.
            * 
            * Note: the class generator will ignore any custom implementation
            * for this behavior.
             */
            private com.tangosol.coherence.Component get_Module()
                {
                return this.get_Parent().get_Parent();
                }
            }

        // ---- class: com.tangosol.coherence.component.net.Cluster$TransportService$NotifyServiceQuiescence
        
        /**
         * This internal Message is sent to a service when a cluster Member has
         * requested this service to be suspended or resumed (cluster-wide).
         * 
         * This notification is a poll that is sent by the ClusterService.  The
         * service quiescence protocol will be blocked until this service
         * closes the underlying poll.
         * 
         * Attributes:
         *     ContinuationMessage
         */
        @SuppressWarnings({"deprecation", "rawtypes", "unused", "unchecked", "ConstantConditions", "DuplicatedCode", "ForLoopReplaceableByForEach", "IfCanBeSwitch", "RedundantArrayCreation", "RedundantSuppression", "SameParameterValue", "TryFinallyCanBeTryWithResources", "TryWithIdenticalCatches", "UnnecessaryBoxing", "UnnecessaryUnboxing", "UnusedAssignment"})
        public static class NotifyServiceQuiescence
                extends    com.tangosol.coherence.component.util.daemon.queueProcessor.service.Grid.NotifyServiceQuiescence
            {
            // ---- Fields declarations ----
            private static com.tangosol.util.ListMap __mapChildren;
            
            // Static initializer
            static
                {
                __initStatic();
                }
            
            // Default static initializer
            private static void __initStatic()
                {
                // register child classes
                __mapChildren = new com.tangosol.util.ListMap();
                __mapChildren.put("Poll", Cluster.TransportService.NotifyServiceQuiescence.Poll.get_CLASS());
                }
            
            // Default constructor
            public NotifyServiceQuiescence()
                {
                this(null, null, true);
                }
            
            // Initializing constructor
            public NotifyServiceQuiescence(String sName, com.tangosol.coherence.Component compParent, boolean fInit)
                {
                super(sName, compParent, false);
                
                if (fInit)
                    {
                    __init();
                    }
                }
            
            // Main initializer
            public void __init()
                {
                // private initialization
                __initPrivate();
                
                // state initialization: public and protected properties
                try
                    {
                    setMessageType(-22);
                    }
                catch (java.lang.Exception e)
                    {
                    // re-throw as a runtime exception
                    throw new com.tangosol.util.WrapperException(e);
                    }
                
                // containment initialization: children
                
                // signal the end of the initialization
                set_Constructed(true);
                }
            
            // Private initializer
            protected void __initPrivate()
                {
                
                super.__initPrivate();
                }
            
            //++ getter for static property _Instance
            /**
             * Getter for property _Instance.<p>
            * Auto generated
             */
            public static com.tangosol.coherence.Component get_Instance()
                {
                return new com.tangosol.coherence.component.net.Cluster.TransportService.NotifyServiceQuiescence();
                }
            
            //++ getter for static property _CLASS
            /**
             * Getter for property _CLASS.<p>
            * Property with auto-generated accessor that returns the Class
            * object for a given component.
             */
            public static Class get_CLASS()
                {
                Class clz;
                try
                    {
                    clz = Class.forName("com.tangosol.coherence/component/net/Cluster$TransportService$NotifyServiceQuiescence".replace('/', '.'));
                    }
                catch (ClassNotFoundException e)
                    {
                    throw new NoClassDefFoundError(e.getMessage());
                    }
                return clz;
                }
            
            //++ getter for autogen property _Module
            /**
             * This is an auto-generated method that returns the global [design
            * time] parent component.
            * 
            * Note: the class generator will ignore any custom implementation
            * for this behavior.
             */
            private com.tangosol.coherence.Component get_Module()
                {
                return this.get_Parent().get_Parent();
                }
            
            //++ getter for autogen property _ChildClasses
            /**
             * This is an auto-generated method that returns the map of design
            * time [static] children.
            * 
            * Note: the class generator will ignore any custom implementation
            * for this behavior.
             */
            protected java.util.Map get_ChildClasses()
                {
                return __mapChildren;
                }

            // ---- class: com.tangosol.coherence.component.net.Cluster$TransportService$NotifyServiceQuiescence$Poll
            
            /**
             * The Poll contains information regarding a request sent to one or
             * more Cluster Members that require responses. A Service may poll
             * other Members that are running the same Service, and the Poll is
             * used to wait for and assemble the responses from each of those
             * Members. A client thread may also use the Poll to block on a
             * response or set of responses, thus waiting for the completion of
             * the Poll. In its simplest form, which is a Poll that is sent to
             * one Member of the Cluster, the Poll actually represents the
             * request/response model.
             */
            @SuppressWarnings({"deprecation", "rawtypes", "unused", "unchecked", "ConstantConditions", "DuplicatedCode", "ForLoopReplaceableByForEach", "IfCanBeSwitch", "RedundantArrayCreation", "RedundantSuppression", "SameParameterValue", "TryFinallyCanBeTryWithResources", "TryWithIdenticalCatches", "UnnecessaryBoxing", "UnnecessaryUnboxing", "UnusedAssignment"})
            public static class Poll
                    extends    com.tangosol.coherence.component.util.daemon.queueProcessor.service.Grid.NotifyServiceQuiescence.Poll
                {
                // ---- Fields declarations ----
                
                // Default constructor
                public Poll()
                    {
                    this(null, null, true);
                    }
                
                // Initializing constructor
                public Poll(String sName, com.tangosol.coherence.Component compParent, boolean fInit)
                    {
                    super(sName, compParent, false);
                    
                    if (fInit)
                        {
                        __init();
                        }
                    }
                
                // Main initializer
                public void __init()
                    {
                    // private initialization
                    __initPrivate();
                    
                    
                    // signal the end of the initialization
                    set_Constructed(true);
                    }
                
                // Private initializer
                protected void __initPrivate()
                    {
                    
                    super.__initPrivate();
                    }
                
                //++ getter for static property _Instance
                /**
                 * Getter for property _Instance.<p>
                * Auto generated
                 */
                public static com.tangosol.coherence.Component get_Instance()
                    {
                    return new com.tangosol.coherence.component.net.Cluster.TransportService.NotifyServiceQuiescence.Poll();
                    }
                
                //++ getter for static property _CLASS
                /**
                 * Getter for property _CLASS.<p>
                * Property with auto-generated accessor that returns the Class
                * object for a given component.
                 */
                public static Class get_CLASS()
                    {
                    Class clz;
                    try
                        {
                        clz = Class.forName("com.tangosol.coherence/component/net/Cluster$TransportService$NotifyServiceQuiescence$Poll".replace('/', '.'));
                        }
                    catch (ClassNotFoundException e)
                        {
                        throw new NoClassDefFoundError(e.getMessage());
                        }
                    return clz;
                    }
                
                //++ getter for autogen property _Module
                /**
                 * This is an auto-generated method that returns the global
                * [design time] parent component.
                * 
                * Note: the class generator will ignore any custom
                * implementation for this behavior.
                 */
                private com.tangosol.coherence.Component get_Module()
                    {
                    return this.get_Parent().get_Parent().get_Parent();
                    }
                }
            }

        // ---- class: com.tangosol.coherence.component.net.Cluster$TransportService$NotifyShutdown
        
        /**
         * This internal Message is sent to a Service it is supposed to shut
         * down. The Service must clean up and unregister itself. Note that the
         * only task of the shut-down is to begin the process of shutting down
         * the service; technically the Service does not have to be stopped by
         * the time the shutdown Message completes its processing, although the
         * default implementation does stop it immediately.
         * 
         * Attributes:
         *     n/a
         */
        @SuppressWarnings({"deprecation", "rawtypes", "unused", "unchecked", "ConstantConditions", "DuplicatedCode", "ForLoopReplaceableByForEach", "IfCanBeSwitch", "RedundantArrayCreation", "RedundantSuppression", "SameParameterValue", "TryFinallyCanBeTryWithResources", "TryWithIdenticalCatches", "UnnecessaryBoxing", "UnnecessaryUnboxing", "UnusedAssignment"})
        public static class NotifyShutdown
                extends    com.tangosol.coherence.component.util.daemon.queueProcessor.service.Grid.NotifyShutdown
            {
            // ---- Fields declarations ----
            
            // Default constructor
            public NotifyShutdown()
                {
                this(null, null, true);
                }
            
            // Initializing constructor
            public NotifyShutdown(String sName, com.tangosol.coherence.Component compParent, boolean fInit)
                {
                super(sName, compParent, false);
                
                if (fInit)
                    {
                    __init();
                    }
                }
            
            // Main initializer
            public void __init()
                {
                // private initialization
                __initPrivate();
                
                // state initialization: public and protected properties
                try
                    {
                    setMessageType(-13);
                    }
                catch (java.lang.Exception e)
                    {
                    // re-throw as a runtime exception
                    throw new com.tangosol.util.WrapperException(e);
                    }
                
                // signal the end of the initialization
                set_Constructed(true);
                }
            
            // Private initializer
            protected void __initPrivate()
                {
                
                super.__initPrivate();
                }
            
            //++ getter for static property _Instance
            /**
             * Getter for property _Instance.<p>
            * Auto generated
             */
            public static com.tangosol.coherence.Component get_Instance()
                {
                return new com.tangosol.coherence.component.net.Cluster.TransportService.NotifyShutdown();
                }
            
            //++ getter for static property _CLASS
            /**
             * Getter for property _CLASS.<p>
            * Property with auto-generated accessor that returns the Class
            * object for a given component.
             */
            public static Class get_CLASS()
                {
                Class clz;
                try
                    {
                    clz = Class.forName("com.tangosol.coherence/component/net/Cluster$TransportService$NotifyShutdown".replace('/', '.'));
                    }
                catch (ClassNotFoundException e)
                    {
                    throw new NoClassDefFoundError(e.getMessage());
                    }
                return clz;
                }
            
            //++ getter for autogen property _Module
            /**
             * This is an auto-generated method that returns the global [design
            * time] parent component.
            * 
            * Note: the class generator will ignore any custom implementation
            * for this behavior.
             */
            private com.tangosol.coherence.Component get_Module()
                {
                return this.get_Parent().get_Parent();
                }
            }

        // ---- class: com.tangosol.coherence.component.net.Cluster$TransportService$NotifyStartup
        
        /**
         * This internal Message is sent to a Service when it first has been
         * started.
         * 
         * Note that this Message is the Service's only opportunity to
         * configure this Member's service-specific config map
         * (getServiceMemberSet().ensureMemberConfigMap) before other Members
         * are aware that this Member is running this Service. Changes to the
         * map during this Message's processing will be sent as part of the
         * ClusterService's ServiceJoining message.
         * 
         * Attributes:
         *     n/a
         */
        @SuppressWarnings({"deprecation", "rawtypes", "unused", "unchecked", "ConstantConditions", "DuplicatedCode", "ForLoopReplaceableByForEach", "IfCanBeSwitch", "RedundantArrayCreation", "RedundantSuppression", "SameParameterValue", "TryFinallyCanBeTryWithResources", "TryWithIdenticalCatches", "UnnecessaryBoxing", "UnnecessaryUnboxing", "UnusedAssignment"})
        public static class NotifyStartup
                extends    com.tangosol.coherence.component.util.daemon.queueProcessor.service.Grid.NotifyStartup
            {
            // ---- Fields declarations ----
            
            // Default constructor
            public NotifyStartup()
                {
                this(null, null, true);
                }
            
            // Initializing constructor
            public NotifyStartup(String sName, com.tangosol.coherence.Component compParent, boolean fInit)
                {
                super(sName, compParent, false);
                
                if (fInit)
                    {
                    __init();
                    }
                }
            
            // Main initializer
            public void __init()
                {
                // private initialization
                __initPrivate();
                
                // state initialization: public and protected properties
                try
                    {
                    setMessageType(-14);
                    }
                catch (java.lang.Exception e)
                    {
                    // re-throw as a runtime exception
                    throw new com.tangosol.util.WrapperException(e);
                    }
                
                // signal the end of the initialization
                set_Constructed(true);
                }
            
            // Private initializer
            protected void __initPrivate()
                {
                
                super.__initPrivate();
                }
            
            //++ getter for static property _Instance
            /**
             * Getter for property _Instance.<p>
            * Auto generated
             */
            public static com.tangosol.coherence.Component get_Instance()
                {
                return new com.tangosol.coherence.component.net.Cluster.TransportService.NotifyStartup();
                }
            
            //++ getter for static property _CLASS
            /**
             * Getter for property _CLASS.<p>
            * Property with auto-generated accessor that returns the Class
            * object for a given component.
             */
            public static Class get_CLASS()
                {
                Class clz;
                try
                    {
                    clz = Class.forName("com.tangosol.coherence/component/net/Cluster$TransportService$NotifyStartup".replace('/', '.'));
                    }
                catch (ClassNotFoundException e)
                    {
                    throw new NoClassDefFoundError(e.getMessage());
                    }
                return clz;
                }
            
            //++ getter for autogen property _Module
            /**
             * This is an auto-generated method that returns the global [design
            * time] parent component.
            * 
            * Note: the class generator will ignore any custom implementation
            * for this behavior.
             */
            private com.tangosol.coherence.Component get_Module()
                {
                return this.get_Parent().get_Parent();
                }
            }

        // ---- class: com.tangosol.coherence.component.net.Cluster$TransportService$PingRequest
        
        /**
         * This request is sent to "ping" a service member, illiciting a
         * response whose receipt guarantees that any in-flight messages
         * between the requestor and responder will have been flushed.
         */
        @SuppressWarnings({"deprecation", "rawtypes", "unused", "unchecked", "ConstantConditions", "DuplicatedCode", "ForLoopReplaceableByForEach", "IfCanBeSwitch", "RedundantArrayCreation", "RedundantSuppression", "SameParameterValue", "TryFinallyCanBeTryWithResources", "TryWithIdenticalCatches", "UnnecessaryBoxing", "UnnecessaryUnboxing", "UnusedAssignment"})
        public static class PingRequest
                extends    com.tangosol.coherence.component.util.daemon.queueProcessor.service.Grid.PingRequest
            {
            // ---- Fields declarations ----
            private static com.tangosol.util.ListMap __mapChildren;
            
            // Static initializer
            static
                {
                __initStatic();
                }
            
            // Default static initializer
            private static void __initStatic()
                {
                // register child classes
                __mapChildren = new com.tangosol.util.ListMap();
                __mapChildren.put("Poll", Cluster.TransportService.PingRequest.Poll.get_CLASS());
                }
            
            // Default constructor
            public PingRequest()
                {
                this(null, null, true);
                }
            
            // Initializing constructor
            public PingRequest(String sName, com.tangosol.coherence.Component compParent, boolean fInit)
                {
                super(sName, compParent, false);
                
                if (fInit)
                    {
                    __init();
                    }
                }
            
            // Main initializer
            public void __init()
                {
                // private initialization
                __initPrivate();
                
                // state initialization: public and protected properties
                try
                    {
                    setMessageType(3);
                    }
                catch (java.lang.Exception e)
                    {
                    // re-throw as a runtime exception
                    throw new com.tangosol.util.WrapperException(e);
                    }
                
                // containment initialization: children
                
                // signal the end of the initialization
                set_Constructed(true);
                }
            
            // Private initializer
            protected void __initPrivate()
                {
                
                super.__initPrivate();
                }
            
            //++ getter for static property _Instance
            /**
             * Getter for property _Instance.<p>
            * Auto generated
             */
            public static com.tangosol.coherence.Component get_Instance()
                {
                return new com.tangosol.coherence.component.net.Cluster.TransportService.PingRequest();
                }
            
            //++ getter for static property _CLASS
            /**
             * Getter for property _CLASS.<p>
            * Property with auto-generated accessor that returns the Class
            * object for a given component.
             */
            public static Class get_CLASS()
                {
                Class clz;
                try
                    {
                    clz = Class.forName("com.tangosol.coherence/component/net/Cluster$TransportService$PingRequest".replace('/', '.'));
                    }
                catch (ClassNotFoundException e)
                    {
                    throw new NoClassDefFoundError(e.getMessage());
                    }
                return clz;
                }
            
            //++ getter for autogen property _Module
            /**
             * This is an auto-generated method that returns the global [design
            * time] parent component.
            * 
            * Note: the class generator will ignore any custom implementation
            * for this behavior.
             */
            private com.tangosol.coherence.Component get_Module()
                {
                return this.get_Parent().get_Parent();
                }
            
            //++ getter for autogen property _ChildClasses
            /**
             * This is an auto-generated method that returns the map of design
            * time [static] children.
            * 
            * Note: the class generator will ignore any custom implementation
            * for this behavior.
             */
            protected java.util.Map get_ChildClasses()
                {
                return __mapChildren;
                }

            // ---- class: com.tangosol.coherence.component.net.Cluster$TransportService$PingRequest$Poll
            
            /**
             * The Poll contains information regarding a request sent to one or
             * more Cluster Members that require responses. A Service may poll
             * other Members that are running the same Service, and the Poll is
             * used to wait for and assemble the responses from each of those
             * Members. A client thread may also use the Poll to block on a
             * response or set of responses, thus waiting for the completion of
             * the Poll. In its simplest form, which is a Poll that is sent to
             * one Member of the Cluster, the Poll actually represents the
             * request/response model.
             */
            @SuppressWarnings({"deprecation", "rawtypes", "unused", "unchecked", "ConstantConditions", "DuplicatedCode", "ForLoopReplaceableByForEach", "IfCanBeSwitch", "RedundantArrayCreation", "RedundantSuppression", "SameParameterValue", "TryFinallyCanBeTryWithResources", "TryWithIdenticalCatches", "UnnecessaryBoxing", "UnnecessaryUnboxing", "UnusedAssignment"})
            public static class Poll
                    extends    com.tangosol.coherence.component.util.daemon.queueProcessor.service.Grid.PingRequest.Poll
                {
                // ---- Fields declarations ----
                
                // Default constructor
                public Poll()
                    {
                    this(null, null, true);
                    }
                
                // Initializing constructor
                public Poll(String sName, com.tangosol.coherence.Component compParent, boolean fInit)
                    {
                    super(sName, compParent, false);
                    
                    if (fInit)
                        {
                        __init();
                        }
                    }
                
                // Main initializer
                public void __init()
                    {
                    // private initialization
                    __initPrivate();
                    
                    
                    // signal the end of the initialization
                    set_Constructed(true);
                    }
                
                // Private initializer
                protected void __initPrivate()
                    {
                    
                    super.__initPrivate();
                    }
                
                //++ getter for static property _Instance
                /**
                 * Getter for property _Instance.<p>
                * Auto generated
                 */
                public static com.tangosol.coherence.Component get_Instance()
                    {
                    return new com.tangosol.coherence.component.net.Cluster.TransportService.PingRequest.Poll();
                    }
                
                //++ getter for static property _CLASS
                /**
                 * Getter for property _CLASS.<p>
                * Property with auto-generated accessor that returns the Class
                * object for a given component.
                 */
                public static Class get_CLASS()
                    {
                    Class clz;
                    try
                        {
                        clz = Class.forName("com.tangosol.coherence/component/net/Cluster$TransportService$PingRequest$Poll".replace('/', '.'));
                        }
                    catch (ClassNotFoundException e)
                        {
                        throw new NoClassDefFoundError(e.getMessage());
                        }
                    return clz;
                    }
                
                //++ getter for autogen property _Module
                /**
                 * This is an auto-generated method that returns the global
                * [design time] parent component.
                * 
                * Note: the class generator will ignore any custom
                * implementation for this behavior.
                 */
                private com.tangosol.coherence.Component get_Module()
                    {
                    return this.get_Parent().get_Parent().get_Parent();
                    }
                }
            }

        // ---- class: com.tangosol.coherence.component.net.Cluster$TransportService$PollArray
        
        /**
         * A WindowedArray is an object that has attributes of a queue and a
         * dynamically resizing array.
         * 
         * The "window" is the active, or visible, portion of the virtual
         * array. Only elements within the window may be accessed or removed.
         * 
         * As elements are added, they are added to the "end" or "top" of the
         * array, dynamically resizing if necessary, and adjusting the window
         * so that it includes the new elements.
         * 
         * As items are removed, if they are removed from the "start" or
         * "bottom" of the array, the window adjusts such that those elements
         * are no longer visible.
         * 
         * The concurrent version of of the WindowedArray avoids contention for
         * threads accessing different virtual indices.
         * 
         * This is an abstract component, any concrete implementation must
         * provide assignIndexToValue and retrieveIndexFromValue methods.
         */
        @SuppressWarnings({"deprecation", "rawtypes", "unused", "unchecked", "ConstantConditions", "DuplicatedCode", "ForLoopReplaceableByForEach", "IfCanBeSwitch", "RedundantArrayCreation", "RedundantSuppression", "SameParameterValue", "TryFinallyCanBeTryWithResources", "TryWithIdenticalCatches", "UnnecessaryBoxing", "UnnecessaryUnboxing", "UnusedAssignment"})
        public static class PollArray
                extends    com.tangosol.coherence.component.util.daemon.queueProcessor.service.Grid.PollArray
            {
            // ---- Fields declarations ----
            private static com.tangosol.util.ListMap __mapChildren;
            
            // Static initializer
            static
                {
                __initStatic();
                }
            
            // Default static initializer
            private static void __initStatic()
                {
                // register child classes
                __mapChildren = new com.tangosol.util.ListMap();
                __mapChildren.put("PlaceHolder", Cluster.TransportService.PollArray.PlaceHolder.get_CLASS());
                }
            
            // Default constructor
            public PollArray()
                {
                this(null, null, true);
                }
            
            // Initializing constructor
            public PollArray(String sName, com.tangosol.coherence.Component compParent, boolean fInit)
                {
                super(sName, compParent, false);
                
                if (fInit)
                    {
                    __init();
                    }
                }
            
            // Main initializer
            public void __init()
                {
                // private initialization
                __initPrivate();
                
                // state initialization: public and protected properties
                try
                    {
                    setExpiryMap(new NullableSortedMap());
                    }
                catch (java.lang.Exception e)
                    {
                    // re-throw as a runtime exception
                    throw new com.tangosol.util.WrapperException(e);
                    }
                
                // containment initialization: children
                
                // signal the end of the initialization
                set_Constructed(true);
                }
            
            // Private initializer
            protected void __initPrivate()
                {
                
                super.__initPrivate();
                }
            
            //++ getter for static property _Instance
            /**
             * Getter for property _Instance.<p>
            * Auto generated
             */
            public static com.tangosol.coherence.Component get_Instance()
                {
                return new com.tangosol.coherence.component.net.Cluster.TransportService.PollArray();
                }
            
            //++ getter for static property _CLASS
            /**
             * Getter for property _CLASS.<p>
            * Property with auto-generated accessor that returns the Class
            * object for a given component.
             */
            public static Class get_CLASS()
                {
                Class clz;
                try
                    {
                    clz = Class.forName("com.tangosol.coherence/component/net/Cluster$TransportService$PollArray".replace('/', '.'));
                    }
                catch (ClassNotFoundException e)
                    {
                    throw new NoClassDefFoundError(e.getMessage());
                    }
                return clz;
                }
            
            //++ getter for autogen property _Module
            /**
             * This is an auto-generated method that returns the global [design
            * time] parent component.
            * 
            * Note: the class generator will ignore any custom implementation
            * for this behavior.
             */
            private com.tangosol.coherence.Component get_Module()
                {
                return this.get_Parent().get_Parent();
                }
            
            //++ getter for autogen property _ChildClasses
            /**
             * This is an auto-generated method that returns the map of design
            * time [static] children.
            * 
            * Note: the class generator will ignore any custom implementation
            * for this behavior.
             */
            protected java.util.Map get_ChildClasses()
                {
                return __mapChildren;
                }

            // ---- class: com.tangosol.coherence.component.net.Cluster$TransportService$PollArray$PlaceHolder
            
            /**
             * A PlaceHolder represents a value of null and is used to mark the
             * virtual index assigned to an actual index within the storage
             * array.
             */
            @SuppressWarnings({"deprecation", "rawtypes", "unused", "unchecked", "ConstantConditions", "DuplicatedCode", "ForLoopReplaceableByForEach", "IfCanBeSwitch", "RedundantArrayCreation", "RedundantSuppression", "SameParameterValue", "TryFinallyCanBeTryWithResources", "TryWithIdenticalCatches", "UnnecessaryBoxing", "UnnecessaryUnboxing", "UnusedAssignment"})
            public static class PlaceHolder
                    extends    com.tangosol.coherence.component.util.daemon.queueProcessor.service.Grid.PollArray.PlaceHolder
                {
                // ---- Fields declarations ----
                
                // Default constructor
                public PlaceHolder()
                    {
                    this(null, null, true);
                    }
                
                // Initializing constructor
                public PlaceHolder(String sName, com.tangosol.coherence.Component compParent, boolean fInit)
                    {
                    super(sName, compParent, false);
                    
                    if (fInit)
                        {
                        __init();
                        }
                    }
                
                // Main initializer
                public void __init()
                    {
                    // private initialization
                    __initPrivate();
                    
                    // state initialization: public and protected properties
                    try
                        {
                        setVirtualOffset(-1L);
                        }
                    catch (java.lang.Exception e)
                        {
                        // re-throw as a runtime exception
                        throw new com.tangosol.util.WrapperException(e);
                        }
                    
                    // signal the end of the initialization
                    set_Constructed(true);
                    }
                
                // Private initializer
                protected void __initPrivate()
                    {
                    
                    super.__initPrivate();
                    }
                
                //++ getter for static property _Instance
                /**
                 * Getter for property _Instance.<p>
                * Auto generated
                 */
                public static com.tangosol.coherence.Component get_Instance()
                    {
                    return new com.tangosol.coherence.component.net.Cluster.TransportService.PollArray.PlaceHolder();
                    }
                
                //++ getter for static property _CLASS
                /**
                 * Getter for property _CLASS.<p>
                * Property with auto-generated accessor that returns the Class
                * object for a given component.
                 */
                public static Class get_CLASS()
                    {
                    Class clz;
                    try
                        {
                        clz = Class.forName("com.tangosol.coherence/component/net/Cluster$TransportService$PollArray$PlaceHolder".replace('/', '.'));
                        }
                    catch (ClassNotFoundException e)
                        {
                        throw new NoClassDefFoundError(e.getMessage());
                        }
                    return clz;
                    }
                
                //++ getter for autogen property _Module
                /**
                 * This is an auto-generated method that returns the global
                * [design time] parent component.
                * 
                * Note: the class generator will ignore any custom
                * implementation for this behavior.
                 */
                private com.tangosol.coherence.Component get_Module()
                    {
                    return this.get_Parent().get_Parent().get_Parent();
                    }
                }
            }

        // ---- class: com.tangosol.coherence.component.net.Cluster$TransportService$ProtocolContext
        
        /**
         * A description of the service's current protocol context.
         */
        @SuppressWarnings({"deprecation", "rawtypes", "unused", "unchecked", "ConstantConditions", "DuplicatedCode", "ForLoopReplaceableByForEach", "IfCanBeSwitch", "RedundantArrayCreation", "RedundantSuppression", "SameParameterValue", "TryFinallyCanBeTryWithResources", "TryWithIdenticalCatches", "UnnecessaryBoxing", "UnnecessaryUnboxing", "UnusedAssignment"})
        public static class ProtocolContext
                extends    com.tangosol.coherence.component.util.daemon.queueProcessor.service.Grid.ProtocolContext
            {
            // ---- Fields declarations ----
            
            // Default constructor
            public ProtocolContext()
                {
                this(null, null, true);
                }
            
            // Initializing constructor
            public ProtocolContext(String sName, com.tangosol.coherence.Component compParent, boolean fInit)
                {
                super(sName, compParent, false);
                
                if (fInit)
                    {
                    __init();
                    }
                }
            
            // Main initializer
            public void __init()
                {
                // private initialization
                __initPrivate();
                
                
                // signal the end of the initialization
                set_Constructed(true);
                }
            
            // Private initializer
            protected void __initPrivate()
                {
                
                super.__initPrivate();
                }
            
            //++ getter for static property _Instance
            /**
             * Getter for property _Instance.<p>
            * Auto generated
             */
            public static com.tangosol.coherence.Component get_Instance()
                {
                return new com.tangosol.coherence.component.net.Cluster.TransportService.ProtocolContext();
                }
            
            //++ getter for static property _CLASS
            /**
             * Getter for property _CLASS.<p>
            * Property with auto-generated accessor that returns the Class
            * object for a given component.
             */
            public static Class get_CLASS()
                {
                Class clz;
                try
                    {
                    clz = Class.forName("com.tangosol.coherence/component/net/Cluster$TransportService$ProtocolContext".replace('/', '.'));
                    }
                catch (ClassNotFoundException e)
                    {
                    throw new NoClassDefFoundError(e.getMessage());
                    }
                return clz;
                }
            
            //++ getter for autogen property _Module
            /**
             * This is an auto-generated method that returns the global [design
            * time] parent component.
            * 
            * Note: the class generator will ignore any custom implementation
            * for this behavior.
             */
            private com.tangosol.coherence.Component get_Module()
                {
                return this.get_Parent().get_Parent();
                }
            }

        // ---- class: com.tangosol.coherence.component.net.Cluster$TransportService$Response
        
        /**
         * Response is a Message component used to respond to generic request
         * messages, carrying a value and return code.
         * 
         * Attributes:
         *     Result
         *     Value
         */
        @SuppressWarnings({"deprecation", "rawtypes", "unused", "unchecked", "ConstantConditions", "DuplicatedCode", "ForLoopReplaceableByForEach", "IfCanBeSwitch", "RedundantArrayCreation", "RedundantSuppression", "SameParameterValue", "TryFinallyCanBeTryWithResources", "TryWithIdenticalCatches", "UnnecessaryBoxing", "UnnecessaryUnboxing", "UnusedAssignment"})
        public static class Response
                extends    com.tangosol.coherence.component.util.daemon.queueProcessor.service.Grid.Response
            {
            // ---- Fields declarations ----
            
            // Default constructor
            public Response()
                {
                this(null, null, true);
                }
            
            // Initializing constructor
            public Response(String sName, com.tangosol.coherence.Component compParent, boolean fInit)
                {
                super(sName, compParent, false);
                
                if (fInit)
                    {
                    __init();
                    }
                }
            
            // Main initializer
            public void __init()
                {
                // private initialization
                __initPrivate();
                
                // state initialization: public and protected properties
                try
                    {
                    setMessageType(2);
                    }
                catch (java.lang.Exception e)
                    {
                    // re-throw as a runtime exception
                    throw new com.tangosol.util.WrapperException(e);
                    }
                
                // signal the end of the initialization
                set_Constructed(true);
                }
            
            // Private initializer
            protected void __initPrivate()
                {
                
                super.__initPrivate();
                }
            
            //++ getter for static property _Instance
            /**
             * Getter for property _Instance.<p>
            * Auto generated
             */
            public static com.tangosol.coherence.Component get_Instance()
                {
                return new com.tangosol.coherence.component.net.Cluster.TransportService.Response();
                }
            
            //++ getter for static property _CLASS
            /**
             * Getter for property _CLASS.<p>
            * Property with auto-generated accessor that returns the Class
            * object for a given component.
             */
            public static Class get_CLASS()
                {
                Class clz;
                try
                    {
                    clz = Class.forName("com.tangosol.coherence/component/net/Cluster$TransportService$Response".replace('/', '.'));
                    }
                catch (ClassNotFoundException e)
                    {
                    throw new NoClassDefFoundError(e.getMessage());
                    }
                return clz;
                }
            
            //++ getter for autogen property _Module
            /**
             * This is an auto-generated method that returns the global [design
            * time] parent component.
            * 
            * Note: the class generator will ignore any custom implementation
            * for this behavior.
             */
            private com.tangosol.coherence.Component get_Module()
                {
                return this.get_Parent().get_Parent();
                }
            }

        // ---- class: com.tangosol.coherence.component.net.Cluster$TransportService$ServiceConfig
        
        /**
         * ServiceConfig provides a service-wide configuration map.  All
         * updates to a service config are published service-wide by the
         * configuration coordinator.
         * The Service-wide config map for service-related shared state.
         */
        @SuppressWarnings({"deprecation", "rawtypes", "unused", "unchecked", "ConstantConditions", "DuplicatedCode", "ForLoopReplaceableByForEach", "IfCanBeSwitch", "RedundantArrayCreation", "RedundantSuppression", "SameParameterValue", "TryFinallyCanBeTryWithResources", "TryWithIdenticalCatches", "UnnecessaryBoxing", "UnnecessaryUnboxing", "UnusedAssignment"})
        public static class ServiceConfig
                extends    com.tangosol.coherence.component.util.daemon.queueProcessor.service.Grid.ServiceConfig
            {
            // ---- Fields declarations ----
            
            // Default constructor
            public ServiceConfig()
                {
                this(null, null, true);
                }
            
            // Initializing constructor
            public ServiceConfig(String sName, com.tangosol.coherence.Component compParent, boolean fInit)
                {
                super(sName, compParent, false);
                
                if (fInit)
                    {
                    __init();
                    }
                }
            
            // Main initializer
            public void __init()
                {
                // private initialization
                __initPrivate();
                
                // state initialization: public and protected properties
                try
                    {
                    // identified pendingPolls required thread-safe data structure and
                    // verified that pendingConfigUpdates only accessed on single service thread, see details in COH-30132.
                    setPendingConfigUpdates(new java.util.LinkedList());
                    setPendingPolls(new ConcurrentHashMap<>());
                    }
                catch (java.lang.Exception e)
                    {
                    // re-throw as a runtime exception
                    throw new com.tangosol.util.WrapperException(e);
                    }
                
                // containment initialization: children
                _addChild(new com.tangosol.coherence.component.util.ServiceConfig.ConfigListener("ConfigListener", this, true), "ConfigListener");
                _addChild(new Cluster.TransportService.ServiceConfig.Map("Map", this, true), "Map");
                
                // signal the end of the initialization
                set_Constructed(true);
                }
            
            // Private initializer
            protected void __initPrivate()
                {
                
                super.__initPrivate();
                }
            
            //++ getter for static property _Instance
            /**
             * Getter for property _Instance.<p>
            * Auto generated
             */
            public static com.tangosol.coherence.Component get_Instance()
                {
                return new com.tangosol.coherence.component.net.Cluster.TransportService.ServiceConfig();
                }
            
            //++ getter for static property _CLASS
            /**
             * Getter for property _CLASS.<p>
            * Property with auto-generated accessor that returns the Class
            * object for a given component.
             */
            public static Class get_CLASS()
                {
                Class clz;
                try
                    {
                    clz = Class.forName("com.tangosol.coherence/component/net/Cluster$TransportService$ServiceConfig".replace('/', '.'));
                    }
                catch (ClassNotFoundException e)
                    {
                    throw new NoClassDefFoundError(e.getMessage());
                    }
                return clz;
                }
            
            //++ getter for autogen property _Module
            /**
             * This is an auto-generated method that returns the global [design
            * time] parent component.
            * 
            * Note: the class generator will ignore any custom implementation
            * for this behavior.
             */
            private com.tangosol.coherence.Component get_Module()
                {
                return this.get_Parent().get_Parent();
                }

            // ---- class: com.tangosol.coherence.component.net.Cluster$TransportService$ServiceConfig$Map
            
            /**
             * The "live" configuration map.  Mutations on this Map through the
             * java.util.Map interface will be published to all members sharing
             * the ServiceConfig.
             */
            @SuppressWarnings({"deprecation", "rawtypes", "unused", "unchecked", "ConstantConditions", "DuplicatedCode", "ForLoopReplaceableByForEach", "IfCanBeSwitch", "RedundantArrayCreation", "RedundantSuppression", "SameParameterValue", "TryFinallyCanBeTryWithResources", "TryWithIdenticalCatches", "UnnecessaryBoxing", "UnnecessaryUnboxing", "UnusedAssignment"})
            public static class Map
                    extends    com.tangosol.coherence.component.util.daemon.queueProcessor.service.Grid.ServiceConfig.Map
                {
                // ---- Fields declarations ----
                private static com.tangosol.util.ListMap __mapChildren;
                
                // Static initializer
                static
                    {
                    __initStatic();
                    }
                
                // Default static initializer
                private static void __initStatic()
                    {
                    // register child classes
                    __mapChildren = new com.tangosol.util.ListMap();
                    __mapChildren.put("EntrySet", Cluster.TransportService.ServiceConfig.Map.EntrySet.get_CLASS());
                    __mapChildren.put("KeySet", Cluster.TransportService.ServiceConfig.Map.KeySet.get_CLASS());
                    __mapChildren.put("Values", Cluster.TransportService.ServiceConfig.Map.Values.get_CLASS());
                    }
                
                // Default constructor
                public Map()
                    {
                    this(null, null, true);
                    }
                
                // Initializing constructor
                public Map(String sName, com.tangosol.coherence.Component compParent, boolean fInit)
                    {
                    super(sName, compParent, false);
                    
                    if (fInit)
                        {
                        __init();
                        }
                    }
                
                // Main initializer
                public void __init()
                    {
                    // private initialization
                    __initPrivate();
                    
                    
                    // containment initialization: children
                    
                    // signal the end of the initialization
                    set_Constructed(true);
                    }
                
                // Private initializer
                protected void __initPrivate()
                    {
                    
                    super.__initPrivate();
                    }
                
                //++ getter for static property _Instance
                /**
                 * Getter for property _Instance.<p>
                * Auto generated
                 */
                public static com.tangosol.coherence.Component get_Instance()
                    {
                    return new com.tangosol.coherence.component.net.Cluster.TransportService.ServiceConfig.Map();
                    }
                
                //++ getter for static property _CLASS
                /**
                 * Getter for property _CLASS.<p>
                * Property with auto-generated accessor that returns the Class
                * object for a given component.
                 */
                public static Class get_CLASS()
                    {
                    Class clz;
                    try
                        {
                        clz = Class.forName("com.tangosol.coherence/component/net/Cluster$TransportService$ServiceConfig$Map".replace('/', '.'));
                        }
                    catch (ClassNotFoundException e)
                        {
                        throw new NoClassDefFoundError(e.getMessage());
                        }
                    return clz;
                    }
                
                //++ getter for autogen property _Module
                /**
                 * This is an auto-generated method that returns the global
                * [design time] parent component.
                * 
                * Note: the class generator will ignore any custom
                * implementation for this behavior.
                 */
                private com.tangosol.coherence.Component get_Module()
                    {
                    return this.get_Parent().get_Parent().get_Parent();
                    }
                
                //++ getter for autogen property _ChildClasses
                /**
                 * This is an auto-generated method that returns the map of
                * design time [static] children.
                * 
                * Note: the class generator will ignore any custom
                * implementation for this behavior.
                 */
                protected java.util.Map get_ChildClasses()
                    {
                    return __mapChildren;
                    }

                // ---- class: com.tangosol.coherence.component.net.Cluster$TransportService$ServiceConfig$Map$EntrySet
                
                @SuppressWarnings({"deprecation", "rawtypes", "unused", "unchecked", "ConstantConditions", "DuplicatedCode", "ForLoopReplaceableByForEach", "IfCanBeSwitch", "RedundantArrayCreation", "RedundantSuppression", "SameParameterValue", "TryFinallyCanBeTryWithResources", "TryWithIdenticalCatches", "UnnecessaryBoxing", "UnnecessaryUnboxing", "UnusedAssignment"})
                public static class EntrySet
                        extends    com.tangosol.coherence.component.util.daemon.queueProcessor.service.Grid.ServiceConfig.Map.EntrySet
                    {
                    // ---- Fields declarations ----
                    private static com.tangosol.util.ListMap __mapChildren;
                    
                    // Static initializer
                    static
                        {
                        __initStatic();
                        }
                    
                    // Default static initializer
                    private static void __initStatic()
                        {
                        // register child classes
                        __mapChildren = new com.tangosol.util.ListMap();
                        __mapChildren.put("Entry", Cluster.TransportService.ServiceConfig.Map.EntrySet.Entry.get_CLASS());
                        __mapChildren.put("Iterator", Cluster.TransportService.ServiceConfig.Map.EntrySet.Iterator.get_CLASS());
                        }
                    
                    // Default constructor
                    public EntrySet()
                        {
                        this(null, null, true);
                        }
                    
                    // Initializing constructor
                    public EntrySet(String sName, com.tangosol.coherence.Component compParent, boolean fInit)
                        {
                        super(sName, compParent, false);
                        
                        if (fInit)
                            {
                            __init();
                            }
                        }
                    
                    // Main initializer
                    public void __init()
                        {
                        // private initialization
                        __initPrivate();
                        
                        
                        // containment initialization: children
                        
                        // signal the end of the initialization
                        set_Constructed(true);
                        }
                    
                    // Private initializer
                    protected void __initPrivate()
                        {
                        
                        super.__initPrivate();
                        }
                    
                    //++ getter for static property _Instance
                    /**
                     * Getter for property _Instance.<p>
                    * Auto generated
                     */
                    public static com.tangosol.coherence.Component get_Instance()
                        {
                        return new com.tangosol.coherence.component.net.Cluster.TransportService.ServiceConfig.Map.EntrySet();
                        }
                    
                    //++ getter for static property _CLASS
                    /**
                     * Getter for property _CLASS.<p>
                    * Property with auto-generated accessor that returns the
                    * Class object for a given component.
                     */
                    public static Class get_CLASS()
                        {
                        Class clz;
                        try
                            {
                            clz = Class.forName("com.tangosol.coherence/component/net/Cluster$TransportService$ServiceConfig$Map$EntrySet".replace('/', '.'));
                            }
                        catch (ClassNotFoundException e)
                            {
                            throw new NoClassDefFoundError(e.getMessage());
                            }
                        return clz;
                        }
                    
                    //++ getter for autogen property _Module
                    /**
                     * This is an auto-generated method that returns the global
                    * [design time] parent component.
                    * 
                    * Note: the class generator will ignore any custom
                    * implementation for this behavior.
                     */
                    private com.tangosol.coherence.Component get_Module()
                        {
                        return this.get_Parent().get_Parent().get_Parent().get_Parent();
                        }
                    
                    //++ getter for autogen property _ChildClasses
                    /**
                     * This is an auto-generated method that returns the map of
                    * design time [static] children.
                    * 
                    * Note: the class generator will ignore any custom
                    * implementation for this behavior.
                     */
                    protected java.util.Map get_ChildClasses()
                        {
                        return __mapChildren;
                        }

                    // ---- class: com.tangosol.coherence.component.net.Cluster$TransportService$ServiceConfig$Map$EntrySet$Entry
                    
                    @SuppressWarnings({"deprecation", "rawtypes", "unused", "unchecked", "ConstantConditions", "DuplicatedCode", "ForLoopReplaceableByForEach", "IfCanBeSwitch", "RedundantArrayCreation", "RedundantSuppression", "SameParameterValue", "TryFinallyCanBeTryWithResources", "TryWithIdenticalCatches", "UnnecessaryBoxing", "UnnecessaryUnboxing", "UnusedAssignment"})
                    public static class Entry
                            extends    com.tangosol.coherence.component.util.daemon.queueProcessor.service.Grid.ServiceConfig.Map.EntrySet.Entry
                        {
                        // ---- Fields declarations ----
                        
                        // Default constructor
                        public Entry()
                            {
                            this(null, null, true);
                            }
                        
                        // Initializing constructor
                        public Entry(String sName, com.tangosol.coherence.Component compParent, boolean fInit)
                            {
                            super(sName, compParent, false);
                            
                            if (fInit)
                                {
                                __init();
                                }
                            }
                        
                        // Main initializer
                        public void __init()
                            {
                            // private initialization
                            __initPrivate();
                            
                            
                            // signal the end of the initialization
                            set_Constructed(true);
                            }
                        
                        // Private initializer
                        protected void __initPrivate()
                            {
                            
                            super.__initPrivate();
                            }
                        
                        //++ getter for static property _Instance
                        /**
                         * Getter for property _Instance.<p>
                        * Auto generated
                         */
                        public static com.tangosol.coherence.Component get_Instance()
                            {
                            return new com.tangosol.coherence.component.net.Cluster.TransportService.ServiceConfig.Map.EntrySet.Entry();
                            }
                        
                        //++ getter for static property _CLASS
                        /**
                         * Getter for property _CLASS.<p>
                        * Property with auto-generated accessor that returns
                        * the Class object for a given component.
                         */
                        public static Class get_CLASS()
                            {
                            Class clz;
                            try
                                {
                                clz = Class.forName("com.tangosol.coherence/component/net/Cluster$TransportService$ServiceConfig$Map$EntrySet$Entry".replace('/', '.'));
                                }
                            catch (ClassNotFoundException e)
                                {
                                throw new NoClassDefFoundError(e.getMessage());
                                }
                            return clz;
                            }
                        
                        //++ getter for autogen property _Module
                        /**
                         * This is an auto-generated method that returns the
                        * global [design time] parent component.
                        * 
                        * Note: the class generator will ignore any custom
                        * implementation for this behavior.
                         */
                        private com.tangosol.coherence.Component get_Module()
                            {
                            return this.get_Parent().get_Parent().get_Parent().get_Parent().get_Parent();
                            }
                        }

                    // ---- class: com.tangosol.coherence.component.net.Cluster$TransportService$ServiceConfig$Map$EntrySet$Iterator
                    
                    @SuppressWarnings({"deprecation", "rawtypes", "unused", "unchecked", "ConstantConditions", "DuplicatedCode", "ForLoopReplaceableByForEach", "IfCanBeSwitch", "RedundantArrayCreation", "RedundantSuppression", "SameParameterValue", "TryFinallyCanBeTryWithResources", "TryWithIdenticalCatches", "UnnecessaryBoxing", "UnnecessaryUnboxing", "UnusedAssignment"})
                    public static class Iterator
                            extends    com.tangosol.coherence.component.util.daemon.queueProcessor.service.Grid.ServiceConfig.Map.EntrySet.Iterator
                        {
                        // ---- Fields declarations ----
                        
                        // Default constructor
                        public Iterator()
                            {
                            this(null, null, true);
                            }
                        
                        // Initializing constructor
                        public Iterator(String sName, com.tangosol.coherence.Component compParent, boolean fInit)
                            {
                            super(sName, compParent, false);
                            
                            if (fInit)
                                {
                                __init();
                                }
                            }
                        
                        // Main initializer
                        public void __init()
                            {
                            // private initialization
                            __initPrivate();
                            
                            
                            // signal the end of the initialization
                            set_Constructed(true);
                            }
                        
                        // Private initializer
                        protected void __initPrivate()
                            {
                            
                            super.__initPrivate();
                            }
                        
                        //++ getter for static property _Instance
                        /**
                         * Getter for property _Instance.<p>
                        * Auto generated
                         */
                        public static com.tangosol.coherence.Component get_Instance()
                            {
                            return new com.tangosol.coherence.component.net.Cluster.TransportService.ServiceConfig.Map.EntrySet.Iterator();
                            }
                        
                        //++ getter for static property _CLASS
                        /**
                         * Getter for property _CLASS.<p>
                        * Property with auto-generated accessor that returns
                        * the Class object for a given component.
                         */
                        public static Class get_CLASS()
                            {
                            Class clz;
                            try
                                {
                                clz = Class.forName("com.tangosol.coherence/component/net/Cluster$TransportService$ServiceConfig$Map$EntrySet$Iterator".replace('/', '.'));
                                }
                            catch (ClassNotFoundException e)
                                {
                                throw new NoClassDefFoundError(e.getMessage());
                                }
                            return clz;
                            }
                        
                        //++ getter for autogen property _Module
                        /**
                         * This is an auto-generated method that returns the
                        * global [design time] parent component.
                        * 
                        * Note: the class generator will ignore any custom
                        * implementation for this behavior.
                         */
                        private com.tangosol.coherence.Component get_Module()
                            {
                            return this.get_Parent().get_Parent().get_Parent().get_Parent().get_Parent();
                            }
                        }
                    }

                // ---- class: com.tangosol.coherence.component.net.Cluster$TransportService$ServiceConfig$Map$KeySet
                
                @SuppressWarnings({"deprecation", "rawtypes", "unused", "unchecked", "ConstantConditions", "DuplicatedCode", "ForLoopReplaceableByForEach", "IfCanBeSwitch", "RedundantArrayCreation", "RedundantSuppression", "SameParameterValue", "TryFinallyCanBeTryWithResources", "TryWithIdenticalCatches", "UnnecessaryBoxing", "UnnecessaryUnboxing", "UnusedAssignment"})
                public static class KeySet
                        extends    com.tangosol.coherence.component.util.daemon.queueProcessor.service.Grid.ServiceConfig.Map.KeySet
                    {
                    // ---- Fields declarations ----
                    private static com.tangosol.util.ListMap __mapChildren;
                    
                    // Static initializer
                    static
                        {
                        __initStatic();
                        }
                    
                    // Default static initializer
                    private static void __initStatic()
                        {
                        // register child classes
                        __mapChildren = new com.tangosol.util.ListMap();
                        __mapChildren.put("Iterator", Cluster.TransportService.ServiceConfig.Map.KeySet.Iterator.get_CLASS());
                        }
                    
                    // Default constructor
                    public KeySet()
                        {
                        this(null, null, true);
                        }
                    
                    // Initializing constructor
                    public KeySet(String sName, com.tangosol.coherence.Component compParent, boolean fInit)
                        {
                        super(sName, compParent, false);
                        
                        if (fInit)
                            {
                            __init();
                            }
                        }
                    
                    // Main initializer
                    public void __init()
                        {
                        // private initialization
                        __initPrivate();
                        
                        
                        // containment initialization: children
                        
                        // signal the end of the initialization
                        set_Constructed(true);
                        }
                    
                    // Private initializer
                    protected void __initPrivate()
                        {
                        
                        super.__initPrivate();
                        }
                    
                    //++ getter for static property _Instance
                    /**
                     * Getter for property _Instance.<p>
                    * Auto generated
                     */
                    public static com.tangosol.coherence.Component get_Instance()
                        {
                        return new com.tangosol.coherence.component.net.Cluster.TransportService.ServiceConfig.Map.KeySet();
                        }
                    
                    //++ getter for static property _CLASS
                    /**
                     * Getter for property _CLASS.<p>
                    * Property with auto-generated accessor that returns the
                    * Class object for a given component.
                     */
                    public static Class get_CLASS()
                        {
                        Class clz;
                        try
                            {
                            clz = Class.forName("com.tangosol.coherence/component/net/Cluster$TransportService$ServiceConfig$Map$KeySet".replace('/', '.'));
                            }
                        catch (ClassNotFoundException e)
                            {
                            throw new NoClassDefFoundError(e.getMessage());
                            }
                        return clz;
                        }
                    
                    //++ getter for autogen property _Module
                    /**
                     * This is an auto-generated method that returns the global
                    * [design time] parent component.
                    * 
                    * Note: the class generator will ignore any custom
                    * implementation for this behavior.
                     */
                    private com.tangosol.coherence.Component get_Module()
                        {
                        return this.get_Parent().get_Parent().get_Parent().get_Parent();
                        }
                    
                    //++ getter for autogen property _ChildClasses
                    /**
                     * This is an auto-generated method that returns the map of
                    * design time [static] children.
                    * 
                    * Note: the class generator will ignore any custom
                    * implementation for this behavior.
                     */
                    protected java.util.Map get_ChildClasses()
                        {
                        return __mapChildren;
                        }

                    // ---- class: com.tangosol.coherence.component.net.Cluster$TransportService$ServiceConfig$Map$KeySet$Iterator
                    
                    @SuppressWarnings({"deprecation", "rawtypes", "unused", "unchecked", "ConstantConditions", "DuplicatedCode", "ForLoopReplaceableByForEach", "IfCanBeSwitch", "RedundantArrayCreation", "RedundantSuppression", "SameParameterValue", "TryFinallyCanBeTryWithResources", "TryWithIdenticalCatches", "UnnecessaryBoxing", "UnnecessaryUnboxing", "UnusedAssignment"})
                    public static class Iterator
                            extends    com.tangosol.coherence.component.util.daemon.queueProcessor.service.Grid.ServiceConfig.Map.KeySet.Iterator
                        {
                        // ---- Fields declarations ----
                        
                        // Default constructor
                        public Iterator()
                            {
                            this(null, null, true);
                            }
                        
                        // Initializing constructor
                        public Iterator(String sName, com.tangosol.coherence.Component compParent, boolean fInit)
                            {
                            super(sName, compParent, false);
                            
                            if (fInit)
                                {
                                __init();
                                }
                            }
                        
                        // Main initializer
                        public void __init()
                            {
                            // private initialization
                            __initPrivate();
                            
                            
                            // signal the end of the initialization
                            set_Constructed(true);
                            }
                        
                        // Private initializer
                        protected void __initPrivate()
                            {
                            
                            super.__initPrivate();
                            }
                        
                        //++ getter for static property _Instance
                        /**
                         * Getter for property _Instance.<p>
                        * Auto generated
                         */
                        public static com.tangosol.coherence.Component get_Instance()
                            {
                            return new com.tangosol.coherence.component.net.Cluster.TransportService.ServiceConfig.Map.KeySet.Iterator();
                            }
                        
                        //++ getter for static property _CLASS
                        /**
                         * Getter for property _CLASS.<p>
                        * Property with auto-generated accessor that returns
                        * the Class object for a given component.
                         */
                        public static Class get_CLASS()
                            {
                            Class clz;
                            try
                                {
                                clz = Class.forName("com.tangosol.coherence/component/net/Cluster$TransportService$ServiceConfig$Map$KeySet$Iterator".replace('/', '.'));
                                }
                            catch (ClassNotFoundException e)
                                {
                                throw new NoClassDefFoundError(e.getMessage());
                                }
                            return clz;
                            }
                        
                        //++ getter for autogen property _Module
                        /**
                         * This is an auto-generated method that returns the
                        * global [design time] parent component.
                        * 
                        * Note: the class generator will ignore any custom
                        * implementation for this behavior.
                         */
                        private com.tangosol.coherence.Component get_Module()
                            {
                            return this.get_Parent().get_Parent().get_Parent().get_Parent().get_Parent();
                            }
                        }
                    }

                // ---- class: com.tangosol.coherence.component.net.Cluster$TransportService$ServiceConfig$Map$Values
                
                @SuppressWarnings({"deprecation", "rawtypes", "unused", "unchecked", "ConstantConditions", "DuplicatedCode", "ForLoopReplaceableByForEach", "IfCanBeSwitch", "RedundantArrayCreation", "RedundantSuppression", "SameParameterValue", "TryFinallyCanBeTryWithResources", "TryWithIdenticalCatches", "UnnecessaryBoxing", "UnnecessaryUnboxing", "UnusedAssignment"})
                public static class Values
                        extends    com.tangosol.coherence.component.util.daemon.queueProcessor.service.Grid.ServiceConfig.Map.Values
                    {
                    // ---- Fields declarations ----
                    private static com.tangosol.util.ListMap __mapChildren;
                    
                    // Static initializer
                    static
                        {
                        __initStatic();
                        }
                    
                    // Default static initializer
                    private static void __initStatic()
                        {
                        // register child classes
                        __mapChildren = new com.tangosol.util.ListMap();
                        __mapChildren.put("Iterator", Cluster.TransportService.ServiceConfig.Map.Values.Iterator.get_CLASS());
                        }
                    
                    // Default constructor
                    public Values()
                        {
                        this(null, null, true);
                        }
                    
                    // Initializing constructor
                    public Values(String sName, com.tangosol.coherence.Component compParent, boolean fInit)
                        {
                        super(sName, compParent, false);
                        
                        if (fInit)
                            {
                            __init();
                            }
                        }
                    
                    // Main initializer
                    public void __init()
                        {
                        // private initialization
                        __initPrivate();
                        
                        
                        // containment initialization: children
                        
                        // signal the end of the initialization
                        set_Constructed(true);
                        }
                    
                    // Private initializer
                    protected void __initPrivate()
                        {
                        
                        super.__initPrivate();
                        }
                    
                    //++ getter for static property _Instance
                    /**
                     * Getter for property _Instance.<p>
                    * Auto generated
                     */
                    public static com.tangosol.coherence.Component get_Instance()
                        {
                        return new com.tangosol.coherence.component.net.Cluster.TransportService.ServiceConfig.Map.Values();
                        }
                    
                    //++ getter for static property _CLASS
                    /**
                     * Getter for property _CLASS.<p>
                    * Property with auto-generated accessor that returns the
                    * Class object for a given component.
                     */
                    public static Class get_CLASS()
                        {
                        Class clz;
                        try
                            {
                            clz = Class.forName("com.tangosol.coherence/component/net/Cluster$TransportService$ServiceConfig$Map$Values".replace('/', '.'));
                            }
                        catch (ClassNotFoundException e)
                            {
                            throw new NoClassDefFoundError(e.getMessage());
                            }
                        return clz;
                        }
                    
                    //++ getter for autogen property _Module
                    /**
                     * This is an auto-generated method that returns the global
                    * [design time] parent component.
                    * 
                    * Note: the class generator will ignore any custom
                    * implementation for this behavior.
                     */
                    private com.tangosol.coherence.Component get_Module()
                        {
                        return this.get_Parent().get_Parent().get_Parent().get_Parent();
                        }
                    
                    //++ getter for autogen property _ChildClasses
                    /**
                     * This is an auto-generated method that returns the map of
                    * design time [static] children.
                    * 
                    * Note: the class generator will ignore any custom
                    * implementation for this behavior.
                     */
                    protected java.util.Map get_ChildClasses()
                        {
                        return __mapChildren;
                        }

                    // ---- class: com.tangosol.coherence.component.net.Cluster$TransportService$ServiceConfig$Map$Values$Iterator
                    
                    @SuppressWarnings({"deprecation", "rawtypes", "unused", "unchecked", "ConstantConditions", "DuplicatedCode", "ForLoopReplaceableByForEach", "IfCanBeSwitch", "RedundantArrayCreation", "RedundantSuppression", "SameParameterValue", "TryFinallyCanBeTryWithResources", "TryWithIdenticalCatches", "UnnecessaryBoxing", "UnnecessaryUnboxing", "UnusedAssignment"})
                    public static class Iterator
                            extends    com.tangosol.coherence.component.util.daemon.queueProcessor.service.Grid.ServiceConfig.Map.Values.Iterator
                        {
                        // ---- Fields declarations ----
                        
                        // Default constructor
                        public Iterator()
                            {
                            this(null, null, true);
                            }
                        
                        // Initializing constructor
                        public Iterator(String sName, com.tangosol.coherence.Component compParent, boolean fInit)
                            {
                            super(sName, compParent, false);
                            
                            if (fInit)
                                {
                                __init();
                                }
                            }
                        
                        // Main initializer
                        public void __init()
                            {
                            // private initialization
                            __initPrivate();
                            
                            
                            // signal the end of the initialization
                            set_Constructed(true);
                            }
                        
                        // Private initializer
                        protected void __initPrivate()
                            {
                            
                            super.__initPrivate();
                            }
                        
                        //++ getter for static property _Instance
                        /**
                         * Getter for property _Instance.<p>
                        * Auto generated
                         */
                        public static com.tangosol.coherence.Component get_Instance()
                            {
                            return new com.tangosol.coherence.component.net.Cluster.TransportService.ServiceConfig.Map.Values.Iterator();
                            }
                        
                        //++ getter for static property _CLASS
                        /**
                         * Getter for property _CLASS.<p>
                        * Property with auto-generated accessor that returns
                        * the Class object for a given component.
                         */
                        public static Class get_CLASS()
                            {
                            Class clz;
                            try
                                {
                                clz = Class.forName("com.tangosol.coherence/component/net/Cluster$TransportService$ServiceConfig$Map$Values$Iterator".replace('/', '.'));
                                }
                            catch (ClassNotFoundException e)
                                {
                                throw new NoClassDefFoundError(e.getMessage());
                                }
                            return clz;
                            }
                        
                        //++ getter for autogen property _Module
                        /**
                         * This is an auto-generated method that returns the
                        * global [design time] parent component.
                        * 
                        * Note: the class generator will ignore any custom
                        * implementation for this behavior.
                         */
                        private com.tangosol.coherence.Component get_Module()
                            {
                            return this.get_Parent().get_Parent().get_Parent().get_Parent().get_Parent();
                            }
                        }
                    }
                }
            }

        // ---- class: com.tangosol.coherence.component.net.Cluster$TransportService$WrapperGuardable
        
        /**
         * WrapperGuardable is used to encapsulate a Guardable object and
         * associate it with this Service.
         * 
         * WrapperGuardables are used to allow the ServiceFailurePolicy to
         * specify service-specific recovery, termination, or
         * service-termination failure logic.
         */
        @SuppressWarnings({"deprecation", "rawtypes", "unused", "unchecked", "ConstantConditions", "DuplicatedCode", "ForLoopReplaceableByForEach", "IfCanBeSwitch", "RedundantArrayCreation", "RedundantSuppression", "SameParameterValue", "TryFinallyCanBeTryWithResources", "TryWithIdenticalCatches", "UnnecessaryBoxing", "UnnecessaryUnboxing", "UnusedAssignment"})
        public static class WrapperGuardable
                extends    com.tangosol.coherence.component.util.daemon.queueProcessor.service.Grid.WrapperGuardable
            {
            // ---- Fields declarations ----
            
            // Default constructor
            public WrapperGuardable()
                {
                this(null, null, true);
                }
            
            // Initializing constructor
            public WrapperGuardable(String sName, com.tangosol.coherence.Component compParent, boolean fInit)
                {
                super(sName, compParent, false);
                
                if (fInit)
                    {
                    __init();
                    }
                }
            
            // Main initializer
            public void __init()
                {
                // private initialization
                __initPrivate();
                
                
                // signal the end of the initialization
                set_Constructed(true);
                }
            
            // Private initializer
            protected void __initPrivate()
                {
                
                super.__initPrivate();
                }
            
            //++ getter for static property _Instance
            /**
             * Getter for property _Instance.<p>
            * Auto generated
             */
            public static com.tangosol.coherence.Component get_Instance()
                {
                return new com.tangosol.coherence.component.net.Cluster.TransportService.WrapperGuardable();
                }
            
            //++ getter for static property _CLASS
            /**
             * Getter for property _CLASS.<p>
            * Property with auto-generated accessor that returns the Class
            * object for a given component.
             */
            public static Class get_CLASS()
                {
                Class clz;
                try
                    {
                    clz = Class.forName("com.tangosol.coherence/component/net/Cluster$TransportService$WrapperGuardable".replace('/', '.'));
                    }
                catch (ClassNotFoundException e)
                    {
                    throw new NoClassDefFoundError(e.getMessage());
                    }
                return clz;
                }
            
            //++ getter for autogen property _Module
            /**
             * This is an auto-generated method that returns the global [design
            * time] parent component.
            * 
            * Note: the class generator will ignore any custom implementation
            * for this behavior.
             */
            private com.tangosol.coherence.Component get_Module()
                {
                return this.get_Parent().get_Parent();
                }
            }
        }
    }
