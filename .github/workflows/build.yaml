# Copyright 2020, 2025, Oracle Corporation and/or its affiliates.
#
# Licensed under the Universal Permissive License v 1.0 as shown at
# http://oss.oracle.com/licenses/upl.

# ---------------------------------------------------------------------------
# Coherence CE GitHub Actions CI build.
# ---------------------------------------------------------------------------

name: Parallel CI Build

on:
  workflow_call:
    inputs:
      runner:
        default: ubuntu-latest
        required: true
        type: string

env:
  MAVEN_OPTS: -Dhttp.keepAlive=false -Dmaven.wagon.http.pool=false

jobs:
  build:
    runs-on: ${{ inputs.runner }}
    strategy:
      fail-fast: false
      matrix:
        stage:
         - stage1
         - stage2
         - stage3
         - stage4
         - stage5
         - stage6
         - stage7
         - stage8
         - stage9
         - stage10
         - stage11
         - stage12
         - stage13

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Set up JDK
      uses: actions/setup-java@v1
      with:
        java-version: '1.8'

    - name: Print Maven & Java version
      run: mvn -version

    - name: Cache Maven packages
      uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2-

      # First run a simple compile without tests
    - name: Build
      shell: bash
      env:
        MAVEN_USER: ${{ secrets.MavenUser }}
        MAVEN_PASSWORD: ${{ secrets.MavenPassword }}
      run: |
        export DEV_ROOT=$(pwd)
        mvn --file prj/pom.xml --batch-mode -e -s .github/maven/settings.xml -DskipTests clean install
        echo "Forcing download of surfire-juni4 before full verify"
        mvn --file prj/coherence-http-netty/pom.xml --batch-mode -e -s .github/maven/settings.xml verify

      # If the build job runs successfully then run the verify stages in parallel
    - name: Verify
      shell: bash
      env:
        MAVEN_USER: ${{ secrets.MavenUser }}
        MAVEN_PASSWORD: ${{ secrets.MavenPassword }}
      run: |
        echo "Running verify ${{ matrix.stage }}"
        export DEV_ROOT=$(pwd)
        mvn --file prj/pom.xml --batch-mode -e -o -s .github/maven/settings.xml -P ${{ matrix.stage }},-default,-shell,-javadoc -Doptional -Dcoherence.SkipLargeMemoryTests=true verify

    # Upload build artifacts for diagnosing failures
    - name: Build Artifacts test logs
      uses: actions/upload-artifact@v4
      if: failure()
      with:
        name: test-output-${{ matrix.stage }}
        path: prj/**/target/test-output/**/*
        if-no-files-found: ignore

    - name: Build Artifacts test reports
      uses: actions/upload-artifact@v4
      if: failure()
      with:
        name: failsafe-surefire-test-reports-${{ matrix.stage }}
        path: prj/**/target/*-reports/**/*
        if-no-files-found: ignore

    - name: Build Artifacts core dumps
      uses: actions/upload-artifact@v4
      if: failure()
      with:
        name: core-dumps-${{ matrix.stage }}
        path: prj/**/core.*
        if-no-files-found: ignore

    - name: Build Artifacts compiler replays
      uses: actions/upload-artifact@v4
      if: failure()
      with:
        name: compiler-replay-logs-${{ matrix.stage }}
        path: prj/**/replay_pid*.log
        if-no-files-found: ignore
